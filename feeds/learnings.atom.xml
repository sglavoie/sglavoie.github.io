<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>sglavoie.com - learnings</title><link href="https://www.sglavoie.com/" rel="alternate"></link><link href="https://www.sglavoie.com/feeds/learnings.atom.xml" rel="self"></link><id>https://www.sglavoie.com/</id><updated>2023-10-20T20:08:00-06:00</updated><entry><title>Book summary: Learning Go – An Idiomatic Approach to Real-World Go Programming</title><link href="https://www.sglavoie.com/posts/2023/10/20/book-summary-learning-go-idiomatic-approach-real-world-go-programming/" rel="alternate"></link><published>2023-10-20T20:08:00-06:00</published><updated>2023-10-20T20:08:00-06:00</updated><author><name>Sébastien Lavoie</name></author><id>tag:www.sglavoie.com,2023-10-20:/posts/2023/10/20/book-summary-learning-go-idiomatic-approach-real-world-go-programming/</id><summary type="html">&lt;p&gt;&lt;a href="https://www.oreilly.com/library/view/learning-go/9781492077206/"&gt;Learning Go&lt;/a&gt; is a book that teaches idiomatic Go style and best practices through concrete examples. It covers fundamental features like types and control flow, as well as more advanced topics like concurrency and reflection. The goal is to help readers write clear, readable, robust Go code. I think it succeeded at&amp;nbsp;that!&lt;/p&gt;</summary><content type="html">
&lt;hr/&gt;
&lt;h1 id="introduction"&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Go is a modern programming language developed by Google that has gained immense popularity in recent years. It is a statically typed, compiled language that combines aspects of imperative and object-oriented programming. Go aims to provide simplicity, performance, and reliability.&lt;/p&gt;
&lt;p&gt;In his book, Jon provides a comprehensive introduction to Go programming. The book focuses on teaching idiomatic Go code by using concrete examples and focusing on how experienced Go developers structure their code. It covers fundamental language features like primitive types, control structures, and composite types. It also dives into more advanced topics like concurrency through goroutines and channels, writing tests, and using reflection.&lt;/p&gt;
&lt;p&gt;This summary highlights the key takeaways from each chapter. It aims to provide an overview of the core concepts and best practices for writing clear, readable, robust Go code. It’s written from the perspective of a developer who has experience with other programming languages like Python, Java, and TypeScript but practically none in Go.&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="chapter-1-setting-up-your-go-environment"&gt;Chapter 1: Setting Up Your Go Environment&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;golint&lt;/code&gt; to enforce the right coding style of a project.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;go vet&lt;/code&gt; to find errors that may not be detected by the compiler, such as having the wrong number of arguments passed to a &lt;code&gt;Printf&lt;/code&gt; call.&lt;/li&gt;
&lt;li&gt;A common idiom to run multiple commands at once when building a project is to rely on a &lt;code&gt;Makefile&lt;/code&gt; like this:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="na"&gt;.DEFAULT_GOAL&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;build&lt;/span&gt;

&lt;span class="nl"&gt;fmt:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nf"&gt;go&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;fmt&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="no"&gt;...&lt;/span&gt;
&lt;span class="nl"&gt;.PHONY:&lt;/span&gt;&lt;span class="nf"&gt;fmt&lt;/span&gt;

&lt;span class="nl"&gt;lint:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;fmt&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nf"&gt;golint&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="no"&gt;...&lt;/span&gt;
&lt;span class="nl"&gt;.PHONY:&lt;/span&gt;&lt;span class="nf"&gt;lint&lt;/span&gt;

&lt;span class="nl"&gt;vet:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;fmt&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nf"&gt;go&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;vet&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="no"&gt;...&lt;/span&gt;
&lt;span class="nl"&gt;.PHONY:&lt;/span&gt;&lt;span class="nf"&gt;vet&lt;/span&gt;

&lt;span class="nl"&gt;build:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;vet&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nf"&gt;go&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;build&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;hello.go&lt;/span&gt;
&lt;span class="nl"&gt;.PHONY:&lt;/span&gt;&lt;span class="nf"&gt;build&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Typing &lt;code&gt;make&lt;/code&gt; will run &lt;code&gt;fmt&lt;/code&gt;, then &lt;code&gt;vet&lt;/code&gt;, then &lt;code&gt;build&lt;/code&gt; since the default task is &lt;code&gt;build&lt;/code&gt;, which requires &lt;code&gt;vet&lt;/code&gt; to have run first, which in turn requires &lt;code&gt;fat&lt;/code&gt; to have run first, which in turn has no dependency, so &lt;code&gt;fmt&lt;/code&gt; runs and the chain continues.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Testing whether a new version of Go works for existing programs compiled on an older version is straightforward:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;go&lt;span class="w"&gt; &lt;/span&gt;get&lt;span class="w"&gt; &lt;/span&gt;golang.org/dl/go.1.x.y&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# replace x.y&lt;/span&gt;
go1.x.y&lt;span class="w"&gt; &lt;/span&gt;download

&lt;span class="c1"&gt;# try out the changes&lt;/span&gt;
go1.x.y&lt;span class="w"&gt; &lt;/span&gt;build

&lt;span class="c1"&gt;# If all good, remove this secondary version&lt;/span&gt;
go1.x.y&lt;span class="w"&gt; &lt;/span&gt;env&lt;span class="w"&gt; &lt;/span&gt;GOROOT
/.../.../go1.x.y
rm&lt;span class="w"&gt; &lt;/span&gt;-rf&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;go1.x.y&lt;span class="w"&gt; &lt;/span&gt;env&lt;span class="w"&gt; &lt;/span&gt;GOROOT&lt;span class="k"&gt;)&lt;/span&gt;
rm&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;go&lt;span class="w"&gt; &lt;/span&gt;env&lt;span class="w"&gt; &lt;/span&gt;GOPATH&lt;span class="k"&gt;)&lt;/span&gt;/bin/go1.x.y

&lt;span class="c1"&gt;# Install new version as wanted...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h1 id="chapter-2-primitive-types-and-declarations"&gt;Chapter 2: Primitive Types and Declarations&lt;/h1&gt;
&lt;h2 id="built-in-types"&gt;Built-in types&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Zero value&lt;ul&gt;
&lt;li&gt;Assigned to a variable that is declared with no initial value (doesn’t lead to bugs like in C or C++).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Literals&lt;ul&gt;
&lt;li&gt;These express different bases, such as &lt;code&gt;0b&lt;/code&gt; (binary), &lt;code&gt;0o&lt;/code&gt; (octal) or &lt;code&gt;0x&lt;/code&gt; (hexadecimal). As in other languages like Python or Java, underscores can be used to express large numbers.&lt;/li&gt;
&lt;li&gt;Floating point literals look like &lt;code&gt;6.03e23&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Rune literals are represented with single quotes (no double quotes accepted). The most common ones are &lt;code&gt;('\n')&lt;/code&gt;, tab &lt;code&gt;('\t')&lt;/code&gt;, single quote &lt;code&gt;('\'')&lt;/code&gt;, double quote &lt;code&gt;('\"')&lt;/code&gt; and backslash &lt;code&gt;('\\')&lt;/code&gt;. Other bases are supported but should be limited to specific contexts (e.g., bit filters for base two).&lt;/li&gt;
&lt;li&gt;String literals can be written with double quotes, where everything must be escaped.&lt;/li&gt;
&lt;li&gt;Raw string literals use backticks instead of double quotes and can be used to insert any character except a backtick. They support multiline expressions.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Boolean&lt;ul&gt;
&lt;li&gt;The type is &lt;code&gt;bool&lt;/code&gt; and the default zero value is &lt;code&gt;false&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Numeric types&lt;ul&gt;
&lt;li&gt;Integers&lt;ul&gt;
&lt;li&gt;&lt;code&gt;int8&lt;/code&gt; (aliased &lt;code&gt;byte&lt;/code&gt;, which is much more common), &lt;code&gt;int16&lt;/code&gt;, &lt;code&gt;int32&lt;/code&gt;, &lt;code&gt;int64&lt;/code&gt;, &lt;code&gt;uint8&lt;/code&gt;, &lt;code&gt;uint16&lt;/code&gt;, &lt;code&gt;uint32&lt;/code&gt;, &lt;code&gt;uint64&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The zero value is 0.&lt;/li&gt;
&lt;li&gt;Use the minimum size when needed for specific applications.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;int64&lt;/code&gt; and &lt;code&gt;uint64&lt;/code&gt; for library functions (until generics are available).&lt;/li&gt;
&lt;li&gt;Otherwise, just use &lt;code&gt;int&lt;/code&gt;. Other types should be considered a premature optimization until proven otherwise.&lt;/li&gt;
&lt;li&gt;Variables can be modified like so: &lt;code&gt;+=&lt;/code&gt;, &lt;code&gt;-=&lt;/code&gt;, &lt;code&gt;*=&lt;/code&gt;, &lt;code&gt;/=&lt;/code&gt; and &lt;code&gt;%=&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Available comparisons are: &lt;code&gt;==&lt;/code&gt;, &lt;code&gt;!=&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;=&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Bit manipulations&lt;ul&gt;
&lt;li&gt;Shifts: &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; (left), &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; (right)&lt;/li&gt;
&lt;li&gt;Logical bit masks: &lt;code&gt;&amp;amp;&lt;/code&gt; (&lt;code&gt;AND&lt;/code&gt;), &lt;code&gt;|&lt;/code&gt; (&lt;code&gt;OR&lt;/code&gt;), &lt;code&gt;^&lt;/code&gt; (&lt;code&gt;XOR&lt;/code&gt;), &lt;code&gt;&amp;amp;^&lt;/code&gt; (&lt;code&gt;AND NOT&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;All operators can be used to modify a variable as well: &lt;code&gt;&amp;amp;=&lt;/code&gt;, &lt;code&gt;|=&lt;/code&gt;, &lt;code&gt;^=&lt;/code&gt;, &lt;code&gt;&amp;amp;^=&lt;/code&gt;, &lt;code&gt;&amp;lt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Floating point types&lt;ul&gt;
&lt;li&gt;&lt;code&gt;float32&lt;/code&gt;, &lt;code&gt;float64&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The zero value is 0.&lt;/li&gt;
&lt;li&gt;If using a floating point number, default to &lt;code&gt;float64&lt;/code&gt; unless a profiler shows significant improvement with &lt;code&gt;float32&lt;/code&gt; and the precision is good enough (6-7 decimal places).&lt;/li&gt;
&lt;li&gt;Strict equality (or inequality) should not be done on floating point numbers: check the variance instead (less than epsilon).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Complex types&lt;ul&gt;
&lt;li&gt;&lt;code&gt;complex64&lt;/code&gt; uses &lt;code&gt;float32&lt;/code&gt; to represent real and imaginary parts, while &lt;code&gt;complex128&lt;/code&gt; uses &lt;code&gt;float64&lt;/code&gt;, using the &lt;code&gt;complex&lt;/code&gt; built-in function and &lt;code&gt;real&lt;/code&gt; and &lt;code&gt;image&lt;/code&gt; functions to extract the relevant parts.&lt;/li&gt;
&lt;li&gt;As with floating point numbers, use the epsilon technique to check for equality.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Strings and runes&lt;ul&gt;
&lt;li&gt;The zero value is an empty string.&lt;/li&gt;
&lt;li&gt;Strings are immutable.&lt;/li&gt;
&lt;li&gt;Strings can be checked for equality or compared for ordering (&lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, or &lt;code&gt;&amp;lt;=&lt;/code&gt;) and can be concatenated with the &lt;code&gt;+&lt;/code&gt; operator.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;rune&lt;/code&gt; type represents a single code point, equivalent to &lt;code&gt;int32&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Explicit type conversion&lt;ul&gt;
&lt;li&gt;All type conversions are explicit.&lt;/li&gt;
&lt;li&gt;There is no concept of “truthiness” (e.g., &lt;code&gt;if 2: print("ok")&lt;/code&gt; is valid in Python).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="var-vs"&gt;&lt;code&gt;var&lt;/code&gt; vs. &lt;code&gt;:=&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;var&lt;/code&gt; is more verbose but flexible:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="c1"&gt;// because the default type is `int`&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="c1"&gt;// no value =&amp;gt; it will be the zero value&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// multiple assignments&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// multiple assignments, zero values&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"hi"&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// different default types&lt;/span&gt;

&lt;span class="c1"&gt;// Declaration list&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Type inference can be performed within a function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// These statements are equivalent&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// invalid syntax outside a function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Avoid &lt;code&gt;:=&lt;/code&gt; in the following situations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When explicitly initialize a zero value, like &lt;code&gt;var x int&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;To avoid a type conversion, by writing &lt;code&gt;var x byte = 8&lt;/code&gt; instead of &lt;code&gt;x := byte(8)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;To avoid “shadowing” a variable, as &lt;code&gt;:=&lt;/code&gt; can be used to assign to existing variables. Create new variables with &lt;code&gt;var&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Non-constant package-level variables are a bad idea. If they’re unused, they go unnoticed without raising compile-time errors.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="const"&gt;&lt;code&gt;const&lt;/code&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Variables cannot be declared as immutable.&lt;/li&gt;
&lt;li&gt;Constants are a way of giving names to literals.&lt;/li&gt;
&lt;li&gt;Inside a function, it is clear when a variable is being modified.&lt;/li&gt;
&lt;li&gt;If a constant is typed (e.g., &lt;code&gt;const typedVar int = 1&lt;/code&gt;), then it can only be assigned to that type, &lt;code&gt;int&lt;/code&gt; in this case.&lt;/li&gt;
&lt;li&gt;If a constant is untyped (e.g., &lt;code&gt;const untypedVar = 2&lt;/code&gt;), then it can be assigned to suitable numerical types.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="unused-variables"&gt;Unused variables&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Unused declared local variables result in a compile-time error.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="naming-variables-and-constants"&gt;Naming Variables and Constants&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Even though many Unicode characters can be used, they should be avoided to maintain clarity.&lt;/li&gt;
&lt;li&gt;Go uses camelCase.&lt;/li&gt;
&lt;li&gt;The less scope a variable has, the shorter its name should be (&lt;code&gt;k&lt;/code&gt; and &lt;code&gt;v&lt;/code&gt; are accepted for key/value, just like &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;j&lt;/code&gt; to use indices when iterating in loops).&lt;/li&gt;
&lt;li&gt;It is common to use the first letter of a type as the variable name (e.g., &lt;code&gt;i&lt;/code&gt; for integers, &lt;code&gt;f&lt;/code&gt; for floats, &lt;code&gt;b&lt;/code&gt; for boolean). If the code is hard to understand, it’s a sign the function is trying to do too much.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h1 id="chapter-3-composite-types"&gt;Chapter 3: Composite Types&lt;/h1&gt;
&lt;h2 id="arrays"&gt;Arrays&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;They are rarely used directly.&lt;/li&gt;
&lt;li&gt;They can be compared (&lt;code&gt;==&lt;/code&gt; and &lt;code&gt;!=&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Their length is retrieved with the built-in &lt;code&gt;len&lt;/code&gt; function.&lt;/li&gt;
&lt;li&gt;Negative indexing is a compile-time error.&lt;/li&gt;
&lt;li&gt;Out-of-bounds indexing results in a panic at runtime.&lt;/li&gt;
&lt;li&gt;Unless there’s a very specific need to use a given size of array (e.g., for a cryptographic library), avoid them.&lt;/li&gt;
&lt;li&gt;They exist basically to provide slices.&lt;/li&gt;
&lt;li&gt;There are a few ways of declaring arrays:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// indicate the size and type&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// 3 integers with zero value&lt;/span&gt;

&lt;span class="c1"&gt;// array literal&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// values specified&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// equivalent&lt;/span&gt;

&lt;span class="c1"&gt;// sparse array:&lt;/span&gt;
&lt;span class="c1"&gt;// indicate few values at specific locations&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Get and set values&lt;/span&gt;
&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="slices"&gt;Slices&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The zero value for a slice is &lt;code&gt;nil&lt;/code&gt;, which represents the lack of a value for some type. &lt;code&gt;nil&lt;/code&gt; itself has no type.&lt;/li&gt;
&lt;li&gt;The size of the array is not specified: &lt;code&gt;var x = []int{10, 20, 30}&lt;/code&gt;. This is a slice literal.&lt;/li&gt;
&lt;li&gt;Can be used like a sparse array: &lt;code&gt;var x = []int{1, 5: 4, 6, 10: 100, 15}&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Multidimensional arrays can be simulated: &lt;code&gt;var x [][]int&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Reads and assignments are the same as with arrays, using square brackets.&lt;/li&gt;
&lt;li&gt;Slices can be created without assigning initial values: &lt;code&gt;var x []int&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Slices aren’t comparable, except to check if it is nil (&lt;code&gt;x == nil&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;They’re useful for sequential data.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="len"&gt;&lt;code&gt;len&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;code&gt;nil&lt;/code&gt; slice returns &lt;code&gt;0&lt;/code&gt; (&lt;code&gt;len(x)&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="append"&gt;&lt;code&gt;append&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;It it used to grow slices:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;
&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// returns a slice&lt;/span&gt;
&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// more than one value&lt;/span&gt;

&lt;span class="c1"&gt;// append to another slice with `...`&lt;/span&gt;
&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="capacity"&gt;Capacity&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;It increases automatically as needed. It doubles under 1,024 items, then it increases by at least 25%.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cap&lt;/code&gt; returns the current capacity of the slice.&lt;/li&gt;
&lt;li&gt;It is better when possible to allocate the needed size upfront to avoid resizing the arrays.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="make"&gt;&lt;code&gt;make&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;It can be used to create a slice that already has a capacity specified.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x := make([]int, 5)&lt;/code&gt;: length and capacity of 5 (all zero values). Using &lt;code&gt;append&lt;/code&gt; here would add new values to the end of the slice, after the zero values!&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x := make([]int, 0, 10)&lt;/code&gt; creates an empty slice with a capacity of 10 and after &lt;code&gt;x = append(x, 5,6,7,8)&lt;/code&gt;, it contains &lt;code&gt;[5 6 7 8]&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="declaring-a-slice"&gt;Declaring a slice&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Slice literals&lt;ul&gt;
&lt;li&gt;An empty slice literal declares a slice that is non-nil: &lt;code&gt;var x = []int{}&lt;/code&gt;. This is useful to convert to &lt;span class="caps"&gt;JSON&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;Useful with some initial values or when the values don’t change.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="slicing-slices"&gt;Slicing slices&lt;/h3&gt;
&lt;p&gt;These work with square brackets:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// [1 2 3 4]&lt;/span&gt;
&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;             &lt;/span&gt;&lt;span class="c1"&gt;// [1 2]&lt;/span&gt;
&lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;&lt;span class="w"&gt;             &lt;/span&gt;&lt;span class="c1"&gt;// [2 3 4]&lt;/span&gt;
&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="c1"&gt;// [2 3]&lt;/span&gt;
&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[:]&lt;/span&gt;&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="c1"&gt;// [1 2 3 4]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="slices-can-share-data"&gt;Slices can share data&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;

&lt;span class="c1"&gt;// These are bidirectional changes!&lt;/span&gt;
&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="c1"&gt;// affects `x`, `y` and `z`&lt;/span&gt;
&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="c1"&gt;// affects `x` and `y`&lt;/span&gt;
&lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="c1"&gt;// affects `x` and `z`&lt;/span&gt;

&lt;span class="c1"&gt;// Result:&lt;/span&gt;
&lt;span class="c1"&gt;// x: [10 20 30 4]&lt;/span&gt;
&lt;span class="c1"&gt;// y: [10 20]&lt;/span&gt;
&lt;span class="c1"&gt;// z: [20 30 4]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;append&lt;/code&gt; can lead to unintuitive results, overwriting existing values:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// length 0, capacity 5&lt;/span&gt;
&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// x is now [1 2 3 4]&lt;/span&gt;
&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="c1"&gt;// [1 2], length 2, capacity 5&lt;/span&gt;
&lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="c1"&gt;// [3 4], length 2, capacity 3&lt;/span&gt;

&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// x is now [1 2 30 40], length 4, capacity 5!&lt;/span&gt;
&lt;span class="c1"&gt;// y is now [1 2 30 40 50], length 5, capacity 5&lt;/span&gt;
&lt;span class="c1"&gt;// z is now [30 40], length 2, capacity 3&lt;/span&gt;

&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// x is now [1 2 30 40 60], length 5, capacity 5&lt;/span&gt;
&lt;span class="c1"&gt;// y is now [1 2 30 40 60], length 5, capacity 5!&lt;/span&gt;
&lt;span class="c1"&gt;// z is still [30 40], length 2, capacity 3&lt;/span&gt;

&lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;70&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// x is now [1 2 30 40 70], length 5, capacity 5!&lt;/span&gt;
&lt;span class="c1"&gt;// y is now [1 2 30 40 70], length 5, capacity 5!&lt;/span&gt;
&lt;span class="c1"&gt;// z is now [30 40 70], length 3, capacity 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;One way to avoid this issue is to use *full slice expressions- to indicate the capacity of the subslices:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// take a slice of x, up to index 2, with a capacity of 2&lt;/span&gt;
&lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// take a slice of x, from index 2 to 4, with a capacity of 2&lt;/span&gt;

&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// x is still [1 2 3 4], length 4, capacity 5&lt;/span&gt;
&lt;span class="c1"&gt;// y is now [1 2 30 40 50], length 5, capacity 6&lt;/span&gt;
&lt;span class="c1"&gt;// z is still [3 4], length 2, capacity 2&lt;/span&gt;

&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// x is now [1 2 3 4 60], length 5, capacity 5&lt;/span&gt;
&lt;span class="c1"&gt;// y is still [1 2 30 40 50], length 5, capacity 6&lt;/span&gt;
&lt;span class="c1"&gt;// z is still [3 4], length 2, capacity 2&lt;/span&gt;

&lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;70&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// x is still [1 2 3 4 60], length 5, capacity 5&lt;/span&gt;
&lt;span class="c1"&gt;// y is still [1 2 30 40 50], length 5, capacity 6&lt;/span&gt;
&lt;span class="c1"&gt;// z is now [3 4 70], length 3, capacity 4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="converting-arrays-to-slices"&gt;Converting Arrays to Slices&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Arrays can be sliced, though memory will be shared as when slicing a slice.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// [5 6 7 8]&lt;/span&gt;
&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="c1"&gt;// [5 6]&lt;/span&gt;
&lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="c1"&gt;// [7 8]&lt;/span&gt;
&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="w"&gt;               &lt;/span&gt;&lt;span class="c1"&gt;// [10 6 7 8]&lt;/span&gt;
&lt;span class="c1"&gt;// y and z are now [10 6] and [7 8]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="copy"&gt;&lt;code&gt;copy&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;It creates a slice that is independent from the original slice.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// It can copy the whole slice if the lengths are the same&lt;/span&gt;
&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// [1 2 3 4]&lt;/span&gt;
&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="c1"&gt;// [0 0 0 0]&lt;/span&gt;
&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="c1"&gt;// num=4, copy(dst, src)&lt;/span&gt;
&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="c1"&gt;// [1 2 3 4] 4&lt;/span&gt;
&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="c1"&gt;// [1 2 3 4]&lt;/span&gt;

&lt;span class="c1"&gt;// It can copy a subset of the slice&lt;/span&gt;
&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="c1"&gt;// [0 0]&lt;/span&gt;
&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="c1"&gt;// num=2, copy(dst, src)&lt;/span&gt;
&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="c1"&gt;// [1 2]&lt;/span&gt;

&lt;span class="c1"&gt;// It can copy from a subset from any position&lt;/span&gt;
&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// [1 2 3 4]&lt;/span&gt;
&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="c1"&gt;// [0 0]&lt;/span&gt;
&lt;span class="nb"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:])&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="c1"&gt;// copy(dst, src)&lt;/span&gt;
&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="c1"&gt;// [3 4]&lt;/span&gt;

&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:])&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// put the last 3 values at the beginning&lt;/span&gt;
&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="c1"&gt;// [2 3 4 4], overwriting&lt;/span&gt;

&lt;span class="c1"&gt;// It also works with arrays&lt;/span&gt;
&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// slice, [1 2 3 4]&lt;/span&gt;
&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="c1"&gt;// array, [5 6 7 8]&lt;/span&gt;
&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="c1"&gt;// [0 0]&lt;/span&gt;
&lt;span class="nb"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[:])&lt;/span&gt;&lt;span class="w"&gt;             &lt;/span&gt;&lt;span class="c1"&gt;// first 2 values of d into y&lt;/span&gt;
&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="c1"&gt;// [5 6]&lt;/span&gt;
&lt;span class="nb"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[:],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;             &lt;/span&gt;&lt;span class="c1"&gt;// copy x into d&lt;/span&gt;
&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="c1"&gt;// [1 2 3 4]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="strings-and-runes-and-bytes"&gt;Strings and Runes and Bytes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Strings are arrays of bytes.&lt;/li&gt;
&lt;li&gt;Single characters can be extracted from a string with an &lt;em&gt;index expression&lt;/em&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"hello"&lt;/span&gt;
&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;                 &lt;/span&gt;&lt;span class="c1"&gt;// c is a byte, not a rune&lt;/span&gt;
&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="c1"&gt;// 104&lt;/span&gt;
&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%T\n"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="c1"&gt;// uint8 (i.e., byte)&lt;/span&gt;

&lt;span class="c1"&gt;// Need to be careful with indexing&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Hello 😄"&lt;/span&gt;
&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="c1"&gt;// could have expected 7, but it's 10&lt;/span&gt;
&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;:])&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// He ���: the emoji is 4 bytes long&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="maps"&gt;Maps&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The built-in map type is a &lt;em&gt;hash map&lt;/em&gt; (implemented as an array).&lt;/li&gt;
&lt;li&gt;The zero value for a map is &lt;code&gt;nil&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Writing to a &lt;code&gt;nil&lt;/code&gt; map results in a runtime panic.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;len&lt;/code&gt; on a map returns the number of key/value pairs.&lt;/li&gt;
&lt;li&gt;Maps are not comparable (can check against &lt;code&gt;nil&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;The key must be comparable: it cannot be a slice, map or function.&lt;/li&gt;
&lt;li&gt;Maps are good when the order of the keys doesn’t matter: use a slice when it does.&lt;/li&gt;
&lt;li&gt;All the values must be of the same type, but &lt;em&gt;the keys can be of different types&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Avoid using them as input parameters to functions (use a struct instead to be self-documenting).&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;nilMap&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;
&lt;span class="c1"&gt;//             ^      ^&lt;/span&gt;
&lt;span class="c1"&gt;//      key type      value type&lt;/span&gt;

&lt;span class="c1"&gt;// map literal: length of 0&lt;/span&gt;
&lt;span class="nx"&gt;myMap&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// allows reads and writes&lt;/span&gt;

&lt;span class="c1"&gt;// Nonempty map&lt;/span&gt;
&lt;span class="nx"&gt;reposByOrg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;][]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;"dbeaver"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"dbeaver"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"cloudbeaver"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"team-edition-deploy"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;"slidevjs"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"slidev"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"slidev-vscode"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"themes"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;"ReactiveX"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"RxJava"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"rxjs"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"RxGo"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// comma at the end here too&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// With a default size&lt;/span&gt;
&lt;span class="nx"&gt;myValues&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;][]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// length 0, capacity 10, can grow beyond 10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="reading-and-writing-maps"&gt;Reading and writing maps&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;reposByOrgStars&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// length 0, can grow, string to integer&lt;/span&gt;
&lt;span class="nx"&gt;reposByOrgStars&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"dbeaver"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// write&lt;/span&gt;
&lt;span class="nx"&gt;reposByOrgStars&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"slidevjs"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;// write&lt;/span&gt;
&lt;span class="nx"&gt;reposByOrgStars&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"ReactiveX"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="c1"&gt;// read, increment, write (0 -&amp;gt; 1)&lt;/span&gt;
&lt;span class="c1"&gt;// reposByOrgStars["slidevjs"] := 100  // invalid syntax&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="comma-ok-idiom"&gt;Comma Ok idiom&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;One can get the value of a key and a boolean indicating whether the key exists or not:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ok&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;reposByOrgStars&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"dbeaver"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// 10 true&lt;/span&gt;
&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ok&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;reposByOrgStars&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"notfound"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// 0 false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="deleting-from-a-map"&gt;Deleting from a map&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;delete&lt;/code&gt; removes a key/value pair from a map:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reposByOrgStars&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"ReactiveX"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// It is safe to delete a key that doesn't exist&lt;/span&gt;
&lt;span class="nb"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reposByOrgStars&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"notfound"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// it returns nothing&lt;/span&gt;

&lt;span class="c1"&gt;// It is safe to delete a key from a nil map&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;nilMap&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;
&lt;span class="nb"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nilMap&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"notfound"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// It is safe to delete a key from an empty map&lt;/span&gt;
&lt;span class="nx"&gt;emptyMap&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="nb"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;emptyMap&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"notfound"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="using-maps-as-sets"&gt;Using maps as sets&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Go doesn’t have a built-in set type.&lt;/li&gt;
&lt;li&gt;A map can be used as a set by using the key as the value and the value as a boolean:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;mySet&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="nx"&gt;mySet&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"hello"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="nx"&gt;mySet&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"world"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="nx"&gt;mySet&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"hello"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// no error, but it's still a set&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;This works because if the value isn’t found, the zero value is returned, which is &lt;code&gt;false&lt;/code&gt; for booleans.&lt;/li&gt;
&lt;li&gt;To use operations like &lt;code&gt;union&lt;/code&gt;, &lt;code&gt;intersection&lt;/code&gt; and &lt;code&gt;difference&lt;/code&gt;, the most convenient solution is to use a third-party library.&lt;/li&gt;
&lt;li&gt;Structs can also be used as sets as they’re more memory efficient, but more clumsy to use as they make use of the &lt;em&gt;comma ok idiom&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="structs"&gt;Structs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Good when there is related data that needs to be grouped together.&lt;/li&gt;
&lt;li&gt;They are defined with the &lt;code&gt;type&lt;/code&gt; keyword.&lt;/li&gt;
&lt;li&gt;No commas are needed between fields.&lt;/li&gt;
&lt;li&gt;They can be defined inside or outside of a function. If inside a function, they can only be used inside that function.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;u&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;// zero value for a struct is all zero values for its fields&lt;/span&gt;
&lt;span class="nx"&gt;u&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt;
&lt;span class="nx"&gt;u&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Bob"&lt;/span&gt;
&lt;span class="nx"&gt;u&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Michigan"&lt;/span&gt;
&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;u&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// {18 Bob Michigan}&lt;/span&gt;

&lt;span class="c1"&gt;// Assignments can also be done with a struct literal&lt;/span&gt;
&lt;span class="nx"&gt;bob&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="c1"&gt;// also initializes all fields to zero values&lt;/span&gt;

&lt;span class="c1"&gt;// With initial values&lt;/span&gt;
&lt;span class="nx"&gt;jeremy&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="mi"&gt;49&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="c1"&gt;// must match the order of the fields&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;"Jeremy"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="c1"&gt;// all fields must be specified&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;"Stretchy"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;               &lt;/span&gt;&lt;span class="c1"&gt;// {49 Jeremy Stretchy}&lt;/span&gt;

&lt;span class="c1"&gt;// With this style, fields can be left out:&lt;/span&gt;
&lt;span class="nx"&gt;otherUser&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// using the field name...&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Sweaty"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// cannot indicate other fields without the field name&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// lastName is zero value, i.e., empty string&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Accessing a field:&lt;/span&gt;
&lt;span class="nx"&gt;jeremy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Jer"&lt;/span&gt;
&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;jeremy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// Jer&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="anonymous-structs"&gt;Anonymous structs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;They are useful when a struct is only used in one place.&lt;/li&gt;
&lt;li&gt;Useful when &lt;a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)"&gt;marshalling&lt;/a&gt; and unmarshalling data.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;computer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;operatingSystem&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;chip&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;}{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;operatingSystem&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"macOS"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;chip&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Apple M2 Ultra"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="comparing-and-converting-structs"&gt;Comparing and converting structs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Contrary to regular structs, they can be compared.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h1 id="chapter-4-blocks-shadows-and-control-structures"&gt;Chapter 4: Blocks, Shadows, and Control Structures&lt;/h1&gt;
&lt;h2 id="blocks"&gt;Blocks&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;A block is a place where declarations are made.&lt;/li&gt;
&lt;li&gt;The top-level block is the &lt;em&gt;package&lt;/em&gt; block.&lt;/li&gt;
&lt;li&gt;The import statements are in the &lt;em&gt;file&lt;/em&gt; block.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="shadowing-variables"&gt;Shadowing Variables&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;There is a “global” block, the &lt;em&gt;universe&lt;/em&gt; block, which contains the built-in functions and types. Careful: those keywords can be shadowed!&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// shadowing&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// x is still 10 here (outer block)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// x is shadowed while y is declared!&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// 5 20&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="c1"&gt;// 10&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"shadowing fmt package"&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="c1"&gt;// undefined!&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Usual linters won’t catch shadowing, but we can install &lt;code&gt;shadow&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;go&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;golang.org/x/tools/go/analysis/passes/shadow/cmd/shadow@latest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And we can make it part of the &lt;code&gt;Makefile&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;lint&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fmt&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;golint&lt;span class="w"&gt; &lt;/span&gt;./...
&lt;span class="w"&gt;    &lt;/span&gt;shadow&lt;span class="w"&gt; &lt;/span&gt;./...
&lt;span class="nf"&gt;.PHONY&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lint&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="if-statements"&gt;&lt;code&gt;if&lt;/code&gt; statements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The condition must be a boolean expression.&lt;/li&gt;
&lt;li&gt;The usual flow is &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;else if&lt;/code&gt;, &lt;code&gt;else&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;There are no parentheses around the condition.&lt;/li&gt;
&lt;li&gt;Variables can be scoped to the &lt;code&gt;if&lt;/code&gt; statement (they’ll be available in &lt;code&gt;else if&lt;/code&gt; and &lt;code&gt;else&lt;/code&gt; blocks as well). Only use that feature to define new variables!&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Intn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"That's too low"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"That's too big:"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"That's a good number:"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// n is not available here!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="for-loops"&gt;&lt;code&gt;for&lt;/code&gt; loops&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;It is the only looping construct in the language.&lt;/li&gt;
&lt;li&gt;It can be used in four different ways to accomplish all looping needs.&lt;/li&gt;
&lt;li&gt;It uses no parentheses.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="complete-for-statement"&gt;Complete &lt;code&gt;for&lt;/code&gt; statement&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;The initialization statement is executed once before the loop starts. It must use the &lt;code&gt;:=&lt;/code&gt; operator. It can shadow variables.&lt;/li&gt;
&lt;li&gt;The second statement is the condition. It must be a boolean expression. It is checked before each iteration as well as before the loops starts.&lt;/li&gt;
&lt;li&gt;The third statement is the post statement. It is executed after each iteration. It would usually be used to increment a counter.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="condition-only-for-statement"&gt;Condition-only &lt;code&gt;for&lt;/code&gt; Statement&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;This is a statement that only has a condition. It is equivalent to a &lt;code&gt;while&lt;/code&gt; loop in other languages.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="infinite-for-statement"&gt;Infinite &lt;code&gt;for&lt;/code&gt; Statement&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;This is a statement that has no condition. It is equivalent to a &lt;code&gt;while true&lt;/code&gt; loop in other languages.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="break-and-continue"&gt;&lt;code&gt;break&lt;/code&gt; and &lt;code&gt;continue&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;There is no &lt;code&gt;do... while&lt;/code&gt; construct as in other languages like C, Java or JavaScript.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;do... while&lt;/code&gt; indicates how to &lt;em&gt;stay&lt;/em&gt; in the loop while &lt;code&gt;for&lt;/code&gt; indicates how to &lt;em&gt;leave&lt;/em&gt; the loop.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;break&lt;/code&gt; exits the loop.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;continue&lt;/code&gt; skips the rest of the loop and goes to the next iteration. Use it to avoid nesting loops.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;break&lt;/code&gt; and &lt;code&gt;continue&lt;/code&gt; can be used with labels to break out of nested loops.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="for-range-loop"&gt;&lt;code&gt;for-range&lt;/code&gt; loop&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;odds&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;range&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;odds&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Here, &lt;code&gt;i&lt;/code&gt; (&lt;code&gt;0&lt;/code&gt; to &lt;code&gt;4&lt;/code&gt;) is the index of the iterator construct and &lt;code&gt;v&lt;/code&gt; (&lt;code&gt;1, 3 ... 9&lt;/code&gt;) is the value.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;i&lt;/code&gt; is usually used for arrays, slices and strings, while &lt;code&gt;k&lt;/code&gt; is used for maps.&lt;/li&gt;
&lt;li&gt;As in other languages like Python, use an underscore (&lt;code&gt;_&lt;/code&gt;) to ignore a value. The index or key can be ignored this way.&lt;/li&gt;
&lt;li&gt;If the key is needed but not the value, leave the value out: &lt;code&gt;for k := range myMap { ... }&lt;/code&gt;. This is useful when using a map as a set.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="iterating-over-maps"&gt;Iterating over maps&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"c"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"b"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Loop"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;range&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// order will differ&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// will be in ascending order to help with debugging&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;For security reasons (hash DoS), the order of the keys is randomized. If the order is important, use a slice of keys instead.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="iterating-over-strings"&gt;Iterating over strings&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Go iterates over the Unicode code points (runes), not the bytes.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;samples&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"hello"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"worl∂!"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;sample&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;range&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;samples&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;range&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;sample&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;Output:&lt;/span&gt;
&lt;span class="cm"&gt;0 104 h        // index, rune, string(rune)&lt;/span&gt;
&lt;span class="cm"&gt;1 101 e&lt;/span&gt;
&lt;span class="cm"&gt;2 108 l&lt;/span&gt;
&lt;span class="cm"&gt;3 108 l&lt;/span&gt;
&lt;span class="cm"&gt;4 111 o&lt;/span&gt;
&lt;span class="cm"&gt;               // first string is 5 runes long&lt;/span&gt;
&lt;span class="cm"&gt;0 119 w&lt;/span&gt;
&lt;span class="cm"&gt;1 111 o&lt;/span&gt;
&lt;span class="cm"&gt;2 114 r&lt;/span&gt;
&lt;span class="cm"&gt;3 108 l&lt;/span&gt;
&lt;span class="cm"&gt;4 8706 ∂       // this is a single rune: it occupies 3 bytes&lt;/span&gt;
&lt;span class="cm"&gt;7 33 !         // index 7! The second string is 8 runes long&lt;/span&gt;
&lt;span class="cm"&gt;*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="for-range-value-is-a-copy"&gt;&lt;code&gt;for-range&lt;/code&gt; value is a copy&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Modifying the value variable doesn’t change the original value.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;break&lt;/code&gt; and &lt;code&gt;continue&lt;/code&gt; are also available in this form.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;odds&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;range&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;odds&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;odds&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// [1 3 5 7 9]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="for-loop-labels"&gt;&lt;code&gt;for&lt;/code&gt; loop labels&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;While their use is rare, they can be used to break out of nested loops.&lt;/li&gt;
&lt;li&gt;The label is indented to the same level as the containing block.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;samples&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"hello"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"worl∂!"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;outer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;sample&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;range&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;samples&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;range&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;sample&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sc"&gt;'l'&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;outer&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This code will skip the remaining letters of both words once the first &lt;code&gt;l&lt;/code&gt; is printed out for each one.&lt;/p&gt;
&lt;h3 id="the-right-for-statement"&gt;The right &lt;code&gt;for&lt;/code&gt; statement&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;for-range&lt;/code&gt; is the proper way to iterate over strings to get runes.&lt;/li&gt;
&lt;li&gt;A complete &lt;code&gt;for&lt;/code&gt; statement is good when not iterating through all the items in a collection (except for strings since runes aren’t necessarily one byte long).&lt;/li&gt;
&lt;li&gt;The condition-only &lt;code&gt;for&lt;/code&gt; statement is used to replace &lt;code&gt;while&lt;/code&gt; loops.&lt;/li&gt;
&lt;li&gt;Infinite loops can simulate a &lt;code&gt;do... while&lt;/code&gt; construct and can be used to create the iterator pattern.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="expression-switch-statements"&gt;Expression &lt;code&gt;switch&lt;/code&gt; statements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;They don’t use parentheses.&lt;/li&gt;
&lt;li&gt;Used to check for equality.&lt;/li&gt;
&lt;li&gt;Scoped variables can be declared (e.g., &lt;code&gt;word&lt;/code&gt; is scoped to all cases).&lt;/li&gt;
&lt;li&gt;All cases are part of the same block (only the switch statement itself is a block surrounded by braces).&lt;/li&gt;
&lt;li&gt;No need for &lt;code&gt;break&lt;/code&gt; statements. It can be used, but may indicate a code smell.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;break&lt;/code&gt; can be useful if the &lt;code&gt;switch&lt;/code&gt; statement is inside a loop.&lt;/li&gt;
&lt;li&gt;There is a &lt;code&gt;fallthrough&lt;/code&gt; keyword to go to the next case (&lt;em&gt;not recommended&lt;/em&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;words&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"Go"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Ada"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"COBOL"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"C++"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Python"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Clojure"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"WebAssembly"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;word&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;range&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;words&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;word&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;                            &lt;/span&gt;&lt;span class="c1"&gt;// catches multiple matches&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;word&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"is a short name!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="c1"&gt;// Go, Ada, C++&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;wordLen&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;word&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;word&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"is the right length:"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;wordLen&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// COBOL&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// empty case, nothing happens: Python, Clojure&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;word&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"is a long name!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// WebAssembly&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Inside a loop&lt;/span&gt;
&lt;span class="nx"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// label&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"is even"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"is divisible by 3 but not 2"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"exit the loop!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;loop&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// break out of the loop, not just the switch statement&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"is boring"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="blank-switch-statements"&gt;Blank &lt;code&gt;switch&lt;/code&gt; statements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Instead of checking for equality, they check for any boolean comparison.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"is even"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"is large"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Got it!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// this is the one that will be executed&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Not it..."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="if-or-switch"&gt;&lt;code&gt;if&lt;/code&gt; or &lt;code&gt;switch&lt;/code&gt;?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;switch&lt;/code&gt; should be used when there is some relationship between comparable elements. It is more concise and makes the comparisons more obvious.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="goto"&gt;&lt;code&gt;goto&lt;/code&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;It should generally be avoided.&lt;/li&gt;
&lt;li&gt;It can be used to replace boolean flags, such as in &lt;a href="https://cs.opensource.google/go/go/+/refs/tags/go1.21.2:src/strconv/atof.go"&gt;this non-trivial example&lt;/a&gt; from the standard library.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h1 id="chapter-5-functions"&gt;Chapter 5: Functions&lt;/h1&gt;
&lt;h2 id="declaring-and-calling-them"&gt;Declaring and calling them&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Go has no classes, but it has methods (see &lt;a href="#chapter-7-types-methods-and-interfaces"&gt;chapter 7&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Types are mandatory.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;return&lt;/code&gt; keyword is mandatory (except for &lt;code&gt;main&lt;/code&gt;) if the function has a return type.&lt;/li&gt;
&lt;li&gt;Nothing goes between the input parameters and the start of the block if there’s no return type.&lt;/li&gt;
&lt;li&gt;Go has no named or optional input parameters: you can pass structs instead. In practice, that probably means the function is trying to do too much.&lt;/li&gt;
&lt;li&gt;Go supports variadic parameters (e.g., the &lt;code&gt;fmt.Println&lt;/code&gt; function) with &lt;code&gt;...&lt;/code&gt; right before the type: they are used as a slice inside the function.&lt;/li&gt;
&lt;li&gt;Functions can return multiple values. They must all be returned, comma-separated. Unlike Python which uses tuples, Go uses the comma to separate the individual values.&lt;/li&gt;
&lt;li&gt;The error is always the last parameter a function will return. If no error occurred, it will be &lt;code&gt;nil&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Indicate ignored values (possibly all) with an underscore. A notable exception is &lt;code&gt;fmt.Println&lt;/code&gt; which returns two values that aren’t usually used.&lt;/li&gt;
&lt;li&gt;Named values can be returned. They make shadowing possible and should be used sparingly.&lt;/li&gt;
&lt;li&gt;Blank returns can be returned with named values, but they make it harder to understand how data flows.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numerator&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;denominator&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;//   ^   ^                          ^    ^&lt;/span&gt;
&lt;span class="c1"&gt;//   |   input parameter            |    return type&lt;/span&gt;
&lt;span class="c1"&gt;//   Function name                  parameter type&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;denominator&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;numerator&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;denominator&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// The following is equivalent when the types are the same&lt;/span&gt;
&lt;span class="c1"&gt;// func div(numerator, denominator int) int ...&lt;/span&gt;

&lt;span class="c1"&gt;// variadic parameter&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;addTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;base&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;vals&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;out&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;vals&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;range&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;vals&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;out&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;out&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;base&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;out&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// fmt.Println(addTo(1, 2, 3, 4))&lt;/span&gt;
&lt;span class="c1"&gt;// a := []int{4, 3}&lt;/span&gt;
&lt;span class="c1"&gt;// fmt.Println(addTo(3, a...))&lt;/span&gt;
&lt;span class="c1"&gt;// fmt.Println(addTo(3, []int{4, 5}...))&lt;/span&gt;

&lt;span class="c1"&gt;// named return values&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;divAndRemainder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numerator&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;denominator&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;remainder&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="functions-are-values"&gt;Functions are values&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Functions can be defined as types, e.g. &lt;code&gt;type aFuncType func(int, int) int&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Anonymous functions can be defined inside other functions and called immediately (&lt;span class="caps"&gt;IIFE&lt;/span&gt;). This comes in handy when using &lt;a href="#defer"&gt;&lt;code&gt;defer&lt;/code&gt;&lt;/a&gt; and &lt;a href="#chapter-10-concurrency-in-go"&gt;Goroutines&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="closures"&gt;Closures&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Closures are used to create functions that have access to variables that are outside of their scope.&lt;/li&gt;
&lt;li&gt;Functions can be passed as parameters to other functions.&lt;/li&gt;
&lt;li&gt;Functions can return functions.&lt;/li&gt;
&lt;li&gt;They are useful with &lt;code&gt;sort.Search&lt;/code&gt; and &lt;code&gt;sort.Slice&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;An example of closure is with the &lt;code&gt;sort.Slice&lt;/code&gt; function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;"fmt"&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;"sort"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;FirstName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;LastName&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;Age&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;HasPet&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;people&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"Pat"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Patterson"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;37&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"Tracy"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Bobbert"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"Fred"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Fredson"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"Bob"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Tracier"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"Alice"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Anderson"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;people&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// `people` is captured by the closure&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;people&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// If one person has a pet and the other doesn't, prioritize the one with the pet.&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;people&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;HasPet&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;people&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;HasPet&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;people&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;HasPet&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// If both have pets, sort by LastName.&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;people&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;HasPet&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;people&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;HasPet&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;people&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;LastName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;people&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;LastName&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// Otherwise, sort by age in ascending order.&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;people&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;Age&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;people&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;Age&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;people&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// This returns:&lt;/span&gt;
&lt;span class="c1"&gt;// - People that have pets first&lt;/span&gt;
&lt;span class="c1"&gt;// - If both have pets, sort by last name in ascending order&lt;/span&gt;
&lt;span class="c1"&gt;// - If neither have pets, sort by age in ascending order&lt;/span&gt;

&lt;span class="c1"&gt;// Unsorted:&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Pat&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Patterson&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;37&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Tracy&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Bobbert&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Fred&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Fredson&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Bob&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Tracier&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Alice&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Anderson&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;// Sorted:&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Alice&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Anderson&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Fred&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Fredson&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Pat&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Patterson&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;37&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Bob&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Tracier&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Tracy&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Bobbert&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A function that returns a function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;withTwo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;getResult&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;withThree&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;getResult&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"i="&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"withTwo (2 + i):"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;withTwo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"withThree (3 + i):"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;withThree&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;getResult&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;initialValue&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;subsequent&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;initialValue&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;subsequent&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// i= 0 withTwo (2 + i): 2 withThree (3 + i): 3&lt;/span&gt;
&lt;span class="c1"&gt;// i= 1 withTwo (2 + i): 3 withThree (3 + i): 4&lt;/span&gt;
&lt;span class="c1"&gt;// i= 2 withTwo (2 + i): 4 withThree (3 + i): 5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="defer"&gt;&lt;code&gt;defer&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;This is used to perform the cleanup code, such as closing a file, after a function has returned. This is similar to the &lt;code&gt;finally&lt;/code&gt; block in Java or Python.&lt;/li&gt;
&lt;li&gt;It delays the execution of a function until the surrounding function returns.&lt;/li&gt;
&lt;li&gt;They run in &lt;span class="caps"&gt;LIFO&lt;/span&gt; (last in, first out) order.&lt;/li&gt;
&lt;li&gt;The code that runs after &lt;code&gt;defer&lt;/code&gt; is literally the last thing that runs before the function returns, so what is put there is immediately “called” (e.g., &lt;code&gt;defer close()&lt;/code&gt;) but will run until later.&lt;/li&gt;
&lt;li&gt;It helps reduce depth of nesting, which, along with “lack of structure”, are two of the most important factors that contribute to code complexity (see &lt;a href="https://link.springer.com/article/10.1007/s10664-017-9508-2"&gt;this paper&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="go-is-call-by-value"&gt;Go is “call by value”&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Go always makes a copy of the value before passing it to a function.&lt;/li&gt;
&lt;li&gt;Maps and slices behave differently because they are implemented with pointers.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h1 id="chapter-6-pointers"&gt;Chapter 6: Pointers&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;A pointer is a variable that holds the address of a value in memory.&lt;/li&gt;
&lt;li&gt;The zero value of a pointer is &lt;code&gt;nil&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;&lt;/code&gt; is the address-of operator. It goes before the variable name to get its address.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*&lt;/code&gt; is the indirection (dereference) operator. It goes before a pointer to get the value it points to.&lt;/li&gt;
&lt;li&gt;Dereferencing a &lt;code&gt;nil&lt;/code&gt; pointer will result in a runtime panic.&lt;/li&gt;
&lt;li&gt;Types with an &lt;code&gt;*&lt;/code&gt; are pointers to that type (“pointer type”).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;new&lt;/code&gt; is a built-in function that allocates memory for a type and returns a pointer to it.&lt;/li&gt;
&lt;li&gt;To turn a constant into a pointer, use a helper function that takes a value and returns a pointer to it.&lt;/li&gt;
&lt;li&gt;A pointer is used to indicate that a parameter is mutable, i.e., that the function can modify the original value.&lt;/li&gt;
&lt;li&gt;To update the value of a pointer inside a function, dereference it and assign it a new value.&lt;/li&gt;
&lt;li&gt;Value types should be preferred when returning from functions.&lt;/li&gt;
&lt;li&gt;Use a pointer as a return type when there is a need to return a modified data structure or when the data being passed around is very large (at least 1 &lt;span class="caps"&gt;MB&lt;/span&gt;).&lt;/li&gt;
&lt;li&gt;Slices can be used as buffers when iterating over files to avoid allocating memory in each iteration of the loop.&lt;/li&gt;
&lt;li&gt;The garbage collector will free memory that is no longer used. Go favors low latency over high throughput.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;
&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// 10 0xc0000b4008&lt;/span&gt;
&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// 0xc0000b4008 10&lt;/span&gt;

&lt;span class="c1"&gt;// The zero value of a pointer is nil&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;
&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// nil&lt;/span&gt;

&lt;span class="c1"&gt;// Dereferencing a nil pointer will result in a runtime panic&lt;/span&gt;
&lt;span class="c1"&gt;// fmt.Println(*z) // panic: runtime error: invalid memory address or nil pointer dereference&lt;/span&gt;

&lt;span class="c1"&gt;// new allocates memory for a type and returns a pointer to it&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// 0xc0000b4010&lt;/span&gt;
&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// 0&lt;/span&gt;

&lt;span class="c1"&gt;// To turn a constant into a pointer, use a helper function that takes a value and returns a pointer to it&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;intPtr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;intPtr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// A pointer is used to indicate that a parameter is mutable&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;addOne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;addOne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// 11&lt;/span&gt;

&lt;span class="c1"&gt;// To update the value of a pointer inside a function, dereference it and assign it a new value&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;updatePointer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;updatePointer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// 2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h1 id="chapter-7-types-methods-and-interfaces"&gt;Chapter 7: Types, Methods, and Interfaces&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Types can be declared at any level, including at the package level.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="methods"&gt;Methods&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Method names cannot be overloaded.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;FirstName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;LastName&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;Age&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;String&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;//    ^&lt;/span&gt;
&lt;span class="c1"&gt;//    p is a receiver of the String method&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%s %s, age %d"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FirstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;LastName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"Domi"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Noes"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;String&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// Domi Noes, age 42&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="pointer-receivers-and-value-receivers"&gt;Pointer Receivers and Value Receivers&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Use a &lt;em&gt;pointer receiver&lt;/em&gt; when the method needs to modify the receiver.&lt;/li&gt;
&lt;li&gt;Use a &lt;em&gt;pointer receiver&lt;/em&gt; when &lt;code&gt;nil&lt;/code&gt; must be handled.&lt;/li&gt;
&lt;li&gt;A &lt;em&gt;value receiver&lt;/em&gt; is used when the method doesn’t need to modify the receiver.&lt;/li&gt;
&lt;li&gt;If a type has a pointer receiver, all methods should have pointer receivers for consistency.&lt;/li&gt;
&lt;li&gt;Usually, there’s no need for getters and setters when using structs: just use the fields directly.&lt;/li&gt;
&lt;li&gt;Pointer receiver methods should check for &lt;code&gt;nil&lt;/code&gt; values.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="methods-are-also-functions"&gt;Methods are also functions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;We can use a &lt;em&gt;method value&lt;/em&gt; to turn a method into a function.&lt;/li&gt;
&lt;li&gt;A &lt;em&gt;method expression&lt;/em&gt; is used to turn a method into a function that takes the receiver as the first parameter.&lt;/li&gt;
&lt;li&gt;They can be use for dependency injection.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// Using a method value&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"Domi"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Noes"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;String&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="c1"&gt;// using an instance of the struct&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// Domi Noes, age 42&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Using a method expression&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"Domi"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Noes"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// using the type itself&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// Domi Noes, age 42&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="functions-vs-methods"&gt;Functions vs. methods&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Use a function when there is no need to modify the receiver.&lt;/li&gt;
&lt;li&gt;Use a method with a struct receiver when there is a need to modify data at runtime.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="type-declarations-are-not-inheritance"&gt;Type declarations are not inheritance&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Declaring a type based on another type is not inheritance: there is no hierarchy.&lt;/li&gt;
&lt;li&gt;Type conversion is used to convert a value from one type to another.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="types-serve-as-executable-documentation"&gt;Types serve as executable documentation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;They can be used to make code more readable and self-documenting.&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;Percentage&lt;/code&gt; type can be used to make it clear what a value is instead of an &lt;code&gt;int&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="use-iota-for-enumeration-sparingly"&gt;Use iota for enumeration (sparingly)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Go does not have an enumeration type.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;iota&lt;/code&gt; is a built-in constant generator that starts at &lt;code&gt;0&lt;/code&gt; and increments by &lt;code&gt;1&lt;/code&gt; for each subsequent constant.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;iota&lt;/code&gt; can be used to create a set of constants that are related to each other.&lt;/li&gt;
&lt;li&gt;It should be used for “internal” purposes only, when the constants are referred to by name — not by value.&lt;/li&gt;
&lt;li&gt;It is useful to differentiate between sets of values, not to rely explicitly on the values themselves.&lt;/li&gt;
&lt;li&gt;If the first value in the constant block (with value &lt;code&gt;0&lt;/code&gt;) is not really initialized or the value &lt;code&gt;0&lt;/code&gt; does not make sense, it can be named with an &lt;code&gt;_&lt;/code&gt; to skip &lt;code&gt;0&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Color&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;Red&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Color&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;iota&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;Green&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;Blue&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Red&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Green&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Blue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// 0 1 2&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="embedding-for-composition"&gt;Embedding for composition&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Types can be embedded to encourage composition.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;FirstName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;LastName&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;Age&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Employee&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="c1"&gt;// embedded field&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;EmployeeID&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Employee&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nx"&gt;FirstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Domi"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nx"&gt;LastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;"Noes"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nx"&gt;Age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;EmployeeID&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;12345&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FirstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;LastName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;EmployeeID&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// Domi Noes 42 12345&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="interfaces"&gt;Interfaces&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Interfaces are declared as a type with the &lt;code&gt;interface&lt;/code&gt; keyword.&lt;/li&gt;
&lt;li&gt;The methods defined in an interface are the methods that a type must implement to be considered an implementation of that interface: this is referred to as the &lt;em&gt;method set&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;They can be declared in any block.&lt;/li&gt;
&lt;li&gt;They usually end with &lt;code&gt;er&lt;/code&gt; (e.g., &lt;code&gt;Stringer&lt;/code&gt;, &lt;code&gt;Reader&lt;/code&gt;, &lt;code&gt;Writer&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;They are implemented implicitly.&lt;/li&gt;
&lt;li&gt;Go is a blend of duck typing (e.g., dynamic behavior in Python) and structural typing (Java interfaces).&lt;/li&gt;
&lt;li&gt;Use built-in interfaces from the standard library as much as possible.&lt;/li&gt;
&lt;li&gt;Just like structs, interfaces can be embedded.&lt;/li&gt;
&lt;li&gt;Interfaces are the only abstract type in Go.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// Switching between the logic providers is as simple as changing the type of the L field.&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"fmt"&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;LogicProvider&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;struct&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;LogicProvider2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;struct&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;LogicProvider2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"LogicProvider2: Process"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;LogicProvider2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Rework&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;LogicProvider&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;LogicProvider&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Rework&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"LogicProvider1: Rework"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Logic&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;interface&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;Process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;Rework&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Client&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;L&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Logic&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Program&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"data"&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;L&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;L&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Rework&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;c1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;L&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;LogicProvider&lt;/span&gt;&lt;span class="p"&gt;{},&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;c1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Program&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;c2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;L&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;LogicProvider2&lt;/span&gt;&lt;span class="p"&gt;{},&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;c2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Program&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// LogicProvider1: Rework&lt;/span&gt;
&lt;span class="c1"&gt;// LogicProvider2: Process&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="take-interfaces-and-return-structs"&gt;Take interfaces and return structs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Returning interfaces increases coupling.&lt;/li&gt;
&lt;li&gt;It is better to return structs and take interfaces as parameters.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="empty-interfaces"&gt;Empty interfaces&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;If an interface is &lt;code&gt;nil&lt;/code&gt;, invoking a method on it will result in a runtime panic.&lt;/li&gt;
&lt;li&gt;An empty interface matches any type, because it requires implementing no methods.&lt;/li&gt;
&lt;li&gt;They can be used when receiving data from an external source (e.g., a database or &lt;span class="caps"&gt;JSON&lt;/span&gt;) and the type is unknown.&lt;/li&gt;
&lt;li&gt;Using &lt;code&gt;interface{}&lt;/code&gt; is a code smell: it should be used sparingly.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="type-assertions-and-type-switches"&gt;Type assertions and type switches&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Use the &lt;em&gt;comma ok&lt;/em&gt; idiom to avoid a type assertion from panicking.&lt;/li&gt;
&lt;li&gt;Type assertions are checked at runtime.&lt;/li&gt;
&lt;li&gt;Type conversions are checked at compile time.&lt;/li&gt;
&lt;li&gt;A type switch is used to check the type of an interface.&lt;/li&gt;
&lt;li&gt;In the case of errors, use &lt;code&gt;errors.Is&lt;/code&gt; and &lt;code&gt;errors.As&lt;/code&gt; to test for specific errors.&lt;/li&gt;
&lt;li&gt;Add a &lt;code&gt;default&lt;/code&gt; case to switch statements to catch unexpected types.&lt;/li&gt;
&lt;li&gt;It can be safer to keep interfaces unexported.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;interface&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;v1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ok1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;.(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ok1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// 42 true&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;v2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ok2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;.(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ok2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// "" false&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// type switch&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;.(&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"int"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// int 42&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"string"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;float64&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;float32&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// check both at once&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"float"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"unknown"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// type assertion using optional interface&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ok&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;.(&lt;/span&gt;&lt;span class="nx"&gt;MySpecificInterface&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ok&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// myInterface satisfies MySpecificInterface&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SpecificMethod&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="function-types-are-a-bridge-to-interfaces"&gt;Function types are a bridge to interfaces&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Functions can implement interfaces.&lt;/li&gt;
&lt;li&gt;Go uses this to implement the &lt;code&gt;http.Handler&lt;/code&gt; interface.&lt;/li&gt;
&lt;li&gt;Small interfaces are encouraged.&lt;/li&gt;
&lt;li&gt;If a function can depend on many other functions, it is better to use a struct with methods.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;HandlerFunc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;HandlerFunc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ServeHTTP&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;HandlerFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Fprintln&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Hello, world!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}))&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ListenAndServe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;":8080"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;An actual, basic &lt;span class="caps"&gt;HTTP&lt;/span&gt; server:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;"fmt"&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;"net/http"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;HandlerFunc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;HandlerFunc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ServeHTTP&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;HandlerFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Fprintln&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Hello, world!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}))&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ListenAndServe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;":8080"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="implicit-interfaces-make-dependency-injection-easier"&gt;Implicit Interfaces Make Dependency Injection Easier&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="dquo"&gt;“&lt;/span&gt;[…] &lt;em&gt;code should explicitly specify the functionality it needs to perform its task&lt;/em&gt;“.&lt;/li&gt;
&lt;li&gt;If a type has methods that match an interface’s signature, it implicitly satisfies that interface.&lt;/li&gt;
&lt;li&gt;Go’s implicit interfaces make dependency injection easier.&lt;/li&gt;
&lt;li&gt;Interfaces are used to decouple code.&lt;/li&gt;
&lt;li&gt;The client’s code should not be responsible for creating the dependencies it needs.&lt;/li&gt;
&lt;li&gt;The client’s code defines the interfaces and can customize the method set it needs.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is an example of an implicit interface:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"fmt"&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Talker&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;interface&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;Say&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Dog implicitly implements the Talker interface&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Dog&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;struct&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Dog&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Say&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Woof!"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Speak&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Talker&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Say&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Dog&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;Speak&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// Woof!&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And an example demonstrating dependency injection:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;"fmt"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Logger is an implicit interface with a Log method&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Logger&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;interface&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// SimpleLogger implicitly satisfies Logger by implementing Log&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;SimpleLogger&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;struct&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;SimpleLogger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// AdvancedLogger implicitly satisfies Logger by implementing Log&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;AdvancedLogger&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;struct&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;al&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;AdvancedLogger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ADVANCED: "&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// CompositeLogger combines SimpleLogger and AdvancedLogger&lt;/span&gt;
&lt;span class="c1"&gt;// Again, it implicitly satisfies Logger by implementing Log&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;CompositeLogger&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;loggers&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="nx"&gt;Logger&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Log messages with multiple loggers&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;CompositeLogger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;range&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;cl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loggers&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"[CompositeLogger] "&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Greeter contains logic to greet&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Greeter&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Logger&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// Logger is injected&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// NewGreeter injects dependencies and returns a new Greeter&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;NewGreeter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;l&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Logger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Greeter&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Greeter&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;l&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Greet uses the Logger to log a greeting&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;g&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Greeter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Greet&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;g&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello, dependency injection and implicit interface!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;logger1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;SimpleLogger&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="c1"&gt;// Create Logger&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;greeter1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;NewGreeter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;logger1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// Inject Logger into Greeter&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;greeter1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Greet&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="c1"&gt;// Use Greeter&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Logs:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Hello, dependency injection and implicit interface!&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;logger2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;AdvancedLogger&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="c1"&gt;// Create Logger&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;greeter2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;NewGreeter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;logger2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// Inject Logger into Greeter&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;greeter2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Greet&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="c1"&gt;// Use Greeter&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Logs:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// ADVANCED: Hello, dependency injection and implicit interface!&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;logger3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;CompositeLogger&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;loggers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="nx"&gt;Logger&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;SimpleLogger&lt;/span&gt;&lt;span class="p"&gt;{},&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;AdvancedLogger&lt;/span&gt;&lt;span class="p"&gt;{}}}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;greeter3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;NewGreeter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;logger3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// Inject CompositeLogger into Greeter&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;greeter3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Greet&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="c1"&gt;// Use Greeter&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Logs:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// [CompositeLogger] Hello, dependency injection and implicit interface!&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// ADVANCED: [CompositeLogger] Hello, dependency injection and implicit interface!&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h1 id="chapter-8-errors"&gt;Chapter 8: Errors&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Go does not have exceptions.&lt;/li&gt;
&lt;li&gt;Errors are values.&lt;/li&gt;
&lt;li&gt;They are the last return value of a function (by convention).&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;error&lt;/code&gt; interface is defined in the standard library.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;errors&lt;/code&gt; package is used to create errors.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;fmt&lt;/code&gt; package is used to print errors.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;errors.Is&lt;/code&gt; function is used to check for specific errors.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;errors.As&lt;/code&gt; function is used to check for specific errors and get the underlying error.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;errors.Unwrap&lt;/code&gt; function is used to get the underlying error, but &lt;code&gt;errors.Is&lt;/code&gt; and &lt;code&gt;errors.As&lt;/code&gt; are more commonly used for this.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;errors.New&lt;/code&gt; function is used to create errors.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;errors.Errorf&lt;/code&gt; function is used to create errors with formatting.&lt;/li&gt;
&lt;li&gt;When a function returns an error, it is expected that the caller will check for it.&lt;/li&gt;
&lt;li&gt;If a function does not return an error, its value will be &lt;code&gt;nil&lt;/code&gt;, because it is the zero value for interfaces.&lt;/li&gt;
&lt;li&gt;Error messages should not be capitalized or end with punctuation, nor contain newline.&lt;/li&gt;
&lt;li&gt;Because all values must be read, errors cannot be ignored implicitly.&lt;/li&gt;
&lt;li&gt;Because the main code is unindented and the error handling code is indented, the code’s purpose is easier to follow.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="sentinel-errors"&gt;Sentinel errors&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Sentinel errors are errors that are predefined and can be checked for equality.&lt;/li&gt;
&lt;li&gt;They are defined at the package level.&lt;/li&gt;
&lt;li&gt;They start with &lt;code&gt;Err&lt;/code&gt; (except for &lt;code&gt;io.EOF&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;They should be treated as read-only.&lt;/li&gt;
&lt;li&gt;They are used to indicate it is not possible to continue processing (e.g., &lt;code&gt;ErrFormat&lt;/code&gt; for &lt;span class="caps"&gt;ZIP&lt;/span&gt; files).&lt;/li&gt;
&lt;li&gt;Whenever possible, use existing sentinel errors from the standard library.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="wrapping-errors"&gt;Wrapping errors&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;To give additional context to an error, wrap it with &lt;code&gt;fmt.Errorf&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;A series of errors can be wrapped with &lt;code&gt;fmt.Errorf&lt;/code&gt; and &lt;code&gt;errors.Unwrap&lt;/code&gt;: these are called &lt;em&gt;error chains&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;If context is not required, a brand new error can be created with &lt;code&gt;errors.New&lt;/code&gt; or &lt;code&gt;errors.Errorf&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;%v&lt;/code&gt; verb can be used to print the error chain without wrapping the error (e.g., &lt;code&gt;fmt.Errorf("internal failure: %v", err)&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="is-and-as"&gt;&lt;code&gt;Is&lt;/code&gt; and &lt;code&gt;As&lt;/code&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;errors.Is&lt;/code&gt; to check for specific errors.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;errors.As&lt;/code&gt; to check for specific errors and get the underlying error.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;errors.As&lt;/code&gt; can take as the second parameter a pointer to a variable of the type of the error we are looking for, but just as well it can take a pointer to an interface.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="wrapping-errors-with-defer"&gt;Wrapping Errors with defer&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Using named return values and &lt;code&gt;defer&lt;/code&gt; can make error handling easier because the error can be formatted only once at the end of the function.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="panic-and-recover"&gt;Panic and recover&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;A panic is used to indicate that the program cannot continue (e.g., out of memory error or trying to read beyond the end of a slice).&lt;/li&gt;
&lt;li&gt;When a panic occurs, the program stops executing and the stack is unwound, running all deferred functions until the &lt;code&gt;main&lt;/code&gt; function is reached.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;panic&lt;/code&gt; and &lt;code&gt;recover&lt;/code&gt; are not intended to be used for error handling.&lt;/li&gt;
&lt;li&gt;It is better to explicitly handle errors than to use &lt;code&gt;panic&lt;/code&gt; and &lt;code&gt;recover&lt;/code&gt; because it is not clear in &lt;code&gt;recover&lt;/code&gt; what failed exactly.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="getting-a-stack-trace-from-an-error"&gt;Getting a Stack Trace from an Error&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Go doesn’t provide a stack trace by default outside of a &lt;code&gt;panic&lt;/code&gt; state.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%+v&lt;/code&gt; can be used to print the stack trace with &lt;code&gt;fmt.Printf&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Pass the &lt;code&gt;-trimpath&lt;/code&gt; flag to &lt;code&gt;go build&lt;/code&gt; to remove the absolute path from the stack trace, which otherwise shows full paths to files.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h1 id="chapter-9-modules-packages-and-imports"&gt;Chapter 9: Modules, Packages, and Imports&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;The module is the root of the package tree. It can be defined in &lt;code&gt;go.mod&lt;/code&gt; or inferred from the directory structure. For a GitHub repository, it is inferred from the &lt;span class="caps"&gt;URL&lt;/span&gt; as in &lt;code&gt;module github.com/{USER}/{PROJECT}&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Keep a single module per repository.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="gomod"&gt;&lt;code&gt;go.mod&lt;/code&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;go mod init MODULE_PATH&lt;/code&gt; to create a new module (&lt;code&gt;go.mod&lt;/code&gt; file).&lt;/li&gt;
&lt;li&gt;The module path is case-sensitive.&lt;/li&gt;
&lt;li&gt;The minimum version of Go required to build the module can be specified with &lt;code&gt;go mod init MODULE_PATH GO_VERSION&lt;/code&gt; and it appears in the &lt;code&gt;go.mod&lt;/code&gt; file below the module declaration.&lt;/li&gt;
&lt;li&gt;There can be a &lt;code&gt;require&lt;/code&gt; directive for each dependency.&lt;/li&gt;
&lt;li&gt;There are also two optional sections: &lt;code&gt;replace&lt;/code&gt; and &lt;code&gt;exclude&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;replace&lt;/code&gt; is used to replace a dependency with a local version.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;exclude&lt;/code&gt; is used to exclude a dependency from the build.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// Example of a go.mod file&lt;/span&gt;
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;github&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;USER&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;PROJECT&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;go&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="nx"&gt;xx&lt;/span&gt;

&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;github&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;OTHER_USER&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;OTHER_PROJECT&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;v0&lt;/span&gt;&lt;span class="mf"&gt;.0.0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;20200921021027&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="nx"&gt;abc380940ae&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;github&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;shopspring&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;decimal&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;v1&lt;/span&gt;&lt;span class="mf"&gt;.2.0&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="building-packages"&gt;Building packages&lt;/h2&gt;
&lt;h3 id="imports-and-exports"&gt;Imports and exports&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Import statements allow accessing exported constants, variables, functions and types from another package.&lt;/li&gt;
&lt;li&gt;An exported identifier starts with a capital letter. It cannot be accessed from another package without an import statement.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="creating-and-accessing-packages"&gt;Creating and accessing packages&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The first line of the file should be &lt;code&gt;package {PACKAGE_NAME}&lt;/code&gt;. It’s a &lt;em&gt;package clause&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Next is the import section.&lt;/li&gt;
&lt;li&gt;Importing from the standard library doesn’t require a path.&lt;/li&gt;
&lt;li&gt;Any other imports require a path, using the module path as a prefix and appending the path to the package.&lt;/li&gt;
&lt;li&gt;Not using any identifier from a path will result in a compiler error. Hence, all code included in the build will be used.&lt;/li&gt;
&lt;li&gt;It is best to always use absolute paths for clarity.&lt;/li&gt;
&lt;li&gt;The name of a package is determined by its package clause, &lt;em&gt;not by the path&lt;/em&gt; being imported. In general, the package name should match the last element of the path.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;main&lt;/code&gt; package cannot be imported as it is the entrypoint of the application.&lt;/li&gt;
&lt;li&gt;Package names are in the file block: the package name is the same for all files in the same directory and must be present.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="naming-packages"&gt;Naming packages&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The package name should be descriptive.&lt;/li&gt;
&lt;li&gt;Avoid &lt;code&gt;util&lt;/code&gt; and &lt;code&gt;common&lt;/code&gt; packages. Create more packages with fewer functions instead.&lt;/li&gt;
&lt;li&gt;Don’t include the name of the package in functions, as this will be disambiguated by the package name when importing.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="organizing-a-module"&gt;Organizing a module&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;There is no official structure.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;cmd&lt;/code&gt; directory is used for executables. There can be multiple executables produced by different applications from a module.&lt;/li&gt;
&lt;li&gt;When there are a bunch of files at the root to manage deployment and testing, it is a good pattern to put all packages inside a &lt;code&gt;pkg&lt;/code&gt; directory.&lt;/li&gt;
&lt;li&gt;Inside &lt;code&gt;pkg&lt;/code&gt;, limit dependencies between packages by organizing the code according to the functionality it provides.&lt;/li&gt;
&lt;li&gt;A good primer on the topic is &lt;a href="https://www.youtube.com/watch?v=oL6JBUk6tj0"&gt;GopherCon 2018: Kat Zien - How Do You Structure Your Go Apps&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="overriding-a-packages-name"&gt;Overriding a package’s name&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;When names collide, you can use an alias to rename a package.&lt;/li&gt;
&lt;li&gt;In the standard library, both &lt;code&gt;"crypto/rand"&lt;/code&gt; and &lt;code&gt;"math/rand"&lt;/code&gt; are imported as &lt;code&gt;"rand"&lt;/code&gt;, but they can be disambiguated with an alias such as &lt;code&gt;crand "crypto/rand"&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Using the &lt;code&gt;.&lt;/code&gt; alias is discouraged because it makes it harder to understand where a function is coming from as it will import all exported identifiers from the current namespace (same idea as &lt;code&gt;import * from ...&lt;/code&gt; in Python).&lt;/li&gt;
&lt;li&gt;Package names can be shadowed, which renders it inaccessible. Always resolve conflicts by using an alias instead.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="package-comments-and-godoc"&gt;Package comments and &lt;code&gt;godoc&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Comments must be placed right above the item to be documented.&lt;/li&gt;
&lt;li&gt;Comments start with &lt;code&gt;//&lt;/code&gt; and can be multiline.&lt;/li&gt;
&lt;li&gt;A blank line with &lt;code&gt;//&lt;/code&gt; is used to create paragraphs.&lt;/li&gt;
&lt;li&gt;Preformatted text can be inserted with indentation.&lt;/li&gt;
&lt;li&gt;Comments before the package clause create package-level documentation.&lt;/li&gt;
&lt;li&gt;If the package has a lot of documentation, it is better to put it in a separate file called &lt;code&gt;doc.go&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Comments should start with the name of the item being documented.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="internal-package"&gt;Internal package&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Use the &lt;code&gt;internal&lt;/code&gt; directory to create packages that are only accessible from the parent and sibling packages.&lt;/li&gt;
&lt;li&gt;Trying to access an &lt;code&gt;internal&lt;/code&gt; package from outside the module will result in a compiler error.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="the-init-function"&gt;The &lt;code&gt;init&lt;/code&gt; function&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;If there is an &lt;code&gt;init&lt;/code&gt; function in a package, it runs as soon as the package is referenced by another package.&lt;/li&gt;
&lt;li&gt;It has not input or output parameters and can only cause side-effects within the package.&lt;/li&gt;
&lt;li&gt;There can be multiple &lt;code&gt;init&lt;/code&gt; functions in a package, even in the same file, although this setup is discouraged.&lt;/li&gt;
&lt;li&gt;A blank import can be used to run the &lt;code&gt;init&lt;/code&gt; function of a package without using any of its exported identifiers, e.g. &lt;code&gt;import _ "github.com/lib/pq"&lt;/code&gt;. Explicit is better than implicit: this is an obsolete pattern.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="circular-dependencies"&gt;Circular dependencies&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;They are not allowed to keep the code readable and the compiler fast.&lt;/li&gt;
&lt;li&gt;If two packages depend on each other, they should probably be merged into a single package.&lt;/li&gt;
&lt;li&gt;If two packages with circular dependencies are still preferred, it may be possible to move only the culprits into a separate package so that both packages can import them.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="api-renaming-and-organizing"&gt;&lt;span class="caps"&gt;API&lt;/span&gt; renaming and organizing&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;To avoid breaking a function name, a new method can be added with the new name, calling the old one.&lt;/li&gt;
&lt;li&gt;Constants can be re-declared with the same types, but with a different name.&lt;/li&gt;
&lt;li&gt;To rename exported types, we can create an alias such as &lt;code&gt;type Bar = Foo&lt;/code&gt;. In this case, new methods should still be added to the original type to preserve backward compatibility.&lt;/li&gt;
&lt;li&gt;Caution: a field name cannot be changed without breaking backward compatibility.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="working-with-modules"&gt;Working with modules&lt;/h2&gt;
&lt;h3 id="importing-third-party-code"&gt;Importing third-party code&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;go.mod&lt;/code&gt; is used to manage dependencies.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;go.mod&lt;/code&gt; is automatically populated when a &lt;code&gt;go&lt;/code&gt; command runs and a dependency is required (e.g., &lt;code&gt;go build&lt;/code&gt;, &lt;code&gt;go list&lt;/code&gt;, &lt;code&gt;go run&lt;/code&gt;, &lt;code&gt;go test&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;go.sum&lt;/code&gt; is used to verify the integrity of the dependencies.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;god.mod&lt;/code&gt; and &lt;code&gt;go.sum&lt;/code&gt; should both be committed to version control.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="working-with-versions"&gt;Working with versions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;go list&lt;/code&gt; is used to list dependencies used by a project.&lt;/li&gt;
&lt;li&gt;By default, it lists packages used.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;-m&lt;/code&gt; flag is used to list modules used.&lt;/li&gt;
&lt;li&gt;Appending the &lt;code&gt;-versions&lt;/code&gt; flag to the previous command lists all versions of the dependencies.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;go get&lt;/code&gt; can be used to downgrade or upgrade a dependency (e.g., &lt;code&gt;go get github.com/{USER}/{PROJECT}@v1.0.0&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;It can also be used to add a new dependency.&lt;/li&gt;
&lt;li&gt;It can be used to remove a dependency by adding the &lt;code&gt;-u&lt;/code&gt; flag.&lt;/li&gt;
&lt;li&gt;Changes will be reflected in &lt;code&gt;go.mod&lt;/code&gt; and &lt;code&gt;go.sum&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Dependencies might be shown with &lt;code&gt;// indirect&lt;/code&gt; next to them. This means that the dependency is not used directly by the project, but by one of its dependencies.&lt;/li&gt;
&lt;li&gt;It can be added when the project uses that dependency directly with a newer version than what is declared in the dependency’s &lt;code&gt;go.mod&lt;/code&gt; file.&lt;/li&gt;
&lt;li&gt;Go follows semantic versioning (&lt;em&gt;SemVer&lt;/em&gt;).&lt;/li&gt;
&lt;li&gt;There is an &lt;em&gt;import compatibility rule&lt;/em&gt;: all minor and patch versions should remain compatible and if not, this is considered a bug.&lt;/li&gt;
&lt;li&gt;Instead of importing multiple versions of the same library as with &lt;code&gt;npm&lt;/code&gt;, Go will import the highest version of the library that satisfies the requirements.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="updating-to-compatible-versions"&gt;Updating to compatible versions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;go get -u=patch DEPENDENCY_PATH&lt;/code&gt; to update to the latest compatible patch version.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;go get -u DEPENDENCY_PATH&lt;/code&gt; will update to the most recent compatible version.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="updating-to-incompatible-versions"&gt;Updating to incompatible versions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Go follows the &lt;em&gt;semantic import versioning&lt;/em&gt; rule: for all major versions greater than &lt;code&gt;1&lt;/code&gt;, the major version is included in the import path, e.g. &lt;code&gt;"github.com/{USER}/{PROJECT}/v2"&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Once a new major version is used in the project, &lt;code&gt;go build&lt;/code&gt; will update the &lt;code&gt;go.mod&lt;/code&gt; file to use the new major version.&lt;/li&gt;
&lt;li&gt;Older versions may still be present in &lt;code&gt;go.mod&lt;/code&gt;: &lt;code&gt;go mod tidy&lt;/code&gt; can be used to remove them.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="vendoring"&gt;Vendoring&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;go mod vendor&lt;/code&gt; is used to create a &lt;code&gt;vendor&lt;/code&gt; directory with all the dependencies to ensure reproducible builds.&lt;/li&gt;
&lt;li&gt;It dramatically increases the size of the project in version control.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="pkggodev"&gt;&lt;code&gt;pkg.go.dev&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;It automatically indexes Go projects.&lt;/li&gt;
&lt;li&gt;It is used to search for packages and their documentation.&lt;/li&gt;
&lt;li&gt;It publishes the godocs, license, &lt;code&gt;README&lt;/code&gt;, the module’s dependencies and which other open source projects depend on it.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="publishing-modules"&gt;Publishing modules&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Go favors permissive licenses (e.g., &lt;span class="caps"&gt;MIT&lt;/span&gt;, &lt;span class="caps"&gt;BSD&lt;/span&gt;, Apache).&lt;/li&gt;
&lt;li&gt;There is no need for a central repository, as Go uses the module path to find the module.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="versioning-modules"&gt;Versioning modules&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Minor and patch versions should be compatible and are easy to manage.&lt;/li&gt;
&lt;li&gt;Major versions are slightly more difficult to manage. For instance, let’s go from &lt;code&gt;v1&lt;/code&gt; to &lt;code&gt;v2&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Create a directory to put all the old code in, named &lt;code&gt;v2&lt;/code&gt;, including &lt;code&gt;README&lt;/code&gt; and &lt;code&gt;LICENSE&lt;/code&gt; files.&lt;/li&gt;
&lt;li&gt;Create a branch.&lt;ul&gt;
&lt;li&gt;Name the branch &lt;code&gt;v1&lt;/code&gt; if the old code goes in it.&lt;/li&gt;
&lt;li&gt;Name the branch &lt;code&gt;v2&lt;/code&gt; if the new code goes in it.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Make sure the module path in &lt;code&gt;go.mod&lt;/code&gt; ends with &lt;code&gt;/v2&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Update all import paths to use the new module path.&lt;/li&gt;
&lt;li&gt;Create a tag for the new version.&lt;ul&gt;
&lt;li&gt;Name the tag &lt;code&gt;v2.0.0&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Tag the &lt;code&gt;main&lt;/code&gt; branch if the new code goes in it.&lt;/li&gt;
&lt;li&gt;Otherwise, tag the &lt;code&gt;v2&lt;/code&gt; branch.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If breaking changes might be introduced while on the new version, use a pre-release version, e.g., &lt;code&gt;v2.0.0-alpha.1&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The open source project &lt;a href="https://github.com/marwan-at-work/mod"&gt;&lt;code&gt;mod&lt;/code&gt;&lt;/a&gt; can be used to automate this process.&lt;/li&gt;
&lt;li&gt;The Go Blog has a &lt;a href="https://go.dev/blog/v2-go-modules"&gt;post&lt;/a&gt; on the topic.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="module-proxy-servers"&gt;Module proxy servers&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Google manages a module proxy server that fetches all versions of all publicly available modules.&lt;/li&gt;
&lt;li&gt;Google also maintains a &lt;em&gt;sum database&lt;/em&gt;, which stores the checksums of all the modules.&lt;/li&gt;
&lt;li&gt;Modules are only installed from the proxy server if they are not already present in the local cache and if the checksums match.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="specifying-a-module-proxy-server"&gt;Specifying a module proxy server&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;GOPROXY&lt;/code&gt; environment variable can be used to specify a module proxy server. To use GoCenter, set it to &lt;code&gt;GOPROXY=https://gocenter.io&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If the &lt;code&gt;GOPROXY&lt;/code&gt; environment variable is set to &lt;code&gt;direct&lt;/code&gt;, the module proxy server will not be used and the module will be downloaded directly from the source.&lt;/li&gt;
&lt;li&gt;Projects such as &lt;a href="https://github.com/gomods/athens"&gt;&lt;code&gt;athens&lt;/code&gt;&lt;/a&gt; can be used to create a local module proxy server.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h1 id="chapter-10-concurrency-in-go"&gt;Chapter 10: Concurrency in Go&lt;/h1&gt;
&lt;h2 id="when-to-use-concurrency"&gt;When to use concurrency&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Concurrency is not parallelism&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Concurrency is useful when there are multiple tasks that can be executed independently.&lt;/li&gt;
&lt;li&gt;Concurrency brings benefits when a process takes a long time to complete.&lt;/li&gt;
&lt;li&gt;Read &lt;a href="https://www.oreilly.com/library/view/the-art-of/9780596802424/"&gt;The Art of Concurrency&lt;/a&gt; for more information.&lt;/li&gt;
&lt;li&gt;The book &lt;a href="https://www.oreilly.com/library/view/concurrency-in-go/9781491941294/"&gt;Concurrency in Go&lt;/a&gt; is also a great resource.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="goroutines"&gt;Goroutines&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="dquo"&gt;“&lt;/span&gt;&lt;em&gt;Goroutines are lightweight processes managed by the Go runtime&lt;/em&gt;“.&lt;/li&gt;
&lt;li&gt;Because Go manages goroutines, they are cheap to create and destroy (no need to create system-level resources).&lt;/li&gt;
&lt;li&gt;They are memory efficient because they are allocated on the stack with small initial sizes.&lt;/li&gt;
&lt;li&gt;Switching between goroutines is fast because it is managed by the Go runtime within a process.&lt;/li&gt;
&lt;li&gt;Go optimizes how work is distributed across goroutines.&lt;/li&gt;
&lt;li&gt;For more details on this, watch &lt;a href="https://www.youtube.com/watch?v=YHRO5WQGh0k"&gt;GopherCon 2018: Kavya Joshi - The Scheduler Saga&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;A goroutine starts by calling a function with the &lt;code&gt;go&lt;/code&gt; keyword in front of it.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="channels"&gt;Channels&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Channels are used to communicate between goroutines.&lt;/li&gt;
&lt;li&gt;They are a built-in type that require the &lt;code&gt;make&lt;/code&gt; function to create them, e.g. &lt;code&gt;ch := make(chan int)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The zero value of a channel is &lt;code&gt;nil&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;They are passed as parameters to functions as a pointer.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="reading-writing-buffering"&gt;Reading, writing, buffering&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;&amp;lt;-&lt;/code&gt; operator is used to send and receive data from a channel. It indicates the direction of the data flow.&lt;/li&gt;
&lt;li&gt;A function parameter can specify the direction of the channel, e.g. &lt;code&gt;func f(ch &amp;lt;-chan int)&lt;/code&gt; will make it so that the channel can only be read from. Likewise, &lt;code&gt;func f(ch chan&amp;lt;- int)&lt;/code&gt; will make it so that the channel can only be written to.&lt;/li&gt;
&lt;li&gt;By default, channels are &lt;em&gt;unbuffered&lt;/em&gt;, meaning that they can only hold one value at a time. They should be used most of the time.&lt;/li&gt;
&lt;li&gt;A channel can be buffered by specifying the buffer size when creating it, e.g. &lt;code&gt;ch := make(chan int, 10)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;len(ch)&lt;/code&gt; is used to get the number of elements in the channel.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cap(ch)&lt;/code&gt; is used to get the capacity of the channel.&lt;/li&gt;
&lt;li&gt;The capacity of a channel cannot be changed after it is created.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="for-range-and-channels"&gt;&lt;code&gt;for-range&lt;/code&gt; and channels&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;for-range&lt;/code&gt; can be used to read from a channel until it is closed, or until a &lt;code&gt;break&lt;/code&gt; or &lt;code&gt;return&lt;/code&gt; statement is encountered.&lt;/li&gt;
&lt;li&gt;There is a single variable declared for the channel, which is the value read from the channel.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;range&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="closing-a-channel"&gt;Closing a channel&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Close a channel with &lt;code&gt;close(ch)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Writing to a closed channel will result in a runtime panic.&lt;/li&gt;
&lt;li&gt;Attempting to read from a closed unbuffered channel will return the zero value of the channel’s type.&lt;/li&gt;
&lt;li&gt;Reading from a closed buffered channel will return the remaining values in the channel until it is empty, then it will return the zero value of the channel’s type.&lt;/li&gt;
&lt;li&gt;To know if a channel is closed, use the second return value of the receive operation with the &lt;em&gt;comma ok&lt;/em&gt; idiom, e.g. &lt;code&gt;v, ok := &amp;lt;-ch&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ok&lt;/code&gt; will be &lt;code&gt;true&lt;/code&gt; if the channel is open and &lt;code&gt;false&lt;/code&gt; if it is closed.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="how-channels-behave"&gt;How channels behave&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;They pause the execution of the goroutine until a value is available to read from the channel.&lt;/li&gt;
&lt;li&gt;They pause the execution of the goroutine until a value can be written to the channel.&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;panic&lt;/code&gt; will occur if a value is written to a closed channel or when trying to close a closed channel or a &lt;code&gt;nil&lt;/code&gt; channel.&lt;/li&gt;
&lt;li&gt;Make the writer responsible for closing the channel.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="select"&gt;&lt;code&gt;select&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Starvation&lt;/em&gt; is when a goroutine is waiting for a resource that is never available.&lt;/li&gt;
&lt;li&gt;It looks very similar to a &lt;code&gt;switch&lt;/code&gt; statement.&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;case&lt;/code&gt; in a &lt;code&gt;select&lt;/code&gt; statement is executed when the channel is ready to be read from or written to.&lt;/li&gt;
&lt;li&gt;If multiple &lt;code&gt;case&lt;/code&gt; statements are ready, one is chosen at random — with &lt;code&gt;switch&lt;/code&gt;, the first match is always chosen. This solves the starvation problem since all cases are checked at once.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;select&lt;/code&gt; also deals with deadlock issues: if all channels are blocked, it will execute the &lt;code&gt;default&lt;/code&gt; case.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;select&lt;/code&gt; is often used in a loop to keep reading from a channel until it is closed.&lt;/li&gt;
&lt;li&gt;Having a &lt;code&gt;default&lt;/code&gt; case inside a loop for a &lt;code&gt;select&lt;/code&gt; is most certainly not what is intended as it will run constantly.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="concurrency-practices-and-patterns"&gt;Concurrency practices and patterns&lt;/h2&gt;
&lt;h3 id="keep-apis-concurrency-free"&gt;Keep APIs concurrency-free&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Never expose channels or mutexes in an &lt;span class="caps"&gt;API&lt;/span&gt;. If a channel is exposed, the user will have to manage it, know whether it is buffered or not, closed or not or &lt;code&gt;nil&lt;/code&gt;. The user could also trigger deadlocks.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="goroutines-for-loops-and-varying-variables"&gt;Goroutines, for loops, and varying variables&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Instead of shadowing variables in a &lt;code&gt;for&lt;/code&gt; loop, pass them as parameters to the goroutine.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// Don't do this&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;range&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// shadowing&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;go&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;ch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Do this instead&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;range&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;go&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// value captured by the closure&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;ch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="always-clean-up-your-goroutines"&gt;Always clean up your goroutines&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;If a goroutine is not cleaned up, it will keep running until the program exits: this is called a “&lt;em&gt;goroutine leak&lt;/em&gt;“.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="done-channel-pattern"&gt;&lt;span class="dquo"&gt;“&lt;/span&gt;Done channel pattern”&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;If multiple goroutines are running, it is useful to have a way to signal them to stop.&lt;/li&gt;
&lt;li&gt;A channel (&lt;code&gt;done&lt;/code&gt;) can be used to signal the goroutines to stop.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="using-a-cancel-function-to-terminate-a-goroutine"&gt;Using a cancel function to terminate a goroutine&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;A cancel function can be used to terminate a goroutine.&lt;/li&gt;
&lt;li&gt;It is a function that performs a cleanup and closes a channel.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="when-to-use-buffered-and-unbuffered-channels"&gt;When to use buffered and unbuffered channels&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Buffered channels are useful when limiting the number of goroutines that can access a resource at the same time, when limiting the amount of work that gets queued up or when the number of goroutines is known.&lt;/li&gt;
&lt;li&gt;Buffered channels are good to gather results from multiple goroutines when a deterministic order is not required.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="backpressure"&gt;Backpressure&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Backpressure is a way to signal to a goroutine that it should slow down.&lt;/li&gt;
&lt;li&gt;It is implemented with buffered channels.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="turning-off-a-case-in-a-select"&gt;Turning off a case in a &lt;code&gt;select&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Setting a variable’s channel to &lt;code&gt;nil&lt;/code&gt; will turn off the case in a &lt;code&gt;select&lt;/code&gt; statement.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ok&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="nx"&gt;in&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;ok&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nx"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// kills the case&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;continue&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// ... other cases ...&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="time-out-code"&gt;Time out code&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;time.After&lt;/code&gt; to time out code.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;select&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;// this requires context cancellation to free up resources&lt;/span&gt;
&lt;span class="c1"&gt;// if the function is not finished before the timeout,&lt;/span&gt;
&lt;span class="c1"&gt;// else it will keep processing in the background&lt;/span&gt;
&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="nx"&gt;ch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;After&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Second&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"timed out"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="using-waitgroups"&gt;Using &lt;code&gt;WaitGroups&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;em&gt;done channel pattern&lt;/em&gt; works well when waiting for a single goroutine to finish.&lt;/li&gt;
&lt;li&gt;When waiting for multiple goroutines to finish, use a &lt;code&gt;sync.WaitGroup&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Add&lt;/code&gt; is used to add a goroutine to the wait group.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Done&lt;/code&gt; is used to signal that a goroutine is done.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Wait&lt;/code&gt; is used to wait for all goroutines to finish.&lt;/li&gt;
&lt;li&gt;Use them when some cleanup is required after all goroutines are done.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pkg.go.dev/golang.org/x/sync/errgroup"&gt;&lt;code&gt;ErrGroup&lt;/code&gt;&lt;/a&gt; can be used to wait for multiple goroutines to finish and return an error if one of them fails.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;wg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;sync&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;WaitGroup&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;wg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;ch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;chan&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;range&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// The wait group is passed with a closure&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// Otherwise it would need to be passed as a pointer&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// So all goroutines share the same instance&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;go&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;defer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;wg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Done&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// called even if panic&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nx"&gt;ch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;wg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Wait&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;range&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="running-code-exactly-once"&gt;Running code exactly once&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;once.Do&lt;/code&gt; is used to run code exactly once.&lt;/li&gt;
&lt;li&gt;It can be found in the &lt;code&gt;sync&lt;/code&gt; package.&lt;/li&gt;
&lt;li&gt;It needn’t be initialized, as the zero value is usable.&lt;/li&gt;
&lt;li&gt;It is best to use the minimum amount of concurrency possible.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;once&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;sync&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Once&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;once&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Do&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Only once"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;once&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Do&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Only once"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// will not be printed&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="when-to-use-mutexes-instead-of-channels"&gt;When to use mutexes instead of channels&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Mutex stands for &lt;em&gt;mutual exclusion&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Mutexes limit access to a resource to a single goroutine at a time with a locking mechanism (&lt;code&gt;Lock&lt;/code&gt; and &lt;code&gt;Unlock&lt;/code&gt;, which must be used carefully to avoid creating deadlocks, especially in functions implemented recursively).&lt;/li&gt;
&lt;li&gt;They require to do more bookkeeping than channels.&lt;/li&gt;
&lt;li&gt;They should never be copied, just like &lt;code&gt;sync.WaitGroup&lt;/code&gt; and &lt;code&gt;sync.Once&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Use mutexes when there is a shared resource that needs to be protected, such as a field in a struct.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RWMutex&lt;/code&gt; is used when there are multiple readers and a single writer. The &lt;em&gt;critical section&lt;/em&gt; is protected by a write lock, while the read lock is used to read the resource by multiple goroutines.&lt;/li&gt;
&lt;li&gt;Sometimes, performance issues with channels can be solved by using mutexes instead.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="atomics"&gt;Atomics&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Atomics are used to perform atomic operations on integers and pointers.&lt;/li&gt;
&lt;li&gt;They are more niche than mutexes and channels and as such, they are not covered in this introductory summary on Go.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h1 id="chapter-11-the-standard-library"&gt;Chapter 11: The Standard Library&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;It is battery-included, just like Python.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="io-and-friends"&gt;&lt;code&gt;io&lt;/code&gt; and Friends&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;io&lt;/code&gt; is used to read (&lt;code&gt;io.Reader&lt;/code&gt;) and write (&lt;code&gt;io.Writer&lt;/code&gt;) data.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;io.Closer&lt;/code&gt; is used to close a resource.&lt;/li&gt;
&lt;li&gt;Read (&lt;code&gt;io.ReaderAt&lt;/code&gt;) and write (&lt;code&gt;io.WriterAt&lt;/code&gt;) data at a specific offset.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;io.Seeker&lt;/code&gt; is used to seek to a specific offset.&lt;/li&gt;
&lt;li&gt;There are other combinations to define more explicitly the code’s intent (&lt;code&gt;ReadWriter&lt;/code&gt;, &lt;code&gt;ReadCloser&lt;/code&gt;, &lt;code&gt;WriteCloser&lt;/code&gt;, &lt;code&gt;ReadWriteCloser&lt;/code&gt;, &lt;code&gt;ReadSeeker&lt;/code&gt;, &lt;code&gt;WriteSeeker&lt;/code&gt;, &lt;code&gt;ReadWriteSeeker&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;io&lt;/code&gt; package is a great example of the power of interfaces through simple abstractions.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Reader&lt;/code&gt;, &lt;code&gt;Writer&lt;/code&gt;, and &lt;code&gt;Scanner&lt;/code&gt; from the &lt;code&gt;bufio&lt;/code&gt; package are used to read and write data more efficiently on larger datasets.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="time"&gt;&lt;code&gt;time&lt;/code&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;time&lt;/code&gt; is used to work with dates and times.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;time.Time&lt;/code&gt; is used to represent a date and time.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;time.Duration&lt;/code&gt; is used to represent a duration.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;time.Parse&lt;/code&gt; is used to parse a string into a &lt;code&gt;time.Time&lt;/code&gt; value.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;time.Format&lt;/code&gt; is used to format a &lt;code&gt;time.Time&lt;/code&gt; value into a string.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;time.Now&lt;/code&gt; is used to get the current time.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;time.Sleep&lt;/code&gt; is used to pause the execution of a goroutine for a specified duration.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;time.After&lt;/code&gt; is used to create a channel that will receive a value after a specified duration.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;time.Tick&lt;/code&gt; is used to create a channel that will receive a value at regular intervals.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;time.Timer&lt;/code&gt; is used to create a timer that will send a value on a channel after a specified duration.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;time.Ticker&lt;/code&gt; is used to create a ticker that will send a value on a channel at regular intervals.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;time.NewTicker&lt;/code&gt; is used to create a new ticker.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;time.NewTimer&lt;/code&gt; is used to create a new timer.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;time.Since&lt;/code&gt; is used to get the time elapsed since a specified time.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;time.Until&lt;/code&gt; is used to get the time until a specified time.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;time.AfterFunc&lt;/code&gt; is used to execute a function after a specified duration.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;Equal&lt;/code&gt; to compare two &lt;code&gt;time.Time&lt;/code&gt; values.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;time.Time&lt;/code&gt; includes the usual constants for days of the week, months, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="monotonic-time"&gt;Monotonic time&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Go uses a monotonic clock to measure time.&lt;/li&gt;
&lt;li&gt;A monotonic clock is a clock that counts up from the start of the computer.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="timers-and-timeouts"&gt;Timers and timeouts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;time.NewTicker&lt;/code&gt; to create a ticker that will send a value on a channel at regular intervals.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;time.NewTimer&lt;/code&gt; instead of &lt;code&gt;time.Tick&lt;/code&gt;, as it can be stopped and reset.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="encoding-and-json"&gt;Encoding and &lt;span class="caps"&gt;JSON&lt;/span&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="dquo"&gt;“&lt;/span&gt;&lt;em&gt;Marshalling&lt;/em&gt;” is the process of converting a data structure into a byte stream.&lt;/li&gt;
&lt;li&gt;&lt;span class="dquo"&gt;“&lt;/span&gt;&lt;em&gt;Unmarshalling&lt;/em&gt;” is the process of converting a byte stream into a data structure.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="use-struct-tags-to-add-metadata"&gt;Use struct tags to add metadata&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Struct tags are strings written inside backticks that can be added to struct fields to add metadata.&lt;/li&gt;
&lt;li&gt;They can span only one line, taking the format &lt;code&gt;`tagName:"tagValue"`&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;go vet&lt;/code&gt; can be used to check for struct tags validity.&lt;/li&gt;
&lt;li&gt;If no struct tag is specified, the field name will be used instead.&lt;/li&gt;
&lt;li&gt;Use a &lt;code&gt;-&lt;/code&gt; for a field name to ignore it.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;,omitempty&lt;/code&gt; can be added right after the field name to omit a field if it is empty.&lt;/li&gt;
&lt;li&gt;While annotations can make the code more declarative and short, they can also make it harder to read and understand. &lt;strong&gt;Go&lt;/strong&gt; for readability first.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="unmarshalling-and-marshalling"&gt;Unmarshalling and marshalling&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;json.Unmarshal&lt;/code&gt; is used to unmarshal a &lt;span class="caps"&gt;JSON&lt;/span&gt; byte stream into a data structure.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;json.Marshal&lt;/code&gt; is used to marshal a data structure into a &lt;span class="caps"&gt;JSON&lt;/span&gt; byte stream.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="json-readers-and-writers"&gt;&lt;span class="caps"&gt;JSON&lt;/span&gt;, readers, and writers&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;json.Decoder&lt;/code&gt; is used to decode a &lt;span class="caps"&gt;JSON&lt;/span&gt; byte stream into a data structure.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;json.Encoder&lt;/code&gt; is used to encode a data structure into a &lt;span class="caps"&gt;JSON&lt;/span&gt; byte stream (e.g., encoding a file given an interface: &lt;code&gt;json.NewEncoder(tmpFile).Encode(toFile)&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;json.NewDecoder&lt;/code&gt; is used to create a new decoder (e.g., decoding a file given an interface: &lt;code&gt;json.NewDecoder(tmpFile2).Decode(&amp;amp;fromFile)&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;json.NewEncoder&lt;/code&gt; is used to create a new encoder.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="encoding-and-decoding-json-streams"&gt;Encoding and Decoding &lt;span class="caps"&gt;JSON&lt;/span&gt; Streams&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;json.Decoder&lt;/code&gt; and &lt;code&gt;json.Encoder&lt;/code&gt; can be used to encode and decode &lt;span class="caps"&gt;JSON&lt;/span&gt; streams.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="custom-json-parsing"&gt;Custom &lt;span class="caps"&gt;JSON&lt;/span&gt; Parsing&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;json.Unmarshaler&lt;/code&gt; is used to implement custom &lt;span class="caps"&gt;JSON&lt;/span&gt; parsing.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;json.Marshaler&lt;/code&gt; is used to implement custom &lt;span class="caps"&gt;JSON&lt;/span&gt; marshalling.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="nethttp"&gt;&lt;code&gt;net/http&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;As a modern language, Go has a built-in &lt;span class="caps"&gt;HTTP&lt;/span&gt; client and server.&lt;/li&gt;
&lt;li&gt;Third-party libraries of interest in this space include &lt;a href="https://github.com/go-chi/chi"&gt;chi&lt;/a&gt; and &lt;a href="https://github.com/gorilla/mux"&gt;Gorilla Mux&lt;/a&gt; for routing needs and &lt;a href="https://github.com/justinas/alice"&gt;alice&lt;/a&gt; to deal with middleware chaining.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="client"&gt;Client&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Don’t use the default client in production.&lt;/li&gt;
&lt;li&gt;Don’t use the functions to make &lt;span class="caps"&gt;HTTP&lt;/span&gt; requests directly in production as they don’t have timeouts.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="server"&gt;Server&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;http.ListenAndServe&lt;/code&gt; is used to start a server.&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;middleware pattern&lt;/em&gt; is used to add functionality to a server, so as to check for authentication, logging, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h1 id="chapter-12-the-context"&gt;Chapter 12: The Context&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Context is not a new feature: it is an instance that meets the &lt;code&gt;context.Context&lt;/code&gt; interface and gets passed around as the first argument to functions, which is usually named &lt;code&gt;ctx&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;context.TODO&lt;/code&gt; is used when a context is required but there is no context available. It shouldn’t be used in production.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="cancellation"&gt;Cancellation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;context.WithCancel&lt;/code&gt; is used to create a context that can be cancelled.&lt;/li&gt;
&lt;li&gt;When a cancellable context is created, a &lt;code&gt;cancel&lt;/code&gt; function is returned. It is used to cancel the context and it &lt;strong&gt;must&lt;/strong&gt; be called (at least once) using &lt;code&gt;defer&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="timers"&gt;Timers&lt;/h2&gt;
&lt;p&gt;A server can do a few things to manage its load:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It can limit the number of concurrent requests it accepts.&lt;/li&gt;
&lt;li&gt;It can be done by limiting the number of goroutines.&lt;/li&gt;
&lt;li&gt;It can limit the number of requests queued up.&lt;/li&gt;
&lt;li&gt;This can be handled with a buffered channel.&lt;/li&gt;
&lt;li&gt;Limit the amount of time a request can take.&lt;/li&gt;
&lt;li&gt;The context can be used to do this.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;context.WithTimeout&lt;/code&gt; is used to create a context that will be cancelled after a specified duration.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;context.WithDeadline&lt;/code&gt; is used to create a context that will be cancelled at a specified time.&lt;/li&gt;
&lt;li&gt;Limit the resources a request can use (memory, disk space…).&lt;/li&gt;
&lt;li&gt;There is no built-in solution for this in Go.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="values"&gt;Values&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;context.WithValue&lt;/code&gt; is used to create a context with a value.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h1 id="chapter-13-writing-tests"&gt;Chapter 13: Writing Tests&lt;/h1&gt;
&lt;h2 id="basics-of-testing"&gt;Basics of testing&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;testing&lt;/code&gt; package is used to write tests.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;go test&lt;/code&gt; is used to run tests and generate reports.&lt;/li&gt;
&lt;li&gt;Tests are located in files with the suffix &lt;code&gt;_test.go&lt;/code&gt; in the same package as the code being tested, so they have access to unexported identifiers.&lt;/li&gt;
&lt;li&gt;Test functions start with &lt;code&gt;Test&lt;/code&gt; and take a &lt;code&gt;*testing.T&lt;/code&gt; parameter. They do not return any value.&lt;/li&gt;
&lt;li&gt;The test function name should be descriptive. It can start with &lt;code&gt;Test_&lt;/code&gt; to indicate the function under test is unexported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="reporting-failure"&gt;Reporting failure&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;t.Error&lt;/code&gt; or &lt;code&gt;t.Errorf&lt;/code&gt; to report a failure and continue the test. Use it to conveniently report as many failures as possible.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;t.Fatal&lt;/code&gt; or &lt;code&gt;t.Fatalf&lt;/code&gt; to report a failure and stop the test. Use it when subsequent tests on the same function will fail or trigger a &lt;code&gt;panic&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;t.Log&lt;/code&gt; to log information about the test.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="setting-up-and-tearing-down"&gt;Setting up and tearing down&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TestMain&lt;/code&gt; is used to set up and tear down tests.&lt;/li&gt;
&lt;li&gt;It is called &lt;em&gt;once&lt;/em&gt; before and after all tests, not between each test.&lt;/li&gt;
&lt;li&gt;Can be used to set up and tear down a database, for instance.&lt;/li&gt;
&lt;li&gt;It can be used when package-level variables need to be initialized, although this probably means the code needs refactoring.&lt;/li&gt;
&lt;li&gt;It takes a &lt;code&gt;*testing.M&lt;/code&gt; parameter. Setup can be done at the beginning, then &lt;code&gt;exitVal := m.Run()&lt;/code&gt; is called to run tests, then teardown can be done at the end, returning the exit value with &lt;code&gt;os.Exit(exitVal)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Individual test functions receive a &lt;code&gt;*testing.T&lt;/code&gt; parameter, which has a &lt;code&gt;Cleanup&lt;/code&gt; method that can be used to clean up after a test.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;Cleanup&lt;/code&gt; method is similar to the &lt;code&gt;defer&lt;/code&gt; statement but can be useful is the cleanup actions are performed for multiple tests from a helper function.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="storing-sample-test-data"&gt;Storing sample test data&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;A directory named &lt;code&gt;testdata&lt;/code&gt; can be created to store sample test data for the package under test, as the package directory is used for the currently working directory.&lt;/li&gt;
&lt;li&gt;Each package accesses its own &lt;code&gt;testdata&lt;/code&gt; directory, so it is possible to have multiple &lt;code&gt;testdata&lt;/code&gt; directories in a project: up to one per package.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="caching-test-results"&gt;Caching test results&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;go test&lt;/code&gt; caches test results to speed up subsequent runs.&lt;/li&gt;
&lt;li&gt;Tests recompile if the source code or the data in &lt;code&gt;testdata&lt;/code&gt; changes.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;go test -count=1&lt;/code&gt; can be used to disable caching.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="testing-your-public-api"&gt;Testing your public &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Create a directory &lt;code&gt;packagename_test&lt;/code&gt; to test the public &lt;span class="caps"&gt;API&lt;/span&gt; of a package, to be found at the same directory level as &lt;code&gt;packagename&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Test files in this case will be named &lt;code&gt;packagename_public_test.go&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Test your public &lt;span class="caps"&gt;API&lt;/span&gt;, not your implementation.&lt;/li&gt;
&lt;li&gt;This is used to test the exported functions and methods, not the unexported ones.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="use-go-cmp-to-compare-test-results"&gt;Use go-cmp to compare test results&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;It will output the differences between the expected and actual values in a human-readable format.&lt;/li&gt;
&lt;li&gt;It can be used to compare for strict equality as well as with custom comparators.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="table-tests"&gt;Table tests&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Table tests are used to test a function with multiple inputs and outputs.&lt;/li&gt;
&lt;li&gt;Table-driven tests are idiomatic in Go.&lt;/li&gt;
&lt;li&gt;A slice of an anonymous struct is used to store the test cases.&lt;/li&gt;
&lt;li&gt;The test function iterates over the test cases and runs the test for each of them.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Given the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;adder&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;"testing"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;TestAdd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;testing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Table of test cases&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;tests&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kd"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;expected&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"Positive integers"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"Negative integers"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"Two zeros"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"Negative and positive"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"Two large integers"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;range&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;tests&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;testing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;expected&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Errorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Add(%d, %d) = %d; want %d"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;expected&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The output would look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;=== RUN   TestAdd
=== RUN   TestAdd/Positive_integers
--- PASS: TestAdd/Positive_integers (0.00s)
=== RUN   TestAdd/Negative_integers
--- PASS: TestAdd/Negative_integers (0.00s)
=== RUN   TestAdd/Two_zeros
--- PASS: TestAdd/Two_zeros (0.00s)
=== RUN   TestAdd/Negative_and_positive
--- PASS: TestAdd/Negative_and_positive (0.00s)
=== RUN   TestAdd/Two_large_integers
--- PASS: TestAdd/Two_large_integers (0.00s)
--- PASS: TestAdd (0.00s)
PASS
ok    github.com/{USER}/{PROJECT}/adder    0.368s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="checking-code-coverage"&gt;Checking code coverage&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;-cover&lt;/code&gt; flag can be used to check code coverage.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;go test -coverprofile=coverage.out&lt;/code&gt; is used to generate a coverage profile.&lt;/li&gt;
&lt;li&gt;Go ships with a very cool tool to visualize the coverage profile: &lt;code&gt;go tool cover -html=coverage.out&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="benchmarks"&gt;Benchmarks&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The built-in testing framework can be used to write benchmarks.&lt;/li&gt;
&lt;li&gt;Benchmarks are functions that start with &lt;code&gt;Benchmark&lt;/code&gt; and take a &lt;code&gt;*testing.B&lt;/code&gt; parameter.&lt;/li&gt;
&lt;li&gt;See &lt;a href="https://jvns.ca/blog/2017/09/24/profiling-go-with-pprof/"&gt;Profiling Go programs with pprof&lt;/a&gt; for more information on profiling Go programs.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="stubs"&gt;Stubs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;We can using function types and interfaces to create stubs.&lt;/li&gt;
&lt;li&gt;A test function can implement an interface and be passed to the function under test.&lt;/li&gt;
&lt;li&gt;A stub can be defined as a struct that implements the interface and has a field for each method of the interface. E.g., &lt;code&gt;type MathSolverStub struct {}&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;When testing larger interfaces, one can define a stub that implements only the methods required for the test.&lt;/li&gt;
&lt;li&gt;For mocks, use a mocking library such as &lt;a href="https://github.com/uber-go/mock"&gt;gomock&lt;/a&gt; or &lt;a href="https://github.com/stretchr/testify"&gt;testify&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="httptest"&gt;&lt;code&gt;httptest&lt;/code&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;httptest&lt;/code&gt; is used to test &lt;span class="caps"&gt;HTTP&lt;/span&gt; servers without having to start them.&lt;/li&gt;
&lt;li&gt;A complete, real-world example is provided in the &lt;a href="https://github.com/learning-go-book/test_examples"&gt;&lt;code&gt;test_examples&lt;/code&gt; repo&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="integration-tests-and-build-tags"&gt;Integration tests and build tags&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Integration tests are used to test the interaction between multiple components.&lt;/li&gt;
&lt;li&gt;A build tag is a comment that starts with &lt;code&gt;// +build&lt;/code&gt; and is followed by a tag name, found on the first line of a file.&lt;/li&gt;
&lt;li&gt;Files with no build tags are included in all builds.&lt;/li&gt;
&lt;li&gt;If a file has a build tag like &lt;code&gt;// +build integration&lt;/code&gt;, then it can be run with &lt;code&gt;go test -tags=integration -v ./...&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;To skip tests that take a long time to run, use &lt;code&gt;t.Skip&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;TestFileLen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;testing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;testing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Short&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Skip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"skipping test in short mode."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Skip it when testing in short mode&lt;/span&gt;
&lt;span class="c1"&gt;// go test -short -v ./...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="finding-concurrency-problems-with-the-race-checker"&gt;Finding concurrency problems with the race checker&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;em&gt;data race&lt;/em&gt; is still possible in Go with its built-in concurrency features if a lock hasn’t been acquired.&lt;/li&gt;
&lt;li&gt;Go comes with a race checker for just these cases: &lt;code&gt;go test -race&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Adding “sleep” statements is definitely not the correct approach.&lt;/li&gt;
&lt;li&gt;The race checker can also run after building a binary: &lt;code&gt;go build -race&lt;/code&gt;. This is useful to detect race condition issues for code that is not covered by tests.&lt;/li&gt;
&lt;li&gt;Note that the race checker makes the code about 10 times slower, so use it only when needed.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h1 id="chapter-14-here-there-be-dragons-reflect-unsafe-and-cgo"&gt;Chapter 14: Here There Be Dragons: Reflect, Unsafe, and Cgo&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Theses features are not used that often, but they are useful to know about.&lt;/li&gt;
&lt;li&gt;You cannot make make methods with reflection.&lt;/li&gt;
&lt;li&gt;It should only be used when there is no other way to do it.&lt;/li&gt;
&lt;li&gt;It may increase maintenance cost, because crashes can happen in production due to the lack of type safety (Java &lt;em&gt;cough&lt;/em&gt; Script &lt;em&gt;cough&lt;/em&gt;).&lt;/li&gt;
&lt;li&gt;This summary will only cover their starting point.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="reflection-to-work-with-types-at-runtime"&gt;Reflection to work with types at runtime&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;This can be used to work with data that didn’t exist at compile time.&lt;/li&gt;
&lt;li&gt;Use cases:&lt;/li&gt;
&lt;li&gt;Reading and writing from a database;&lt;/li&gt;
&lt;li&gt;Template engines;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fmt&lt;/code&gt; uses it heavily;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;errors&lt;/code&gt; uses it to implement &lt;code&gt;errors.Is&lt;/code&gt; and &lt;code&gt;errors.As&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sort&lt;/code&gt; uses it to sort slices of arbitrary types;&lt;/li&gt;
&lt;li&gt;Marshalling/unmarshalling &lt;span class="caps"&gt;JSON&lt;/span&gt; and &lt;span class="caps"&gt;XML&lt;/span&gt;;&lt;/li&gt;
&lt;li&gt;Comparing maps or slices for deep equality with &lt;code&gt;reflect.DeepEqual&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="types-kinds-and-values"&gt;Types, kinds, and values&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;A type is a description of a value’s structure and behavior.&lt;/li&gt;
&lt;li&gt;A kind is a description of a type’s behavior.&lt;/li&gt;
&lt;li&gt;A value is a representation of a type’s behavior.&lt;/li&gt;
&lt;li&gt;A type can have multiple kinds.&lt;/li&gt;
&lt;li&gt;A value can have multiple types.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reflect.TypeOf&lt;/code&gt; is used to get the type of a value.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reflect.Type&lt;/code&gt; is used to represent a type.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="making-new-values"&gt;Making new values&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;reflect.New&lt;/code&gt; is used to create a new value of a type (&lt;code&gt;reflect.Type&lt;/code&gt; as input, &lt;code&gt;reflect.Value&lt;/code&gt; as output).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="use-reflection-to-check-if-an-interfaces-value-is-nil"&gt;Use reflection to check if an interface’s value is &lt;code&gt;nil&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;IsValid&lt;/code&gt; is used to check if a value is valid (e.g., &lt;code&gt;iv := reflect.ValueOf(i)&lt;/code&gt;, &lt;code&gt;iv.IsValid()&lt;/code&gt;, &lt;code&gt;iv.IsNil()&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="use-reflection-to-write-a-data-marshaler"&gt;Use reflection to write a data marshaler&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;reflect.ValueOf&lt;/code&gt; is used to get the value of a field.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reflect.Type&lt;/code&gt; is used to get the type of a field.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reflect.StructField&lt;/code&gt; is used to get the field’s metadata.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reflect.StructTag&lt;/code&gt; is used to get the struct tag.&lt;/li&gt;
&lt;li&gt;There is a complete example of a &lt;span class="caps"&gt;CSV&lt;/span&gt; data marshaler &lt;a href="https://go.dev/play/p/3kwe7ag1i1C"&gt;on the Go Playground&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="build-functions-with-reflection-to-automate-repetitive-tasks"&gt;Build functions with reflection to automate repetitive tasks&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;reflect.MakeFunc&lt;/code&gt; is used to create a function.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reflect.ValueOf&lt;/code&gt; is used to get the value of a function.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reflect.TypeOf&lt;/code&gt; is used to get the type of a function.&lt;/li&gt;
&lt;li&gt;Reflection makes the program slower.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="you-can-build-structs-with-reflection-but-dont"&gt;You can build structs with reflection, but don’t&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;reflect.StructOf&lt;/code&gt; is used to create a struct.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="unsafe-is-unsafe"&gt;&lt;code&gt;unsafe&lt;/code&gt;… is unsafe&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;It allows manipulating memory directly.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Sizeof&lt;/code&gt; is used to get the size of a type (&lt;em&gt;“returns how many bytes it uses”&lt;/em&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Offsetof&lt;/code&gt; is used to get the offset of a field (&lt;em&gt;“returns the number of bytes from the start of the struct to the start of the field”&lt;/em&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Alignof&lt;/code&gt; is used to get the alignment of a field (&lt;em&gt;“returns the byte alignment it requires”&lt;/em&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unsafe.Pointer&lt;/code&gt; is used to convert a pointer to a pointer of a different type. Pointer arithmetic is possible just like in C or C++.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="use-unsafe-to-convert-external-binary-data"&gt;Use unsafe to convert external binary data&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;unsafe&lt;/code&gt; is used to convert external binary data.&lt;/li&gt;
&lt;li&gt;It can be use to gain performance when interacting with the system.&lt;/li&gt;
&lt;li&gt;It can speed up marshalling and unmarshalling (about twice as fast for simple structs).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="unsafe-strings-and-slices"&gt;unsafe strings and slices&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;reflect.StringHeader&lt;/code&gt; is used to get the header of a string.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="cgo-is-for-integration-not-performance"&gt;&lt;code&gt;cgo&lt;/code&gt; is for integration, not performance&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;It is best used to integrate with C libraries.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cgo&lt;/code&gt; is the &lt;span class="caps"&gt;FFI&lt;/span&gt; (foreign function interface) of Go.&lt;/li&gt;
&lt;li&gt;You can call C functions from Go… and even &lt;em&gt;Go functions from C&lt;/em&gt;!&lt;/li&gt;
&lt;li&gt;Garbage collection makes it hard to use &lt;code&gt;cgo&lt;/code&gt; for performance.&lt;/li&gt;
&lt;li&gt;Only use it when there’s no suitable Go library available.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h1 id="chapter-15-a-look-at-the-future-generics-in-go"&gt;Chapter 15: A Look at the Future: Generics in Go&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Go doesn’t convert types implicitly.&lt;/li&gt;
&lt;li&gt;For a gentle introduction to the topic, there is &lt;a href="https://go.dev/doc/tutorial/generics"&gt;Tutorial: Getting started with generics&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="generics-reduce-repetitive-code-and-increase-type-safety"&gt;Generics reduce repetitive code and increase type safety&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Generics are akin to “type parameters”.&lt;/li&gt;
&lt;li&gt;Without generics, Go has to use &lt;code&gt;interface{}&lt;/code&gt; and type assertions.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;any&lt;/code&gt; is used to represent any type.&lt;/li&gt;
&lt;li&gt;Generics allow specifying the type of a generic function’s parameters, such as &lt;code&gt;func Sum[T any](a, b T) T { return a + b }&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="use-type-lists-to-specify-operators"&gt;Use type lists to specify operators&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;A “type list” is a list of types.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;BuiltInOrdered&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;interface&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int64&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;float32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;float64&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kt"&gt;uint&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;uint8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;uint16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;uint32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;uint64&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;uintptr&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h1 id="salient-takeaways"&gt;Salient takeaways&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Go is a &lt;strong&gt;practical&lt;/strong&gt; language, valuing clarity of intent and readability (e.g., standard formatting is mandatory). It takes the best of other languages and leaves out the rest.&lt;/li&gt;
&lt;li&gt;Comprehensibility is more important than conciseness in idiomatic Go.&lt;/li&gt;
&lt;li&gt;Go is “&lt;em&gt;call by value&lt;/em&gt;“, meaning it makes copies of function parameters before passing them along.&lt;/li&gt;
&lt;li&gt;Deployment is a breeze: a single binary file.&lt;/li&gt;
&lt;li&gt;Go doesn’t have classes nor inheritance, but it has structs and interfaces.&lt;/li&gt;
&lt;li&gt;Professionals use error handling profusely to make their programs more robust.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h1 id="conclusion"&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;This book achieves its goal of teaching readers how to write idiomatic Go code that leverages the strengths of the language. It focuses on real-world examples and best practices to structure Go code, rather than just explaining language syntax. The book covers a wide range of topics including primitive types, control structures, composite types like arrays and maps, concurrency, reflection, testing, and more.&lt;/p&gt;
&lt;p&gt;We covered the key takeaways from each chapter, providing a broad overview of important concepts. While not a replacement for reading the book in its entirety, this summary may serve as a helpful reference guide on the subject. Whether you are just starting with Go or are looking to improve your skills, &lt;a href="https://www.oreilly.com/library/view/learning-go/9781492077206/"&gt;Learning Go&lt;/a&gt; is an invaluable resource and I highly recommend it!&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="resources-and-references"&gt;Resources and references&lt;/h1&gt;
&lt;h2 id="articles"&gt;Articles&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://link.springer.com/article/10.1007/s10664-017-9508-2"&gt;Evaluating code complexity triggers, use of complexity measures and the influence of code complexity on maintenance time&lt;/a&gt;, Springer&lt;/li&gt;
&lt;li&gt;&lt;a href="https://go.dev/blog/v2-go-modules"&gt;Go Modules: v2 and Beyond&lt;/a&gt;, go.dev&lt;/li&gt;
&lt;li&gt;&lt;a href="https://go.dev/doc/devel/release"&gt;Go Release History&lt;/a&gt;, go.dev&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)"&gt;Marshalling&lt;/a&gt;, Wikipedia&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jvns.ca/blog/2017/09/24/profiling-go-with-pprof/"&gt;Profiling Go programs with pprof&lt;/a&gt;, Julia Evans&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="books"&gt;Books&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.oreilly.com/library/view/concurrency-in-go/9781491941294/"&gt;Concurrency in Go&lt;/a&gt;, Katherine Cox-Buday, O’Reilly&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.oreilly.com/library/view/learning-go/9781492077206/"&gt;Learning Go&lt;/a&gt;, Jon Bodner, O’Reilly&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.oreilly.com/library/view/the-art-of/9780596802424/"&gt;The Art of Concurrency&lt;/a&gt;, Clay Breshears, O’Reilly&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.oreilly.com/library/view/the-go-programming/9780134190570/"&gt;The Go Programming Language&lt;/a&gt;, Alan &lt;span class="caps"&gt;A. A.&lt;/span&gt; Donovan and Brian W. Kernighan, Addison-Wesley Professional&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="documentation"&gt;Documentation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cs.opensource.google/go/go/+/refs/tags/go1.21.2:src/strconv/atof.go"&gt;&lt;code&gt;atof.go&lt;/code&gt;&lt;/a&gt;, cs.opensource.google&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pkg.go.dev/builtin"&gt;&lt;code&gt;builtin&lt;/code&gt; documentation&lt;/a&gt;, pkg.go.dev&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/golang/go/wiki/CodeReviewComments"&gt;CodeReviewComments&lt;/a&gt;, GitHub&lt;/li&gt;
&lt;li&gt;&lt;a href="https://go.dev/doc/effective_go"&gt;Effective Go&lt;/a&gt;, go.dev&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pkg.go.dev/golang.org/x/sync/errgroup"&gt;ErrGroup&lt;/a&gt;, pkg.go.dev&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gobyexample.com/"&gt;Go By Example&lt;/a&gt;, gobyexample.com&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/golang/go/wiki"&gt;Go Wiki&lt;/a&gt;, GitHub&lt;/li&gt;
&lt;li&gt;&lt;a href="https://go.dev/doc/code"&gt;How to Write Go Code&lt;/a&gt;, go.dev&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pkg.go.dev/std"&gt;Standard library documentation&lt;/a&gt;, pkg.go.dev&lt;/li&gt;
&lt;li&gt;&lt;a href="https://go.dev/ref/spec"&gt;The Go Programming Language Specification&lt;/a&gt;, go.dev&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="other-open-source-projects-referenced"&gt;Other open source projects referenced&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/justinas/alice"&gt;Alice&lt;/a&gt;, GitHub&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/go-chi/chi"&gt;Chi&lt;/a&gt;, GitHub&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/google/go-cmp"&gt;go-cmp&lt;/a&gt;, GitHub&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/gorilla/mux"&gt;Gorilla Mux&lt;/a&gt;, GitHub&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/learning-go-book"&gt;Learning Go: Code examples&lt;/a&gt;, GitHub&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/marwan-at-work/mod"&gt;Mod&lt;/a&gt;, GitHub&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="testing"&gt;Testing&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/uber-go/mock"&gt;gomock&lt;/a&gt;, GitHub&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jvns.ca/blog/2017/09/24/profiling-go-with-pprof/"&gt;Profiling Go programs with pprof&lt;/a&gt;, Julia Evans&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/learning-go-book/test_examples"&gt;&lt;code&gt;test_examples&lt;/code&gt; repo&lt;/a&gt;, GitHub&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pkg.go.dev/testing"&gt;&lt;code&gt;testing&lt;/code&gt; package&lt;/a&gt;, pkg.go.dev&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/stretchr/testify"&gt;testify&lt;/a&gt;, GitHub&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="videos"&gt;Videos&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=oL6JBUk6tj0"&gt;GopherCon 2018: Kat Zien - How Do You Structure Your Go Apps&lt;/a&gt;, YouTube&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=YHRO5WQGh0k"&gt;GopherCon 2018: Kavya Joshi - The Scheduler Saga&lt;/a&gt;, YouTube&lt;/li&gt;
&lt;/ul&gt;</content><category term="learnings"></category><category term="best practices"></category><category term="books"></category><category term="go"></category></entry><entry><title>Book summary: Refactoring UI</title><link href="https://www.sglavoie.com/posts/2023/09/09/book-summary-refactoring-ui/" rel="alternate"></link><published>2023-09-09T17:56:00-06:00</published><updated>2023-09-09T17:56:00-06:00</updated><author><name>Sébastien Lavoie</name></author><id>tag:www.sglavoie.com,2023-09-09:/posts/2023/09/09/book-summary-refactoring-ui/</id><summary type="html">&lt;p&gt;&lt;a href="https://www.refactoringui.com/"&gt;Refactoring &lt;span class="caps"&gt;UI&lt;/span&gt;&lt;/a&gt; provides guidance for non-designers on how to create polished, professional visual interfaces without formal graphic design&amp;nbsp;skills.&lt;/p&gt;</summary><content type="html">
&lt;hr/&gt;
&lt;h1 id="introduction"&gt;Introduction&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;It covers core principles like establishing consistent systems for recurring elements such as spacing and typography.&lt;/li&gt;
&lt;li&gt;It advises generous use of white space and thoughtful visual hierarchy.&lt;/li&gt;
&lt;li&gt;Steps for adding depth through lighting, shadows, and layers are outlined.&lt;/li&gt;
&lt;li&gt;Recommendations are provided for working with images and illustrations effectively.&lt;/li&gt;
&lt;li&gt;Tips on elevating default elements and breaking conventions to avoid typical, cookie-cutter designs are included.&lt;/li&gt;
&lt;li&gt;Studying other designers’ work and unintuitive decisions is encouraged to expand one’s skills.&lt;/li&gt;
&lt;li&gt;The goal is to equip readers with knowledge to thoughtfully craft interfaces that appear purposefully designed without simply mimicking common graphical tropes.&lt;/li&gt;
&lt;li&gt;By learning fundamental visual design concepts tailored to user interfaces, anyone can create clean, functional, and visually engaging digital experiences.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h1 id="starting-from-scratch"&gt;Starting from scratch&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Start with a feature, not a layout&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Design the shell and navigation later once you know what features you need.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Detail comes later&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Design with a big sharpie.&lt;/li&gt;
&lt;li&gt;Design in grayscale to use spacing, contrast and size to do the heavy lifting.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Don’t over-invest&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Go with low-fidelity sketches and wireframes first to move fast. Don’t get bogged down with details like fonts and colors early on.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Don’t design too much&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Work in cycles&lt;/strong&gt;: design a feature simply, build it, fix errors.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Be a pessimist&lt;/strong&gt;: expect it to be hard to build, and postpone building it (e.g., commenting system without attachments at first).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="choose-a-personality"&gt;Choose a personality&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Font choice&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Elegant/classic&lt;/em&gt;: serif&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Playful&lt;/em&gt;: Sans-serif&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Plain&lt;/em&gt;: neutral sans-serif&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Color&lt;ul&gt;
&lt;li&gt;Blue: safe and familiar, good overall pick.&lt;/li&gt;
&lt;li&gt;Gold: expensive, sophisticated.&lt;/li&gt;
&lt;li&gt;Pink: more fun, less serious.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Border radius&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Small&lt;/em&gt; — neutral, not much personality.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Large&lt;/em&gt; — more playful.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;None&lt;/em&gt; — more serious/formal.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Stay consistent&lt;/strong&gt; — either rounded or not, same everywhere.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Language&lt;ul&gt;
&lt;li&gt;Choose the right words for the desired tone.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Decide what you actually want&lt;ul&gt;
&lt;li&gt;Look at the websites your expected customers use? Serious, then that’s the feel. Playful? Then that.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="limit-your-choices"&gt;Limit your choices&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Define systems in advance&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Have a working palette color and limit yourself to it.&lt;/li&gt;
&lt;li&gt;Use a type scale to avoid picking specific font sizes.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Designing by process of elimination.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Systematize&lt;/strong&gt; as much as possible to avoid repetitive low-level decisions.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h1 id="hierarchy"&gt;Hierarchy&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Visual hierarchy refers to how elements appear in importance relative to one another.&lt;/li&gt;
&lt;li&gt;Don’t let &lt;span class="caps"&gt;HTML&lt;/span&gt; semantics dictate visual styling — style based on visual hierarchy.&lt;/li&gt;
&lt;li&gt;Size isn’t everything. Bold font communicates importance. &lt;em&gt;De-emphasize&lt;/em&gt; secondary/tertiary information to highlight the most important elements.&lt;/li&gt;
&lt;li&gt;Rely on &lt;em&gt;font weight&lt;/em&gt; and &lt;em&gt;color&lt;/em&gt;, not just font size, to create hierarchy.&lt;/li&gt;
&lt;li&gt;Limit yourself to &lt;em&gt;2-3 colors&lt;/em&gt; and font weights to define hierarchy.&lt;/li&gt;
&lt;li&gt;On colored backgrounds, pick a color with similar hue but lower saturation/lightness rather than just making text gray.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Avoid label&lt;/strong&gt;: value formats — use formats, context, and combined labels/values for clarity without labels.&lt;/li&gt;
&lt;li&gt;Treat labels as secondary content when needed — smaller, lower contrast, lighter weight.&lt;/li&gt;
&lt;li&gt;De-emphasize competing elements instead of just emphasizing the key element.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Combine labels and values&lt;/em&gt;: e.g., instead of “&lt;em&gt;In stock: 12&lt;/em&gt;“, use “&lt;em&gt;12 left in stock&lt;/em&gt;“.&lt;/li&gt;
&lt;li&gt;Treat labels as supporting content.&lt;/li&gt;
&lt;li&gt;Design buttons based on hierarchy, not just semantics. Primary/destructive actions don’t always need prominence.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h1 id="layout-and-spacing"&gt;Layout and spacing&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Start with too much white space&lt;/strong&gt;, then remove until happy — often ends up being “just enough”.&lt;/li&gt;
&lt;li&gt;Compact layouts have their place but should be a deliberate choice, not the default.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Establish a spacing and sizing system&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;A linear scale won’t work&lt;/li&gt;
&lt;li&gt;Create a constrained spacing/sizing system based on a base unit (like &lt;code&gt;16px&lt;/code&gt;) to work faster with more consistency.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Don’t feel the need to fill the whole screen&lt;/em&gt; — give elements only the space they need.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Grids are overrated&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Not all elements should be fluid&lt;/li&gt;
&lt;li&gt;Don’t shrink an element until you need to.&lt;/li&gt;
&lt;li&gt;Grids can bring order but don’t have to dictate every layout decision.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Balance layouts in columns&lt;/em&gt; instead of just making things wider.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Relative sizing doesn’t scale&lt;/em&gt;.&lt;ul&gt;
&lt;li&gt;Fix element widths when flexibility isn’t needed.&lt;/li&gt;
&lt;li&gt;Scale elements independently — don’t rely on relative units like &lt;code&gt;em&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Avoid ambiguous spacing&lt;/strong&gt;: increase spacing between groups and reduce spacing within groups to show relationships.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h1 id="text"&gt;Text&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Establish a constrained type scale&lt;/strong&gt; to speed up font size decisions and add consistency. Avoid strict modular scales.&lt;/li&gt;
&lt;li&gt;Use &lt;em&gt;pixel&lt;/em&gt; or &lt;code&gt;rem&lt;/code&gt; units — not &lt;code&gt;em&lt;/code&gt; — to guarantee sizes match the scale.&lt;/li&gt;
&lt;li&gt;For &lt;span class="caps"&gt;UI&lt;/span&gt; design, &lt;em&gt;pick scale values by hand&lt;/em&gt; instead of using a mathematical ratio.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Use high quality fonts&lt;/strong&gt; — safe bets are neutral sans-serifs and system fonts.&lt;/li&gt;
&lt;li&gt;Use the system stack if not sure: &lt;code&gt;-apple-system, Segoe UI, Roboto, Noto Sans, Ubuntu, Cantarell, Helvetica Neue;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Favor fonts with &lt;em&gt;5+ weights&lt;/em&gt; and optimized for legibility.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Keep line length between 45-75 characters&lt;/strong&gt; (20-35 &lt;code&gt;em&lt;/code&gt;) for optimal readability.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Align mixed font sizes by their baselines&lt;/strong&gt;, not centers.&lt;/li&gt;
&lt;li&gt;Use taller line-heights for small text and shorter line-heights for large text.&lt;/li&gt;
&lt;li&gt;Subtly emphasize links in UIs, no need for high contrast colors.&lt;/li&gt;
&lt;li&gt;Left align most text, right align numbers in tables. Justify only with hyphenation.&lt;/li&gt;
&lt;li&gt;Don’t center long form text.&lt;/li&gt;
&lt;li&gt;Tighten letter-spacing for headlines set in text faces. Loosen letter-spacing for all-caps.&lt;/li&gt;
&lt;li&gt;Not all links need to be emphasized boldly, especially in UIs where there is plenty of interactivity.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h1 id="colors"&gt;Colors&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;span class="caps"&gt;HSL&lt;/span&gt;&lt;/strong&gt; (&lt;em&gt;hue&lt;/em&gt;, &lt;em&gt;saturation&lt;/em&gt;, &lt;em&gt;lightness&lt;/em&gt;) is more intuitive to the human eye: use it instead of &lt;strong&gt;&lt;span class="caps"&gt;HEX&lt;/span&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;span class="caps"&gt;RGB&lt;/span&gt;&lt;/strong&gt;.&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Hue&lt;/em&gt; is the color position on the color wheel. 0° is red, 120° is green, and 240° is blue.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Saturation&lt;/em&gt; represents the vividness. 0% is grey while 100% is vibrant and intense.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Lightness&lt;/em&gt; measures how close a closer is to black (0%) or white (100%), where 50% is the pure color.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;span class="caps"&gt;HSL&lt;/span&gt;&lt;/strong&gt; is not the same as &lt;strong&gt;&lt;span class="caps"&gt;HSB&lt;/span&gt;&lt;/strong&gt; (&lt;code&gt;lightness != brightness&lt;/code&gt;). In &lt;strong&gt;&lt;span class="caps"&gt;HSB&lt;/span&gt;&lt;/strong&gt;, 0% brightness is always black but 100% brightness is white when saturation is set to 0%.&lt;ul&gt;
&lt;li&gt;With 100% saturation in both &lt;span class="caps"&gt;HSL&lt;/span&gt; and &lt;span class="caps"&gt;HSB&lt;/span&gt;, 100% brightness is equivalent to 50% lightness (pure color).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Don’t rely solely on color to convey information&lt;/em&gt; - support it with other indicators.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="a-good-color-palette"&gt;A good color palette&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;You need more colors than you think - aim for &lt;em&gt;10+ shades&lt;/em&gt; of &lt;em&gt;greys&lt;/em&gt;, &lt;em&gt;primary colors&lt;/em&gt;, and &lt;em&gt;accent colors&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Grey&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;There is a lot of grey in UIs: between &lt;em&gt;8-10 shades of grey&lt;/em&gt; is a good array of options to pick from. Use very dark grey instead of true black so it looks more natural.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Primary colors&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;em&gt;1 or 2 is great, with 5-10 different shades&lt;/em&gt; (e.g., Facebook is basically blue). A very light shade is good for a tinted background (e.g., alerts), darker shades work great for text.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Accent colors&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Use sparingly&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Needed to bring &lt;em&gt;semantic meaning&lt;/em&gt;, such as red for danger, yellow for warnings and green for positive trends.&lt;/li&gt;
&lt;li&gt;For a complex &lt;span class="caps"&gt;UI&lt;/span&gt;, can be as many as 10 different colors, each with 5-10 shades.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="building-a-color-palette"&gt;Building a color palette&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Define color shades upfront instead of generating on the fly. Pick base, darkest, lightest, then fill in gaps.&lt;/li&gt;
&lt;li&gt;Don’t rely purely on math to generate shades - trust your eyes and tweak if needed.&lt;/li&gt;
&lt;li&gt;Choose the base color first. This is the color in the middle that light and dark shades are derived from.&lt;/li&gt;
&lt;li&gt;Center: pick a shade that would work well as a button background.&lt;/li&gt;
&lt;li&gt;Extremes: pick the lightness color to work as a background and the darkest to work on top as text to get enough contrast.&lt;/li&gt;
&lt;li&gt;Repeat the process to pick the remaining colors in between. &lt;em&gt;9 shades is a good sweet spot as it divides cleanly&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;For grays, the base color doesn’t matter nearly as much: same process.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="perceived-brightness"&gt;Perceived brightness&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;In the &lt;span class="caps"&gt;HSL&lt;/span&gt; system, the further away a color is from 50% lightness, the more saturated it should be so it doesn’t look washed out.&lt;/li&gt;
&lt;li&gt;The perceived brightness of a color to the human eye can be calculated as follows:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="math"&gt;$$\frac{{\sqrt{0.299 r^2 + 0.587 g^2 + 0.114 b^2}}}{255}$$&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Green is perceived as more bright than red, which in turn is perceived as more bright than blue. With this data point, we can tweak the perceived brightness of a color by rotating the color wheel towards the desired perceived brightness.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Grays aren’t usually totally desaturated&lt;/em&gt;.&lt;ul&gt;
&lt;li&gt;To make them feel “&lt;em&gt;cool&lt;/em&gt;” saturate them with some blue.&lt;/li&gt;
&lt;li&gt;To make them feel “&lt;em&gt;warm&lt;/em&gt;“, saturate them with yellow or orange.&lt;/li&gt;
&lt;li&gt;The same “&lt;em&gt;saturation curve&lt;/em&gt;” applies to grays: the further away from 50% brightness, the more they should be saturated to avoid looking washed out.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="a-word-on-accessibility"&gt;A word on accessibility&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Instead of having elements like dark-colored pills with a white foreground color, flip the contrast by having light-colored pills with a dark version of the color in the foreground so they won’t grab too much attention.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Rotate the hue to make the color pop more&lt;/strong&gt;. For instance, instead of cranking up the lightness to meet ideal contrast ratios, rotate the hue and possibly keep the saturation high for a vibrant contrast.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Don’t rely on color alone&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Add visual cues (like arrows for upward/downward trends). Designing in grayscale first will help spot these kinds of issues.&lt;/li&gt;
&lt;li&gt;For things like a graph, playing with contrast will produce clearer results.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h1 id="depth"&gt;Depth&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Mimic how light works in the real world.&lt;ul&gt;
&lt;li&gt;Emulate a light source coming from above to make elements appear raised or inset.&lt;/li&gt;
&lt;li&gt;For instance, with a button, if light comes from above, then the top should be lighter (e.g., &lt;code&gt;box-shadow inset&lt;/code&gt;) than the bottom (&lt;code&gt;box-shadow&lt;/code&gt;, casting shadow only below).&lt;/li&gt;
&lt;li&gt;For elements that are “inset” (I.e., more depth in the center), the opposite effect should happen: more light reaches the bottom part (vertical &lt;code&gt;box-shadow&lt;/code&gt;, going up) than the top part (&lt;code&gt;box-shadow inset&lt;/code&gt; such that it casts some shadow towards the bottom).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Don’t overdo it&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="shadows"&gt;Shadows&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Use shadows to convey elevation&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;When something appears to be raised from the background (e.g., bigger &lt;code&gt;drop-shadow&lt;/code&gt;), &lt;em&gt;it attracts the user’s focus&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Small shadows&lt;/em&gt; are useful to attract attention to the primary action to be performed.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Medium shadows&lt;/em&gt; are useful for things like a dropdown so it looks separate from the background.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Large shadows&lt;/em&gt; are great for modals.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;5 options&lt;/em&gt; is usually plenty.&lt;/li&gt;
&lt;li&gt;Can be used for interactivity, like when dragging a row from a table.&lt;/li&gt;
&lt;li&gt;A button can feel like it’s being “pressed” by reducing its shadow on click (i.e., it gets closer to the page or farther away from the user).&lt;/li&gt;
&lt;li&gt;Casting shadows&lt;ul&gt;
&lt;li&gt;To simulate a shadow cast by &lt;em&gt;direct light&lt;/em&gt; (e.g., a long shadow behind a plant getting some sunlight), use a larger, more diffuse and subtle shadow.&lt;/li&gt;
&lt;li&gt;To simulate a shadow cast by &lt;em&gt;ambient light&lt;/em&gt; (e.g., the shadow right below the plant’s pot where light can’t hardly reach), use a narrow and darker shadow.&lt;/li&gt;
&lt;li&gt;Apply both types of shadow casting at once to create visually compelling effects.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Define a fixed set of shadows as an elevation system for consistency.&lt;/li&gt;
&lt;li&gt;Even flat designs can have depth&lt;ul&gt;
&lt;li&gt;Flat design does not convey depth with shadows and gradients.&lt;/li&gt;
&lt;li&gt;Create depth with color: lighter colors feel closer.&lt;/li&gt;
&lt;li&gt;Can use short, offset shadows with no blur at all.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Overlap elements to create layers&lt;ul&gt;
&lt;li&gt;E.g., position a block with a negative margin so it appears on top of two different sections.&lt;/li&gt;
&lt;li&gt;For smaller elements like avatars, an invisible border around it can make it pop better.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h1 id="images-and-contrast"&gt;Images and contrast&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Images&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Use high quality photos&lt;/em&gt; - hire a pro or use stock sites for generics. Don’t expect good results from phone pics.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Text needs consistent contrast&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Add an overlay to background images to get readable headlines.&lt;/li&gt;
&lt;li&gt;Lower the image contrast. Adjust the brightness to compensate.&lt;/li&gt;
&lt;li&gt;Colorize the image with a single color.&lt;/li&gt;
&lt;li&gt;Use text shadows instead of overlays to preserve image dynamics.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h1 id="scale"&gt;Scale&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Don’t scale up icons&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Even for SVGs, they will lack detail if they were designed correctly at a smaller scale: use a more detailed icon instead.&lt;/li&gt;
&lt;li&gt;If updating the icon is not an option, enclose it inside another shape (e.g., a circle with a background color) to occupy more space.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Don’t scale down screenshots&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Details will be distorted and hard to read.&lt;/li&gt;
&lt;li&gt;Either use a presentation from a smaller device (e.g., the tablet version on a desktop) or take a partial screenshot (e.g., “zoom in” effect with a circle or simply crop the original image).&lt;/li&gt;
&lt;li&gt;If a more complex &lt;span class="caps"&gt;UI&lt;/span&gt; needs to be presented, simplify the original image so the user doesn’t try to read a 4px font size but instead sees simpler shapes.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Don’t scale down icons&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;E.g. for a favicon, redraw a simplified version instead: details will look fuzzy at a small size.&lt;/li&gt;
&lt;li&gt;User-submitted content (e.g., Instagram feed)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Control the size and shape&lt;/em&gt;: crop images to keep the aspect ratio of containers  so they don’t disturb layout (e.g., background-size: cover).&lt;/li&gt;
&lt;li&gt;Add inner shadows or borders to user images to prevent background bleed.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h1 id="finishing-touches"&gt;Finishing touches&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Use icons instead of bullets in a bulleted list.&lt;/li&gt;
&lt;li&gt;Play with size and colors. E.g., you can have huge quotes around the block of text representing a testimonial.&lt;/li&gt;
&lt;li&gt;Links deserve special styling.&lt;/li&gt;
&lt;li&gt;Use custom checkboxes and radio buttons in forms: integrate the brand’s primary color(s).&lt;/li&gt;
&lt;li&gt;Add color with accent borders, e.g. across the top of a card element, when highlighting active elements in the &lt;span class="caps"&gt;UI&lt;/span&gt; or to the left of alert messages.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Decorate backgrounds&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;Change the background color. Works great for different page sections.&lt;/li&gt;
&lt;li&gt;Can use gradients: use two hues that are within 30˚ of each other.&lt;/li&gt;
&lt;li&gt;Use repeating patterns.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Consider the empty state carefully&lt;/strong&gt;, especially when the user is meant to fill the &lt;span class="caps"&gt;UI&lt;/span&gt; with data.&lt;ul&gt;
&lt;li&gt;Prioritize empty states with illustrations and clear calls to action.&lt;/li&gt;
&lt;li&gt;I.e., a contact page with no contacts should feel welcoming, with some icon and button to add a contact instead of a blank page with an error-like statement.&lt;/li&gt;
&lt;li&gt;Similarly, things like dashboard may present a bunch of options that won’t apply until there is something to show: simplify the user experience.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Use less borders&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Use box shadows, spacing, and color instead of borders to distinguish elements.&lt;/li&gt;
&lt;li&gt;Have two background colors for containers (e.g., darker footer that looks separate from the main content).&lt;/li&gt;
&lt;li&gt;Replace borders with additional spacing.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Make components more exciting&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;E.g., a table  may not need all its columns if a particular column does not need to be sorted and could instead be part of another one (e.g., combining a dollar amount with a plan type or a person’s name with its title).&lt;/li&gt;
&lt;li&gt;Radio buttons could be cards instead if they are an important part of the &lt;span class="caps"&gt;UI&lt;/span&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h1 id="next-level"&gt;Next level&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Look for unintuitive decisions in designs you admire to find new ideas.&lt;/li&gt;
&lt;li&gt;Rebuild interfaces you love to discover small details that make them exceptional.&lt;/li&gt;
&lt;li&gt;Study others to build a solid foundation.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h1 id="conclusion"&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;The concepts covered in this book demonstrate that effective visual design does not require innate artistic talent or formal training. By approaching interfaces methodically, establishing constraints through systems for recurring elements, and learning to strategically apply principles like visual hierarchy, white space, and depth cues, anyone can create designs that appear polished and purposeful. While internalizing these fundamentals does take practice, the ideas presented remove much of the subjective, nuanced expertise needed for things like picking complementary colors or balancing composition in illustrations.&lt;/p&gt;
&lt;p&gt;By focusing on interfaces rather than free-form graphical work, the required skills become more structured and intentional choices drive outcomes. While studying formally can provide more breadth, the core principles in this text are enough to equip non-designers with the ability to build clean, intuitive, and aesthetically pleasing digital products. By implementing the recommendations covered, engineers and others new to design can gain confidence in their interface design skills. A great, concise read!&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: '#007bff ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="learnings"></category><category term="best practices"></category><category term="books"></category><category term="design"></category><category term="refactoring"></category><category term="ui"></category></entry><entry><title>Building a task planner with React Native: an academic journey</title><link href="https://www.sglavoie.com/posts/2023/07/30/building-task-planner-react-native/" rel="alternate"></link><published>2023-07-30T18:44:00-06:00</published><updated>2023-07-30T18:44:00-06:00</updated><author><name>Sébastien Lavoie</name></author><id>tag:www.sglavoie.com,2023-07-30:/posts/2023/07/30/building-task-planner-react-native/</id><summary type="html">&lt;p&gt;After having &lt;a href="https://www.sglavoie.com/posts/2023/03/04/reviewing-the-process-of-building-a-first-React-Native-application/"&gt;built a somewhat original habit tracker&lt;/a&gt;, I was keen on coming up with a solution to a much more common problem: task management. This is the story of how I built a task planner with React Native, explored from an academic perspective first and&amp;nbsp;foremost.&lt;/p&gt;</summary><content type="html">
&lt;hr/&gt;
&lt;h1 id="preamble"&gt;Preamble&lt;/h1&gt;
&lt;p&gt;For my last assignment in a &lt;a href="https://www.london.ac.uk/courses/computer-science"&gt;BSc in Computer Science at the University of London&lt;/a&gt;, I decided to get involved in the world of task management to tackle one of the most common challenges usually offered to programmers, but with a twist based on scientific evidence. The result ended up being a cross-platform mobile application built with React Native, named ProductiviDo. Due to intellectual property concerns, I will not be able to share the source code of the application, but I hope you will nonetheless find joy in reading about the process of building it through the lens of the report I submitted for the assignment. For a complete list of references and appendices in context, please refer to &lt;a href="https://www.sglavoie.com/files/posts/0039_productivido/productivido.pdf"&gt;the original report&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="App icon ProductiviDo" src="https://www.sglavoie.com/images/posts/0039_productivido/app_icon.png"/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="1-introduction"&gt;1 Introduction&lt;/h1&gt;
&lt;p&gt;The world needs a new kind of task manager, just like &lt;strong&gt;ProductiviDo&lt;/strong&gt;, which comes to life through the “&lt;em&gt;task manager mobile app&lt;/em&gt;” template provided for the Mobile Development module taught at Goldsmiths, University of London.&lt;/p&gt;
&lt;h2 id="11-inspiration-the-main-contenders"&gt;1.1 Inspiration: the main contenders&lt;/h2&gt;
&lt;figure&gt;
&lt;a href="https://www.sglavoie.com/images/posts/0039_productivido/inspiration.png"&gt;&lt;img alt="inpiration main contenders" class="max-size-img-post" src="https://www.sglavoie.com/images/posts/0039_productivido/inspiration.png"/&gt;&lt;/a&gt;
&lt;figcaption&gt;Inspiration.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;There are a few wonderful products that deliver a good experience. Desirable features range from filters, labels and reminders to custom views and breadcrumbs. With &lt;strong&gt;Todoist&lt;/strong&gt;, tasks can be quickly captured and will be added to an “&lt;em&gt;Inbox&lt;/em&gt;” section. Once categorized, tasks are organized into projects, sections and sub-tasks.&lt;/p&gt;
&lt;p&gt;Although &lt;strong&gt;Todoist&lt;/strong&gt; recently added a board view, &lt;strong&gt;ClickUp&lt;/strong&gt; takes it to the next level by labelling columns. In &lt;strong&gt;ClickUp&lt;/strong&gt;, tasks are organized into multiple levels of hierarchies, down to task dependency, where sub-tasks depend on parent tasks.&lt;/p&gt;
&lt;figure&gt;
&lt;a href="https://www.sglavoie.com/images/posts/0039_productivido/clickup-overview.png"&gt;&lt;img alt="clickup overview" class="max-size-img-post" src="https://www.sglavoie.com/images/posts/0039_productivido/clickup-overview.png"/&gt;&lt;/a&gt;
&lt;figcaption&gt;ClickUp overview.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Trello&lt;/strong&gt; takes an entirely different approach, where planning happens by moving cards onto different columns horizontally and re-ordering them vertically. Even though it has a concept of workspaces which is a group of boards, all the organization of a project usually takes place within a single board which contains multiple columns, each containing multiple cards.&lt;/p&gt;
&lt;p&gt;Planning in &lt;strong&gt;Airtable&lt;/strong&gt; is much more freestyle with a spreadsheet-like system. There is a Gantt view in the paid plan to visualize tasks over time. Using &lt;strong&gt;Airtable&lt;/strong&gt; feels like interacting directly with a &lt;span class="caps"&gt;SQL&lt;/span&gt; database with its heavily grid-focused appearance.&lt;/p&gt;
&lt;figure&gt;
&lt;a href="https://www.sglavoie.com/images/posts/0039_productivido/airtable-project.png"&gt;&lt;img alt="airtable project" src="https://www.sglavoie.com/images/posts/0039_productivido/airtable-project.png" style="max-width: 500px"/&gt;&lt;/a&gt;
&lt;figcaption&gt;Airtable project.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Finally, &lt;strong&gt;Asana&lt;/strong&gt; shines mostly within a team setting and mainly works with the core concept of projects, which themselves can contain tasks, sub-tasks and even sub-projects.&lt;/p&gt;
&lt;figure&gt;
&lt;a href="https://www.sglavoie.com/images/posts/0039_productivido/asana-calendar.png"&gt;&lt;img alt="asana calendar" src="https://www.sglavoie.com/images/posts/0039_productivido/asana-calendar.png" style="max-width: 500px"/&gt;&lt;/a&gt;
&lt;figcaption&gt;Asana calendar.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="12-drawbacks-of-existing-solutions"&gt;1.2 Drawbacks of existing solutions&lt;/h2&gt;
&lt;figure&gt;
&lt;a href="https://www.sglavoie.com/images/posts/0039_productivido/drawbacks.png"&gt;&lt;img alt="drawbacks main contenders" class="max-size-img-post" src="https://www.sglavoie.com/images/posts/0039_productivido/drawbacks.png"/&gt;&lt;/a&gt;
&lt;figcaption&gt;Drawbacks.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;There are usability issues across all these mobile apps (and others) for different reasons. Most popular task managers have a limited search functionality, making it hard to find what one needs quickly unless a good organizational system has been consciously put in place beforehand. Crucially, such applications do not address the fact that unimportant tasks accumulate over time and provide no system to focus on what matters to avoid the fate of having “&lt;em&gt;41% of to-do items […] never completed&lt;/em&gt;“.&lt;/p&gt;
&lt;p&gt;A second point worth mentioning is that a calendar integration is not a core feature deeply integrated into these apps. For instance, &lt;strong&gt;Todoist&lt;/strong&gt; offers a 2-way sync with Google Calendar, but tags, labels, priorities and areas of responsibilities are not shown nor taken into account in the calendar. Some task managers will provide their own built-in set of calendar features that partially solve the problem of being able to navigate a complete schedule in a breeze. However, none of these applications really allow efficient scheduling within the calendar. Some allow the user to add or modify events in the calendar, but this remains a slow process working with reduced functionality.&lt;/p&gt;
&lt;p&gt;With regards to organization, all these applications are well-suited to manage tasks but when it comes to “&lt;em&gt;time boxing&lt;/em&gt;” or “&lt;em&gt;time blocking&lt;/em&gt;“, they will show every single task in the calendar view. This is impractical at scale as it quickly becomes overwhelming with dense information, a setup encouraging fragmented work and multitasking. Fragmented work caused by context switching has been shown to have a negative impact on productivity and on output quality while multitasking will lead to “&lt;em&gt;experiencing more stress, higher frustration, time pressure and effort&lt;/em&gt;“.&lt;/p&gt;
&lt;h2 id="13-market-overview"&gt;1.3 Market overview&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;ProductiviDo&lt;/strong&gt; will target in its first iteration Google Calendar because this product can be consumed from a plethora of desktop and mobile applications and there are about 4.3 billion Google users. Once data is integrated into Google Calendar, it can be consumed by different applications such as Apple Calendar, Zoom, Slack or other Google products, including Google Docs.&lt;/p&gt;
&lt;p&gt;The number of smartphone users will increase by almost 23% over the next 5 years, forecasting more than a doubling over a 10-year period (2016–2026). Task management software is going upwards of &lt;span class="caps"&gt;USD&lt;/span&gt;$5 billion in market size, the &lt;span class="caps"&gt;CAGR&lt;/span&gt; —&lt;em&gt;compound annual growth rate&lt;/em&gt;— is hovering around 14% and continuously growing. Combining supply and demand, we can see that both are expected to increase drastically over the coming years and that task managers fall into a category of growth market, which is desirable as it clearly indicates there is room for new rivals in the field: this is distinctly the case given that the task management world is still dominated by a few big players, many products have retired over the years (which unsaturates the market) and considering that &lt;strong&gt;ProductiviDo&lt;/strong&gt; solves a real problem —that of staying on top of a growing list of commitments— with an innovative solution not yet implemented elsewhere.&lt;/p&gt;
&lt;h2 id="14-motivation"&gt;1.4 Motivation&lt;/h2&gt;
&lt;p&gt;One reason why &lt;strong&gt;ProductiviDo&lt;/strong&gt; will shine is because calendars are still under-appreciated in existing task managers, yet all major task manager applications integrate them in one way or another. It has been shown through many studies that calendars save time, improve productivity, reduce stress and make it simpler to batch similar activities. Plus, they can be consumed in a myriad of ways with their Application Programming Interfaces (APIs). The problem with using only a calendar without a task manager is that they are inconvenient when dealing with many events or tasks. On the other hand, relying only on task managers makes it difficult to appreciate how useful calendars are when it comes to visualizing one’s schedule from different perspectives such as a weekly or monthly view. Regarding &lt;strong&gt;ProductiviDo&lt;/strong&gt; as a task manager and not only a calendar integration, it will distinguish itself by allowing users to quickly and efficiently record their routine activities. This is because it has been shown that these occupy a good amount of time even for productive people and there is currently no application that really implements a direct solution to this.&lt;/p&gt;
&lt;p&gt;Intelligent prioritization is essential, yet difficult to achieve with existing products. Beyond capturing tasks and categorizing them, this application will feature a prioritization system that will help users focus on their most high-leverage activities with the help of custom sorting algorithms as advocated by Edmond Lau in his book &lt;em&gt;The Effective Engineer&lt;/em&gt;. These will take into consideration aspects such as urgency and importance — in the spirit of the Eisenhower Matrix — as well as deadlines to calculate the impact that completing a task will have. Importantly, the priority matrix is adapted to account for other needed facets, such as when other people are involved in the task dependency chain (delegatees), an adaptation of the “&lt;em&gt;fit&lt;/em&gt;” variable from the Sung Diagram, which is an extension of the Eisenhower Matrix.&lt;/p&gt;
&lt;p&gt;The application will benefit users by providing a built-in planning system that will make it easier to follow a successful schedule. This goes hand in hand with findings illustrating how, in the absence of a mindful review process, users will want to focus on small or unimportant tasks to release dopamine even though they know what would bring them the best outcomes, a real productivity threat leading to a decrease in output and an increase in completion time. Therefore, by offering a system that will encourage users to take better decisions and visualize evidently their highest-leverage tasks in a familiar and useful fashion, &lt;strong&gt;ProductiviDo&lt;/strong&gt; will carve its place in the market by solving unmet needs.&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="2-literature-review"&gt;2 Literature review&lt;/h1&gt;
&lt;h2 id="21-previous-work"&gt;2.1 Previous work&lt;/h2&gt;
&lt;p&gt;As alluded to in section 1.1, the current work found inspiration in well-established task management software. There are numerous alternatives available on the market: only the most well-known and relevant ones for this project will be covered. Evaluating such products in depth goes beyond the scope of this report: key points will be highlighted to justify the need for a new solution.&lt;/p&gt;
&lt;h2 id="211-todoist"&gt;2.1.1 Todoist&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Todoist&lt;/strong&gt; is one of the most popular task management software, with over 20 million users. It is a web-based application that allows users to create tasks, organize them into projects, and assign them to specific dates. It also features a priority system that allows users to sort tasks by importance, and a reminder system that will notify users of upcoming tasks. While &lt;strong&gt;Todoist&lt;/strong&gt; is a very popular solution, it has some shortcomings. Its design is arguably polished, yet its dark theme lacks contrast, recurring tasks don’t show immediately on which schedule they recur and tasks with comments or attachments are difficult to locate. Other functional deficiencies include the fact that the “Upcoming” view shows all tasks from all projects as a large, single list of items without allowing filtering or that the app has a concept of “due date” with no “start date” such that duration is not taken into account nor can be visually represented meaningfully in a calendar. Equally relevant when comparing to what &lt;strong&gt;ProductiviDo&lt;/strong&gt; will offer is the fact that there is no way to apply “time boxing” as there is no calendar view and only a functionally limited Google Calendar integration, task filtering is not intuitive due to the custom query language syntax used by the app and there is no easy way to find recurring or routine tasks without setting up a custom labelling system on one’s own.&lt;/p&gt;
&lt;figure&gt;
&lt;a href="https://www.sglavoie.com/images/posts/0039_productivido/todoist-upcoming-view.png"&gt;&lt;img alt="todoist upcoming view" src="https://www.sglavoie.com/images/posts/0039_productivido/todoist-upcoming-view.png" style="max-width: 500px"/&gt;&lt;/a&gt;
&lt;figcaption&gt;Todoist upcoming view.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="212-trello"&gt;2.1.2 Trello&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Trello&lt;/strong&gt; lies on the other end of the feature creep spectrum when compared to &lt;strong&gt;ClickUp&lt;/strong&gt; and can be seen as possessing an even more basic set of capabilities than &lt;strong&gt;Todoist&lt;/strong&gt;. With its simple and uncluttered drag &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; drop interface, &lt;strong&gt;Trello&lt;/strong&gt; is much more intuitive than a more sophisticated and flexible option such as &lt;code&gt;Todo.txt&lt;/code&gt; which can be technically extended at will and can be operated from the command-line on a desktop computer or from a multitude of third-party applications on mobile devices. &lt;strong&gt;Trello&lt;/strong&gt;‘s simplicity comes at a cost, however: it is not uncommon to lose track of “cards” because one must swipe horizontally in order to navigate the &lt;span class="caps"&gt;UI&lt;/span&gt;; and very little information fits on the screen at once, where only a fraction of a “board” with up to a few “cards” is shown. There is a copious amount of calendar integrations available for &lt;strong&gt;Trello&lt;/strong&gt;, yet the core of the issue that &lt;strong&gt;ProductiviDo&lt;/strong&gt; aims to address remains unsolved: the app’s metadata is not accessible from Google Calendar (e.g., priority, area of work, task status, etc.) and the app does not provide a way to visualize the user’s tasks in a convenient calendar view as it only “&lt;em&gt;displays all cards with due dates by month&lt;/em&gt;” and only when using one of its paid feature, called “Power Ups”.&lt;/p&gt;
&lt;figure&gt;
&lt;a href="https://www.sglavoie.com/images/posts/0039_productivido/trello-boards.png"&gt;&lt;img alt="trello boards" src="https://www.sglavoie.com/images/posts/0039_productivido/trello-boards.png" style="max-width: 500px"/&gt;&lt;/a&gt;
&lt;figcaption&gt;Trello boards.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="22-contributions-from-the-literature-and-gaps-being-filled"&gt;2.2 Contributions from the literature and gaps being filled&lt;/h2&gt;
&lt;h3 id="221-initial-design-justifications"&gt;2.2.1 Initial design justifications&lt;/h3&gt;
&lt;p&gt;Amongst a panoply of scientific papers on the subject of task management, the quintessential work of Bellotti et al. serves as an excellent entrypoint listing a set of design requirements to be expected in an efficiently conceived task manager. Of particular relevance to the creation of &lt;strong&gt;ProductiviDo&lt;/strong&gt; are the needs for the app to be “&lt;em&gt;instantly on&lt;/em&gt;” with the option to have “&lt;em&gt;no formal task description&lt;/em&gt;” and a “&lt;em&gt;mechanism for handling stale to-dos of low importance&lt;/em&gt;“. The authors highlight that the main issue is “&lt;em&gt;making sure that the important tasks get done&lt;/em&gt;“, which led to further research being exposed on the topic of prioritization matrices. The authors also advocate for task states, location, social relations, notes and time constraints to be captured, all of which are taken into account in the design. In a more recent study looking at the importance of prioritizing tasks, further evidence suggested that a prioritization model should be adopted (e.g., &lt;span class="caps"&gt;HI&lt;/span&gt;/&lt;span class="caps"&gt;LO&lt;/span&gt;, &lt;span class="caps"&gt;CARVER&lt;/span&gt; or Carpenter) in a task management system, pointing at the Eisenhower Matrix as a useful framework to use for this very purpose. Other less formal alternatives such as the &lt;span class="caps"&gt;RICE&lt;/span&gt; or &lt;span class="caps"&gt;ICE&lt;/span&gt; frameworks have also been reported to be used with success and could be adapted to this project with their scoring model.&lt;/p&gt;
&lt;p&gt;Another aspect which served to inform the overall direction to take is the well-known fact that humans do not work optimally when multi-tasking as this leads to a high cognitive load in keeping track of different areas of focus or projects. Fragmentation of information in one’s work —which occurs when multitasking— is a problem because people won’t remember where to find the information. Applying this idea of fragmentation to the digital world, it only makes sense that offering too many ways to store and retrieve data (such as with &lt;strong&gt;ClickUp&lt;/strong&gt;) is counterproductive. Furthermore, the ability to customize the &lt;span class="caps"&gt;UI&lt;/span&gt; is a double-edged sword because “&lt;em&gt;users make mistakes and create building blocks with unintended consequences&lt;/em&gt;“. Indeed, if the user interface is cluttered or offers too many bells and whistles, managing the global context of one’s tasks becomes difficult and one inevitably encounters obstacles when trying to juggle with multiple actions at once, because “&lt;em&gt;prospective memory is fallible&lt;/em&gt;“. Hence, simplicity is key to a good task manager (which certainly helps to explain &lt;strong&gt;Todoist&lt;/strong&gt;‘s wild success). While simplification is part of the gamified model —Habitica being one example of a product incorporating many elements of gamification— this model suffers from the “&lt;em&gt;undifferentiated use of rewards&lt;/em&gt;“, leads to “&lt;em&gt;punishments for productivity&lt;/em&gt;“, to “&lt;em&gt;feeling of not being taken seriously&lt;/em&gt;” and cause “&lt;em&gt;negative anticipation&lt;/em&gt;“. Moreover, “&lt;em&gt;people found their standard task manager simpler to use&lt;/em&gt;” and the integration of extrinsic motivational factors such as a reward system “&lt;em&gt;would not excite them to continue being immersed in a gamification application&lt;/em&gt;“. While this form of motivation does not appear to be effective in goal attainment, the literature concludes that “&lt;em&gt;valuing extrinsic goals […] does not seem to increase our happiness, but attaining those goals does&lt;/em&gt;“, adding that giving weight to intrinsic goals (such as personal growth, loving relationships and physical health) and achieving them is a better way to increase happiness. As long as a task manager nourishes intrinsic motivation, it is likely to be effective in helping people to achieve their goals while maintaining optimal psychological health.&lt;/p&gt;
&lt;p&gt;Other approaches were considered, notably the “&lt;em&gt;Binary Priority List&lt;/em&gt;” due to its simplicity when it comes to comparing two elements (such as tasks). However, it lacks flexibility and becomes inefficient as more and more tasks are added because —unlike the famous binary search algorithm— this algorithm requires human intervention to classify tasks, which becomes burdensome faster than &lt;code&gt;O(log n)&lt;/code&gt;. The literature on gamification also linked to sources that revealed solutions to solving procrastination, a self-regulation failure that gamified systems sought to minimize to no avail, which led to identifying a desirable core component of the application: implementation intentions. These can be integrated into the “mental flexibility” facet of “planfulness” —through a technique known as “mental contrasting with implementation intentions” (&lt;span class="caps"&gt;MCII&lt;/span&gt;)— along with temporal orientation and cognitive strategies, all of which improve goal outcomes.&lt;/p&gt;
&lt;h3 id="222-implementation-intentions"&gt;2.2.2 Implementation intentions&lt;/h3&gt;
&lt;p&gt;Implementation intentions have shown their effectiveness in helping people to achieve their goals, the real purpose behind using task managers in the first place. The idea is to create a plan of action for a specific goal, which is then followed by a specific time and place. The plan must be broken down into a series of steps, which are written down in a way that is easy to remember using so-called “if–then plans”. The specific formulation of such plans “&lt;em&gt;produce much more favorable and reliable outcomes than broad intentions to pursue a goal&lt;/em&gt;“. Findings from Bieleke et al. show that implementation intentions are also useful when planning one’s work because they help “&lt;em&gt;evaluate information from a certain perspective&lt;/em&gt;” —which can be verbally recommended to users so they adopt a “&lt;em&gt;certain processing style (e.g., deliberative thought) or perspective (e.g., neutral observer)&lt;/em&gt;“. Their research also highlight the high potential of implementation intentions in reviewing tasks because “&lt;em&gt;participants can strategically adopt a reflective mode of information processing that helps them make more sophisticated decisions when facing uncertainty&lt;/em&gt;“. Other studies show that such “&lt;em&gt;plans to deliberate can be used to increase the likelihood of deliberation and thereby the effective processing of newly available information&lt;/em&gt;“, which further supports the benefits of implementation intentions with regards to planning. To make the planning stage more effective, research also “&lt;em&gt;indicates that having plans that focus on overcoming obstacles are important for maintaining progress and staying on track with one’s goals&lt;/em&gt;“, so this aspect will also be featured when creating tasks in the &lt;strong&gt;“Inscribe”&lt;/strong&gt; step described in section 2.3.1. Once planning has been done, implementation intentions will also prove useful to take action towards accomplishing one’s goals because they lead to “&lt;em&gt;automatic action initiation without further conscious intent&lt;/em&gt;” —surprisingly and encouragingly, even in participants suffering from mild to moderate depression. While this is obviously beneficial during the initial stages of a project or task to overcome procrastination, it is equally important to re-evaluate one’s course of action because sticking to a plan stubbornly “&lt;em&gt;can hinder overall goal performance by causing one to overlook alternative opportunities for achievement&lt;/em&gt;“, amongst other negative consequences. This explains why &lt;strong&gt;ProductiviDo&lt;/strong&gt; encompasses a &lt;strong&gt;“Review”&lt;/strong&gt; step which deals with this particular problem and more, described in section 2.3.4.&lt;/p&gt;
&lt;p&gt;While this self-regulation technique can be applied successfully in the context of a task manager, it bears mentioning that it is not a panacea as it suffers from some limitations, one of which being that “&lt;em&gt;formulating multiple implementation intentions is ineffective when changing unwanted behavior […] due to interference in the enacting phase of the planning process&lt;/em&gt;“. In other words, multiple implementation intentions can compete for attention, which makes one lose focus. To drastically mitigate this issue, &lt;strong&gt;ProductiviDo&lt;/strong&gt; dedicates an entire step to &lt;strong&gt;“Focus”&lt;/strong&gt;, which is described in more detail in section 2.3.3. The &lt;strong&gt;“Review”&lt;/strong&gt; step will help with reducing the number of tasks one has to juggle with while there will be a &lt;strong&gt;“Prioritize”&lt;/strong&gt; step (described in section 2.3.2) to help users decide which tasks to focus on before they get conveniently extracted in the &lt;strong&gt;“Focus”&lt;/strong&gt; step.&lt;/p&gt;
&lt;h3 id="223-calendars-planning-scheduling"&gt;2.2.3 Calendars, planning &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; scheduling&lt;/h3&gt;
&lt;p&gt;Section 1.4 introduced some of the core benefits of using calendars for planning and scheduling, yet scientific examination supplies a treasure trove of additional findings justifying their use alongside a task manager. A study exploring the use of a personal calendar discovered that most interviewees prefer a weekly view to aid with “&lt;em&gt;opportunistic rehearsal&lt;/em&gt;“, a fact that sits well with the need for a reviewing system such as the one proposed in section 2.3.4 as well as the realization that a simple list or Kanban presentation is helpful but not sufficient to get a clear overview of one’s schedule at a glance. The same study made it clear that most users rely on their calendar to store efficiently certain types of information such as the date (97%), time (96%), location (93%) and purpose (69%). Quite convincingly, participants also used their calendar for “&lt;em&gt;tentative event scheduling&lt;/em&gt;“, revealing the need to empty their mind to stay on top of their duties, a need addressed with the &lt;strong&gt;“Inscribe”&lt;/strong&gt; step referred to earlier. This study also emphasized the fact that calendars can be viewed on the web from most devices or even printed for offline reference. Finally, this paper also found that a majority of users (63%) reported using reminders and alarms with the help of their calendar.&lt;/p&gt;
&lt;p&gt;Even though almost two thirds of working professional consider using a calendar application to be very important in their workflow, it was also found in another study that “&lt;em&gt;it is inconvenient to schedule on calendar apps&lt;/em&gt;“, which supports the use of task managers for that specific necessity since they can alter tasks brilliantly and speedily. Calendars are not necessarily the best tactic when it comes to scheduling all kinds of activities either. Indeed, “&lt;em&gt;when consumers schedule their leisure, they may inadvertently reduce their utility for the activity&lt;/em&gt;“. With this type of activity, the authors divulge that “&lt;em&gt;roughly scheduling (i.e., without pre-specified times)&lt;/em&gt;” constitutes a practical alternative. This results in effective scheduling when tasks are entered via a task manager and synced with Google Calendar since blocks of activities can still be displayed in the calendar view without the added burden of specifying a strict duration for each event.&lt;/p&gt;
&lt;p&gt;There are some use cases that simply are not well suited for task managers, such as synchronizing events from Gmail (i.e., capturing tasks from different sources), setting reminders on appointments scheduled by third parties (where the primary source of truth must remain the calendar itself) or sharing a schedule with groups across the G suite applications with the help of smart suggestions coming from Google users’ data which is not entirely available to external applications.&lt;/p&gt;
&lt;h2 id="23-the-four-pillars-forming-a-new-approach-evaluating-their-effectiveness"&gt;2.3 The four pillars forming a new approach: evaluating their effectiveness&lt;/h2&gt;
&lt;h3 id="231-inscribe"&gt;2.3.1 Inscribe&lt;/h3&gt;
&lt;figure&gt;
&lt;a href="https://www.sglavoie.com/images/posts/0039_productivido/inscribe.png"&gt;&lt;img alt="inscribe screen" src="https://www.sglavoie.com/images/posts/0039_productivido/inscribe.png" style="max-width: 500px"/&gt;&lt;/a&gt;
&lt;figcaption&gt;Inscribe screen.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;ProductiviDo&lt;/strong&gt; features four core components to help tackle one’s work skillfully, the first of which being all about jotting down tasks, a demonstration of the “generation effect” which assists with remembering information better. At this stage of the process, the idea is to record any potential future action that is required while being fully aware of the impact that such action will have on one’s life, benefitting at once from reducing one’s cognitive load by storing or discarding thoughts that do not require immediate response. “Inscribing” in this application is an intentional step demanding a certain level of mindfulness and acts as a precursor to the use of implementation intentions as it similarly “&lt;em&gt;serves an important self-regulatory function&lt;/em&gt;” according to a study on mindfulness done at the University of Rochester. A 2020 study from Bieleke and Keller found that “&lt;em&gt;opportunity-focused plans are especially important for initial progress towards the goal&lt;/em&gt;“, therefore this step ensures —through questioning the user’s aspirations— that the task is indeed a priority and that it is not just a distraction by evaluating its “leverage”, a notion introduced in section 1.4.&lt;/p&gt;
&lt;h3 id="232-prioritize"&gt;2.3.2 Prioritize&lt;/h3&gt;
&lt;figure&gt;
&lt;a href="https://www.sglavoie.com/images/posts/0039_productivido/prioritize.png"&gt;&lt;img alt="Prioritize screen" src="https://www.sglavoie.com/images/posts/0039_productivido/prioritize.png" style="max-width: 500px"/&gt;&lt;/a&gt;
&lt;figcaption&gt;Prioritize screen.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;There is substantial evidence to establish that the concept of a “master list” has been popularized and has found multiple concrete applications (e.g., as a list of relevant jobs held by an applicant, as an Excel spreadsheet keeping track of crucial information at a high-level, in some jurisdictions in the legal world, etc.), including as a way to manage tasks, an idea also sprouting from Edmond Lau’s work. In the context of task management systems, a master list manifests itself as a centralized location where all tasks are accessible once they have been “inscribed”. With &lt;strong&gt;ProductiviDo&lt;/strong&gt;, “prioritizing” is a transient state: it is about handling a database of data to be referenced later when progress must be undertaken on specific tasks. It is a digital space separate from the current areas of focus (presented in the following step in section 2.3.3) used to find the next priorities to work on, where filters are available to that end (see section 3 for the technical details). As defended by Bellotti’s research as a set of desirable features, the &lt;strong&gt;“Prioritize”&lt;/strong&gt; step offers the “&lt;em&gt;ability to sort by importance and deadlines&lt;/em&gt;” as well as a “&lt;em&gt;smart prioritization&lt;/em&gt;” of tasks by default, where the most important ones will flow to the top of the list, ready to be acted upon. Because tasks listed in the &lt;strong&gt;“Prioritize”&lt;/strong&gt; step are forcibly distinct from those listed in the &lt;strong&gt;“Focus”&lt;/strong&gt; step as they are mutually exclusive, this intermediate step helps to reduce the number of tasks shown in the schedule, improving one’s perceived control of time, busyness and stress.&lt;/p&gt;
&lt;h3 id="233-focus"&gt;2.3.3 Focus&lt;/h3&gt;
&lt;figure&gt;
&lt;a href="https://www.sglavoie.com/images/posts/0039_productivido/focus.png"&gt;&lt;img alt="focus screen" src="https://www.sglavoie.com/images/posts/0039_productivido/focus.png" style="max-width: 500px"/&gt;&lt;/a&gt;
&lt;figcaption&gt;Focus screen.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Once there are prioritized tasks in the application defined in terms of implementation intentions, science dictates that there is a need to “&lt;em&gt;support the viewing of entire task vistas, but also allow different perspectives for different kinds of planning&lt;/em&gt;” and for “&lt;em&gt;top priority items to be made apparent&lt;/em&gt;“. It is also known that setting clear goals eliminates intrusive thoughts and that “&lt;em&gt;commitment to a later behavior was linked to reduced rather increased strain on mental resources&lt;/em&gt;“. For these reasons, the &lt;strong&gt;“Focus”&lt;/strong&gt; step is a crucial component of the application. This component has the additional benefit of mitigating the problem uncovered in section 2.2.2 about the lesser efficacy of having multiple implementation intentions at once because it helps to recall all the high-leverage tasks in a filtered version of the master list (i.e., the current working list), leading to the observation of the Zeigarnik Effect which states that “&lt;em&gt;an activity that has been interrupted may be more readily recalled&lt;/em&gt;“. In addition, seeing a list of promises to oneself in the form of MCIIs “&lt;em&gt;seems to facilitate behavior change even when there is an initial reluctance to engage in the targeted behavior&lt;/em&gt;“. Even more benefits from MCIIs include “&lt;em&gt;sustained task value and higher persistence&lt;/em&gt;“, two aspects that contribute to goal achievement and, consequently, to turning a task manager into an efficacious product.&lt;/p&gt;
&lt;h3 id="234-review"&gt;2.3.4 Review&lt;/h3&gt;
&lt;figure&gt;
&lt;a href="https://www.sglavoie.com/images/posts/0039_productivido/review.png"&gt;&lt;img alt="review screen" src="https://www.sglavoie.com/images/posts/0039_productivido/review.png" style="max-width: 500px"/&gt;&lt;/a&gt;
&lt;figcaption&gt;Review screen.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;At this point, a working list of tasks exists to &lt;strong&gt;“Focus”&lt;/strong&gt; and a backlog of work remains to &lt;strong&gt;“Prioritize”&lt;/strong&gt;, yet not all labor should be brought to fruition as initially planned. Life circumstances change and “&lt;em&gt;plans to deliberate can be used to increase the likelihood of deliberation and thereby the effective processing of newly available information&lt;/em&gt;“, which can help eliminate or update tasks that are no longer considered important or relevant enough given an ever-changing environmental context. A paper on making informed scheduling decisions also noted that “&lt;em&gt;self-monitoring and self-reflection often affect behavior, and this change typically goes in the desired direction of improvement&lt;/em&gt;“. These findings can be applied practically by creating plans focusing on overcoming obstacles to make sustained progress, allowing one to ponder every major decision during the journey. A 2021 study on task management tools proposed to break complex tasks into smaller chunks (using a sophisticated approach with dependency graphs), an idea that can auspiciously be employed in a simpler way by breaking down a larger unit of work into smaller ones, which can be done during the information-gathering phase (i.e. the &lt;strong&gt;“Inscribe”&lt;/strong&gt; step) as well as during the reviewing phase with existing units of work, which is known as “compartmentalization”. This self-reflection process can also contribute to one’s well-being by providing written cues to recollect positive images from past accomplishments. Looking towards the future, cueing the users to imagine positive outcomes and encouraging them to restructure their priorities can equally evoke optimism and improve life satisfaction while inspiring them to live according to their personal values. After all, a “&lt;em&gt;person who sets up life and its routines to avoid inner conflict between goals is better off in the sense that he or she ends up feeling fewer bad emotional states and is generally happier&lt;/em&gt;“.&lt;/p&gt;
&lt;figure&gt;
&lt;a href="https://www.sglavoie.com/images/posts/0039_productivido/review-later.png"&gt;&lt;img alt="review screen with later filter applied" src="https://www.sglavoie.com/images/posts/0039_productivido/review-later.png" style="max-width: 500px"/&gt;&lt;/a&gt;
&lt;figcaption&gt;Review screen, showing a filter being applied.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;hr/&gt;
&lt;h1 id="3-design"&gt;3 Design&lt;/h1&gt;
&lt;h2 id="31-domain-and-target-audience"&gt;3.1 Domain and target audience&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;ProductiviDo&lt;/strong&gt; is a task management system staying clear of project management and time management, geared towards being a capture and review tool leaving notifications and scheduling to external systems, primarily to Google Calendar in these first product iterations. As such, the target audience is represented by conscientious people desiring to optimize their productivity with a tool discouraging multitasking, who don’t mind hand holding to achieve their goals — willing to trade off flexibility in exchange for a more rigid system backed by science —, expecting a simple set of essential features for a distraction-free environment to get things done and wanting to manage their own set of personal tasks (as this product is not designed with teams or businesses in mind).&lt;/p&gt;
&lt;p&gt;Explicitly supported users include people who want to follow a useful system without having to build it from scratch (e.g., setting up projects, tags, custom priorities, etc.) as well as those who need to keep track of tasks involving others with basic functionality (via Google Calendar and filters in the application). The application will not cater to those who want to rely mainly on desktop applications (because the core of the application is mobile only), nor to those who want to use a calendar other than Google Calendar (which is the only calendar undeniably supported in this version) or those who are looking for a solution integrating into other applications, since there will be no publicly accessible &lt;span class="caps"&gt;API&lt;/span&gt; at first to make this possible.&lt;/p&gt;
&lt;h2 id="32-design-decisions-and-principles"&gt;3.2 Design decisions and principles&lt;/h2&gt;
&lt;figure&gt;
&lt;a href="https://www.sglavoie.com/images/posts/0039_productivido/figma_design.png"&gt;&lt;img alt="Designing and wireframing in Figma" class="max-size-img-post" src="https://www.sglavoie.com/images/posts/0039_productivido/figma_design.png"/&gt;&lt;/a&gt;
&lt;figcaption&gt;Designing and wireframing in Figma.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Section 2 abstractly laid out the foundation for the core ideas being implemented in the application meeting
the needs of the target audience. Concretely, a few design principles listed in “The Pocket Universal
Principles of Design” inform how the application has been thought out, markedly:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The 80/20 rule: “&lt;em&gt;80 percent of a product’s usage involves 20 percent of its features&lt;/em&gt;“, which is true with &lt;strong&gt;ProductiviDo&lt;/strong&gt; where users will spend most of their time focusing on the work they have to accomplish;&lt;/li&gt;
&lt;li&gt;Chunking: “&lt;em&gt;Chunk information when people are required to recall and retain information&lt;/em&gt;“, where each task will display the most important information to contextualize work;&lt;/li&gt;
&lt;li&gt;Constraint: “&lt;em&gt;Limiting the actions that can be performed to simplify use and prevent error&lt;/em&gt;“, where each screen will have a single function with a premedidated lack of customization;&lt;/li&gt;
&lt;li&gt;Five Hat Racks: the five ways in which information can be organized (i.e., category, time, location, alphabet, and continuum), all of which are supported by &lt;strong&gt;ProductiviDo&lt;/strong&gt;;&lt;/li&gt;
&lt;li&gt;Form follows function: “&lt;em&gt;Aesthetic considerations should be secondary to functional considerations&lt;/em&gt;“, where the application maximizes the functionality available on each screen while taking into consideration the primary interactions needed at each step, regardless of the visual impact these decisions have;&lt;/li&gt;
&lt;li&gt;Garbage in, garbage out: “&lt;em&gt;Make it impossible to store bad data types&lt;/em&gt;“, where the application will not accept invalid inputs on any field that could jeopardize the integrity of the data;&lt;/li&gt;
&lt;li&gt;Nudges: “&lt;em&gt;smart defaults, clear feedback, aligned incentives, structured choices, and visible goals&lt;/em&gt;“, where the app makes the purpose of each interaction crystal clear;&lt;/li&gt;
&lt;li&gt;Progressive disclosure: “&lt;em&gt;A method of managing complexity, in which only necessary or requested information is displayed&lt;/em&gt;“, where filters are selectively shown to match the intent of each screen and where optional fields are hidden away by default until they are needed.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It is noteworthy that calendar integration will be optional and that the application will remain fully functional without relying on external calendars for maximum convenience, especially while users are offline. Even though this work underlined the usefulness of calendars when used as companions for task managers, one of the primary goals of a task manager is to be available at all times regardless of internet connectivity so that users can access their list of priorities and get work done: requiring an active connection and access to a calendar via sign-on before being able to do any work would break the principle of least astonishment in this type of application.&lt;/p&gt;
&lt;figure&gt;
&lt;a href="https://www.sglavoie.com/images/posts/0039_productivido/prioritize-wireframes.png"&gt;&lt;img alt="Some of the original wireframes for the Prioritize screen" class="max-size-img-post" src="https://www.sglavoie.com/images/posts/0039_productivido/prioritize-wireframes.png"/&gt;&lt;/a&gt;
&lt;figcaption&gt;Some of the original wireframes for the &lt;strong&gt;Prioritize&lt;/strong&gt; screen.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="33-structure-of-the-application"&gt;3.3 Structure of the application&lt;/h2&gt;
&lt;p&gt;The application is structured in such a way that each screen has a single function and that the user is guided through the process of adding, editing, and reviewing tasks4. The application is designed to be as simple as possible, with a minimalistic interface and a limited number of interactions to keep the user focused on the task at hand. Technically, it is arranged according to a pyramid schematic architecture, where the “hub” is the hamburger menu which links to all other pages and where all the sub-pages can go back to the “hub”. In this architecture, the tab navigation at the bottom of the screen lists the core sub-pages which are always accessible and can lead back to the hub as needed so that the user does not need to remember how to get from one screen to another, since they are all identified with both a recognizable icon and text label.&lt;/p&gt;
&lt;p&gt;The application is structured in a way that makes it easy to add, edit, and review tasks, with the following screens:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Inscribe&lt;/strong&gt;: Looking at the tab bar (bottom part of the wireframes) from left to right, this is the first screen meant to be easily accessible and also the first step that is part of the process of managing tasks by carefully adding them to the system;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Prioritize&lt;/strong&gt;: this is the screen responsible for displaying the list of tasks that have been added to &lt;strong&gt;ProductiviDo&lt;/strong&gt; in the first step (&lt;strong&gt;Inscribe&lt;/strong&gt;) but still require planning (i.e., they represent the tasks to prioritize);&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Focus&lt;/strong&gt;: Once the tasks have been prioritized from the previous screen (&lt;strong&gt;Prioritize&lt;/strong&gt;), they are ready to be scheduled and worked on, which is the purpose of this screen — it displays the current working list of tasks in a digestible format;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Review&lt;/strong&gt;: Periodically (daily, weekly, etc.), the application will ask the user to review the tasks that remain to be completed to ensure that they are still relevant and that they are still a priority.&lt;/li&gt;
&lt;/ol&gt;
&lt;figure&gt;
&lt;a href="https://www.sglavoie.com/images/posts/0039_productivido/edit-task.png"&gt;&lt;img alt="edit task screen" src="https://www.sglavoie.com/images/posts/0039_productivido/edit-task.png" style="max-width: 500px"/&gt;&lt;/a&gt;
&lt;figcaption&gt;Edit task screen.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;These core screens are accessible at all times from the tab bar to allow for easy navigation between them. The application will also have a few other screens that are not part of the core workflow but that are still important for the user experience:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;About&lt;/strong&gt;: This screen will display information about the application, such as the purpose behind each aspect as well as the version number;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Help&lt;/strong&gt;: There will be a help system embedded in this screen to help users understand how to use the application and how to get the most out of it, which will be fully searchable;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Recycle bin&lt;/strong&gt;: Sometimes, tasks will be added to &lt;strong&gt;ProductiviDo&lt;/strong&gt; by mistake or they will be completed before they are scheduled. This screen will allow the user to review and restore these tasks if they are still relevant;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Accomplishments&lt;/strong&gt;: This screen will display a list of tasks that have been completed and will allow the user to review them and reflect on their accomplishments;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Settings&lt;/strong&gt;: This screen will allow the user to customize the application to their liking, such as changing the theme, determining default values on new tasks, etc.&lt;/li&gt;
&lt;/ol&gt;
&lt;figure&gt;
&lt;a href="https://www.sglavoie.com/images/posts/0039_productivido/about.png"&gt;&lt;img alt="about screen" src="https://www.sglavoie.com/images/posts/0039_productivido/about.png" style="max-width: 500px"/&gt;&lt;/a&gt;
&lt;figcaption&gt;About screen.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;These secondary screens are accessible from each core screen in the top-right corner to toggle the presence of a “drawer” menu. The menu can also be revealed by swiping from right to left on the screen. The menu will be hidden by default to keep the interface as clean as possible and to avoid cluttering it with unnecessary information. The menu will be revealed by default on the first launch of the application to help users discover the features available to them.&lt;/p&gt;
&lt;figure&gt;
&lt;a href="https://www.sglavoie.com/images/posts/0039_productivido/menu.png"&gt;&lt;img alt="Menu screen" src="https://www.sglavoie.com/images/posts/0039_productivido/menu.png" style="max-width: 500px"/&gt;&lt;/a&gt;
&lt;figcaption&gt;Menu screen.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="34-libraries-and-services"&gt;3.4 Libraries and services&lt;/h2&gt;
&lt;p&gt;At a high level, the application will be built using React Native to support both Android and iOS platforms.
In terms of software user-facing dependencies, the application will use the following libraries:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;react-native-async-storage/async-storage&lt;/code&gt;: The application will use this library to store data
  locally on the device;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;react-native-community/datetimepicker&lt;/code&gt;: This library will be used to display the date and time pickers;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;React Navigation&lt;/code&gt;: This library will be used to implement the navigation system;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Redux&lt;/code&gt;: This library will be used to manage the state of the application;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NativeBase&lt;/code&gt;: it will be used to implement the user interface;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;redux-persist&lt;/code&gt;: This library will be used to persist the state of the application locally on the device;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;redux-thunk&lt;/code&gt;: This library will be used to implement asynchronous actions in the application;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;react-native-collapsible&lt;/code&gt;: This library will be used to implement all the collapsible sections to
  provide progressive disclosure;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;react-native-extended-stylesheet&lt;/code&gt;: This library will be used to implement the theming system;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nandorojo/anchor&lt;/code&gt;: This library will be used to implement the anchor system so that users can jump
  from one section to another in the help system.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The application will also use the following libraries to support the development process:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Eslint&lt;/code&gt;: This library will be used to enforce a consistent coding style;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Babel&lt;/code&gt;: This library will be used to transpile the code to support older versions of JavaScript;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Jest&lt;/code&gt;: This library will be used to implement unit tests;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;react-native-testing-library&lt;/code&gt;: This library will be used to implement integration tests;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;react-native-dotenv&lt;/code&gt;: This library will be used to manage environment variables;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;react-test-renderer&lt;/code&gt;: This library will be used to implement snapshot tests;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TypeScript&lt;/code&gt;: It will ensure type checking is available app-wide and reduce the number of bugs.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On the backend side, the application will make use mainly of the following services:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Firebase&lt;/code&gt;: This service will be used to implement the authentication system needed to deal with
  Google accounts as an optional add-on;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Google Calendar&lt;/code&gt;: This service will be used to implement the calendar system;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SQLite&lt;/code&gt;: It will be used to implement the database system locally and will be backed up to the cloud.&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;
&lt;a href="https://www.sglavoie.com/images/posts/0039_productivido/db_schema.png"&gt;&lt;img alt="Showing the database design behind ProductiviDo." class="max-size-img-post" src="https://www.sglavoie.com/images/posts/0039_productivido/db_schema.png"/&gt;&lt;/a&gt;
&lt;figcaption&gt;Showing the database design behind ProductiviDo.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="35-plan-of-work"&gt;3.5 Plan of work&lt;/h2&gt;
&lt;p&gt;In a nutshell, the plan of work will be followed as shown below:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Gantt Chart" src="https://www.sglavoie.com/images/posts/0039_productivido/gantt_chart.png"/&gt;&lt;/p&gt;
&lt;h2 id="36-testing-and-evaluation"&gt;3.6 Testing and evaluation&lt;/h2&gt;
&lt;p&gt;The project will be tested primarily using the following methods:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Unit tests&lt;/strong&gt;: Unit tests will be implemented to ensure that each component of the application works as expected. These tests will be implemented using &lt;code&gt;Jest&lt;/code&gt; and &lt;code&gt;react-test-renderer&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Integration tests&lt;/strong&gt;: Integration tests will be implemented to ensure that the application works as expected when all the components are combined. These tests will be implemented using the apt &lt;code&gt;react-native-testing-library&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;User and usability testing&lt;/strong&gt;: User testing will be implemented to ensure that the application is easy to use and that it meets the needs of the users. These tests will be implemented using a combination of user interviews and surveys.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Performance, load and stress testing&lt;/strong&gt;: Performance testing will be implemented to ensure that the application is fast and responsive. These tests will be performed by simulating the presence of a large number of tasks and events.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Security testing&lt;/strong&gt;: Security testing will be implemented to ensure that the application is secure, most definitely when it comes to protecting user’s data in the cloud to avoid data breaches.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Regression testing&lt;/strong&gt;: Regression testing will be implemented to ensure that the application does not break when new features are added, using a mixture of automated &lt;code&gt;git bisect&lt;/code&gt; scripts to locate anomalies and by automatically running test suites with Git pre-commit hooks.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Compatibility testing&lt;/strong&gt;: Compatibility testing will be implemented to ensure that the application works on all the supported platforms.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Accessibility testing&lt;/strong&gt;: Accessibility testing will be implemented to ensure that the application is accessible to all users.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h1 id="4-implementation"&gt;4 Implementation&lt;/h1&gt;
&lt;h2 id="41-overview"&gt;4.1 Overview&lt;/h2&gt;
&lt;p&gt;At its core, &lt;strong&gt;ProductiviDo&lt;/strong&gt; aims to provide a system that facilitates “getting things done” in the manner of the famously successful productivity system &lt;span class="caps"&gt;GTD&lt;/span&gt;, created and shared with millions of people by David Allen. The system is based on the following principles, worth expanding on as it bears strong resemblance with the final design of the application:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Capture&lt;/strong&gt;: All tasks and events should be captured in a single place, so that they can be easily accessed and managed. This is achieved with the &lt;strong&gt;“Inscribe”&lt;/strong&gt; screen, the first step in the &lt;strong&gt;ProductiviDo&lt;/strong&gt; system.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Clarify&lt;/strong&gt;: All tasks and events should be clarified, so that they can be easily understood and prioritized. This is achieved in the &lt;strong&gt;“Inscribe”&lt;/strong&gt; screen, where the user can add a description to the task or event along with necessary metadata to help classify and prioritize the data being added.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Organize&lt;/strong&gt;: All tasks and events should be organized, so that they can be easily accessed and managed. While this &lt;span class="caps"&gt;GTD&lt;/span&gt; step does not map directly to a step in &lt;strong&gt;ProductiviDo&lt;/strong&gt;, the &lt;strong&gt;“Focus”&lt;/strong&gt; screen serves a similar purpose in that it allows the user to organize tasks and events into a list of immediately actionable items that are easy to reference.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reflect&lt;/strong&gt;: All tasks and events should be reflected upon, so that they can be easily understood and prioritized. With &lt;strong&gt;ProductiviDo&lt;/strong&gt;, this is done in the &lt;strong&gt;“Review”&lt;/strong&gt; screen, which invites users to review tasks logically according to their deadline, priority, an&lt;strong&gt;d other meta&lt;/strong&gt;data.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Engage&lt;/strong&gt;: All tasks and events should be engaged with, so that they can be easily accessed and managed. &lt;strong&gt;ProductiviDo&lt;/strong&gt; deals with this &lt;span class="caps"&gt;GTD&lt;/span&gt; step in a simpler way via the &lt;strong&gt;“Prioritize”&lt;/strong&gt; screen and the &lt;strong&gt;“Focus”&lt;/strong&gt; screen, which allow users to prioritize tasks and events and then focus on the most important ones.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="42-features-implemented-a-visual-tour"&gt;4.2 Features implemented: a visual tour&lt;/h2&gt;
&lt;figure&gt;
&lt;a href="https://www.sglavoie.com/images/posts/0039_productivido/quick-actions.png"&gt;&lt;img alt="Quick actions screen" src="https://www.sglavoie.com/images/posts/0039_productivido/quick-actions.png" style="max-width: 500px"/&gt;&lt;/a&gt;
&lt;figcaption&gt;Quick actions.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The application has the following features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Add a task&lt;/strong&gt;: The user can add tasks by navigating to the &lt;strong&gt;“Inscribe”&lt;/strong&gt; screen and filling in the required fields. The user can also add a deadline date and time, a duration, a location, a priority to the task and so on. By choosing the type of task as “&lt;strong&gt;Calendar&lt;/strong&gt;” and filling in the required fields, the task will be added to the user’s Google Calendar. This screen hides any navbar and tab bar to maximize the screen real estate.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Prioritize a task&lt;/strong&gt;: The user can prioritize tasks by navigating to the &lt;strong&gt;“Prioritize”&lt;/strong&gt;, where filtering options are available to help the user find the task to prioritize. The main task action that can be performed on this screen is to “focus” a task, effectively moving it to the &lt;strong&gt;“Focus”&lt;/strong&gt; screen.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Focus on a task&lt;/strong&gt;: The user can focus on a task by navigating to the &lt;strong&gt;“Focus”&lt;/strong&gt; screen, where the user can see a list of tasks that are immediately actionable. The user can also filter the tasks to focus on. The main action that can be performed on this screen is to “complete” a task, effectively moving it to the “Accomplishments” screen.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Review tasks&lt;/strong&gt;: The user can review tasks by navigating to the &lt;strong&gt;“Review”&lt;/strong&gt; screen, where the user can see a list of tasks that are overdue, due soon (e.g., today, tomorrow, this week), due later (e.g., next week, next month, next year) as well as tasks that are “old” (i.e., tasks that have been added to the system more than a month ago relative to today’s date but have not been worked on yet). This screen features “&lt;em&gt;quick actions&lt;/em&gt;” that are relevant to the tasks being reviewed. These actions provide the ability to reschedule a task, update its current state (i.e., move it from and to the Prioritize and Focus screens) and to delete a task without having to open the task details screen to edit it.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Filter tasks to review&lt;/strong&gt;: The user can filter tasks to review by navigating to the &lt;strong&gt;“Review”&lt;/strong&gt; screen and selecting the filter options. The user can filter tasks by one of the categories “&lt;strong&gt;Overdue&lt;/strong&gt;“, “&lt;strong&gt;Soon&lt;/strong&gt;“, “&lt;strong&gt;Later&lt;/strong&gt;“, “&lt;strong&gt;Old&lt;/strong&gt;” and by all of these at once when no filters are applied.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Edit task details&lt;/strong&gt;: Once a task has been added to the system, it can be edited from any of the main screens (i.e., &lt;strong&gt;“Prioritize”&lt;/strong&gt;, &lt;strong&gt;“Focus”&lt;/strong&gt;, &lt;strong&gt;“Review”&lt;/strong&gt;). The user can edit all the same properties as when adding a task as well as add new ones not present when the task was added. When a task is of type “Calendar”, its related details will also be updated on the user’s Google Calendar.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;About screen&lt;/strong&gt;: while the About screen does not provide any functionality related to tasks, it allows users to learn more about the application. The screen includes a link to the application’s website, a link to a dynamic feedback form to help &lt;strong&gt;ProductiviDo&lt;/strong&gt; become a better fit for its users, an email address to contact the developers (which opens the default email client on the user’s device) and other less frequently accessed information, including a link to the GitHub repository of the project and a list of open source libraries used to create the product.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Help screen&lt;/strong&gt;: the application has been designed to avoid relying on documentation in order to be used. However, the Help screen is a useful resource for users who want to learn more about the concepts involved in the application. It describes possible workflows and guides users through the application’s main screens so they will be able to use it even more effectively.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Recycle bin screen&lt;/strong&gt;: &lt;strong&gt;ProductiviDo&lt;/strong&gt; makes it very easy to access and manage tasks that have been deleted by the user. The Recycle bin screen allows users to restore deleted tasks (which are sent back to the Prioritize screen for the next round of prioritization) or to permanently delete them by emptying the recycle bin.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Accomplishments screen&lt;/strong&gt;: While the Recycle bin holds all deleted tasks, the Accomplishments screen holds all tasks that have been completed by the user from the Focus screen. The Accomplishments screen is a great way to keep track of the user’s progress and to celebrate the user’s accomplishments, yet it also allows removing completed tasks from the system if the user wishes to do so.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Settings screen&lt;/strong&gt;: The Settings provided by &lt;strong&gt;ProductiviDo&lt;/strong&gt; allow users to customize the application to their needs in a basic way — and all settings are persisted across reboots of the application or device. There is a dark mode available to protect the users’ eyes from screen brightness. Other settings include the ability to set default behaviours on new tasks, set the increment in minutes to be shown in the time picker, set a different locale to represent dates and times and some more options to toggle the display of certain elements in the application.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Filters&lt;/strong&gt;: What &lt;strong&gt;ProductiviDo&lt;/strong&gt; lacks in customizations, it makes up for in filters. The application allows users to filter tasks by type, status, priority, deadline date, deadline time, duration, location and more. The filters are applied in real-time, so the user can see the results of the filters as they are being applied. The filters can be applied to any of the main screens (i.e., &lt;strong&gt;“Prioritize”&lt;/strong&gt;, &lt;strong&gt;“Focus”&lt;/strong&gt;, &lt;strong&gt;“Review”&lt;/strong&gt;) and can be combined to create more precise filters.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Google Calendar&lt;/strong&gt;: One of the key tenets of &lt;strong&gt;ProductiviDo&lt;/strong&gt; is to make it easy for users to manage their tasks and to have a visual window into their schedule, which is achieved by integrating with the user’s primary calendar on Google Calendar. The application allows users to connect their Google Calendar account to &lt;strong&gt;ProductiviDo&lt;/strong&gt; and to create calendar events from new or existing tasks. At the same time, this functionality remains entirely optional: users can choose to never opt in to the Google Calendar integration and can disconnect their Google account at any time, which will prevent any synchronization from happening between &lt;strong&gt;ProductiviDo&lt;/strong&gt; and Google Calendar.&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;
&lt;a href="https://www.sglavoie.com/images/posts/0039_productivido/settings.png"&gt;&lt;img alt="settings screen" src="https://www.sglavoie.com/images/posts/0039_productivido/settings.png" style="max-width: 500px"/&gt;&lt;/a&gt;
&lt;figcaption&gt;Settings screen.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;a href="https://www.sglavoie.com/images/posts/0039_productivido/dark-mode.png"&gt;&lt;img alt="dark mode screen" src="https://www.sglavoie.com/images/posts/0039_productivido/dark-mode.png" style="max-width: 500px"/&gt;&lt;/a&gt;
&lt;figcaption&gt;Dark mode.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="43-techniques-and-methods"&gt;4.3 Techniques and methods&lt;/h2&gt;
&lt;figure&gt;
&lt;a href="https://www.sglavoie.com/images/posts/0039_productivido/help.png"&gt;&lt;img alt="help screen" src="https://www.sglavoie.com/images/posts/0039_productivido/help.png" style="max-width: 500px"/&gt;&lt;/a&gt;
&lt;figcaption&gt;Help screen.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Beyond the libraries mentioned in section 3.4, the actual implementation of the application happened in the following way:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;React Native bare workflow&lt;/strong&gt;: The application was developed using the React Native bare workflow, which allows for the use of native code in the application. This was necessary to implement the Google Calendar integration, which was not possible using the Expo workflow.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;State management&lt;/strong&gt;: The application was architected in such a way that React Context was used to avoid “&lt;em&gt;props drilling&lt;/em&gt;” and to provide a global state to the application, using data coming from the SQLite database loaded at launch. All context that does not require persistence is managed by React Context, while the rest of the state (e.g., settings) is managed by Redux Toolkit.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TypeScript&lt;/strong&gt;: The app was developed using TypeScript, a typed superset of JavaScript that compiles to plain JavaScript. TypeScript was used to ensure type safety and to provide a better developer experience with autocomplete and other features that help developers write code with fewer errors.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;React Navigation&lt;/strong&gt;: The navigation between screens uses a combination of stack and tab navigation, with the main screens being accessible through the tab navigation and the rest of the screens being accessible through the stack navigation. Additionally, a drawer navigation is used to provide access to all secondary screens via the traditional “hamburger” menu.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NativeBase&lt;/strong&gt;: This library was used to provide a consistent look and feel to the application and get access to components that are not available in React Native. Many of its components were put to use in the application, including &lt;code&gt;Actionsheet&lt;/code&gt;, &lt;code&gt;AlertDialog&lt;/code&gt;, &lt;code&gt;Badge&lt;/code&gt;, &lt;code&gt;FlatList&lt;/code&gt;, &lt;code&gt;Modal&lt;/code&gt;, &lt;code&gt;Switch&lt;/code&gt; and &lt;code&gt;Transitions&lt;/code&gt; to name a few.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Google Calendar &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/strong&gt;: The application uses the Google Calendar &lt;span class="caps"&gt;API&lt;/span&gt; to allow users to connect their Google Calendar account to &lt;strong&gt;ProductiviDo&lt;/strong&gt; and to create calendar events from new or existing tasks. The &lt;span class="caps"&gt;API&lt;/span&gt; is used to create new events, to update existing events and to delete events. The &lt;span class="caps"&gt;API&lt;/span&gt; is also used to retrieve the user’s primary calendar and to retrieve the list of calendars available to the user.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SQLite&lt;/strong&gt;: The application uses SQLite to store all data locally on the device. The application uses the expo-sqlite library to interact with the SQLite database. The database is initialized at launch and is updated whenever the user makes changes to the data.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Form validation&lt;/strong&gt;: The application uses the yup library to validate forms and to provide error messages to the user. Coupled with &lt;code&gt;formik&lt;/code&gt;, the library provides a great way to validate forms and to provide a consistent experience to the user.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Custom hooks and functional components&lt;/strong&gt;: This project explicitly embraces new React features such as custom hooks and functional components. The application uses custom hooks to encapsulate logic for all the main screens. The application also uses functional components to avoid the use of class components, which are considered legacy in React.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h1 id="5-evaluation-results-and-discussion"&gt;5 Evaluation: results and discussion&lt;/h1&gt;
&lt;h2 id="51-successes"&gt;5.1 Successes&lt;/h2&gt;
&lt;h3 id="511-planning-and-execution"&gt;5.1.1 Planning and execution&lt;/h3&gt;
&lt;p&gt;Extensive research and preparation went into the project before writing a single line of production code. A multitude of potential implementations and concepts were explored in great details and the idea of the final product was refined from a very early stage, leading to a more focused development of the todo application. Because there existed a tangible vision of the desired outcome, it made it much simpler to define the database schema and the React context needed throughout the application to pass adequate data structures around. On a related note, doing all this work upfront helped to avoid wasting time learning libraries that would not entirely meet the needs of the application and to stop contemplating features that would not fit within the constraints of the chosen concept.&lt;/p&gt;
&lt;p&gt;Another decision that proved to be quite useful was to postpone dealing with complicated services till much later during development. For instance, storing mock data as simple &lt;span class="caps"&gt;JSON&lt;/span&gt; allowed for quick iterations during development without having to manually add tasks one by one by using the application itself to do so. Once it came time to integrate database functionality, data was first stored as a temporary in-memory database for fast read/write speeds (because the task view, filtering and sorting was not optimized yet) and it was later persisted to disk. Likewise, external services (e.g., Firebase and Google Calendar) were only integrated until the internal application design was set in stone. Performance optimizations were favorably delayed until most of the logic was implemented, which gave ample time to test and refine the design, productively steering clear of premature optimization due to the changing nature of the application still being validated and tested by beta users.&lt;/p&gt;
&lt;h3 id="512-functionality-achieved"&gt;5.1.2 Functionality achieved&lt;/h3&gt;
&lt;p&gt;One concept that served the final design well was a direct application of Fitt’s law, which states that “&lt;em&gt;the time required to touch a target is a function of the target size and the distance to the target&lt;/em&gt;“, meaning that it is important to keep controls close and large when speed or accuracy matters. As a concrete demonstration of this law, tasks can be added with the touch of a single button in the &lt;strong&gt;“Inscribe”&lt;/strong&gt; button located in the tab bar, making it frictionless for users to add tasks and events to the application. This meets the need of being “&lt;em&gt;always on&lt;/em&gt;“, especially since all data is accessible locally without the need for an internet connection, allowing users to quickly get their priorities out of their mind and onto a digital device to allow for proper referencing later on. Other critical interactions such as focusing tasks and completing them can be done by tapping on a large icon next to each task.&lt;/p&gt;
&lt;p&gt;The application allows visualizing all tasks at once in the &lt;strong&gt;“Prioritize”&lt;/strong&gt; screen, which contains all necessary filters in order to make filtering and sorting through a growing list of incoming data not only feasible but also simple and practical. Indeed, the lack of hierarchical organization in the information architecture is absolutely intentional. This design decision allows flexibility with the use of filters without incurring a cognitive cost to understand how information is organized. As long as users are diligent with the metadata they input in the application (as they should if they wish to accomplish their goals), they will be able to easily find the information they need in the &lt;strong&gt;“Prioritize”&lt;/strong&gt; screen. Excluding the hierarchical access to information, all other aspects of information architecture (location, alphabet, time, category) are available as filters to the users.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;“Focus”&lt;/strong&gt; screen intuitively lets users know which tasks are most important to work on at any given time, sorting them by deadline, priority and other metadata, making the data “&lt;em&gt;always actionable&lt;/em&gt;“. Since focused tasks are isolated from the rest of the data, users are able to focus on the task at hand without being distracted by other tasks. On this screen, users are able to complete tasks, which effectively disappear from the task list and are kept in the “&lt;strong&gt;Accomplishments&lt;/strong&gt;” screen for later retrieval. This is a way to keep track of tasks that have been completed, which is a feature that is not available in the Google Calendar application and which complements its functionality very well. Additionally, this screen allows users to “restore” tasks, which performs the opposite action. Notably, it will prevent mistakes by letting users undo their actions; it will also allow users to review tasks and events that have been deleted and to permanently delete them as needed. This feature is not available in the Google Calendar application and contributes to making &lt;strong&gt;ProductiviDo&lt;/strong&gt; a useful ally in this case so that events can be restored to the calendar view. The final active step required to use &lt;strong&gt;ProductiviDo&lt;/strong&gt; effectively, found in the &lt;strong&gt;“Review”&lt;/strong&gt; screen, provides complimentary functionality to that found in most modern calendar applica&lt;strong&gt;tions. While&lt;/strong&gt; a calendar is useful to get a sense of upcoming events, a review system is needed to stay on top of one’s priorities to make sure that time-insensitive yet important events do not slip through the cracks. The &lt;strong&gt;“Review”&lt;/strong&gt; screen is a way to make sure that users are not only aware of the tasks and events they ha&lt;strong&gt;ve scheduled&lt;/strong&gt;, but also of the tasks and events that they have not scheduled but are important to them. Furthermore, reviewing one’s work periodically in an automatic way allows for better planning and will make sure that longstanding tasks are either updated, prioritized, delegated or removed.&lt;/p&gt;
&lt;h2 id="52-failures-and-limitations"&gt;5.2 Failures and limitations&lt;/h2&gt;
&lt;p&gt;The following points of failures are discussed in more details in section 6.2, where solutions for brighter times ahead are pictured.&lt;/p&gt;
&lt;h3 id="521-google-calendar-integration"&gt;5.2.1 Google Calendar integration&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;ProductiviDo&lt;/strong&gt; solves real-world issues related to task management and scheduling in a robust manner, yet it does so partially. One major caveat to the current implementation is that it supports only Google Calendar, which severely limits the potential market the application can tap into. Because only Google Calendar was taken into account during this project, it is highly likely that the application will not be able to support other calendar applications without a major overhaul of the codebase. The application was thought to be a companion to Google Calendar from the ground up, which means that while it integrates seamlessly with it, it creates tight coupling between the two applications. There are in fact more issues to delve into when it comes to Google Calendar. In particular, full synchronization of tasks and events is not supported in a scalable way. For one, Google Calendar &lt;span class="caps"&gt;API&lt;/span&gt;’s daily and monthly rates are limited: instead of calling that &lt;span class="caps"&gt;API&lt;/span&gt; on every little detail being updated in a task, the application should really try its best to batch requests so that heavy users will not be penalized if they happen to trigger many updates in their calendar or if Google decides to lower the number of requests that can be processed in a given amount of time. Another pitfall is that the application does not support recurring tasks as originally intended due to lack of human resources, which is a feature that is available in the Google Calendar application. While it is technically possible to implement this feature, more context would need to be stored in the application to avoid duplication of tasks in the database and to allow recurring tasks to be reset to their original state or updated as desired, all of which would need to communicate with the Google Calendar &lt;span class="caps"&gt;API&lt;/span&gt; in an efficient way. There is, at the moment, no task tracking facility: a completed task is simply removed from the list of tasks by updating its status in the database. This is a considerable limitation, since it prevents users from creating tasks that are recurring, such as weekly meetings or monthly bills.&lt;/p&gt;
&lt;h3 id="522-unit-testing"&gt;5.2.2 Unit testing&lt;/h3&gt;
&lt;p&gt;One clear oversight in the development process was the lack of unit testing. While the application was profusely tested in a manual way, it would have been much more efficient to have had a suite of unit tests that would have allowed for a more sturdy and scalable application. &lt;strong&gt;ProductiviDo&lt;/strong&gt; comprises a few essential unit tests regarding the Google Calendar integration, but it is nowhere near the level of testing that would be required to ensure that the application is robust and that it will not break in the future. Amongst some of the types of tests that should have been implemented are unit tests for the database, unit tests for the application’s business logic, snapshot testing and testing of asynchronous &lt;span class="caps"&gt;API&lt;/span&gt; calls through mocking. In hindsight, the reason more tests did not make it into the final application is that the development process was not agile enough to allow for the time required to write unit tests and there have been too many side experiments that have taken priority over the core functionality of the application. Of equal relevance is the fact that unanticipated issues have arisen during the development process, which have required more time and effort to be spent on fixing them rather than on writing unit tests. It is also important to keep in mind that unit testing is not a one-time activity: it should be done continuously throughout the development process, more akin to the test-driven development (&lt;span class="caps"&gt;TDD&lt;/span&gt;) workflow. Failing in that department was a major setback for the application, since it will make it harder to maintain and to scale in the future and it likely contributed to the fact that more time was spent on debugging than was necessary.&lt;/p&gt;
&lt;h3 id="523-advanced-features-powered-by-ai"&gt;5.2.3 Advanced features powered by &lt;span class="caps"&gt;AI&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;Besides the issues already raised in this section, there are a few other features that would have optimized the user experience, but which were not implemented due to lack of time as otherwise the scope of the project would have fallen appreciably out of reasonable proportions. For instance, the application does not support batch editing of tasks, which is a feature that is available in many other task managers in one form or another. It also does not support location-based notifications, which would have been useful to send reminders to users based on their location. The application does not make use of advancements in machine learning: learning users’ preferences over time to provide helpful shortcuts when creating new tasks could have been a fantastic time saver. &lt;strong&gt;ProductiviDo&lt;/strong&gt; could have stored task templates such that creating recurring tasks would be faster and more intuitive by providing logical default values based on what the algorithm thinks is going to be needed next. Similarly, the app could add locations, people, and other properties to tasks once it figures out that certain actions only happen in given locations or with the same people repeatedly. Yet another feature that would have proven handy would be to provide time-based notifications based on predictions from past data derived from tracking user movements and time taken to complete specific types of tasks. For instance, if a user has a task that is due at 9:00 &lt;span class="caps"&gt;AM&lt;/span&gt;, the app could send a notification to the user’s phone at 8:45 &lt;span class="caps"&gt;AM&lt;/span&gt; if the user is at home, but at 8:30 &lt;span class="caps"&gt;AM&lt;/span&gt; if the user is at work once the travel time could reliably be estimated from prior activities.&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="6-conclusion"&gt;6 Conclusion&lt;/h1&gt;
&lt;h2 id="61-salient-takeaways"&gt;6.1 Salient takeaways&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;ProductiviDo&lt;/strong&gt; set out to fathom the needs of the modern-day, demanding user and to provide a novel solution to the problem of task management and scheduling. The application was designed from the start to work alongside Google Calendar, which is a popular calendar application that is used by many millions of people around the world. The application was designed to be a simple and intuitive task manager that would allow users to create tasks and events, to schedule them, and to track their progress. While there is room for improvement, &lt;strong&gt;ProductiviDo&lt;/strong&gt; goes far beyond a proof of concept or “&lt;em&gt;Goldilocks Quality&lt;/em&gt;” and shows how it can be used by anyone who wants to manage their tasks and schedule more efficiently, as it relies on strong scientific foundations that were dispersed throughout this work as convincing evidence backing up such a claim.&lt;/p&gt;
&lt;p&gt;One of the key takeaways from this work is that despite a crowded task management digital market, innovation can take place by taking inspiration from different fields and by applying them to the problem at hand. In the case of &lt;strong&gt;ProductiviDo&lt;/strong&gt;, the needs of business users and productivity seekers alike were distilled into an almost mechanical process, where the application flow is extremely simple and strives to put forward in a visually sensible manner all the required functionality to get work done without friction: this meant taking a few assumptions about users for granted, knowingly reducing the user base to better serve those who will resonate with the offering.&lt;/p&gt;
&lt;p&gt;There are a few dominant players in the industry, albeit niches are still well underserved. Almost every software application out there in this space endeavors to serve customers in a very generic way, but it could be flourishingly argued that a task manager could be designed to serve a specific industry. For instance, a task manager for a construction company could be designed to be more intuitive for construction workers, who are not necessarily computer savvy, and could be designed to be more efficient for project managers, who are likely to be more tech-savvy. The same could be said for a task manager for a law firm, a task manager for a restaurant, or a task manager for a school. The possibilities are endless, and the key is to understand the needs of the users and to design the application to be as intuitive as possible. Even though “task templates” can, up to a point, be used to achieve this, nothing competes with a well-designed application that is tailored to the needs of a well-known target audience. Such applications will by definition be adopted within a given niche and will dispense unique value to the users. A generic task manager may be suitable for simple projects and may require fiddling around with the settings to get it to work for a specific use case, but a task manager dedicated to culinary chefs will natively understand and care for concepts such as “ingredients” and “recipes”, which will be baked into the product (no pun intended).&lt;/p&gt;
&lt;h2 id="62-improvements-and-future-research"&gt;6.2 Improvements and future research&lt;/h2&gt;
&lt;p&gt;Even though Google users abound, using exclusively Google Calendar as an calendar integration is not a universal solution. In the future, it would be interesting to explore the possibility of integrating other calendar applications such as Apple Calendar, Outlook, and others. This would allow users to use the application with their preferred calendar application and would also allow for a more seamless integration with the calendar application, which would be a great benefit to users.&lt;/p&gt;
&lt;p&gt;Expanding on the notion of “delegatees” explored in this project, a task manager with built-in collaboration would be welcome to further satisfy the needs of business users. This is because a calendar can become social and collaborative by itself, and it is not uncommon for colleagues or friends to share their calendars with others. This is especially true for business users, who often need to coordinate their activities with other members of their team. It would certainly not be far-fetched to have business teams be formed and given access to their shared task assignments and calendars. This would allow for a more efficient and transparent way of working together, and it would also allow for a more efficient way of tracking the progress of a project and would pave the way to generating insightful analytics dashboards, another place where machine learning would shine by finding patterns and making it possible to optimize overlapping schedules and projects based on people’s availability, area of expertise and so on.&lt;/p&gt;
&lt;p&gt;Recent reports have shown that job creation and entrepreneurship is at its highest peak and that the United States of America is leading the way in terms of new business creation, with literally millions of companies being born each year. This is a great sign for the economy and it shows numerous opportunities in the business world when considering task managers embarking on a journey to become a collaborative platform for teams and businesses within a specific line of work. In the meantime, &lt;strong&gt;ProductiviDo&lt;/strong&gt; comes to the rescue of the millions of people who are looking for simplicity and intuitiveness in a task manager to get their work done with less technological grinding.&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="demo-of-the-app"&gt;Demo of the app&lt;/h1&gt;
&lt;div class="youtube youtube-16x9"&gt;
&lt;iframe allowfullscreen="" frameborder="0" seamless="" src="https://www.youtube.com/embed/l_5JRL1UDzY"&gt;&lt;/iframe&gt;
&lt;/div&gt;</content><category term="learnings"></category><category term="bsc"></category><category term="lessons"></category><category term="mobile-dev"></category><category term="react-native"></category></entry><entry><title>Book summary: Effective Java</title><link href="https://www.sglavoie.com/posts/2023/06/11/book-summary-effective-java/" rel="alternate"></link><published>2023-06-11T18:15:00-06:00</published><updated>2023-06-11T18:15:00-06:00</updated><author><name>Sébastien Lavoie</name></author><id>tag:www.sglavoie.com,2023-06-11:/posts/2023/06/11/book-summary-effective-java/</id><summary type="html">&lt;p&gt;The following are some notes I have taken while reading &lt;a href="https://www.oreilly.com/library/view/effective-java-3rd/9780134686097/"&gt;Effective Java&lt;/a&gt; (Third Edition), written by Joshua Bloch. Each item is an actual heading taken verbatim from the book, while the bullet points are my rehash of the original&amp;nbsp;content.&lt;/p&gt;</summary><content type="html">
&lt;hr/&gt;
&lt;h1 id="book-summary"&gt;Book summary&lt;/h1&gt;
&lt;h2 id="creating-and-destroying-objects"&gt;Creating and destroying objects&lt;/h2&gt;
&lt;h3 id="item-1-consider-static-factory-methods-instead-of-constructors"&gt;Item 1: Consider static factory methods instead of constructors&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Use static factory methods to increase readability and make classes more flexible (e.g., &lt;code&gt;Foo.withOpenBar()&lt;/code&gt; instead of &lt;code&gt;new Foo(true)&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-2-consider-a-builder-when-faced-with-many-constructor-parameters"&gt;Item 2: Consider a builder when faced with many constructor parameters&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;When a class has many parameters, use a builder instead of a “&lt;em&gt;telescoping constructor pattern&lt;/em&gt;” (i.e., having a separate method to call the class with any number of parameters, which may or may not all be used, leading to confusion and difficulty to use).&lt;/li&gt;
&lt;li&gt;The “JavaBeans pattern” uses setters and a parameter-less constructor, allowing the use of any parameters as needed when using the code (e.g., &lt;code&gt;Foo.setMethod()&lt;/code&gt;). This allows the class to enter in an inconsistent state (it is difficult to guarantee that a combination of used parameters makes sense) and makes it difficult to create an immutable class.&lt;/li&gt;
&lt;li&gt;This pattern allows calling code like &lt;code&gt;NutritionFacts cocaCola = new NutritionFacts.Builder(240, 8).calories(100).sodium(35).carbohydrate(27).build();&lt;/code&gt;, which basically instantiate a class with optional parameters as would be the case in Python.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-3-enforce-the-singleton-property-with-a-private-constructor-or-an-enum-type"&gt;Item 3: Enforce the singleton property with a private constructor or an enum type&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The recommended path forward is to use an &lt;code&gt;enum&lt;/code&gt; type like so:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;enum&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MyClass&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="n"&gt;INSTANCE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;myMethod&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="n"&gt;MyClass&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MyClass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;INSTANCE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;myMethod&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="item-4-enforce-non-instantiability-with-a-private-constructor"&gt;Item 4: Enforce non-instantiability with a private constructor&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Simply define the class constructor to be &lt;code&gt;private&lt;/code&gt; so that the class cannot be instantiated. This is useful for utility classes that may contain a bunch of static methods where instantiating the class itself is nonsensical.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-5-prefer-dependency-injection-to-hardwiring-resources"&gt;Item 5: Prefer dependency injection to hardwiring resources&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The example given with a &lt;code&gt;SpellChecker&lt;/code&gt; that depends on a &lt;code&gt;Dictionary&lt;/code&gt; makes a lot of sense: instead of having a class &lt;code&gt;SpellChecker&lt;/code&gt; define a &lt;code&gt;Dictionary&lt;/code&gt; that won’t be reusable elsewhere or that may need to change, pass the &lt;code&gt;Dictionary&lt;/code&gt; into the constructor of the class so that different dictionaries can be used with the same class, making it easier to test things independently and update an existing implementation.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-6-avoid-creating-unnecessary-objects"&gt;Item 6: Avoid creating unnecessary objects&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The author provides two striking examples of where creating unnecessary objects can be detrimental to performance: using &lt;code&gt;Long sum = 0L;&lt;/code&gt; instead of &lt;code&gt;long sum = 0L;&lt;/code&gt; when summing up positive integers and matching a regular expression on a string repeatedly instead of compiling the regular expression once for re-use. In short, avoid creating unnecessary objects and prefer primitives over boxed primitives.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-7-eliminate-obsolete-object-references"&gt;Item 7: Eliminate obsolete object references&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The author provides an example of a stack implementation that has a memory leak because the stack maintains obsolete references to objects that have been popped off the stack. The solution is to null out references once they are no longer needed, which in this case happened in a class where manual memory management was occurring. This is a problem because the garbage collector has no way of knowing that the objects it references after a certain portion of the array are no longer needed.&lt;/li&gt;
&lt;li&gt;The author also shows an example of a cache that uses a &lt;code&gt;WeakHashMap&lt;/code&gt; to store the cache, which allows the garbage collector to remove entries from the cache when they are no longer referenced elsewhere in the program.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-8-avoid-finalizers-and-cleaners"&gt;Item 8: Avoid finalizers and cleaners&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="dquo"&gt;“&lt;/span&gt;&lt;em&gt;Finalizers are unpredictable, often dangerous, and generally unnecessary.&lt;/em&gt;” They can lead to performance issues and resource leaks. They should be avoided. There is no guarantee that they will be called in a timely manner, or at all.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-9-prefer-try-with-resources-to-try-finally"&gt;Item 9: Prefer try-with-resources to try-finally&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The author provides an example of a class that reads the first line of a file and returns it as a string. The class uses a &lt;code&gt;BufferedReader&lt;/code&gt; to read the file and a &lt;code&gt;FileReader&lt;/code&gt; to open the file. The problem is that the &lt;code&gt;FileReader&lt;/code&gt; is never closed, which can lead to resource leaks. The solution is to use a &lt;code&gt;try-with-resources&lt;/code&gt; block, which will automatically close the &lt;code&gt;FileReader&lt;/code&gt; when the block is exited.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="methods-common-to-all-objects"&gt;Methods common to all objects&lt;/h2&gt;
&lt;h3 id="item-10-obey-the-general-contract-when-overriding-equals"&gt;Item 10: Obey the general contract when overriding &lt;code&gt;equals&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;equals&lt;/code&gt; method must be reflexive, symmetric, transitive, consistent, and &lt;code&gt;x.equals(null)&lt;/code&gt; must return &lt;code&gt;false&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;It is generally a bad idea to &lt;code&gt;@Override&lt;/code&gt; the &lt;code&gt;equals&lt;/code&gt; method when inheriting from a concrete class, as it is difficult to ensure that the contract is respected. It is better to use composition instead of inheritance in this case.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-11-always-override-hashcode-when-you-override-equals"&gt;Item 11: Always override &lt;code&gt;hashCode&lt;/code&gt; when you override &lt;code&gt;equals&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;If two objects are equal according to the &lt;code&gt;equals&lt;/code&gt; method, they must have the same hash code. The reverse is not true: two objects with the same hash code are not necessarily equal.&lt;/li&gt;
&lt;li&gt;Using the AutoValue framework in Java, it is possible to automatically generate &lt;code&gt;equals&lt;/code&gt; and &lt;code&gt;hashCode&lt;/code&gt; methods for a class.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-12-always-override-tostring"&gt;Item 12: Always override &lt;code&gt;toString&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;toString&lt;/code&gt; method should return a concise, useful description of the object. It should be overridden in every class unless the class is a utility class or a small value class.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;toString&lt;/code&gt; method should return all of the interesting information contained in the object when it is practical to do so. It should not return the memory address of the object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-13-override-clone-judiciously"&gt;Item 13: Override &lt;code&gt;clone&lt;/code&gt; judiciously&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;clone&lt;/code&gt; method is broken in Java. It is better to use a copy constructor or a copy factory instead of the &lt;code&gt;clone&lt;/code&gt; method.&lt;/li&gt;
&lt;li&gt;One exception is when a class implements the &lt;code&gt;Cloneable&lt;/code&gt; interface and has a final field that is a reference to an array or a final field that is a reference to an object. In this case, the &lt;code&gt;clone&lt;/code&gt; method can be used to create a copy of the object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-14-consider-implementing-comparable"&gt;Item 14: Consider implementing &lt;code&gt;Comparable&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Implement the &lt;code&gt;Comparable&lt;/code&gt; interface when a class has a natural ordering. This allows the class to be used in sorted collections and provides a way to compare objects of the class.&lt;/li&gt;
&lt;li&gt;An example is given to compare phone numbers using the &lt;code&gt;Comparable&lt;/code&gt; interface, where chaining happens in order to compare from the most significant field to the least significant field, e.g.:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// Comparable with comparator construction methods&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="kd"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;final&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Comparator&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;PhoneNumber&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;COMPARATOR&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="n"&gt;comparingInt&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;PhoneNumber&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;areaCode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;             &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;thenComparingInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;             &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;thenComparingInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;lineNum&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;compareTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PhoneNumber&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;COMPARATOR&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;compare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pn&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="classes-and-interfaces"&gt;Classes and interfaces&lt;/h2&gt;
&lt;h3 id="item-15-minimize-the-accessibility-of-classes-and-members"&gt;Item 15: Minimize the accessibility of classes and members&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Make each class or member as inaccessible as possible. This allows for better encapsulation and makes it easier to change the implementation of a class without breaking the code that uses it.&lt;/li&gt;
&lt;li&gt;In public classes, instance fields should rarely be public, as that generally makes the classes themselves non-thread-safe. Instead, use accessor methods to access the fields.&lt;/li&gt;
&lt;li&gt;Static final fields can be made public if they are immutable.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-16-in-public-classes-use-accessor-methods-not-public-fields"&gt;Item 16: In public classes, use accessor methods, not public fields&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;When a class needs to be accessed outside of its package, provide accessor methods instead of making the fields public. This allows the class to change its implementation without breaking the code that uses it.&lt;/li&gt;
&lt;li&gt;This does not really apply to nested or private classes that are only used within the package as long as they still represent data structures usefully, as this leads to less visual clutter.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-17-minimize-mutability"&gt;Item 17: Minimize mutability&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Don’t allow the class to use &lt;em&gt;mutators&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Prevent the class from being extendable.&lt;/li&gt;
&lt;li&gt;Make all fields final.&lt;/li&gt;
&lt;li&gt;Make all fields private.&lt;/li&gt;
&lt;li&gt;Don’t write setters when they are not needed.&lt;/li&gt;
&lt;li&gt;Reducing the number of states a class can find itself in makes it easier to reason about the class and reduces the number of bugs that can occur.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-18-favor-composition-over-inheritance"&gt;Item 18: Favor composition over inheritance&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Inheritance is often overused and can lead to fragile code. It is better to use composition instead of inheritance where appropriate.&lt;/li&gt;
&lt;li&gt;When a class takes a reference to another class as a parameter in its constructor while extending the interface for the class it is taking as a parameter via a forwarding class, it is using composition, as it calls &lt;code&gt;super(otherClass)&lt;/code&gt; in its constructor. This allows the class passed as a parameter to be extended without having to change the class itself. In this way, the class using composition becomes a wrapper that can add functionality on top of the class it is wrapping. The books gives an example of a &lt;code&gt;ForwardingSet&lt;/code&gt; that extends &lt;code&gt;Set&lt;/code&gt; and takes a &lt;code&gt;Set&lt;/code&gt; as a parameter in its constructor. The &lt;code&gt;ForwardingSet&lt;/code&gt; can then add functionality on top of the &lt;code&gt;Set&lt;/code&gt; it is wrapping, in this case by counting the number of times the &lt;code&gt;add&lt;/code&gt; method is called.&lt;/li&gt;
&lt;li&gt;The main, appropriate use case for inheritance is when a class is a subtype of another class and satisfies the &lt;em&gt;is-a&lt;/em&gt; relationship.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-19-design-and-document-for-inheritance-or-else-prohibit-it"&gt;Item 19: Design and document for inheritance or else prohibit it&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;To test a class for inheritance, try to extend it. If it is not possible to extend the class, it is not designed for inheritance.&lt;/li&gt;
&lt;li&gt;No &lt;em&gt;overridable&lt;/em&gt; methods should be called in the constructor, because the superclass runs before the subclass, and the subclass will not have been initialized yet.&lt;/li&gt;
&lt;li&gt;It is better to prohibit inheritance by declaring a class to be &lt;code&gt;final&lt;/code&gt; and ensuring that no constructors are accessible.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-20-prefer-interfaces-to-abstract-classes"&gt;Item 20: Prefer interfaces to abstract classes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Interfaces are better than abstract classes because they allow for multiple inheritance, they allow for the creation of mixins, and they allow for the creation of &lt;em&gt;tag interfaces&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Interfaces can define types that do not need to be represented hierarchically. For instance, a &lt;code&gt;DirectorPhotographer&lt;/code&gt; interface can be created that extends both the &lt;code&gt;Director&lt;/code&gt; and &lt;code&gt;Photographer&lt;/code&gt; interfaces.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-21-design-interfaces-for-posterity"&gt;Item 21: Design interfaces for posterity&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Multiple programmers should implement interfaces in different ways, and multiple client programs should use the interfaces to ensure they satisfy all intended uses. Flaws in interfaces are easier to correct before release.&lt;/li&gt;
&lt;li&gt;The moral is to be cautious when adding methods to existing interfaces using default methods and to thoroughly test and design interfaces to avoid issues and flaws in the long term.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-22-use-interfaces-only-to-define-types"&gt;Item 22: Use interfaces only to define types&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Interfaces serve as types that define what a client can do with instances of a class that implements the interface.&lt;/li&gt;
&lt;li&gt;Constant interfaces consist solely of static final fields, exporting constants. They are a poor use of interfaces as they expose implementation details and confuse users.&lt;/li&gt;
&lt;li&gt;Implementing a constant interface leaks implementation details into the class’s &lt;span class="caps"&gt;API&lt;/span&gt; and creates a commitment to maintain binary compatibility. Subclasses of a class implementing a constant interface are also affected.&lt;/li&gt;
&lt;li&gt;If constants are tied to an existing class or interface, add them directly to that class or interface. If constants are best viewed as members of an enumerated type, use an enum type. Otherwise, use a noninstantiable utility class to export the constants.&lt;/li&gt;
&lt;li&gt;Interfaces should be designed to define types and not used solely for the purpose of exporting constants.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-23-prefer-class-hierarchies-to-tagged-classes"&gt;Item 23: Prefer class hierarchies to tagged classes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Tagged classes are verbose, error-prone, and inefficient. They have boilerplate code, mix multiple implementations in a single class, increase memory footprint, require careful initialization, and make it difficult to add new flavors.&lt;/li&gt;
&lt;li&gt;Instead, abstract classes can be used as the root of the hierarchy, with concrete subclasses representing each flavor.&lt;/li&gt;
&lt;li&gt;Class hierarchies eliminate the shortcomings of tagged classes. They are simpler, clearer, have no boilerplate, ensure field initialization, prevent missing cases, support independent extensibility, and provide distinct data types for each flavor.&lt;/li&gt;
&lt;li&gt;Class hierarchies can reflect natural relationships among types. For example, a square can be represented as a subclass of a rectangle in the hierarchy.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-24-favor-static-member-classes-over-nonstatic"&gt;Item 24: Favor static member classes over nonstatic&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;There are four kinds of nested classes in Java: static member classes, nonstatic member classes (inner classes), anonymous classes, and local classes.&lt;/li&gt;
&lt;li&gt;Static member classes are ordinary classes declared inside another class and have access to all members of the enclosing class. They are static members of their enclosing class and serve as public helper classes. They obey the same accessibility rules as other static members.&lt;/li&gt;
&lt;li&gt;Nonstatic member classes are implicitly associated with an instance of the enclosing class and can access methods and fields of the enclosing instance. They require an enclosing instance to be created and cannot exist independently.&lt;/li&gt;
&lt;li&gt;Private static member classes are used to represent components of the object represented by their enclosing class. They don’t require access to the enclosing instance and avoid unnecessary memory usage compared to nonstatic member classes.&lt;/li&gt;
&lt;li&gt;If a member class doesn’t require access to an enclosing instance, it should be declared as a static member class to avoid the overhead of an extra reference and potential memory leaks.&lt;/li&gt;
&lt;li&gt;Static member classes are preferred over nonstatic member classes unless access to the enclosing instance is necessary.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-25-limit-source-files-to-a-single-top-level-class"&gt;Item 25: Limit source files to a single top-level class&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The risks stem from the possibility of providing multiple definitions for a class, and the order in which source files are passed to the compiler determines which definition is used.&lt;/li&gt;
&lt;li&gt;If there is a need to group related classes, consider using static member classes as an alternative. Static member classes enhance readability and allow for reduced accessibility by declaring them private.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="generics"&gt;Generics&lt;/h2&gt;
&lt;h3 id="item-26-dont-use-raw-types"&gt;Item 26: Don’t use raw types&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Raw types are generic types used without specifying any type parameters.&lt;/li&gt;
&lt;li&gt;Using raw types can lead to errors at runtime (the compiler doesn’t provide type safety) and should be avoided.&lt;/li&gt;
&lt;li&gt;Instead of using raw types, it is recommended to use parameterized types to ensure type safety and expressiveness.&lt;/li&gt;
&lt;li&gt;Unbounded wildcard types (e.g., &lt;code&gt;Set&amp;lt;?&amp;gt;&lt;/code&gt;) can be used when the actual type parameter is unknown or doesn’t matter: they offer flexibility while still maintaining type safety.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-27-eliminate-unchecked-warnings"&gt;Item 27: Eliminate unchecked warnings&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Some unchecked warnings are easy to eliminate by specifying the type parameter or using the diamond operator (&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Treat unchecked warnings seriously and make efforts to eliminate them, ensuring type safety and reducing the potential for ClassCastException at runtime.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-28-prefer-lists-to-arrays"&gt;Item 28: Prefer lists to arrays&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Arrays are covariant, which means if &lt;code&gt;Sub&lt;/code&gt; is a subtype of &lt;code&gt;Super&lt;/code&gt;, then the array type &lt;code&gt;Sub[]&lt;/code&gt; is a subtype of the array type &lt;code&gt;Super[]&lt;/code&gt;. Generics, on the other hand, are invariant.&lt;/li&gt;
&lt;li&gt;Arrays are reified, meaning they enforce their element type at runtime, while generics use erasure, enforcing their type constraints only at compile time.&lt;/li&gt;
&lt;li&gt;Arrays do not provide compile-time type safety, and errors may only be discovered at runtime, which is undesirable.&lt;/li&gt;
&lt;li&gt;Generic collections should be used instead of arrays to ensure better type safety and interoperability.&lt;/li&gt;
&lt;li&gt;Using lists instead of arrays allows for better compile-time type safety, even if it sacrifices some conciseness or performance.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-29-favor-generic-types"&gt;Item 29: Favor generic types&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The use of generic types eliminates the need for explicit casts and ensures type safety at compile time.&lt;/li&gt;
&lt;li&gt;Bounded type parameters can be used to restrict the permissible values of type parameters in generic types, allowing for more specific behavior without explicit casting.&lt;/li&gt;
&lt;li&gt;It is recommended to use generic types whenever possible to avoid casting and improve type safety. Existing non-generic types should be &lt;em&gt;generified&lt;/em&gt;, making them easier to use without breaking existing clients.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-30-favor-generic-methods"&gt;Item 30: Favor generic methods&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;To write a generic method, add type parameters to its declaration and use those type parameters throughout the method.&lt;/li&gt;
&lt;li&gt;Generic methods provide type safety and ease of use by eliminating the need for explicit casts.&lt;/li&gt;
&lt;li&gt;Bounded wildcard types can be used in generic methods to make them more flexible and allow for different types of arguments.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-31-use-bounded-wildcards-to-increase-api-flexibility"&gt;Item 31: Use bounded wildcards to increase &lt;span class="caps"&gt;API&lt;/span&gt; flexibility&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Parameterized types are invariant, meaning that &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt; is not a subtype of &lt;code&gt;List&amp;lt;Object&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Wildcard types allow you to specify that a parameter can be a subtype of a certain type, using &lt;code&gt;? extends Type&lt;/code&gt; for producers and &lt;code&gt;? super Type&lt;/code&gt; for consumers.&lt;/li&gt;
&lt;li&gt;Wildcard types should not be used as return types.&lt;/li&gt;
&lt;li&gt;Wildcard types are particularly useful when working with comparables and comparators.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-32-combine-generics-and-varargs-judiciously"&gt;Item 32: Combine generics and &lt;code&gt;varargs&lt;/code&gt; judiciously&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Varargs&lt;/code&gt; methods and generics do not interact well due to the nature of &lt;code&gt;varargs&lt;/code&gt; creating arrays to hold the arguments.&lt;/li&gt;
&lt;li&gt;Alternatively, using a List parameter instead of a generic &lt;code&gt;varargs&lt;/code&gt; parameter can provide type safety, relying on the &lt;code&gt;List.of&lt;/code&gt; method to handle a variable number of arguments. The code may be slightly more verbose and slower.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-33-consider-typesafe-heterogeneous-containers"&gt;Item 33: Consider typesafe heterogeneous containers&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Common uses of generics involve parameterizing the container itself, such as &lt;code&gt;Set&amp;lt;E&amp;gt;&lt;/code&gt; and &lt;code&gt;Map&amp;lt;K,V&amp;gt;&lt;/code&gt;, which limits the number of type parameters per container.&lt;/li&gt;
&lt;li&gt;Runtime type safety can be achieved by checking the type relationship between the key and the instance being stored using a dynamic cast.&lt;/li&gt;
&lt;li&gt;Bounded type tokens can be used to restrict the types that can be passed as keys by using a bounded type parameter or a bounded wildcard.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="enums-and-annotations"&gt;Enums and annotations&lt;/h2&gt;
&lt;h3 id="item-34-use-enums-instead-of-int-constants"&gt;Item 34: Use enums instead of &lt;code&gt;int&lt;/code&gt; constants&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Some variants use String constants instead of int constants, but this approach has even more disadvantages. It can lead to errors, performance issues, and lacks type safety.&lt;/li&gt;
&lt;li&gt;Enum types in Java are full-fledged classes and offer type safety, expressive power, and additional benefits.&lt;/li&gt;
&lt;li&gt;Enum types consist of a fixed set of constants, each represented as an instance of the enum class. Enum constants are exported via public static final fields. Enum types are effectively final and can’t be extended or instantiated outside the declared constants.&lt;/li&gt;
&lt;li&gt;Enum types provide compile-time type safety. If you declare a parameter or variable of an enum type, the compiler ensures that only valid enum constants can be assigned or passed as arguments.&lt;/li&gt;
&lt;li&gt;Each enum type has its own namespace, allowing identically named constants in different enum types without conflicts.&lt;/li&gt;
&lt;li&gt;Enum types can have methods, fields, and can implement interfaces.&lt;/li&gt;
&lt;li&gt;Enum types have comparable performance to int constants. The space and time cost of loading and initializing enum types is usually negligible.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-35-use-instance-fields-instead-of-ordinals"&gt;Item 35: Use instance fields instead of ordinals&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;While it’s possible to derive associated int values from the ordinal, it is strongly discouraged. Using ordinal-based calculations for associated values can lead to maintenance issues and limitations.&lt;/li&gt;
&lt;li&gt;The recommended solution is to store associated int values in instance fields instead of deriving them from the ordinal. By assigning each enum constant a specific value in the constructor, you can avoid the pitfalls of relying on the ordinal.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-36-use-enumset-instead-of-bit-fields"&gt;Item 36: Use &lt;code&gt;EnumSet&lt;/code&gt; instead of bit fields&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Traditionally, if the elements of an enumerated type are used primarily in sets, the int enum pattern (Item 34) is used. Each constant is assigned a different power of 2, allowing bitwise &lt;span class="caps"&gt;OR&lt;/span&gt; operations to combine multiple constants into a set.&lt;/li&gt;
&lt;li&gt;It is harder to interpret a bit field when printed as a number compared to a simple int enum constant.&lt;/li&gt;
&lt;li&gt;There is no easy way to iterate over all the elements represented by a bit field.&lt;/li&gt;
&lt;li&gt;Bit fields require choosing a specific type (int or long) with a fixed width, which limits the maximum number of bits that can be used without changing the &lt;span class="caps"&gt;API&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;EnumSet&lt;/code&gt; provides type safety and interoperability, just like any other set implementation.&lt;/li&gt;
&lt;li&gt;Built-in operations: Bulk operations like removeAll and retainAll are implemented efficiently using bitwise arithmetic.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-37-use-enummap-instead-of-ordinal-indexing"&gt;Item 37: Use &lt;code&gt;EnumMap&lt;/code&gt; instead of ordinal indexing&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Ordinal indexing involves using an enum’s ordinal value as an index to access elements in an array or list. Problems:&lt;/li&gt;
&lt;li&gt;Using ordinals directly lacks the type safety provided by enums.&lt;/li&gt;
&lt;li&gt;Due to the incompatibility of arrays with generics, the program requires an unchecked cast, resulting in a compile-time warning.&lt;/li&gt;
&lt;li&gt;If the ordinal values change, the code breaks, and there’s no compile-time checking to ensure correct indexing.&lt;/li&gt;
&lt;li&gt;When using a two-dimensional array indexed by ordinals, the size of the table grows quadratically, even if some entries are null.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;EnumMap&lt;/code&gt; is a specialized map implementation designed to work efficiently with enum keys.&lt;/li&gt;
&lt;li&gt;They provide type safety, eliminating the need for unchecked casts. They also allow for cleaner code with no manual labeling of output.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-38-emulate-extensible-enums-with-interfaces"&gt;Item 38: Emulate extensible enums with interfaces&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Enum types in Java are not extensible by design.&lt;/li&gt;
&lt;li&gt;The basic idea is to define an interface for the opcode type and an enum that implements this interface.&lt;/li&gt;
&lt;li&gt;Emulating extensible enums with interfaces provides flexibility but has limitations. Implementations cannot be inherited from one enum type to another, and some code duplication may occur. Shared functionality can be encapsulated in a helper class or static helper method to reduce duplication.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-39-prefer-annotations-to-naming-patterns"&gt;Item 39: Prefer annotations to naming patterns&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Annotations offer a superior alternative to naming patterns. They address the shortcomings of naming patterns by providing compile-time checking, better enforcement of usage constraints, and support for associating parameter values with program elements (e.g., &lt;code&gt;@Test&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;While most programmers may not need to define their own annotation types, they should use predefined annotations provided by Java and consider using annotations provided by IDEs or static analysis tools. These annotations can enhance code quality and diagnostic information.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-40-consistently-use-the-override-annotation"&gt;Item 40: Consistently use the &lt;code&gt;Override&lt;/code&gt; annotation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;@Override&lt;/code&gt; annotation is used on method declarations to indicate that the annotated method overrides a declaration in a supertype (class or interface).&lt;/li&gt;
&lt;li&gt;Consistently using &lt;code&gt;@Override&lt;/code&gt; protects against bugs by ensuring that overridden methods are correctly implemented. It helps catch errors where a method is intended to override a superclass method but ends up overloading it instead.&lt;/li&gt;
&lt;li&gt;In abstract classes and interfaces, it is worth annotating all methods that are believed to override superclass or super-interface methods, regardless of their nature (concrete or abstract). This helps ensure correctness and prevents accidental additions of new methods.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-41-use-marker-interfaces-to-define-types"&gt;Item 41: Use marker interfaces to define types&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;A marker interface is an interface that contains &lt;em&gt;no method declarations&lt;/em&gt; but serves as a marker to designate a class implementing it as having a specific property. An example is the Serializable interface, which marks a class as serializable.&lt;/li&gt;
&lt;li&gt;Marker interfaces define a type that is implemented by instances of the marked class, allowing compile-time error detection. They provide stronger type checking compared to marker annotations, which cannot define a type.&lt;/li&gt;
&lt;li&gt;If the marker applies only to classes and interfaces, and there is a possibility of writing methods that accept only objects with the marking, a marker interface should be used. This enables compile-time type checking. If there is no need for such methods or if the marker is part of a framework heavily using annotations, a marker annotation is more appropriate.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="lambdas-and-streams"&gt;Lambdas and streams&lt;/h2&gt;
&lt;h3 id="item-42-prefer-lambdas-to-anonymous-classes"&gt;Item 42: Prefer lambdas to anonymous classes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Lambdas are concise expressions that can be used to create instances of functional interfaces, providing a more compact alternative to anonymous classes.&lt;/li&gt;
&lt;li&gt;Lambdas lack names and documentation, making them less suitable for complex computations or those exceeding a few lines.&lt;/li&gt;
&lt;li&gt;Anonymous classes are still necessary for creating instances of abstract classes or interfaces with multiple abstract methods. Lambdas cannot obtain a reference to themselves, unlike anonymous classes.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-43-prefer-method-references-to-lambdas"&gt;Item 43: Prefer method references to lambdas&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Method references offer a more concise alternative to lambdas. They allow you to refer to a method by name instead of providing a lambda expression. This is particularly useful when the lambda expression only calls a method without any additional logic. E.g.:&lt;/li&gt;
&lt;li&gt;Method reference: &lt;code&gt;map.merge(key, 1, Integer::sum);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Lambda expression: &lt;code&gt;service.execute(() -&amp;gt; action());&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;By using method references, you can eliminate the need to declare parameter names explicitly in the lambda expression.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-44-favor-the-use-of-standard-functional-interfaces"&gt;Item 44: Favor the use of standard functional interfaces&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Instead of using the Template Method pattern, which involves sub-classing and overriding methods, the modern approach is to provide static factories or constructors that accept function objects as parameters.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;java.util.function&lt;/code&gt; package provides a collection of standard functional interfaces for various use cases. When choosing a functional parameter type, it is recommended to use the standard functional interfaces instead of creating custom interfaces.&lt;/li&gt;
&lt;li&gt;Functional interfaces should be annotated with the &lt;code&gt;@FunctionalInterface&lt;/code&gt; annotation. This annotation serves as documentation, enforces the single abstract method requirement, and prevents accidental addition of abstract methods in the interface.&lt;/li&gt;
&lt;li&gt;In &lt;span class="caps"&gt;API&lt;/span&gt; design, it’s important to avoid overloading methods that take different functional interfaces in the same argument position. This can create ambiguity for clients, and it’s best to design the &lt;span class="caps"&gt;API&lt;/span&gt; to prevent this situation.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-45-use-streams-judiciously"&gt;Item 45: Use streams judiciously&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Streams were introduced in Java 8 as a way to perform bulk operations on sequences of data elements. A stream represents a sequence of elements, and a stream pipeline consists of a source stream, intermediate operations, and a terminal operation.&lt;/li&gt;
&lt;li&gt;The streams &lt;span class="caps"&gt;API&lt;/span&gt; provides a fluent &lt;span class="caps"&gt;API&lt;/span&gt;, allowing multiple operations to be chained together in a single expression. This enables concise and readable code.&lt;/li&gt;
&lt;li&gt;Overusing streams can make code harder to read and maintain.&lt;/li&gt;
&lt;li&gt;They have restrictions on accessing and modifying local variables and limited control flow capabilities.&lt;/li&gt;
&lt;li&gt;Streams are well-suited for tasks such as transforming elements, filtering, combining elements, accumulating into collections, and searching. If a computation requires access to corresponding elements from multiple stages of the pipeline, streams might not be the best choice.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-46-prefer-side-effect-free-functions-in-streams"&gt;Item 46: Prefer side-effect-free functions in streams&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The fundamental aspect of the streams paradigm is structuring computations as a sequence of transformations where each stage’s result is a pure function of the previous stage’s result. A pure function depends only on its input and does not have any side effects or modify any state.&lt;/li&gt;
&lt;li&gt;When using stream operations, both intermediate and terminal, it’s important to ensure that the function objects passed to them are free of side effects. This means they should not depend on mutable state or update any state.&lt;/li&gt;
&lt;li&gt;The correct usage of streams involves utilizing collectors, which encapsulate reduction strategies. Collectors can be used to gather elements into collections or create maps based on grouping or other criteria (e.g., &lt;code&gt;toList&lt;/code&gt;, &lt;code&gt;toSet&lt;/code&gt;, &lt;code&gt;toMap&lt;/code&gt;, &lt;code&gt;groupingBy&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;There are parallel and concurrent variants of collectors, such as &lt;code&gt;groupingByConcurrent&lt;/code&gt; and &lt;code&gt;toConcurrentMap&lt;/code&gt;, which efficiently handle parallel execution and produce &lt;code&gt;ConcurrentHashMap&lt;/code&gt; instances.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-47-prefer-collection-to-stream-as-a-return-type"&gt;Item 47: Prefer Collection to Stream as a return type&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;code&gt;for&lt;/code&gt; loop cannot be used to iterate over a stream, and it’s not possible to add elements to a stream. This makes streams less flexible than collections.&lt;/li&gt;
&lt;li&gt;To enable iteration over a stream with a for-each loop, an adapter method can be created. The method converts a Stream to an Iterable, allowing for the use of for-each loops.&lt;/li&gt;
&lt;li&gt;When designing a public &lt;span class="caps"&gt;API&lt;/span&gt; that returns a sequence, it is important to consider users who may prefer stream pipelines or for-each loops. The Collection interface, being a subtype of Iterable and providing a stream method, is often the best choice for a return type. Arrays can also be used when appropriate.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-48-use-caution-when-making-streams-parallel"&gt;Item 48: Use caution when making streams parallel&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Simply adding the &lt;code&gt;parallel&lt;/code&gt; method to a stream pipeline does not guarantee improved performance. In some cases, it can lead to liveness failures, incorrect results, and unpredictable behavior.&lt;/li&gt;
&lt;li&gt;Performance gains from parallelism are most significant when working with data structures like &lt;code&gt;ArrayList&lt;/code&gt;, &lt;code&gt;HashMap&lt;/code&gt;, &lt;code&gt;HashSet&lt;/code&gt;, &lt;code&gt;ConcurrentHashMap&lt;/code&gt;, &lt;code&gt;arrays&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt; ranges, and &lt;code&gt;long&lt;/code&gt; ranges. These data structures can be easily split into sub-ranges, enabling efficient work division among parallel threads.&lt;/li&gt;
&lt;li&gt;Parallelization should only be used as a performance optimization.&lt;/li&gt;
&lt;li&gt;Certain domains, such as machine learning and data processing, are well-suited for parallel speedups.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="methods"&gt;Methods&lt;/h2&gt;
&lt;h3 id="item-49-check-parameters-for-validity"&gt;Item 49: Check parameters for validity&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Clearly document the restrictions on parameter values in the method’s documentation. Enforce these restrictions by performing parameter checks at the beginning of the method body. Detecting errors as soon as possible is crucial for maintaining code integrity.&lt;/li&gt;
&lt;li&gt;If a method fails to check its parameters, it may result in confusing exceptions, incorrect results, or compromised object states.&lt;/li&gt;
&lt;li&gt;For public and protected methods, use the &lt;code&gt;@throws&lt;/code&gt; tag in Javadoc to document the exception that will be thrown if a parameter value violates a restriction.&lt;/li&gt;
&lt;li&gt;Use the &lt;code&gt;Objects.requireNonNull&lt;/code&gt; method, introduced in Java 7, to check for null values. It is flexible and convenient, allowing you to specify your own exception detail message if desired. It returns the non-null value, enabling simultaneous null check and usage.&lt;/li&gt;
&lt;li&gt;Nonpublic methods can use assertions to check parameters since the package author controls the method’s usage. Assertions throw AssertionError if the condition fails. Enabling assertions with the &lt;code&gt;-ea&lt;/code&gt; flag is necessary for assertions to take effect.&lt;/li&gt;
&lt;li&gt;While it’s important to check parameter validity, avoid imposing unnecessary restrictions on parameters. Design methods to be as general as possible, accepting a wide range of valid parameter values.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-50-make-defensive-copies-when-needed"&gt;Item 50: Make defensive copies when needed&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;To protect against ill-behaved clients or honest mistakes, it is crucial to write robust classes that can handle unexpected behavior.&lt;/li&gt;
&lt;li&gt;Classes that contain mutable objects can be vulnerable to attacks that exploit their mutability.&lt;/li&gt;
&lt;li&gt;make defensive copies of each mutable parameter in the constructor. Use these copies as components of the class instance instead of the original objects. This ensures that changes to the original objects do not affect the class’s internal state.&lt;/li&gt;
&lt;li&gt;Accessor methods that provide access to mutable internal fields should also return defensive copies of the fields.&lt;/li&gt;
&lt;li&gt;Whenever possible, use immutable objects as components of your classes to eliminate the need for defensive copying. Immutable objects are inherently safe and can simplify your code.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-51-design-method-signatures-carefully"&gt;Item 51: Design method signatures carefully&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Choose method names carefully.&lt;/li&gt;
&lt;li&gt;Avoid excessive convenience methods. Convenience methods are useful, but they can make the &lt;span class="caps"&gt;API&lt;/span&gt; more difficult to learn and maintain.&lt;/li&gt;
&lt;li&gt;Limit parameter list length.&lt;/li&gt;
&lt;li&gt;Prefer interfaces over classes for parameter types. Use interfaces to define parameters instead of specific classes whenever possible. This allows for more flexibility and enables the use of different implementations. For example, use the &lt;code&gt;Map&lt;/code&gt; interface instead of the &lt;code&gt;HashMap&lt;/code&gt; class to allow different &lt;code&gt;Map&lt;/code&gt; implementations to be used.&lt;/li&gt;
&lt;li&gt;Use enums instead of boolean parameters. Enums allow for future expansion by adding more options without changing method signatures.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-52-use-overloading-judiciously"&gt;Item 52: Use overloading judiciously&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Overloading can lead to unexpected behavior: If overloaded methods have the same number of parameters and the same compile-time type of the arguments, the selection of the method is ambiguous.&lt;/li&gt;
&lt;li&gt;Overloaded methods should have “radically different” parameter types.&lt;/li&gt;
&lt;li&gt;Generics can create situations where two overloadings with different functional interfaces in the same argument position cause confusion. It’s recommended not to overload methods that take different functional interfaces in the same argument position.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-53-use-varargs-judiciously"&gt;Item 53: Use varargs judiciously&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Varargs allow methods to accept a variable number of arguments of a specified type. They work by creating an array internally and passing the array to the method.&lt;/li&gt;
&lt;li&gt;Use varargs when you want a method with a variable number of arguments. For example, when calculating the sum of integers or finding the minimum of a set of integers.&lt;/li&gt;
&lt;li&gt;Declare the method to take two parameters: one normal parameter and one varargs parameter. This ensures that the method can handle both cases when at least one argument is passed and when more than one argument is passed.&lt;/li&gt;
&lt;li&gt;Be aware that every invocation of a varargs method causes an array allocation and initialization, so consider the performance implications in performance-critical situations.&lt;/li&gt;
&lt;li&gt;To optimize performance while still using varargs, you can provide overloaded methods with a fixed number of parameters and a single varargs method for cases when the number of arguments exceeds a certain threshold.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-54-return-empty-collections-or-arrays-not-nulls"&gt;Item 54: Return empty collections or arrays, not nulls&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Returning null to indicate an empty collection or array is unnecessary and error-prone. It requires extra code in the client to handle the null return value and increases the risk of null pointer errors.&lt;/li&gt;
&lt;li&gt;Instead of returning null, return empty collections or arrays. This can be achieved by creating a new instance of the appropriate collection or array type. For example, returning &lt;code&gt;new ArrayList&amp;lt;&amp;gt;(cheesesInStock)&lt;/code&gt; will return an empty &lt;code&gt;ArrayList&lt;/code&gt; if &lt;code&gt;cheesesInStock&lt;/code&gt; is empty.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-55-return-optionals-judiciously"&gt;Item 55: Return optionals judiciously&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Exceptions should be reserved for exceptional conditions, and returning null requires special-case code to handle it and increases the risk of null pointer errors.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;Optional&amp;lt;T&amp;gt;&lt;/code&gt; class represents an immutable container that can hold either a single non-null value of type &lt;code&gt;T&lt;/code&gt; or nothing at all (empty). It provides a more flexible and less error-prone alternative to exceptions or null returns.&lt;/li&gt;
&lt;li&gt;Avoid using &lt;code&gt;Optional&amp;lt;T&amp;gt;&lt;/code&gt; for container types like collections, maps, streams, arrays, and other optionals. Return the empty container directly instead of wrapping it in an optional.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-56-write-doc-comments-for-all-exposed-api-elements"&gt;Item 56: Write doc comments for all exposed &lt;span class="caps"&gt;API&lt;/span&gt; elements&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Javadoc is a utility that generates &lt;span class="caps"&gt;API&lt;/span&gt; documentation automatically from specially formatted doc comments in the source code.&lt;/li&gt;
&lt;li&gt;Precede every exported class, interface, constructor, method, and field declaration with a doc comment. It describes the contract between the &lt;span class="caps"&gt;API&lt;/span&gt; element and its client.&lt;/li&gt;
&lt;li&gt;Document the preconditions, post-conditions, and side effects of methods. Use the &lt;code&gt;@param&lt;/code&gt; tag to describe parameters, &lt;code&gt;@return&lt;/code&gt; tag for the return value (if not void), and &lt;code&gt;@throws&lt;/code&gt; tag for exceptions thrown.&lt;/li&gt;
&lt;li&gt;Use &lt;span class="caps"&gt;HTML&lt;/span&gt; tags in doc comments to format and structure the generated documentation.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;{@code}&lt;/code&gt; tag to render code fragments in code font and to suppress processing of &lt;span class="caps"&gt;HTML&lt;/span&gt; markup and nested Javadoc tags within the code fragment.&lt;/li&gt;
&lt;li&gt;Write summary descriptions as &lt;em&gt;verb&lt;/em&gt; phrases for &lt;em&gt;methods and constructors&lt;/em&gt;, and &lt;em&gt;noun&lt;/em&gt; phrases for &lt;em&gt;classes&lt;/em&gt;, &lt;em&gt;interfaces&lt;/em&gt;, and &lt;em&gt;fields&lt;/em&gt;. The first sentence becomes the summary description.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;{@literal}&lt;/code&gt; tag to include &lt;span class="caps"&gt;HTML&lt;/span&gt; metacharacters in documentation, such as &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;amp;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Document self-use patterns in classes designed for inheritance using the &lt;code&gt;@implSpec&lt;/code&gt; tag. It describes the contract between the method and its subclass.&lt;/li&gt;
&lt;li&gt;Package-level doc comments should be placed in &lt;code&gt;package-info.java&lt;/code&gt; file. Similarly, module-level comments should be placed in &lt;code&gt;module-info.java&lt;/code&gt; file.&lt;/li&gt;
&lt;li&gt;Document thread-safety and serializability of classes.&lt;/li&gt;
&lt;li&gt;Read the generated documentation to ensure clarity and make any necessary improvements to the doc comments.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="general-programming"&gt;General programming&lt;/h2&gt;
&lt;h3 id="item-57-minimize-the-scope-of-local-variables"&gt;Item 57: Minimize the scope of local variables&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Declare variables where they are first used, rather than at the beginning of a block. This approach eliminates clutter and helps readers understand the purpose and type of the variable when it is used.&lt;/li&gt;
&lt;li&gt;Avoid prematurely declaring variables outside of the block in which they are used. By doing so, you ensure that the variable’s scope begins at the appropriate point and ends when it is no longer needed.&lt;/li&gt;
&lt;li&gt;Take advantage of the scope-limiting capabilities of for loops.&lt;/li&gt;
&lt;li&gt;Prefer for loops over while loops when the loop variable is not needed after the loop terminates.&lt;/li&gt;
&lt;li&gt;Minimizing the scope of local variables helps prevent copy-and-paste errors.&lt;/li&gt;
&lt;li&gt;Consider using multiple loop variables within a for loop to avoid redundant computations. This approach can improve performance by storing the limit of the first variable in a second variable, eliminating the need for redundant computations in each iteration.&lt;/li&gt;
&lt;li&gt;Keep methods small and focused to minimize the scope of local variables.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-58-prefer-for-each-loops-to-traditional-for-loops"&gt;Item 58: Prefer &lt;code&gt;for-each&lt;/code&gt; loops to traditional &lt;code&gt;for&lt;/code&gt; loops&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Traditional &lt;code&gt;for&lt;/code&gt; loops for iteration over collections and arrays can be cluttered and prone to errors. They require explicit use of an iterator or an index variable.&lt;/li&gt;
&lt;li&gt;The for-each loop (enhanced for statement) solves these issues by eliminating the need for explicit iterators or index variables: &lt;code&gt;for (Element e : elements) { ... }&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;For-each loops can be used with both collections and arrays, making it easy to switch the implementation type of a container without changing the loop syntax.&lt;/li&gt;
&lt;li&gt;For nested iteration, for-each loops offer greater clarity and simplicity compared to traditional for loops. They avoid common bugs that can occur when using multiple iterators or index variables.&lt;/li&gt;
&lt;li&gt;There are certain situations where for-each loops cannot be used, such as when performing destructive filtering, transforming values, or iterating in parallel. In these cases, traditional for loops or other approaches may be necessary.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;Iterable&lt;/code&gt; interface allows objects to be iterated over using the for-each loop. By implementing the &lt;code&gt;Iterable&lt;/code&gt; interface and providing an iterator method, your custom types can be used with for-each loops.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-59-know-and-use-the-libraries"&gt;Item 59: Know and use the libraries&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Libraries, such as &lt;code&gt;Random&lt;/code&gt;, offer well-designed and thoroughly tested methods for common tasks.&lt;/li&gt;
&lt;li&gt;The use of libraries saves time and effort. You can focus on your application logic instead of spending time on low-level implementations.&lt;/li&gt;
&lt;li&gt;Standard libraries tend to improve over time in terms of performance and functionality.&lt;/li&gt;
&lt;li&gt;While the libraries are extensive, every programmer should be familiar with the basics of &lt;code&gt;java.lang&lt;/code&gt;, &lt;code&gt;java.util&lt;/code&gt;, &lt;code&gt;java.io&lt;/code&gt;, and their sub-packages. Additional knowledge can be acquired on an as-needed basis.&lt;/li&gt;
&lt;li&gt;Certain libraries, such as the collections framework, streams library, and concurrency utilities in &lt;code&gt;java.util.concurrent&lt;/code&gt;, should be part of every programmer’s toolkit.&lt;/li&gt;
&lt;li&gt;Avoid reinventing the wheel. If a common task can be accomplished using existing library facilities, utilize them instead of writing your own code. Library code is often more robust and undergoes more scrutiny than individual developers can afford.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-60-avoid-float-and-double-if-exact-answers-are-required"&gt;Item 60: Avoid float and double if exact answers are required&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;float&lt;/code&gt; and &lt;code&gt;double&lt;/code&gt; types are designed for scientific and engineering calculations and provide fast but approximate results using binary floating-point arithmetic.&lt;/li&gt;
&lt;li&gt;The inherent imprecision of float and double types makes them unsuitable for applications where exact results are necessary, such as monetary calculations.&lt;/li&gt;
&lt;li&gt;Performing arithmetic operations with float and double types can lead to unexpected rounding errors and inaccuracies.&lt;/li&gt;
&lt;li&gt;Rounding the results before printing is not a reliable solution to the imprecision issue.&lt;/li&gt;
&lt;li&gt;To achieve accurate results in monetary calculations, it is recommended to use alternative data types like &lt;code&gt;BigDecimal&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, or &lt;code&gt;long&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BigDecimal&lt;/code&gt; is a precise data type that can handle exact decimal calculations. It is suitable for situations where accuracy is paramount, such as monetary calculations. However, it is less convenient to use than primitive types and slower in performance.&lt;/li&gt;
&lt;li&gt;An alternative approach is to perform calculations in cents using int or long types, keeping track of the decimal point manually. This approach is more efficient and convenient than using &lt;code&gt;BigDecimal&lt;/code&gt; but has limitations in handling large quantities.&lt;/li&gt;
&lt;li&gt;Use BigDecimal when precision is critical, int or long when performance and convenience are important, and float or double when approximate results are acceptable.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BigDecimal&lt;/code&gt; offers full control over rounding, which is useful in business calculations with legally mandated rounding behavior.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-61-prefer-primitive-types-to-boxed-primitives"&gt;Item 61: Prefer primitive types to boxed primitives&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Java has two types: primitives (e.g., &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt;, &lt;code&gt;boolean&lt;/code&gt;) and reference types (e.g., &lt;code&gt;String&lt;/code&gt;, &lt;code&gt;List&lt;/code&gt;). Each primitive type has a corresponding boxed primitive type (e.g., &lt;code&gt;Integer&lt;/code&gt;, &lt;code&gt;Double&lt;/code&gt;, &lt;code&gt;Boolean&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Primitives only have values, while boxed primitives have both values and identities.&lt;/li&gt;
&lt;li&gt;Boxed primitives have an additional nonfunctional value: &lt;code&gt;null&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Primitives are more time- and space-efficient compared to boxed primitives.&lt;/li&gt;
&lt;li&gt;Comparing boxed primitives with the &lt;code&gt;==&lt;/code&gt; operator performs an identity comparison, not a value comparison.&lt;/li&gt;
&lt;li&gt;Auto-unboxing a null boxed primitive results in a NullPointerException.&lt;/li&gt;
&lt;li&gt;Auto-boxing and auto-unboxing operations can lead to unnecessary object creations and performance issues.&lt;/li&gt;
&lt;li&gt;Use primitives whenever possible, especially when comparing values or performing computations.&lt;/li&gt;
&lt;li&gt;Boxed primitives are necessary in specific situations:&lt;/li&gt;
&lt;li&gt;When using collections, as primitives cannot be directly added to collections;&lt;/li&gt;
&lt;li&gt;As type parameters in parameterized types and methods;&lt;/li&gt;
&lt;li&gt;When making reflective method invocations.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-62-avoid-strings-where-other-types-are-more-appropriate"&gt;Item 62: Avoid strings where other types are more appropriate&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Strings should be used to represent text and should not be used as substitutes for other value types.&lt;/li&gt;
&lt;li&gt;Avoid using strings to represent numeric data. Translate numeric data into the appropriate numeric type, such as &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, or &lt;code&gt;BigInteger&lt;/code&gt;, to ensure accuracy and enable numerical operations.&lt;/li&gt;
&lt;li&gt;Enum types are better suited for enumerated type constants than strings. Use enums to represent a fixed set of values with distinct identities and behaviors.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-63-beware-the-performance-of-string-concatenation"&gt;Item 63: Beware the performance of string concatenation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The string concatenation operator is convenient for combining a few strings but does not scale well. When using the concatenation operator repeatedly, the time required is quadratic in the number of strings being concatenated because the contents of both strings are copied each time.&lt;/li&gt;
&lt;li&gt;To achieve better performance, use a &lt;code&gt;StringBuilder&lt;/code&gt; instead of the string concatenation operator when constructing a string from multiple components. &lt;code&gt;StringBuilder&lt;/code&gt; provides efficient appending of strings, and its performance is linear in the number of strings being concatenated.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;StringBuilder&lt;/code&gt; approach can significantly outperform the string concatenation operator, especially when the number of strings or the size of the resulting string is large. Preallocating a &lt;code&gt;StringBuilder&lt;/code&gt; with an appropriate capacity further improves performance by avoiding automatic growth.&lt;/li&gt;
&lt;li&gt;Consider alternatives to string concatenation, such as using a character array or processing strings individually instead of combining them if performance is a concern.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-64-refer-to-objects-by-their-interfaces"&gt;Item 64: Refer to objects by their interfaces&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Favor using interfaces as types over classes when referring to objects. Parameters, return values, variables, and fields should all be declared using interface types if appropriate interfaces exist.&lt;/li&gt;
&lt;li&gt;By using interfaces as types, your code becomes more flexible. If you decide to switch implementations, you can simply change the class name in the constructor (or use a different static factory) without affecting the surrounding code.&lt;/li&gt;
&lt;li&gt;It is appropriate to refer to objects by their class rather than an interface when no appropriate interface exists, such as with value classes like &lt;code&gt;String&lt;/code&gt; or &lt;code&gt;BigInteger&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Classes implementing an interface but providing additional methods not found in the interface should be referred to by their class only if the program relies on those extra methods.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-65-prefer-interfaces-to-reflection"&gt;Item 65: Prefer interfaces to reflection&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Reflection provides programmatic access to arbitrary classes and allows manipulation of their constructors, methods, and fields. However, it comes with several drawbacks:&lt;/li&gt;
&lt;li&gt;Loss of compile-time type checking and exception checking;&lt;/li&gt;
&lt;li&gt;Clumsy and verbose code required for reflective access;&lt;/li&gt;
&lt;li&gt;Poor performance compared to normal method invocation.&lt;/li&gt;
&lt;li&gt;Reflection is rarely needed in most applications.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-66-use-native-methods-judiciously"&gt;Item 66: Use native methods judiciously&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The use of native methods has serious disadvantages:&lt;/li&gt;
&lt;li&gt;Native languages are not memory safe, so applications using native methods are susceptible to memory corruption errors;&lt;/li&gt;
&lt;li&gt;Native methods make programs less portable as they are more platform-dependent than Java;&lt;/li&gt;
&lt;li&gt;Debugging native code is more challenging compared to Java code;&lt;/li&gt;
&lt;li&gt;Garbage collection and memory management become more complex since the garbage collector cannot track or automate native memory usage;&lt;/li&gt;
&lt;li&gt;Native methods require writing and maintaining “glue code,” which can be difficult to read and tedious to write.&lt;/li&gt;
&lt;li&gt;Use as little native code as possible.&lt;/li&gt;
&lt;li&gt;Thoroughly test the native code to avoid bugs that could corrupt the entire application.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-67-optimize-judiciously"&gt;Item 67: Optimize judiciously&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Premature optimization is often counterproductive. More computing sins are committed in the name of efficiency than for any other reason. Optimization without necessarily achieving it can lead to software that is neither fast nor correct and can be difficult to fix.&lt;/li&gt;
&lt;li&gt;Good programs should prioritize sound architectural principles over performance. Write good programs first, and if necessary, optimize them later. Good programs are designed with information hiding, allowing individual components to be changed without affecting the rest of the system.&lt;/li&gt;
&lt;li&gt;Performance should be considered during the design process. Avoid design decisions that limit performance, especially in APIs, wire-level protocols, and persistent data formats. &lt;span class="caps"&gt;API&lt;/span&gt; design can have a significant impact on performance, so be mindful of decisions such as mutability, inheritance, and interface usage.&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;API&lt;/span&gt; design and architectural decisions can have real performance consequences. Consider the trade-offs and implications of your design choices. For example, returning mutable objects may result in unnecessary defensive copying, and using implementation types instead of interfaces can limit future performance improvements.&lt;/li&gt;
&lt;li&gt;Before optimizing, ensure that your program has a clear, concise, and well-structured implementation. Measure performance before and after each attempted optimization. Profiling tools can help identify performance bottlenecks and guide optimization efforts. Be aware that Java’s performance model is less well-defined compared to lower-level languages, making it essential to measure the effects of optimizations on different implementations and hardware platforms.&lt;/li&gt;
&lt;li&gt;Algorithmic changes should be prioritized over low-level optimizations. If a quadratic or inefficient algorithm exists, no amount of tuning will fix the underlying problem.&lt;/li&gt;
&lt;li&gt;Performance measurement and optimization are iterative processes. Measure performance, identify bottlenecks, optimize relevant parts, and repeat until satisfied.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-68-adhere-to-generally-accepted-naming-conventions"&gt;Item 68: Adhere to generally accepted naming conventions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Typographical Naming Conventions:&lt;/li&gt;
&lt;li&gt;Package and module names should be hierarchical, separated by periods, and consist of lowercase alphabetic characters and digits. The name should begin with the organization’s Internet domain name, with the components reversed;&lt;/li&gt;
&lt;li&gt;Class and interface names should consist of one or more words, with the first letter of each word capitalized. Abbreviations should be avoided, except for acronyms and common abbreviations.&lt;/li&gt;
&lt;li&gt;Method and field names should follow the same typographical conventions as class and interface names, with the first letter lowercase for methods and fields. Acronyms occurring as the first word should be lowercase;&lt;/li&gt;
&lt;li&gt;Constant field names should consist of uppercase words separated by underscores;&lt;/li&gt;
&lt;li&gt;Local variable names follow similar conventions to member names, with abbreviations and short sequences of characters permitted.&lt;/li&gt;
&lt;li&gt;Grammatical Naming Conventions:&lt;/li&gt;
&lt;li&gt;Instantiable classes are generally named with a singular noun or noun phrase. Non-instantiable utility classes are often named with a plural noun;&lt;/li&gt;
&lt;li&gt;Interfaces are named like classes or with an adjective ending in “able” or “ible”;&lt;/li&gt;
&lt;li&gt;Methods that perform actions are named with a verb or verb phrase. Methods returning boolean values usually begin with “is” or “has”;&lt;/li&gt;
&lt;li&gt;Methods returning non-boolean values or attributes of the object are usually named with a noun, noun phrase, or a verb phrase beginning with “get”;&lt;/li&gt;
&lt;li&gt;Field names typically follow the same conventions as class and interface names, using nouns or noun phrases.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="exceptions"&gt;Exceptions&lt;/h2&gt;
&lt;h3 id="item-69-use-exceptions-only-for-exceptional-conditions"&gt;Item 69: Use exceptions only for exceptional conditions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Exceptions should be used for exceptional circumstances, situations that are uncommon and unexpected. They should not be used for regular control flow.&lt;/li&gt;
&lt;li&gt;Exceptions are not designed to be as fast as explicit tests, so using them for control flow can result in slower code execution.&lt;/li&gt;
&lt;li&gt;Placing code inside a try-catch block inhibits certain optimizations that &lt;span class="caps"&gt;JVM&lt;/span&gt; implementations may perform.&lt;/li&gt;
&lt;li&gt;The exception-based loop, which relies on throwing and catching exceptions for loop termination, is slower, obfuscates the code’s purpose, and can hide bugs in the code.&lt;/li&gt;
&lt;li&gt;Exceptions used for control flow can mask bugs, making debugging more complicated. Bugs that would generate uncaught exceptions in a standard loop idiom may be caught and misinterpreted as normal loop termination in an exception-based loop.&lt;/li&gt;
&lt;li&gt;An alternative to a state-testing method is to have the state-dependent method return an empty optional or a distinguished value (such as null) if it cannot perform the desired computation.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-70-use-checked-exceptions-for-recoverable-conditions-and-runtime-exceptions-for-programming-errors"&gt;Item 70: Use checked exceptions for recoverable conditions and runtime exceptions for programming errors&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Checked exceptions should be used for conditions from which the caller can reasonably be expected to recover. By throwing a checked exception, the &lt;span class="caps"&gt;API&lt;/span&gt; designer mandates the caller to handle the exception or propagate it.&lt;/li&gt;
&lt;li&gt;Checked exceptions indicate recoverable conditions, and the &lt;span class="caps"&gt;API&lt;/span&gt; user should make an effort to handle them appropriately.&lt;/li&gt;
&lt;li&gt;Unchecked throwables, which include runtime exceptions and errors, needn’t and generally shouldn’t be caught. They indicate situations where recovery is impossible, and continued execution would do more harm than good.&lt;/li&gt;
&lt;li&gt;Runtime exceptions are typically used to indicate programming errors, such as precondition violations.&lt;/li&gt;
&lt;li&gt;It may not always be clear whether a condition is recoverable or a programming error. In such cases, it is a matter of judgment for the &lt;span class="caps"&gt;API&lt;/span&gt; designer. If recovery is likely, use a checked exception; if not, use a runtime exception.&lt;/li&gt;
&lt;li&gt;Checked exceptions should provide methods that aid in recovery from the exceptional condition.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-71-avoid-unnecessary-use-of-checked-exceptions"&gt;Item 71: Avoid unnecessary use of checked exceptions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Overuse of checked exceptions can make APIs difficult to use.&lt;/li&gt;
&lt;li&gt;The burden on the programmer increases when dealing with checked exceptions, as they must be handled in catch blocks or propagated outward, placing a burden on the &lt;span class="caps"&gt;API&lt;/span&gt; user.&lt;/li&gt;
&lt;li&gt;Another approach is to refactor the method that throws the checked exception into two methods: one that returns a boolean indicating whether the exception would be thrown and another that performs the action. This allows the caller to check the state before invoking the action method.&lt;/li&gt;
&lt;li&gt;Use checked exceptions sparingly, consider returning optionals, and throw unchecked exceptions if recovery is not possible or meaningful for the caller.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-72-favor-the-use-of-standard-exceptions"&gt;Item 72: Favor the use of standard exceptions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Reusing standard exceptions in your APIs and programs provides several benefits, including easier learning and usage, improved readability, and reduced memory footprint and class loading time.&lt;/li&gt;
&lt;li&gt;The most commonly reused exception types are &lt;code&gt;IllegalArgumentException&lt;/code&gt; and &lt;code&gt;IllegalStateException&lt;/code&gt;. &lt;code&gt;IllegalArgumentException&lt;/code&gt; is used when the caller passes an &lt;em&gt;inappropriate argument value&lt;/em&gt;, while &lt;code&gt;IllegalStateException&lt;/code&gt; is used when the invocation is &lt;em&gt;illegal due to the state of the receiving object&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;It is recommended to use specific standard exceptions like &lt;code&gt;NullPointerException&lt;/code&gt; and &lt;code&gt;IndexOutOfBoundsException&lt;/code&gt; for certain kinds of illegal arguments and states instead of using &lt;code&gt;IllegalArgumentException&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;ConcurrentModificationException is a reusable exception used to indicate concurrent modification of an object that was designed for single-threaded use or with external synchronization.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;UnsupportedOperationException&lt;/code&gt; is another reusable exception used to indicate that an object does not support a particular operation, typically because it is an optional operation defined by an interface that the object implements.It is advised not to reuse the &lt;code&gt;Exception&lt;/code&gt;, &lt;code&gt;RuntimeException&lt;/code&gt;, &lt;code&gt;Throwable&lt;/code&gt;, or &lt;code&gt;Error&lt;/code&gt; classes directly. Treat them as abstract and avoid testing for them directly because they are superclasses of other exceptions.&lt;/li&gt;
&lt;li&gt;When reusing exceptions, ensure that the conditions under which you would throw them align with their documented semantics. You can subclass a standard exception to add more detail if needed.&lt;/li&gt;
&lt;li&gt;Choosing which exception to reuse can be challenging when multiple exceptions seem applicable. In such cases, follow the rule to throw &lt;code&gt;IllegalStateException&lt;/code&gt; if no argument values would have worked, otherwise throw &lt;code&gt;IllegalArgumentException&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-73-throw-exceptions-appropriate-to-the-abstraction"&gt;Item 73: Throw exceptions appropriate to the abstraction&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Higher layers should catch lower-level exceptions and throw exceptions that are meaningful and can be explained in terms of the higher-level abstraction. This is known as &lt;em&gt;exception translation&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Exception translation&lt;/em&gt; is achieved by catching the lower-level exception and throwing a higher-level exception that encapsulates the lower-level exception and provides a more meaningful explanation of the problem.&lt;/li&gt;
&lt;li&gt;Exception chaining is a special form of exception translation where the lower-level exception is passed to the higher-level exception as the cause. This allows for easy access to the lower-level exception and integration of its stack trace into the higher-level exception’s stack trace.&lt;/li&gt;
&lt;li&gt;Exception translation should not be overused. Whenever possible, exceptions from lower layers should be prevented or handled within the higher layer itself.&lt;/li&gt;
&lt;li&gt;If exceptions from lower layers cannot be prevented or handled, it may be appropriate for the higher layer to silently work around these exceptions, log them using an appropriate logging facility, and insulate the caller from lower-level problems.&lt;/li&gt;
&lt;li&gt;Exception translation allows for better encapsulation, clearer APIs, and the ability to investigate the underlying cause of failures while insulating clients from lower-level exceptions.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-74-document-all-exceptions-thrown-by-each-method"&gt;Item 74: Document all exceptions thrown by each method&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Documenting the exceptions thrown by a method is a critical part of the documentation required to use the method correctly.&lt;/li&gt;
&lt;li&gt;Always declare checked exceptions individually and document the specific conditions under which each exception is thrown using the Javadoc &lt;code&gt;@throws&lt;/code&gt; tag.&lt;/li&gt;
&lt;li&gt;While the language does not require documenting unchecked exceptions, it is wise to document them carefully as they often represent programming errors. Familiarizing programmers with all the possible errors helps them avoid making these mistakes.&lt;/li&gt;
&lt;li&gt;Do not use the &lt;code&gt;throws&lt;/code&gt; keyword on unchecked exceptions.&lt;/li&gt;
&lt;li&gt;It is ideal to document all unchecked exceptions that each method can throw, but in practice, it may not always be achievable due to dependencies on other classes that may throw additional unchecked exceptions.&lt;/li&gt;
&lt;li&gt;If an exception is thrown by many methods in a class for the same reason, you can document the exception in the class’s documentation comment instead of documenting it individually for each method.&lt;/li&gt;
&lt;li&gt;Failing to document the exceptions that your methods can throw can make it difficult or impossible for others to effectively use your classes and interfaces.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-75-include-failure-capture-information-in-detail-messages"&gt;Item 75: Include failure-capture information in detail messages&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The detail message of an exception should capture as much information as possible concerning the cause of the failure. It should contain the values of all parameters and fields that contributed to the exception.&lt;/li&gt;
&lt;li&gt;Including pertinent data in the detail message aids in diagnosing the cause of the failure. It helps identify specific errors such as incorrect index values, boundary violations, or invariant failures.&lt;/li&gt;
&lt;li&gt;It is crucial to avoid including security-sensitive information like passwords or encryption keys in exception detail messages as stack traces may be seen by multiple individuals during the debugging and issue-fixing process.&lt;/li&gt;
&lt;li&gt;Do not write lengthy prose descriptions.&lt;/li&gt;
&lt;li&gt;The detail message of an exception is primarily intended for programmers or site reliability engineers, not end users. Therefore, information content is more important than readability.&lt;/li&gt;
&lt;li&gt;Requiring failure-capture information as parameters in the constructors of exceptions can ensure that the detail message automatically includes the necessary information. This centralizes the code for generating a high-quality detail message in the exception class itself.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-76-strive-for-failure-atomicity"&gt;Item 76: Strive for failure atomicity&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Failure atomicity means that after an object throws an exception, it should still be in a well-defined, usable state, even if the failure occurred in the midst of performing an operation.&lt;/li&gt;
&lt;li&gt;Immutable objects naturally achieve failure atomicity because their state is consistent when they are created and cannot be modified thereafter.&lt;/li&gt;
&lt;li&gt;For methods that operate on mutable objects, one way to achieve failure atomicity is to check parameters for validity before performing the operation. This ensures that most exceptions are thrown before object modification commences.&lt;/li&gt;
&lt;li&gt;Another approach to achieving failure atomicity is to order the computation so that any part that may fail takes place before any part that modifies the object. This ensures that failure occurs before any modification to the object.&lt;/li&gt;
&lt;li&gt;A third approach is to perform the operation on a temporary copy of the object and replace the contents of the object with the temporary copy once the operation is complete. This is useful when the computation can be performed more efficiently on a temporary data structure.&lt;/li&gt;
&lt;li&gt;Recovery code can be written to intercept a failure and roll back the object’s state to the point before the operation began. This approach is mainly used for durable data structures.&lt;/li&gt;
&lt;li&gt;Failure atomicity is not always achievable, especially in cases of concurrent modification without proper synchronization. In such cases, objects may be left in an inconsistent state.&lt;/li&gt;
&lt;li&gt;It is not always desirable or practical to achieve failure atomicity, as it can increase cost and complexity. However, it is often easy to achieve once the issue is understood.&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;API&lt;/span&gt; documentation should clearly indicate whether failure atomicity is achieved and what state the object will be left in after a method invocation.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-77-dont-ignore-exceptions"&gt;Item 77: Don’t ignore exceptions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;When an &lt;span class="caps"&gt;API&lt;/span&gt; declares a method to throw an exception, it is indicating that there may be exceptional conditions that need to be handled.&lt;/li&gt;
&lt;li&gt;Ignoring exceptions by surrounding a method invocation with an empty catch block defeats the purpose of exceptions and can lead to disastrous results.&lt;/li&gt;
&lt;li&gt;Ignoring exceptions is like ignoring a fire alarm and preventing others from addressing the problem. It is important to handle exceptional conditions appropriately.&lt;/li&gt;
&lt;li&gt;There are situations where it may be appropriate to ignore an exception, such as when closing a file input stream where no recovery action is needed and the operation can proceed without issues.&lt;/li&gt;
&lt;li&gt;If an exception is intentionally ignored, the catch block should contain a comment explaining the reason for ignoring it, and the variable used to catch the exception should be named &lt;code&gt;ignored&lt;/code&gt; to indicate that it is intentionally disregarded.&lt;/li&gt;
&lt;li&gt;Ignoring exceptions can lead to a program that continues silently despite errors, potentially causing failures at unexpected points in the code.&lt;/li&gt;
&lt;li&gt;Letting exceptions propagate outward can at least result in a swift failure, preserving information for debugging purposes.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="concurrency"&gt;Concurrency&lt;/h2&gt;
&lt;h3 id="item-78-synchronize-access-to-shared-mutable-data"&gt;Item 78: Synchronize access to shared mutable data&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Synchronization ensures that only one thread can execute a synchronized method or block at a time, preventing an object from being seen in an inconsistent state by other threads.&lt;/li&gt;
&lt;li&gt;Synchronization not only guarantees mutual exclusion but also ensures that changes made by one thread are visible to other threads. It provides reliable communication between threads.&lt;/li&gt;
&lt;li&gt;Reading and writing a variable (other than long or double) is atomic, but it does not guarantee that changes made by one thread will be immediately visible to other threads without synchronization.&lt;/li&gt;
&lt;li&gt;Failing to synchronize access to shared mutable data can have dire consequences, even if the data is atomically readable and writable. It can lead to liveness failures and data corruption.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;java.util.concurrent.atomic&lt;/code&gt; package provides lock-free, thread-safe primitives, such as &lt;code&gt;AtomicLong&lt;/code&gt;, for performing atomic operations on single variables, which can be used as a more efficient alternative to synchronized methods.&lt;/li&gt;
&lt;li&gt;The best approach to avoid synchronization issues is to minimize sharing of mutable data. Either use immutable data or confine mutable data to a single thread. If sharing is necessary, ensure proper synchronization or use safe publication techniques.&lt;/li&gt;
&lt;li&gt;Safe publication involves ensuring that an object reference is safely shared with other threads by using techniques such as storing it in a static field during class initialization or using volatile or final fields.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-79-avoid-excessive-synchronization"&gt;Item 79: Avoid excessive synchronization&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Excessive synchronization can lead to reduced performance, deadlocks, or nondeterministic behavior.&lt;/li&gt;
&lt;li&gt;Excessive synchronization should be avoided for performance reasons. Excessive locking can lead to contention and limit parallelism, as well as hinder the &lt;span class="caps"&gt;VM&lt;/span&gt;’s ability to optimize code execution.&lt;/li&gt;
&lt;li&gt;Avoid unnecessary synchronization for mutable classes and document that they are not thread-safe if synchronization is omitted.&lt;/li&gt;
&lt;li&gt;If a method modifies a static field and can be called from multiple threads, synchronize access to the field internally to prevent data corruption and ensure deterministic behavior.&lt;/li&gt;
&lt;li&gt;Consider advanced synchronization techniques such as lock splitting, lock striping, and nonblocking concurrency control to achieve high concurrency when internal synchronization is necessary.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-80-prefer-executors-tasks-and-streams-to-threads"&gt;Item 80: Prefer executors, tasks, and streams to threads&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;java.util.concurrent&lt;/code&gt; package introduced the &lt;code&gt;Executor&lt;/code&gt; Framework, which provides a flexible interface-based task execution facility. It is recommended to use executors instead of writing your own work queues.&lt;/li&gt;
&lt;li&gt;Creating an executor service is as simple as calling a static factory method. For example, &lt;code&gt;Executors.newSingleThreadExecutor()&lt;/code&gt; creates an executor service with a single background thread.&lt;/li&gt;
&lt;li&gt;Tasks can be submitted for execution using the &lt;code&gt;execute()&lt;/code&gt; method of the executor service. The executor service takes care of managing the execution of tasks.&lt;/li&gt;
&lt;li&gt;To gracefully terminate the executor service, the &lt;code&gt;shutdown()&lt;/code&gt; method should be called. This ensures that the executor service will complete any pending tasks before exiting.&lt;/li&gt;
&lt;li&gt;The executor service provides various additional functionalities, such as waiting for specific tasks or collections of tasks to complete, scheduling tasks to run at specific times, retrieving task results, and more.&lt;/li&gt;
&lt;li&gt;Java provides static factory methods in the &lt;code&gt;Executors&lt;/code&gt; class that offer different types of executor services, such as cached thread pools, fixed thread pools, and scheduled thread pools. These cover most use cases, but the &lt;code&gt;ThreadPoolExecutor&lt;/code&gt; class allows fine-grained control over thread pool configuration.&lt;/li&gt;
&lt;li&gt;Choosing the right executor service depends on the specific requirements of the application. For small programs or lightly loaded servers, &lt;code&gt;Executors.newCachedThreadPool()&lt;/code&gt; is often sufficient. For heavily loaded production servers, &lt;code&gt;Executors.newFixedThreadPool()&lt;/code&gt; or ThreadPoolExecutor with custom configuration is recommended.&lt;/li&gt;
&lt;li&gt;The executor framework separates the unit of work (tasks) from the mechanism of executing it (executor service). This separation provides flexibility in selecting appropriate execution policies and allows easy changes if requirements evolve.&lt;/li&gt;
&lt;li&gt;Working directly with threads is discouraged. Instead, think in terms of tasks and let the executor service execute them. This approach allows you to leverage the flexibility and control provided by the executor framework.&lt;/li&gt;
&lt;li&gt;For a comprehensive understanding of the Executor Framework, it is recommended to refer to the book &lt;a href="https://jcip.net/"&gt;Java Concurrency in Practice&lt;/a&gt; by Brian Goetz.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-81-prefer-concurrency-utilities-to-wait-and-notify"&gt;Item 81: Prefer concurrency utilities to &lt;code&gt;wait&lt;/code&gt; and &lt;code&gt;notify&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The higher-level concurrency utilities fall into three categories: the Executor Framework (covered in Item 80), concurrent collections, and synchronizers.&lt;/li&gt;
&lt;li&gt;Concurrent collections are high-performance implementations of standard collection interfaces that internally manage their own synchronization. They provide high concurrency and state-dependent modify operations, making them ideal for concurrent applications.&lt;/li&gt;
&lt;li&gt;Synchronizers are objects that enable threads to coordinate their activities. Examples include &lt;code&gt;CountDownLatch&lt;/code&gt;, &lt;code&gt;Semaphore&lt;/code&gt;, &lt;code&gt;CyclicBarrier&lt;/code&gt;, and &lt;code&gt;Phaser&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The concurrent utilities provide high-level abstractions that simplify common concurrency scenarios. For example, a &lt;code&gt;ConcurrentHashMap&lt;/code&gt; can be used to implement a thread-safe canonicalizing map, and a &lt;code&gt;BlockingQueue&lt;/code&gt; can be used as a work queue for producer-consumer scenarios.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-82-document-thread-safety"&gt;Item 82: Document thread safety&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Thread safety, or how a class behaves when its methods are used concurrently, is an important part of its contract with clients.&lt;/li&gt;
&lt;li&gt;Failing to document the thread safety aspect of a class can lead to incorrect assumptions about synchronization, resulting in serious errors.&lt;/li&gt;
&lt;li&gt;The private lock object should be declared final to prevent accidental un-synchronized access and is particularly useful for classes designed for inheritance.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-83-use-lazy-initialization-judiciously"&gt;Item 83: Use lazy initialization judiciously&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Lazy initialization can be used to optimize the cost of initializing a class or creating an instance by deferring the initialization of a field until it is accessed.&lt;/li&gt;
&lt;li&gt;Lazy initialization should only be used when necessary, as it can increase the cost of accessing the lazily initialized field.&lt;/li&gt;
&lt;li&gt;Measure the performance impact of lazy initialization to determine whether it is beneficial for a specific scenario.&lt;/li&gt;
&lt;li&gt;In the presence of multiple threads, lazy initialization requires synchronization to avoid bugs.&lt;/li&gt;
&lt;li&gt;Normal initialization with the final modifier is usually preferable to lazy initialization for most fields.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-84-dont-depend-on-the-thread-scheduler"&gt;Item 84: Don’t depend on the thread scheduler&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The thread scheduler determines which threads get to run and for how long when many threads are runnable. However, the thread-scheduling policy can vary between operating systems, so relying on specific details of the policy can lead to non-portable programs.&lt;/li&gt;
&lt;li&gt;To write a robust, responsive, and portable program, aim to keep the average number of runnable threads close to the number of processors. This minimizes variations in behavior caused by different thread-scheduling policies.&lt;/li&gt;
&lt;li&gt;To keep the number of runnable threads low, ensure that each thread does some useful work and then waits for more. Thread pools should be sized appropriately, and tasks should be neither too short nor too long to avoid dispatch overhead.&lt;/li&gt;
&lt;li&gt;Avoid busy-waiting, where threads repeatedly check a shared object waiting for its state to change. Busy-waiting puts unnecessary load on the processor and reduces the amount of useful work that can be accomplished. It also makes the program vulnerable to the thread scheduler’s behavior.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="serialization"&gt;Serialization&lt;/h2&gt;
&lt;h3 id="item-85-prefer-alternatives-to-java-serialization"&gt;Item 85: Prefer alternatives to Java serialization&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Serialization in Java has proven to be risky, with problems related to correctness, performance, security, and maintenance.&lt;/li&gt;
&lt;li&gt;The attack surface of serialization is significant and constantly growing. Deserializing objects can execute code from any type on the classpath, making it vulnerable to exploits.&lt;/li&gt;
&lt;li&gt;Security researchers have discovered and exploited vulnerabilities in deserialization, leading to serious attacks, such as the &lt;span class="caps"&gt;SFMTA&lt;/span&gt; Muni ransomware attack.&lt;/li&gt;
&lt;li&gt;Deserialization bombs can be used to mount denial-of-service attacks by causing deserialization of byte streams that take a long time to process.&lt;/li&gt;
&lt;li&gt;The best defense against serialization exploits is to avoid deserializing untrusted data altogether. Serialization should be replaced with alternative mechanisms for translating objects to byte sequences.&lt;/li&gt;
&lt;li&gt;Cross-platform structured-data representations like &lt;span class="caps"&gt;JSON&lt;/span&gt; and Protocol Buffers offer advantages such as portability, high performance, tooling support, and a large community.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-86-implement-serializable-with-great-caution"&gt;Item 86: Implement &lt;code&gt;Serializable&lt;/code&gt; with great caution&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Implementing Serializable has long-term costs, as the serialized form of a class becomes part of its exported &lt;span class="caps"&gt;API&lt;/span&gt;. Changing the class’s internal representation while maintaining compatibility with the serialized form can be challenging and may limit the class’s evolution.&lt;/li&gt;
&lt;li&gt;Serialization introduces the risk of bugs and security vulnerabilities. Deserialization acts as a “hidden constructor” and must guarantee invariants established by constructors, while also preventing unauthorized access to object internals.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-87-consider-using-a-custom-serialized-form"&gt;Item 87: Consider using a custom serialized form&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;When the default serialized form is inappropriate for a class, it can result in several disadvantages, such as permanently tying the &lt;span class="caps"&gt;API&lt;/span&gt; to the current internal representation, consuming excessive space and time during serialization, and potentially causing stack overflows.&lt;/li&gt;
&lt;li&gt;Regardless of the serialized form chosen, any synchronization imposed on the object’s methods should also apply to the &lt;code&gt;writeObject&lt;/code&gt; method to prevent resource-ordering deadlocks.&lt;/li&gt;
&lt;li&gt;Taking the time to design a custom serialized form that accurately represents the logical data and excludes unnecessary implementation details can lead to more flexible, efficient, and maintainable serialization. The default serialized form should only be accepted if it aligns well with the class’s logical state.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-88-write-readobject-methods-defensively"&gt;Item 88: Write &lt;code&gt;readObject&lt;/code&gt; methods defensively&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;readObject&lt;/code&gt; method is similar to a public constructor for deserializing objects, and it requires the same care as any other constructor to ensure the object’s validity and invariants.&lt;/li&gt;
&lt;li&gt;To prevent invalid objects from being deserialized, the &lt;code&gt;readObject&lt;/code&gt; method should perform validity checks after calling &lt;code&gt;defaultReadObject&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-89-for-instance-control-prefer-enum-types-to-readresolve"&gt;Item 89: For instance control, prefer enum types to &lt;code&gt;readResolve&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;When a class is serialized and deserialized, the &lt;code&gt;readResolve&lt;/code&gt; method can be used to substitute another instance for the one created during deserialization.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;readResolve&lt;/code&gt; method can be implemented in a singleton class to return the original singleton instance and maintain the singleton property during deserialization.&lt;/li&gt;
&lt;li&gt;The preferred approach for instance control is to use an enum type. Enum types guarantee that only the declared constants are the instances of the class, preventing any additional instances from being created during deserialization.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-90-consider-serialization-proxies-instead-of-serialized-instances"&gt;Item 90: Consider serialization proxies instead of serialized instances&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The serialization proxy pattern involves designing a private static nested class, called the serialization proxy, that represents the logical state of the enclosing class in a concise manner.&lt;/li&gt;
&lt;li&gt;The serialization proxy should have a single constructor that takes the enclosing class as a parameter and copies its data without performing any consistency checking or defensive copying.&lt;/li&gt;
&lt;li&gt;Both the enclosing class and its serialization proxy should implement the &lt;code&gt;Serializable&lt;/code&gt; interface.&lt;/li&gt;
&lt;li&gt;The serialization proxy pattern eliminates the need for explicit field-level validation during deserialization and ensures that the invariants of the enclosing class are maintained.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h1 id="conclusion"&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;While I did not find this book to be particularly entertaining, it is a very useful reference for Java developers. It covers a wide range of topics and provides a lot of useful information. I would recommend this book to anyone who is interested in learning more about the Java language and its best practices.&lt;/p&gt;
&lt;h2 id="resources-and-references"&gt;Resources and references&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.oreilly.com/library/view/effective-java-3rd/9780134686097/"&gt;Effective Java, Third Edition&lt;/a&gt; - Joshua Bloch.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jcip.net/"&gt;Java Concurrency in Practice&lt;/a&gt; - Brian Goetz.&lt;/li&gt;
&lt;/ul&gt;</content><category term="learnings"></category><category term="best practices"></category><category term="books"></category><category term="java"></category></entry><entry><title>Book summary: The Effective Engineer</title><link href="https://www.sglavoie.com/posts/2023/04/16/book-summary-the-effective-engineer/" rel="alternate"></link><published>2023-04-16T14:49:00-06:00</published><updated>2023-04-16T14:49:00-06:00</updated><author><name>Sébastien Lavoie</name></author><id>tag:www.sglavoie.com,2023-04-16:/posts/2023/04/16/book-summary-the-effective-engineer/</id><summary type="html">&lt;p&gt;After reading &lt;a href="https://www.sglavoie.com/posts/2021/11/08/book-summary-letters-to-a-new-developer/"&gt;Letters to a New Developer&lt;/a&gt;, one of the next logical steps on this learning path was to read &lt;a href="https://www.effectiveengineer.com/"&gt;The Effective Engineer&lt;/a&gt;. I hope you enjoy this simple yet effective book&amp;nbsp;summary!&lt;/p&gt;</summary><content type="html">
&lt;hr/&gt;
&lt;h1 id="introduction"&gt;Introduction&lt;/h1&gt;
&lt;p&gt;This wonderful, mostly non-technical book is a compilation of the best practices and lessons learned by the author, &lt;a href="https://edmondlau.co/"&gt;Edmond Lau&lt;/a&gt;, during his impressive career as a software engineer. It is a must-read for anyone who wants to improve their skills and become more effective at what they do. The following are short excerpts from the condensed knowledge found in the book, sprinkled with some minor comments of my own along the way. These are extracted from the book’s takeaway sections and headings: I wholeheartedly recommend &lt;a href="https://www.effectiveengineer.com/"&gt;reading the work&lt;/a&gt; in its entirety for an immersive exposure to the fantastic storytelling capabilities of Edmond!&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="book-summary"&gt;Book summary&lt;/h1&gt;
&lt;h2 id="part-1-adopt-the-right-mindset"&gt;Part 1: Adopt the Right Mindset&lt;/h2&gt;
&lt;h3 id="focus-on-high-leverage-activities"&gt;Focus on high-leverage activities&lt;/h3&gt;
&lt;div class="math"&gt;$$\text{Leverage} = \frac{\text{Impact produced}}{\text{Time invested}}$$&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Leverage is the &lt;span class="caps"&gt;ROI&lt;/span&gt; for the effort put in.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Meta-skills&lt;/strong&gt; are important to know where to focus one’s time and energy to translate more of one’s efforts into impact.&lt;/li&gt;
&lt;li&gt;Leverage your time by always finding ways to perform activities quicker and making sure those activities will have a &lt;strong&gt;meaningful impact&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="optimize-for-learning"&gt;Optimize for learning&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Make your learning rate a priority&lt;/strong&gt;: it compounds like interest over time.&lt;/li&gt;
&lt;li&gt;Study code for core abstractions written by the best engineers at your company.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Write more code&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Go through any technical, educational material available internally.&lt;/li&gt;
&lt;li&gt;Master the programming languages that you use.&lt;/li&gt;
&lt;li&gt;Send your code reviews to the harshest critics.&lt;/li&gt;
&lt;li&gt;Enroll in classes on areas where you want to improve.&lt;/li&gt;
&lt;li&gt;Participate in design discussions of projects you’re interested in.&lt;/li&gt;
&lt;li&gt;Work on a diversity of projects.&lt;/li&gt;
&lt;li&gt;Make sure you’re on a team with at least a few senior engineers whom you can learn from.&lt;/li&gt;
&lt;li&gt;Jump fearlessly into code you don’t know.&lt;/li&gt;
&lt;li&gt;Learn new programming languages and frameworks.&lt;/li&gt;
&lt;li&gt;Invest in skills that are in high demand.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Read books&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Join a discussion group.&lt;/li&gt;
&lt;li&gt;Attend talks, conferences, and meetups.&lt;/li&gt;
&lt;li&gt;Build and maintain a strong network of relationships.&lt;/li&gt;
&lt;li&gt;Follow bloggers who teach.&lt;/li&gt;
&lt;li&gt;Write to teach.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tinker on side projects&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pursue what you love&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="prioritize-regularly"&gt;Prioritize regularly&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Track to-dos in a single list.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Focus on what produces value directly&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Focus on the &lt;em&gt;important and non-urgent&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Limit the amount of work in progress.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Use implementation intentions&lt;/strong&gt; (if-then planning).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Prioritize&lt;/strong&gt; routinely.&lt;/li&gt;
&lt;li&gt;Write down and &lt;em&gt;review&lt;/em&gt; to-dos.&lt;/li&gt;
&lt;li&gt;Reduce &lt;em&gt;context switches&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="part-2-execute-execute-execute"&gt;Part 2: Execute, Execute, Execute&lt;/h2&gt;
&lt;h3 id="invest-in-iteration-speed"&gt;Invest in iteration speed&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Move fast to learn fast.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Invest in time-saving tools&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Shorten your debugging and validation loops.&lt;/li&gt;
&lt;li&gt;Master your programming environment.&lt;/li&gt;
&lt;li&gt;Get proficient with your favorite text editor or &lt;span class="caps"&gt;IDE&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;Learn at least one productive, high-level programming language (&lt;em&gt;scripting&lt;/em&gt;).&lt;/li&gt;
&lt;li&gt;Get familiar with &lt;span class="caps"&gt;UNIX&lt;/span&gt; (or Windows) &lt;em&gt;shell commands&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Prefer the keyboard&lt;/em&gt; over the mouse.&lt;/li&gt;
&lt;li&gt;Automate your manual workflows.&lt;/li&gt;
&lt;li&gt;Test out ideas on an interactive interpreter.&lt;/li&gt;
&lt;li&gt;Make it fast and easy to run just the unit tests associated with your current changes.&lt;/li&gt;
&lt;li&gt;Don’t ignore non-engineering bottlenecks.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="measure-what-you-want-to-improve"&gt;Measure what you want to improve&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Use metrics to drive progress.&lt;/li&gt;
&lt;li&gt;Pick the right metric to incentivize the behavior you want.&lt;/li&gt;
&lt;li&gt;Instrument everything to understand what is going on.&lt;/li&gt;
&lt;li&gt;Internalize useful numbers (e.g., number of active users, requests per second, amount of data accessed and written daily, etc.).&lt;/li&gt;
&lt;li&gt;Be skeptical about data integrity.&lt;/li&gt;
&lt;li&gt;Log data liberally, in case it turns out to be useful later on.&lt;/li&gt;
&lt;li&gt;Build tools to iterate on data accuracy sooner.&lt;/li&gt;
&lt;li&gt;Write end-to-end integration tests to validate your entire analytics pipeline.&lt;/li&gt;
&lt;li&gt;Examine collected data sooner.&lt;/li&gt;
&lt;li&gt;Cross-validate data accuracy by computing the same metric in multiple ways.&lt;/li&gt;
&lt;li&gt;When a number does look off, dig into it early.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="validate-your-ideas-early-and-often"&gt;Validate your ideas early and often&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Find low-effort ways to validate your work.&lt;/li&gt;
&lt;li&gt;Approach a problem iteratively to reduce wasted effort.&lt;/li&gt;
&lt;li&gt;Continuously validate product changes with A/B testing.&lt;/li&gt;
&lt;li&gt;Reduce the risk of large implementations by using small validations.&lt;/li&gt;
&lt;li&gt;Beware the one-person team (you need feedback early to make sure you’re working on the right thing!).&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Be open and receptive to feedback&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Commit code early and often&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Request code reviews from thorough critics.&lt;/li&gt;
&lt;li&gt;Ask to bounce ideas off your teammates.&lt;/li&gt;
&lt;li&gt;Design the interface or &lt;span class="caps"&gt;API&lt;/span&gt; of a new system first.&lt;/li&gt;
&lt;li&gt;Send out a design document before devoting your energy to your code.&lt;/li&gt;
&lt;li&gt;If possible, structure ongoing projects so that there is some shared context with your teammates.&lt;/li&gt;
&lt;li&gt;Solicit buy-in for controversial features before investing too much time.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Build feedback loops&lt;/em&gt; for your decisions.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="improve-your-project-estimation-skills"&gt;Improve your project estimation skills&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Project estimation is one of the hardest skills that an effective engineer needs to learn. &lt;em&gt;But it’s crucial to master&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;To produce accurate estimates:&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Decompose the project&lt;/em&gt; into granular tasks.&lt;/li&gt;
&lt;li&gt;Estimate based on how long tasks will take, not on how long you or someone else wants them to take.&lt;/li&gt;
&lt;li&gt;Think of estimates as &lt;em&gt;probability distributions&lt;/em&gt;, not best-case scenarios.&lt;/li&gt;
&lt;li&gt;Let the person doing the actual task make the estimate.&lt;/li&gt;
&lt;li&gt;Beware of anchoring bias (e.g., hearing about a low estimate from someone else may skew our own estimate later to be too low).&lt;/li&gt;
&lt;li&gt;Use multiple approaches to estimate the same task (e.g., estimate from past experiences, decompose a larger task into smaller ones and estimate each one).&lt;/li&gt;
&lt;li&gt;Beware the mythical man-month. Having more people on a project doesn’t necessarily mean it will be completed faster. Communication overhead, context switching, and other factors can slow down the team as much as &lt;span class="math"&gt;\(O(n^2)\)&lt;/span&gt; considering the number of people involved.&lt;/li&gt;
&lt;li&gt;Validate estimates against historical data.&lt;/li&gt;
&lt;li&gt;Use &lt;strong&gt;time-boxing&lt;/strong&gt; to constrain tasks that can grow in scope.&lt;/li&gt;
&lt;li&gt;Allow others to challenge estimates.&lt;/li&gt;
&lt;li&gt;Allow buffer room for the unknown in the schedule.&lt;/li&gt;
&lt;li&gt;Define measurable milestones.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Do the riskiest tasks first&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Know the limits of overtime.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="part-3-build-long-term-value"&gt;Part 3: Build Long-Term Value&lt;/h2&gt;
&lt;h3 id="balance-quality-with-pragmatism"&gt;Balance Quality with Pragmatism&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Establish a culture of reviewing code.&lt;/li&gt;
&lt;li&gt;Catch bugs or design shortcomings early.&lt;/li&gt;
&lt;li&gt;Increase accountability for code changes.&lt;/li&gt;
&lt;li&gt;Provide an avenue for sharing best practices.&lt;/li&gt;
&lt;li&gt;Increase long-term agility.&lt;/li&gt;
&lt;li&gt;Invest in good software abstractions to simplify difficult problems.&lt;/li&gt;
&lt;li&gt;Reduce the complexity of the original problem into easier-to-understand primitives.&lt;/li&gt;
&lt;li&gt;Reduce future application maintenance and make it easier to apply future improvements.&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;DRY&lt;/span&gt; principle: solve the hard problems once and re-use the solutions multiple times.&lt;/li&gt;
&lt;li&gt;Scale code quality with &lt;em&gt;automated testing&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Make large refactors with confidence.&lt;/li&gt;
&lt;li&gt;Offer executable documentation.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Don’t test everything&lt;/em&gt;: focus on the most important parts of the code and make sure everything critical is covered.&lt;/li&gt;
&lt;li&gt;Manage your technical debt.&lt;/li&gt;
&lt;li&gt;Pay it periodically. Incur it when necessary to meet deadlines.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Repay the debts with the highest interest rates first&lt;/em&gt; (i.e., focus on what produces the most leverage).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="minimize-operational-burden"&gt;Minimize Operational Burden&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Embrace operational simplicity.&lt;/li&gt;
&lt;li&gt;Increased complexity introduces more potential single points of failure.&lt;/li&gt;
&lt;li&gt;New engineers face a steeper learning curve when learning and understanding the new systems.&lt;/li&gt;
&lt;li&gt;Effort towards improving abstractions, libraries, and tools gets diluted across the different systems.&lt;/li&gt;
&lt;li&gt;Do the simple thing first.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Build systems to fail fast&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Pinpoint the source of errors.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Make debugging easier&lt;/em&gt; by not masking your errors and by not deferring failures until later.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Relentlessly automate&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Don’t underestimate the future frequency of the task.&lt;/li&gt;
&lt;li&gt;Internalize the time savings over a long time horizon.&lt;/li&gt;
&lt;li&gt;Automate mechanics over decision-making.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Make batch processes idempotent&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;At least, make processes &lt;em&gt;“retryable”&lt;/em&gt; if they cannot be made idempotent.&lt;/li&gt;
&lt;li&gt;Hone your ability to respond and recover quickly.&lt;/li&gt;
&lt;li&gt;Plan and practice failure modes.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="invest-in-your-teams-growth"&gt;Invest in Your Team’s Growth&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Make hiring everyone’s responsibility.&lt;/li&gt;
&lt;li&gt;Identify which qualities you care about the most in your colleagues: &lt;em&gt;keep the bar high&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Make sure the recruiting process is effective.&lt;/li&gt;
&lt;li&gt;Adapt interview problems to different levels of difficulty based on the candidate’s experience.&lt;/li&gt;
&lt;li&gt;Design a good onboarding process.&lt;/li&gt;
&lt;li&gt;Ramp up new engineers as quickly as possible (e.g., with &lt;em&gt;codelabs&lt;/em&gt;).&lt;ul&gt;
&lt;li&gt;Help the people around you be successful.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Impart the team’s culture and values (e.g., have &lt;em&gt;onboarding talks&lt;/em&gt;).&lt;/li&gt;
&lt;li&gt;Expose new engineers to the breadth of fundamentals needed to succeed (e.g., with &lt;em&gt;mentorship&lt;/em&gt;).&lt;/li&gt;
&lt;li&gt;Socially integrate new engineers onto the team (e.g., give them starter tasks to feel they’re part of the team faster).&lt;/li&gt;
&lt;li&gt;Share ownership of code (increase the &lt;em&gt;bus factor&lt;/em&gt;).&lt;/li&gt;
&lt;li&gt;Avoid one-person teams.&lt;/li&gt;
&lt;li&gt;Review each other’s code and software designs.&lt;/li&gt;
&lt;li&gt;Make sure the team is exposed to different types of tasks and responsibilities regularly.&lt;/li&gt;
&lt;li&gt;Focus on readable and high-quality code.&lt;/li&gt;
&lt;li&gt;Share software decisions and architecture clearly.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Make sure code and workflows are documented properly&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Invest in teaching and mentoring&lt;/em&gt;.&lt;ul&gt;
&lt;li&gt;The more effective the team becomes, the more freedom there is to work on new projects.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Build collective wisdom with post-mortems (e.g., at &lt;span class="caps"&gt;NASA&lt;/span&gt;, these become the user manual).&lt;/li&gt;
&lt;li&gt;Build a great engineering culture.&lt;/li&gt;
&lt;li&gt;Optimize for iteration speed.&lt;/li&gt;
&lt;li&gt;Always automate.&lt;/li&gt;
&lt;li&gt;Use the right software abstractions.&lt;/li&gt;
&lt;li&gt;Nurture a respectful working environment.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Allot experimentation time&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Foster a culture of learning&lt;/em&gt; (&lt;span class="caps"&gt;CI&lt;/span&gt;/&lt;span class="caps"&gt;CD&lt;/span&gt;: &lt;em&gt;continuous improvement, continuous delightfulness&lt;/em&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Hire the best&lt;/strong&gt;!&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h1 id="conclusion"&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Edmond opened my eyes to the importance of being an effective engineer, showing what that entails and how to concretely achieve it. His extraordinary technical journey and knowledge of the field are evident throughout the book, and I found myself nodding in agreement with many of his points. He made me think about how I could apply his advice to my own work. Notably, the key concept of &lt;strong&gt;leverage&lt;/strong&gt; resonated deeply with me and ended up being the cornerstone of &lt;a href="https://github.com/sglavoie/cm3070-final-project"&gt;the final project I built for my bachelor’s degree&lt;/a&gt;: &lt;em&gt;ProductiviDo - An efficient task planner focusing on high-leverage activities&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id="resources-and-references"&gt;Resources and references&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://edmondlau.co/"&gt;Edmond Lau&lt;/a&gt; - The author’s personal website.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sglavoie/cm3070-final-project"&gt;ProductiviDo&lt;/a&gt; - A simple and efficient todo-app built with React-Native.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.goodreads.com/book/show/25238425-the-effective-engineer"&gt;The Effective Engineer: How to Leverage Your Efforts In Software Engineering to Make a Disproportionate and Meaningful Impact&lt;/a&gt; - goodreads.com.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.effectiveengineer.com/"&gt;The Effective Engineer&lt;/a&gt; - by Edmond Lau.&lt;/li&gt;
&lt;/ul&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: '#007bff ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="learnings"></category><category term="advice"></category><category term="best practices"></category><category term="books"></category><category term="career"></category></entry><entry><title>Reviewing the process of building a first React Native application</title><link href="https://www.sglavoie.com/posts/2023/03/04/reviewing-the-process-of-building-a-first-React-Native-application/" rel="alternate"></link><published>2023-03-04T12:41:00-06:00</published><updated>2023-03-04T12:41:00-06:00</updated><author><name>Sébastien Lavoie</name></author><id>tag:www.sglavoie.com,2023-03-04:/posts/2023/03/04/reviewing-the-process-of-building-a-first-React-Native-application/</id><summary type="html">&lt;p&gt;Working with new technologies can be exciting and insightful at the same time! At least, this is what I would like to believe after having dedicated a couple of weeks to this&amp;nbsp;project&amp;#8230;&lt;/p&gt;</summary><content type="html">
&lt;hr/&gt;
&lt;h1 id="introduction"&gt;Introduction&lt;/h1&gt;
&lt;p&gt;In the context of an assignment as part of a BSc in computer science, I had to come up with a React Native application. Specifically, I chose to build an app to help make and break habits through the use of a solid system that’s backed by science, which is presented through a large excerpt that accompanied the end result. It helps people to consistently stick to habits until they become an intrinsic part of their routine. Moreover, it helps to maintain an actual routine and to build a sense of accountability and capability in oneself, because big successes come from small steps taken in the right direction time and time again.&lt;/p&gt;
&lt;p&gt;Instead of giving dopaminergic hits like other apps which strive to reward their users in one way or another for completing their tasks and goals or generating anxiety around items not being completed, this app focuses on giving full control to the user with a proven system to turn their habits into automated behaviours with ease. That was the idea, at least.&lt;/p&gt;
&lt;p&gt;&lt;img alt="App icon Routinizator" src="https://www.sglavoie.com/images/posts/0035_building_first_react_native_application/app_icon.png"/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="concept-development"&gt;Concept development&lt;/h1&gt;
&lt;h2 id="the-origin"&gt;The origin&lt;/h2&gt;
&lt;p&gt;The idea for this application came from listening to the Huberman Lab podcast from Dr. Andrew Huberman in an episode entitled &lt;a href="https://hubermanlab.com/the-science-of-making-and-breaking-habits"&gt;The science of making &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; breaking habits&lt;/a&gt;. Starting from this excellent learning resource, further literature was devoured to inform the final concept, most notably &lt;a href="https://www.annualreviews.org/doi/abs/10.1146/annurev-psych-122414-033417"&gt;Psychology of Habit from the Annual Review of Psychology&lt;/a&gt; and &lt;a href="https://journals.sagepub.com/doi/full/10.1177/1539449219876877"&gt;Intervention to Modify Habits: A Scoping Review&lt;/a&gt; published in Sage Journals.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Typography" src="https://www.sglavoie.com/images/posts/0035_building_first_react_native_application/typography.png"/&gt;&lt;/p&gt;
&lt;h2 id="time-restrictions"&gt;Time restrictions&lt;/h2&gt;
&lt;p&gt;It was entirely feasible to come up with a simpler concept that would be doable in roughly 10 weeks. Like many popular applications on the market today, it is expected that new features will be added after the official release date once additional and valuable feedback is received from users. The core idea can and will be implemented in this short time frame. After all, this application can pivot towards a simpler presentation should there be a need to and as the &lt;a href="https://en.wikipedia.org/wiki/Zen_of_Python"&gt;Zen of Python&lt;/a&gt; says: &lt;em&gt;“Simple is better than complex”&lt;/em&gt;.
Niceties could be added to the user interface should time allow: however the initial development will focus on a narrower set of features so that the roadmap can be successfully followed and the final product delivered in a timely manner.&lt;/p&gt;
&lt;p&gt;&lt;img alt="UI elements" src="https://www.sglavoie.com/images/posts/0035_building_first_react_native_application/ui_elements.png"/&gt;&lt;/p&gt;
&lt;h2 id="main-concern-during-development"&gt;Main concern during development&lt;/h2&gt;
&lt;p&gt;A bad implementation of the system could mean that flexibility could be lost at the cost of ease of development. In other words, due to a strict, looming deadline, some shortcuts could be considered to cut corners in the underlying logic of the application to save time without affecting the quality of the product from the user’s perspective. Nonetheless, this could lead to more headache down the road when it becomes necessary to refactor the application in order to satisfy the need for a more modular approach, which would simplify further development.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Screens" src="https://www.sglavoie.com/images/posts/0035_building_first_react_native_application/screens.png"/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="wireframing"&gt;Wireframing&lt;/h1&gt;
&lt;p&gt;Low-fidely as well as high-fidelity wireframes were created using &lt;a href="https://www.figma.com"&gt;Figma&lt;/a&gt;. An exhaustive presentation of the final application was included in an appendix, depicting the logo, the color palette, the typography used, a list of the &lt;span class="caps"&gt;UI&lt;/span&gt; elements and a complete and faithful display of all the screens. Technically, the high-fidelity wireframes were designed using &lt;a href="https://help.figma.com/hc/en-us/articles/360038662654-Guide-to-components-in-Figma"&gt;Figma components&lt;/a&gt; and placed inside “frames” to export a &lt;span class="caps"&gt;PDF&lt;/span&gt;. Most &lt;span class="caps"&gt;UI&lt;/span&gt; elements were hand-drawn, except for a few free icons taken from the &lt;a href="https://material.io/design"&gt;Material Design community&lt;/a&gt;. Numerous user flow diagrams were included to illustrate how the wireframing took shape once the logic to navigate between screens was determined.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Welcome screen" src="https://www.sglavoie.com/images/posts/0035_building_first_react_native_application/welcome.png"/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="user-feedback"&gt;User feedback&lt;/h1&gt;
&lt;p&gt;User feedback was critical to the success of this project. Users helped refine certain visual aspects, such as making sure there was enough padding between the different elements by testing with devices using a smaller screen.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Frequency execution early" src="https://www.sglavoie.com/images/posts/0035_building_first_react_native_application/frequency_execution_early.png"/&gt;&lt;/p&gt;
&lt;h2 id="improvements-to-the-original-design"&gt;Improvements to the original design&lt;/h2&gt;
&lt;p&gt;Other notable improvements included redesigning the user flow when creating a new programme so that it would be easier to follow. Instead of dealing with multiple habits at once, the slightly updated design made it possible to fully complete the cycle when adding a new habit. Similarly, once habits were added, the newer flow to tackle habit stacks made it simpler to navigate back to the main screen to confirm the selection of habits and to review the programme as a whole.&lt;/p&gt;
&lt;p&gt;Without users inquiring about having a satellite view in the map, there wouldn’t have been any option to toggle the style of the map either. This became a needed addition in places where roads are sparse while the terrain remains easily recognizable.&lt;/p&gt;
&lt;p&gt;&lt;img alt="About screen" src="https://www.sglavoie.com/images/posts/0035_building_first_react_native_application/about.png"/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="prototyping"&gt;Prototyping&lt;/h1&gt;
&lt;h2 id="early-iterations"&gt;Early iterations&lt;/h2&gt;
&lt;p&gt;While shaping the initial application alongside both wireframing and concept sketching, a few iterations of the different screens were designed from scratch. General ideas and concepts were discussed and analyzed to fit with the goal of creating a mindful habit tracker while taking into consideration hard requirements such as the time available for the development cycles.&lt;/p&gt;
&lt;p&gt;The application started with a strong focus on accountability. However, it was quickly realized that the technical stack would need to be more ample and would necessarily require a higher budget to fund the use of online services to store a database of &lt;em&gt;“habit contracts”&lt;/em&gt; that users would create and optionally make public on their own. Needless to say, the single developer involved in the creation of this application did not have the resources nor the willingness to deal with legal issues that would arise from managing such personal information.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Iteration 1 flow" src="https://www.sglavoie.com/images/posts/0035_building_first_react_native_application/iteration_1_flow.png"/&gt;&lt;/p&gt;
&lt;h2 id="privacy-concerns"&gt;Privacy concerns&lt;/h2&gt;
&lt;p&gt;Additionally, there would not have been the easy possibility of making accessible all the data from a habit contract since personally identifiable information such as location, accountability partner names and so on would be revealed to the world. For these reasons and many more, the set of features relating to accountability was removed from the application to ensure that user privacy would be dealt with properly at this scale of operation.&lt;/p&gt;
&lt;p&gt;In this regard, to avoid any potential issue with privacy, no data whatsoever is stored remotely. &lt;a href="https://github.com/react-native-async-storage/async-storage"&gt;React Native Async Storage&lt;/a&gt; was used to store data locally on users’ devices, even removing the need for an internet connection (except for the need to find the user location and set an address, which is an optional step when creating a programme).&lt;/p&gt;
&lt;p&gt;To make use of the async storage, &lt;a href="https://redux-toolkit.js.org"&gt;Redux Toolkit&lt;/a&gt; was used to deal with all the state management and is responsible for dispatching actions throughout the application. Importantly, users do not need to leave the application open at all times since &lt;a href="https://github.com/rt2zz/redux-persist"&gt;Redux Persist&lt;/a&gt; was used to store Redux data to the async storage and to rehydrate it when the application is re-opened.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Iteration 4 flow" src="https://www.sglavoie.com/images/posts/0035_building_first_react_native_application/iteration_4_flow.png"/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="development"&gt;Development&lt;/h1&gt;
&lt;p&gt;As we can now attest, a lot happened before developing the actual application, but this fact did not make the development itself less interesting to narrate! In a little over two months, this React Native application started from nothing and grew to a fully-fledged product.&lt;/p&gt;
&lt;p&gt;&lt;img alt="New programme dashboard" src="https://www.sglavoie.com/images/posts/0035_building_first_react_native_application/new_dashboard.png"/&gt;&lt;/p&gt;
&lt;h2 id="initial-setup"&gt;Initial setup&lt;/h2&gt;
&lt;p&gt;The initial steps taken were all about setting up the project correctly with most of its JavaScript dependencies, beginning with a &lt;code&gt;.gitignore&lt;/code&gt; file to prevent adding secrets and other unneeded artifacts to the project, an &lt;code&gt;app.json&lt;/code&gt; to define the metadata required to publish an application with &lt;a href="https://expo.dev"&gt;Expo&lt;/a&gt; and a &lt;code&gt;package.json&lt;/code&gt; listing all the major dependencies to be installed with &lt;a href="https://yarnpkg.com"&gt;Yarn&lt;/a&gt; in this case. Secondly, &lt;a href="https://github.com/infinitered/reactotron"&gt;Reactotron&lt;/a&gt; was set up with Redux to provide access to the application state in real time. Strict mode was then enabled to help avoid bad programming practices and third-party libraries were silenced with React Native’s &lt;code&gt;LogBox&lt;/code&gt; module.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Remove habit screen" src="https://www.sglavoie.com/images/posts/0035_building_first_react_native_application/remove_habit.png"/&gt;&lt;/p&gt;
&lt;h2 id="state-management"&gt;State management&lt;/h2&gt;
&lt;p&gt;Once the basic setup was in place, Redux Persist was added to work with React Native Async Storage. Then, the testing setup was integrated into the project before adding any screen to the application using &lt;a href="https://jestjs.io/"&gt;Jest&lt;/a&gt; configured with mockAsyncStorage to avoid issues with the persistent storage while testing. Despite barebone Redux being useful on its own, &lt;a href="https://redux-toolkit.js.org/tutorials/quick-start"&gt;Redux Toolkit provides some useful utilities and shortcuts&lt;/a&gt; that were taken advantage of, including &lt;code&gt;createSlice&lt;/code&gt; to easily “slice” parts of the state to retrieve and store information in isolation, &lt;code&gt;combineReducers&lt;/code&gt; to list all the slices of state in the same “root reducer”, and &lt;code&gt;configureStore&lt;/code&gt; to connect the persistent storage to the Redux store and set up access to the store itself in the rest of the application.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Cues screen" src="https://www.sglavoie.com/images/posts/0035_building_first_react_native_application/cues.png"/&gt;&lt;/p&gt;
&lt;h2 id="styling-the-app"&gt;Styling the app&lt;/h2&gt;
&lt;p&gt;Before adding logic to the project, &lt;a href="https://github.com/vitalets/react-native-extended-stylesheet"&gt;react-native-extended-stylesheet&lt;/a&gt; was used to add functionality to the way the styling could be done by having the ability to reference variables, do calculations inside &lt;span class="caps"&gt;CSS&lt;/span&gt; fragments, etc. Styles were set globally right from the start to avoid code duplication and where deemed useful, some screens had specific stylings applied exclusively to them from separate files.&lt;/p&gt;
&lt;p&gt;As a next step, the general structure of the app was set up with a status bar and a &lt;code&gt;SafeAreaView&lt;/code&gt; component to make sure that rendering happened within safe limits on the screen. In order to style the application and render different screens, &lt;a href="https://reactnavigation.org/"&gt;React Navigation&lt;/a&gt; was used to make the navigation possible and to initially render a fixed screen at a time while it was being designed based off the high-fidelity wireframes. One by one, the screens were designed with all the buttons in the right place and some dummy content to render all the different &lt;span class="caps"&gt;UI&lt;/span&gt; elements. This led to using a multitude of third-party libraries, including notably &lt;a href="https://github.com/react-native-maps/react-native-maps"&gt;react-native-maps&lt;/a&gt; to work with native maps on both Android and iOS devices.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Location screen" src="https://www.sglavoie.com/images/posts/0035_building_first_react_native_application/location.png"/&gt;&lt;/p&gt;
&lt;h2 id="premature-refactoring"&gt;Premature refactoring&lt;/h2&gt;
&lt;p&gt;With the screens in place, the code was re-arranged to allow for better flexibility while developing. New directories for components were created, and the smallest components of all were extracted from the larger ones to start splitting concerns and have specific destinations to receive parts of the states via Redux selectors.&lt;/p&gt;
&lt;p&gt;Global styles were then cleaned up considerably and local styles were mostly eliminated as they were being re-used elsewhere without notice. At this point, without yet having anything useful to demonstrate, users reviewed where the application was going and suggested possible improvements while it was still easy to move &lt;span class="caps"&gt;UI&lt;/span&gt; elements around without breaking anything.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Frequency execution screen" src="https://www.sglavoie.com/images/posts/0035_building_first_react_native_application/frequency_execution.png"/&gt;&lt;/p&gt;
&lt;h2 id="adding-navigation"&gt;Adding navigation&lt;/h2&gt;
&lt;p&gt;Once all the screens were designed and ready to include programmatic logic, the screens were then linked together so that the user could —without doing anything useful yet— navigate from one page to another. After that, a menu was included in the top-left corner to navigate to specific pages from anywhere within the app. This behaviour was later customized so that some pages would show the “back button” (a chevron icon pointing to the left) to make going back to the previous screen easier than scrolling to the bottom of a longer page. On top of this, some screens received a special treatment where the menu is hidden entirely, such as when deleting a programme from the app. While not strictly required, this made it obvious to the user that they should focus on the content of that particular screen.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Programme specs screen" src="https://www.sglavoie.com/images/posts/0035_building_first_react_native_application/programme_specs.png"/&gt;&lt;/p&gt;
&lt;h2 id="customizing-ui-elements"&gt;Customizing &lt;span class="caps"&gt;UI&lt;/span&gt; elements&lt;/h2&gt;
&lt;p&gt;At this stage, the application was ready to receive its final touch-ups to look as polished as the expected product. This included getting our hands on &lt;a href="https://github.com/WrathChaos/react-native-bouncy-checkbox"&gt;React Native Bouncy Checkbox&lt;/a&gt; to give a more joyful feel to the most boring parts of the application and using &lt;a href="https://github.com/react-native-datetimepicker/datetimepicker"&gt;React Native DateTimePicker&lt;/a&gt; to input the time of the day in a more meaningful and straightforward way.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Habit stacks screen" src="https://www.sglavoie.com/images/posts/0035_building_first_react_native_application/habit_stacks.png"/&gt;&lt;/p&gt;
&lt;h2 id="setting-up-simple-states"&gt;Setting up simple states&lt;/h2&gt;
&lt;p&gt;Using the &lt;code&gt;useState&lt;/code&gt; hook from React and &lt;code&gt;useDispatch&lt;/code&gt; from Redux, basic states were set up to toggle the styles of buttons and to allow basic interactivity, such as expanding and collapsing sections of the user interface. Using some dummy content in the Redux store, other simple events were taken care of, for example removing a habit, creating a new habit and so on. With the basic logic and states in place, more complex flows were added, such as the need to loop through habits to display them as “habit stacks” or looping through the days in a programme to display three phases for each day, each phase containing possibly multiple stacks of habits and each habit being a self-contained source of data with a table displayed with &lt;a href="https://github.com/Purii/react-native-tableview-simple"&gt;react-native-tableview-simple&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Habit review screen" src="https://www.sglavoie.com/images/posts/0035_building_first_react_native_application/habit_review.png"/&gt;&lt;/p&gt;
&lt;h2 id="testing-on-different-platforms"&gt;Testing on different platforms&lt;/h2&gt;
&lt;p&gt;Although admittedly a bit late in the process, the application was then tested fully on Android and in the Expo website. Trading off speed of development for the inconvenience of guaranteeing a pixel-perfect application at each step was most definitely worth it since very few changes were required in the end, this being the main idea behind using something like React Native in the first place so that code can be written once and for all. Despite all these promises, some issues related to dependencies were faced with big, red messages showing an alarmingly large list of errors in the Expo Snack interface. Thankfully, it was only a matter of upgrading locally to match the latest &lt;span class="caps"&gt;SDK&lt;/span&gt; available at the time from Expo (v46.0.0).&lt;/p&gt;
&lt;p&gt;There were some minor issues observed on different platforms which were fixed on the development machine using simulators. For instance, the map view was somewhat laggy on iOS originally, so instead of moving the marker around on the map, it was decided to leave it fix on top of the center of the map with a greater &lt;code&gt;zIndex&lt;/code&gt; to make it visible at all times in order to have only the map view to re-render each time the map was moved. On Android, the time picker was a bit fiddly to work with and so to circumvent the problematic situation, the picker would be shown once automatically to the user when the related screen was opened, removing the need to display a space for the picker on screen and instead having it fill out the screen in the style of a modal.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Habit contract review screen" src="https://www.sglavoie.com/images/posts/0035_building_first_react_native_application/habit_contract.png"/&gt;&lt;/p&gt;
&lt;h2 id="improving-the-developer-experience-with-redux"&gt;Improving the developer experience with Redux&lt;/h2&gt;
&lt;p&gt;Reactotron was useful in the beginning but started to crash very often at this point of the development. After un-starring the project on GitHub and starring &lt;a href="https://github.com/jhen0409/react-native-debugger"&gt;React Native Debugger&lt;/a&gt; instead, things were smooth again. Reactotron required messing a little bit with the testing setup by removing everything related to it first, then React Native Debugger made it all simple again thanks to its seamless integration with Redux which does not need to be injected as middleware when configuring the Redux store.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Programme in progress screen" src="https://www.sglavoie.com/images/posts/0035_building_first_react_native_application/programme_progress.png"/&gt;&lt;/p&gt;
&lt;h2 id="refactoring-again"&gt;Refactoring again&lt;/h2&gt;
&lt;p&gt;Now that most of the logic was implemented, smaller components were created from the monstrous ones created thus far. In most instances, components were already existing on their own but they were all positioned in the same file without being prefixed with the keyword &lt;code&gt;export&lt;/code&gt;. Equally important, all &lt;a href="https://eslint.org/"&gt;ESLint&lt;/a&gt; warnings were cleared up one after the other to avoid re-renders and unused bits of code. Because Expo tends to be picky with missing import statements, &lt;code&gt;import React from ‘react'&lt;/code&gt; was carefully added to almost every file in the project where it was needed.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Delete programme screen" src="https://www.sglavoie.com/images/posts/0035_building_first_react_native_application/delete_programme.png"/&gt;&lt;/p&gt;
&lt;h2 id="last-minute-cleanup"&gt;Last-minute cleanup&lt;/h2&gt;
&lt;p&gt;Finally, once the application was usable and the source code a little more pretty, import statements were grouped by categories, warnings from third-party libraries were silenced with &lt;code&gt;LogBox&lt;/code&gt;, spacing around paragraphs was reviewed and optimized and the app was scrutinized once again to look for the presence of bugs.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Completed programme screen" src="https://www.sglavoie.com/images/posts/0035_building_first_react_native_application/completed_programme.png"/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="unit-testing"&gt;Unit testing&lt;/h1&gt;
&lt;h2 id="navigating"&gt;Navigating&lt;/h2&gt;
&lt;p&gt;While the development took place, testing happened all along. The first couple of tests to be included in the test suite were added while validating that navigation occurred correctly between screens. At once, tests were also added when creating the screens to make sure that they would render consistently in the &lt;span class="caps"&gt;UI&lt;/span&gt; by creating snapshots with Jest.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Iteration 6 flowchart" src="https://www.sglavoie.com/images/posts/0035_building_first_react_native_application/iteration_6_flow.png"/&gt;&lt;/p&gt;
&lt;h2 id="utility-functions"&gt;Utility functions&lt;/h2&gt;
&lt;p&gt;More concrete unit testing happened with the utility functions being called by the actions from the Redux store. Because these functions define what happens when an action is dispatched with Redux, there is a lot of potential for bugs to creep in. To make debugging less painful in these cases, dummy and minimal states were set up as part of the unit tests to check for inconsistencies against the input value and the expected one. While Jest offers a complete range of features, the matchers used most often from this library were &lt;code&gt;toBe&lt;/code&gt; to check for exact values (e.g., Boolean and numbers) and &lt;code&gt;toEqual&lt;/code&gt; to assert a deep equality on objects and arrays. Mock functions were set up with Reactotron, but that need went away when the developer migrated to a more stable piece of software (i.e, React Native Debugger).&lt;/p&gt;
&lt;p&gt;&lt;img alt="Early new programme" src="https://www.sglavoie.com/images/posts/0035_building_first_react_native_application/early_new_programme.png"/&gt;&lt;/p&gt;
&lt;h2 id="database-asynchronous-code"&gt;Database &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; asynchronous code&lt;/h2&gt;
&lt;p&gt;In the future, should this application be deployed to the cloud, there will be a need to use setup and teardown functionality against a database and to add tests for asynchronous calls. This was not required for the present version of the application, which focuses on allowing users to be as independent as possible from the Internet while respecting their privacy.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Later new programme flow" src="https://www.sglavoie.com/images/posts/0035_building_first_react_native_application/later_new_programme_flow.png"/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="evaluation"&gt;Evaluation&lt;/h1&gt;
&lt;h2 id="overview"&gt;Overview&lt;/h2&gt;
&lt;p&gt;All in all, despite a strict deadline and few (more truthfully, close to none) monetary resources, it was possible to deliver a working solution to a tangible problem, namely that of increasing productivity by knowing what is most valued in one’s life circumstances. While the application can be considered feature-complete, it could be the beginning of a long journey towards sharing an application that has real potential to improve people’s lives by solving a problem that is hard to pinpoint without enough awareness.&lt;/p&gt;
&lt;p&gt;&lt;img alt="New programme screen" src="https://www.sglavoie.com/images/posts/0035_building_first_react_native_application/new_programme.png"/&gt;&lt;/p&gt;
&lt;h2 id="technical-aspects"&gt;Technical aspects&lt;/h2&gt;
&lt;p&gt;On the technical side of things, it would have been preferable to split the state in a more logical way right from the beginning. Even though a general idea of the state was drawn inside an &lt;span class="caps"&gt;IDE&lt;/span&gt; by creating a &lt;span class="caps"&gt;JSON&lt;/span&gt; object to represent the schema to be adhered to, the state was allowed to mutate along the way, which caused issues by having to move reducers around and by having to update the selectors to look at a different hierarchy of the state. By contemplating the real meaning of a Redux “slice” in which the state is meant to be entirely independent from other slices of the state, it makes it obvious that some types of object will remain independent while others will eventually require to communicate with their siblings. Thinking this logic through before starting to make things happen in the &lt;span class="caps"&gt;UI&lt;/span&gt; is, in hindsight, a fruitful endeavour.&lt;/p&gt;
&lt;p&gt;&lt;img alt="New programme flow" src="https://www.sglavoie.com/images/posts/0035_building_first_react_native_application/new_programme_flow.png"/&gt;&lt;/p&gt;
&lt;h2 id="communicational-aspects"&gt;Communicational aspects&lt;/h2&gt;
&lt;p&gt;On the soft skills side, a mistake was made by not sharing the original concept with users sooner. Although the final product would likely resemble what it ended up being, interactivity in the application could have been designed better regarding some aspects. For example, the component responsible for displaying the frequency of execution could very well become an actual calendar. Designed in a compact way, a calendar surely would be more familiar to most users instead of having a list that needs to be scrolled into view. Functionally speaking, ticking a box in a calendar-like view would be exactly equivalent to checking off a box next to a row item in a list, but the presentation would be more familiar to most users and, quite understandably, more intuitive too.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Finish flow" src="https://www.sglavoie.com/images/posts/0035_building_first_react_native_application/finish_flow.png"/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="demo-of-the-app"&gt;Demo of the app&lt;/h1&gt;
&lt;div class="youtube youtube-16x9"&gt;
&lt;iframe allowfullscreen="" frameborder="0" seamless="" src="https://www.youtube.com/embed/d9PAO_Ehza4"&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;hr/&gt;
&lt;h1 id="resources-and-references"&gt;Resources and references&lt;/h1&gt;
&lt;p&gt;If you like this type and format of content, you might also enjoy &lt;a href="https://www.sglavoie.com/posts/2023/07/30/building-task-planner-react-native/"&gt;a follow-up story about building a task planner&lt;/a&gt;, also brought to life with the help of React Native!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.annualreviews.org/doi/abs/10.1146/annurev-psych-122414-033417"&gt;Annual Reviews, Psychology of Habit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://eslint.org/"&gt;ESLint, Find and fix problems in your JavaScript code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://expo.dev"&gt;Expo, Make any app. Run it everywhere&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://help.figma.com/hc/en-us/articles/360038662654-Guide-to-components-in-Figma"&gt;Figma, Guide to components in Figma&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.figma.com"&gt;Figma, Nothing great is made alone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hubermanlab.com/the-science-of-making-and-breaking-habits"&gt;Huberman Lab, &lt;span class="caps"&gt;THE&lt;/span&gt; &lt;span class="caps"&gt;SCIENCE&lt;/span&gt; &lt;span class="caps"&gt;OF&lt;/span&gt; &lt;span class="caps"&gt;MAKING&lt;/span&gt; &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; &lt;span class="caps"&gt;BREAKING&lt;/span&gt; &lt;span class="caps"&gt;HABITS&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jestjs.io"&gt;Jest, Delightful JavaScript Testing Framework with a focus on simplicity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://material.io/design"&gt;Material Design, Create intuitive and beautiful products with Material Design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/react-native-async-storage/async-storage"&gt;React Native Async Storage, An asynchronous, persistent, key-value storage system for React Native&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/WrathChaos/react-native-bouncy-checkbox"&gt;React Native Bouncy Checkbox - Fully customizable animated bouncy checkbox for React Native&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/react-native-datetimepicker/datetimepicker"&gt;React Native DateTimePicker - React Native date &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; time picker com- ponent for iOS, Android and Windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jhen0409/react-native-debugger"&gt;React Native Debugger - The standalone app based on official debugger of React Native, and includes React Inspector / Redux DevTools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://reactnavigation.org/"&gt;React Navigation - Routing and navigation for Expo and React Native apps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/vitalets/react-native-extended-stylesheet"&gt;react-native-extended-stylesheet - Extended StyleSheets for React Native&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/react-native-maps/react-native-maps"&gt;react-native-maps - React Native Mapview component for iOS + Android&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Purii/react-native-tableview-simple"&gt;react-native-tableview-simple - Flexible and lightweight React Native component for UITableView made with pure &lt;span class="caps"&gt;CSS&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/infinitered/reactotron"&gt;Reactotron - A desktop app for inspecting your React &lt;span class="caps"&gt;JS&lt;/span&gt; and React Native projects. macOS, Linux, and Windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rt2zz/redux-persist"&gt;Redux Persist, Persist and rehydrate a redux store&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://redux-toolkit.js.org/tutorials/quick-start"&gt;Redux Toolkit, Redux Toolkit Quick Start&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://redux-toolkit.js.org"&gt;Redux Toolkit, The official, opinionated, batteries-included toolset for efficient Redux development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://journals.sagepub.com/doi/full/10.1177/1539449219876877"&gt;Sage Journals, Intervention to Modify Habits: A Scoping Review&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Zen_of_Python"&gt;Wikipedia, Zen of Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://yarnpkg.com"&gt;Yarn, Safe, stable, reproducible projects&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="learnings"></category><category term="bsc"></category><category term="lessons"></category><category term="mobile-dev"></category><category term="react-native"></category></entry><entry><title>Building the next Facebook in a couple of weeks (as a humble experiment)</title><link href="https://www.sglavoie.com/posts/2022/10/14/building-the-next-Facebook-in-a-couple-of-weeks-as-a-humble-experiment/" rel="alternate"></link><published>2022-10-14T18:49:00-05:00</published><updated>2022-10-14T18:49:00-05:00</updated><author><name>Sébastien Lavoie</name></author><id>tag:www.sglavoie.com,2022-10-14:/posts/2022/10/14/building-the-next-Facebook-in-a-couple-of-weeks-as-a-humble-experiment/</id><summary type="html">&lt;p&gt;To spice things up, I am posting a reformatted version of the report I wrote for a web development assignment done during the last year of a computer science degree at the undergraduate level. Facebook should remain a dominant social media platform for a little while&amp;nbsp;longer&amp;#8230;&lt;/p&gt;</summary><content type="html">
&lt;hr/&gt;
&lt;h1 id="introduction"&gt;Introduction&lt;/h1&gt;
&lt;p&gt;The following is a report that was part of a project I delivered during my BSc in computer science, reformatted from LaTeX to Markdown. While not being utterly interesting (unfortunately, the source code cannot be freely published due to the nature of the work…), it gives a glimpse of my thought process while building this Django website. I have learnt a few lessons from it and maybe, with some imagination, you might too :). To read a nicely formatted version of this article, you can refer to the &lt;a href="https://www.sglavoie.com/files/posts/0032_building_the_next_Facebook_in_a_couple_of_weeks_as_a_humble_experiment/report.pdf"&gt;original report&lt;/a&gt; instead.&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="meeting-the-requirements"&gt;Meeting the requirements&lt;/h1&gt;
&lt;p&gt;In order to meet all the requirements when building this application, a few different techniques, strategies and concepts were put to good use. Firstly, all &lt;a href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt; views are class-based and rely on &lt;a href="https://www.django-rest-framework.org/"&gt;Django &lt;span class="caps"&gt;REST&lt;/span&gt; Framework&lt;/a&gt; to reduce the boilerplate needed to write the views. One such (simple) view is shown below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Profiles&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;APIView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""Used when listing all profiles at once."""&lt;/span&gt;

    &lt;span class="c1"&gt;# allow everyone to see all basic profiles&lt;/span&gt;
    &lt;span class="n"&gt;permission_classes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;IsOwnerOrReadOnly&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;profiles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UserProfile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;order_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"-id"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;serializer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ProfileSerializer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;profiles&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;many&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;serializer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All views in turn rely on serializers to parse incoming data and to transform it into appropriate structures that can be used internally by Django. Some serializers are obviously more complex than others, but for demonstration purposes and for the sake of brevity, an example of a class-based serializer is reproduced here:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UserPublicSerializer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ModelSerializer&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""Serializer the User model to get back user information that can&lt;/span&gt;
&lt;span class="sd"&gt;    safely be shared around in the application to other users."""&lt;/span&gt;

    &lt;span class="c1"&gt;# We need easy access to the profile image when listing all profiles&lt;/span&gt;
    &lt;span class="c1"&gt;# at once&lt;/span&gt;
    &lt;span class="n"&gt;profile_image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SerializerMethodField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;
        &lt;span class="n"&gt;fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"profile_image"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_profile_image&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;userprofile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The actual implementation details for signals, forms, URLs, other views and components can be explored in the source code submission provided with this report.&lt;/p&gt;
&lt;p&gt;When it comes to version control, Git was used religiously with GitHub to host a private repository. The &lt;a href="https://www.conventionalcommits.org/en/v1.0.0/"&gt;Conventional Commits specification&lt;/a&gt; was followed to help create meaningful commit messages.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Git log extract" src="https://www.sglavoie.com/images/posts/0032_building_the_next_Facebook_in_a_couple_of_weeks_as_a_humble_experiment/commits.png"/&gt;&lt;/p&gt;
&lt;p&gt;Defensive coding strategies were used, both in Python and in JavaScript. In the backend, exceptions were raised directly where no appropriate actions could be taken:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;clean_email&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""Verify that the email is available."""&lt;/span&gt;
    &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cleaned_data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;query_set&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;query_set&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ValidationError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"email is taken"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the views, conditional statements were sprinkled everywhere where necessary to avoid expansive computations (e.g., processing a profile image when the request is invalid) and to return early from functions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;profile&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;"Profile not found!"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HTTP_404_NOT_FOUND&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;profile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;"You do not have the required permissions "&lt;/span&gt;
        &lt;span class="s2"&gt;"to update this profile!"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HTTP_401_UNAUTHORIZED&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;serializer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ProfileUpdateSerializer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;profile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;many&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;serializer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_valid&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;serializer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;serializer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;On the frontend, a kindred approach was used to assemble robust requests:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;REACT_APP_API_URL&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;/auth/jwt/verify/`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"token_not_valid"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;AUTHENTICATED_SUCCESS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;AUTHENTICATED_FAIL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;AUTHENTICATED_FAIL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With security in mind, views were by default protected and accessible only to authenticated users unless a statement such as the following allows all users to read an endpoint:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;permission_classes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;IsOwnerOrReadOnly&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Requirements were also exceeded by using advanced techniques and tools: &lt;a href="https://www.docker.com/"&gt;Docker&lt;/a&gt;, &lt;a href="https://docs.docker.com/compose/"&gt;Docker Compose&lt;/a&gt;, &lt;a href="https://python-poetry.org/"&gt;Poetry&lt;/a&gt;, &lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt;, &lt;a href="https://redux.js.org/"&gt;Redux&lt;/a&gt;, &lt;a href="https://mui.com/"&gt;Material &lt;span class="caps"&gt;UI&lt;/span&gt;&lt;/a&gt; as well as setting up an &lt;span class="caps"&gt;SMTP&lt;/span&gt; backend to send emails to users were some of the additions made to the project to prove this claim — these will be covered in more details in later sections of this report.&lt;/p&gt;
&lt;p&gt;While being a simple application considering time constraints and budget, the solution brings some novelty to the table, making it a valid application that is production-ready while also serving as an excellent prototype for a much bigger project. Some interesting features not commonly found elsewhere include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Being able to chat in real-time with all users of the platform in a time-sensitive context in a way that supports high concurrency with &lt;a href="https://channels.readthedocs.io/en/stable/"&gt;Django Channels&lt;/a&gt; and &lt;a href="https://redis.io/"&gt;Redis&lt;/a&gt;. In other words, messages disappear automatically after a specified delay, making for a special chat room where one lives in the moment.&lt;/li&gt;
&lt;li&gt;The application allows users to easily follow others to then be able to quickly search through their posts by filtering them. The added tweak resides in the fact that all posts are given “total points” without “up” or “down” counts being disclosed directly.&lt;/li&gt;
&lt;li&gt;Posts can be hidden at any time by users yet remain viewable by showing the author as being anonymous.&lt;/li&gt;
&lt;li&gt;The colourful profile list view allows filtering of all the profiles at once by name and shows distinctive information about users, such as the list of people they follow or the list of people who are following them as a non-obstrusive modal (Material &lt;span class="caps"&gt;UI&lt;/span&gt; pop-up).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As will be discussed in the section &lt;a href="#state-of-the-art-in-web-development"&gt;State of the art in web development&lt;/a&gt;, this solution follows best practices and aims to represent the state of the art, both in terms of technical execution and in the contemporary look of the final product, which is brought into the spotlight in the following figures.&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="running-the-application"&gt;Running the application&lt;/h1&gt;
&lt;p&gt;&lt;img alt="demo1" src="https://www.sglavoie.com/images/posts/0032_building_the_next_Facebook_in_a_couple_of_weeks_as_a_humble_experiment/demo1.png"/&gt;&lt;/p&gt;
&lt;h2 id="installing-and-running-the-web-application"&gt;Installing and running the web application&lt;/h2&gt;
&lt;h3 id="accessing-user-accounts"&gt;Accessing user accounts&lt;/h3&gt;
&lt;p&gt;All accounts are registered with the same password: &lt;code&gt;pass1234&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To log in, simply use one of the following email addresses:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;admin      admin@gmail.com       (superuser for Django admin)
Andrea     andrea@gmail.com
Bob        uol.grader@gmail.com
Hider      hider@gmail.com       (hidden profile)
Mia        mamamia@gmail.com
Suliman    suliman@gmail.com
Tuan       tuan@gmail.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you set the &lt;code&gt;SEND_ACTIVATION_EMAIL&lt;/code&gt; setting to &lt;code&gt;True&lt;/code&gt; in the configuration file &lt;code&gt;socialnetwork/settings.py&lt;/code&gt;, emails will be sent from the account &lt;code&gt;uol.grader@gmail.com&lt;/code&gt;, which is a real account created to manage emails for this application.&lt;/p&gt;
&lt;h3 id="running-locally"&gt;Running locally&lt;/h3&gt;
&lt;h4 id="backend"&gt;Backend&lt;/h4&gt;
&lt;p&gt;To avoid a layer of abstraction as setting up Redis on some systems may be more difficult, Django’s backend is used for the channels by default. Should you require to use Redis instead, please follow the instructions in &lt;code&gt;settings.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;CHANNEL_LAYERS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"default"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"BACKEND"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"channels.layers.InMemoryChannelLayer"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;# To use Redis locally, please comment the above line and uncomment the&lt;/span&gt;
&lt;span class="c1"&gt;# following two dicts:&lt;/span&gt;
&lt;span class="c1"&gt;# CHANNEL_LAYERS = {&lt;/span&gt;
&lt;span class="c1"&gt;#     "default": {&lt;/span&gt;
&lt;span class="c1"&gt;#         "BACKEND": "channels_redis.core.RedisChannelLayer",&lt;/span&gt;
&lt;span class="c1"&gt;#         "CONFIG": {"hosts": [("redis", 6379)]},&lt;/span&gt;
&lt;span class="c1"&gt;#     }&lt;/span&gt;
&lt;span class="c1"&gt;# }&lt;/span&gt;

&lt;span class="c1"&gt;# CACHES = {&lt;/span&gt;
&lt;span class="c1"&gt;#     "default": {&lt;/span&gt;
&lt;span class="c1"&gt;#         "BACKEND": "django_redis.cache.RedisCache",&lt;/span&gt;
&lt;span class="c1"&gt;#         "LOCATION": [("redis", 6379)],&lt;/span&gt;
&lt;span class="c1"&gt;#         "OPTIONS": {&lt;/span&gt;
&lt;span class="c1"&gt;#           "CLIENT_CLASS": "django_redis.client.DefaultClient"&lt;/span&gt;
&lt;span class="c1"&gt;#         },&lt;/span&gt;
&lt;span class="c1"&gt;#     }&lt;/span&gt;
&lt;span class="c1"&gt;# }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then, a simple way to get Redis running would be to launch it with Docker:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;docker&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;6379&lt;/span&gt;:6379&lt;span class="w"&gt; &lt;/span&gt;redis
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Moving on to installing Django and the rest of the dependencies for the backend:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;backend

&lt;span class="c1"&gt;# Activate a virtual environment, e.g.:&lt;/span&gt;
python3&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;venv&lt;span class="w"&gt; &lt;/span&gt;.venv&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;source&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;.venv/bin/activate

&lt;span class="c1"&gt;# Install dependencies&lt;/span&gt;
pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;-r&lt;span class="w"&gt; &lt;/span&gt;requirements.txt

&lt;span class="c1"&gt;# Run the server on port 8000 with existing data&lt;/span&gt;
python&lt;span class="w"&gt; &lt;/span&gt;manage.py&lt;span class="w"&gt; &lt;/span&gt;runserver
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Dependencies can also be installed with Poetry thanks to the provided files &lt;code&gt;pyproject.toml&lt;/code&gt; and &lt;code&gt;poetry.lock&lt;/code&gt; with the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;poetry&lt;span class="w"&gt; &lt;/span&gt;install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To keep the Docker image simple, &lt;code&gt;pip&lt;/code&gt; is used to install the requirements, although beware that Poetry’s dependency resolver will be more predictable in a production application.&lt;/p&gt;
&lt;h4 id="frontend"&gt;Frontend&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;frontend

&lt;span class="c1"&gt;# Install dependencies&lt;/span&gt;
npm&lt;span class="w"&gt; &lt;/span&gt;install

&lt;span class="c1"&gt;# Run the server on port 3000&lt;/span&gt;
npm&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Access the application at &lt;a href="http://localhost:3000"&gt;http://localhost:3000&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id="using-docker"&gt;Using Docker&lt;/h4&gt;
&lt;p&gt;A &lt;code&gt;docker-compose.yaml&lt;/code&gt; has been prepared to launch all the required parts at once (Redis, Django and React).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;docker-compose&lt;span class="w"&gt; &lt;/span&gt;build
docker-compose&lt;span class="w"&gt; &lt;/span&gt;up&lt;span class="w"&gt; &lt;/span&gt;-d
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Some other useful commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;docker-compose&lt;span class="w"&gt; &lt;/span&gt;down
docker-compose&lt;span class="w"&gt; &lt;/span&gt;logs
docker-compose&lt;span class="w"&gt; &lt;/span&gt;ps&lt;span class="w"&gt; &lt;/span&gt;-a
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This container could be set up to run in a cloud infrastructure such as Google Cloud Platform inside a virtual machine. This setup goes above and beyond what was taught in this module, though, therefore resources were not allocated to the actual deployment.&lt;/p&gt;
&lt;h3 id="local-deployment"&gt;Local deployment&lt;/h3&gt;
&lt;p&gt;An alternative to the (costly and unfunded) deployment on &lt;span class="caps"&gt;GCP&lt;/span&gt; can be done on a local machine, using Docker to containerize the application and a service like Cloudflare Tunnel to allow traffic from the external world to reach the application, effectively converting the machine into a server.&lt;/p&gt;
&lt;h4 id="summary-of-the-steps-needed-to-deploy-locally"&gt;Summary of the steps needed to deploy locally&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Buy/use a domain name and configure its &lt;span class="caps"&gt;DNS&lt;/span&gt; with Cloudflare.&lt;/li&gt;
&lt;li&gt;Update Django’s &lt;code&gt;settings.py&lt;/code&gt; to allow the domain name to reach the Django application — avoiding &lt;span class="caps"&gt;CORS&lt;/span&gt; issue when localhost:3000 tries to connect to localhost:8000 using that domain — (i.e. &lt;code&gt;ALLOWED_HOSTS&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Install the &lt;span class="caps"&gt;CLI&lt;/span&gt; tool &lt;code&gt;cloudflared&lt;/code&gt;, log in to your Cloudflare account with &lt;code&gt;cloudflared tunnel login&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Create a new tunnel: &lt;code&gt;cloudflared tunnel create test-tunnel&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Route that tunnel: &lt;code&gt;cloudflared tunnel route dns &amp;lt;T&amp;gt; &amp;lt;N&amp;gt;&lt;/code&gt;, where &lt;code&gt;&amp;lt;N&amp;gt;&lt;/code&gt; is the web address to use as a sub-domain and &lt;code&gt;&amp;lt;T&amp;gt;&lt;/code&gt; is the tunnel &lt;span class="caps"&gt;ID&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;Add this sub-domain to the &lt;span class="caps"&gt;DNS&lt;/span&gt; management console in the Cloudflare dashboard.&lt;/li&gt;
&lt;li&gt;Configure Cloudflare to use the web application:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# ~/.cloudflared/config.yml
url: http://localhost:3000
tunnel: SOME_ID_GIVEN_BY_CLOUDFLARE
credentials-file: ~/.cloudflared/SOME_ID_GIVEN_BY_CLOUDFLARE.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, run the tunnel with &lt;code&gt;cloudflared tunnel run&lt;/code&gt; and go to the configured website at its subdomain (e.g., &lt;code&gt;name.domain.com&lt;/code&gt;).&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="functionality-implemented"&gt;Functionality implemented&lt;/h1&gt;
&lt;p&gt;&lt;img alt="demo2" src="https://www.sglavoie.com/images/posts/0032_building_the_next_Facebook_in_a_couple_of_weeks_as_a_humble_experiment/demo2.png"/&gt;&lt;/p&gt;
&lt;p&gt;This application implements all the necessary functionality at the account management level with Djoser. In effect, users can:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sign up for a new account;&lt;/li&gt;
&lt;li&gt;Activate their account via email upon creation (this behaviour is disabled by default for convenience but can be reactivated as mentioned earlier);&lt;/li&gt;
&lt;li&gt;Reset their password via email;&lt;/li&gt;
&lt;li&gt;Log into their account;&lt;/li&gt;
&lt;li&gt;Change their displayed name;&lt;/li&gt;
&lt;li&gt;Make their profile hidden to other users;&lt;/li&gt;
&lt;li&gt;Log out from their account;&lt;/li&gt;
&lt;li&gt;Delete their account permanently by validating their password.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;User profiles provide the following features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Number of followers as well as a complete list of followers shown;&lt;/li&gt;
&lt;li&gt;Number of people that a user is following as well as a complete list of these people;&lt;/li&gt;
&lt;li&gt;Number of points a user has “given” to posts they like;&lt;/li&gt;
&lt;li&gt;Number of points a user has “taken” from posts they dislike;&lt;/li&gt;
&lt;li&gt;Where the user is located;&lt;/li&gt;
&lt;li&gt;Each user can display a biography;&lt;/li&gt;
&lt;li&gt;The date at which a user joined the social network;&lt;/li&gt;
&lt;li&gt;The latest date at which the user updated their profile;&lt;/li&gt;
&lt;li&gt;A “status” field to prominently feature a statement, which is also shown in the profile listing;&lt;/li&gt;
&lt;li&gt;A list of posts written by the user, where the owner can create new posts, delete, edit or hide existing posts so they are no longer displayed publicly in their profile nor in the list of public posts;&lt;/li&gt;
&lt;li&gt;An image gallery the user has uploaded, where the owner can add or remove pictures;&lt;/li&gt;
&lt;li&gt;The ability for each user to delete their account, effectively cascading a delete of their interactions in the application such as their posts, profile image, etc.;&lt;/li&gt;
&lt;li&gt;Users can edit the information they share with others;&lt;/li&gt;
&lt;li&gt;To avoid profile pictures slowing down navigation — most notably in the profile list view — all images are automatically resized to maximum 300 by 300 pixels when a user uploads a new image;&lt;/li&gt;
&lt;li&gt;Finally, users can also hide their profile entirely — doing so will then mark all their posts as being anonymous and they will not be reachable by any other user of the network.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Following the “profile” view, the “profile list” view (linked with the text “&lt;strong&gt;Meet&lt;/strong&gt;” in the navigation bar) shows all public profiles with most of the information users share. To view the details of a profile (such as a birth date and the date of the last edit of a user), it is necessary to be authenticated, otherwise unauthenticated users will be redirected back to the “profile list” view and an error alert will be flashed. Additionally, the number of followers and people users are following are displayed right from the list view and allow to click to retrieve a complete list of people who are followed. The different icons shown on this page really pop out: the more followers a user has, the bigger the number of people shown in the actual icon representation; also, an icon indicating a value of “0” is slightly greyed out for readability and to let users know they won’t be able to interact with these icons.&lt;/p&gt;
&lt;p&gt;As a distinctive mark of interest, everything belonging to a user is marked with a fingerprint icon: when a user views their own profile or posts, they will be able to quickly identify that this information is theirs as long as they are logged in.&lt;/p&gt;
&lt;p&gt;Posts implement a basic editing view and allow their author to hide them. Furthermore, posts receive and lose points based on the opinions of users in the network and will end up with positive or negative scores, similar to what &lt;a href="https://www.reddit.com/"&gt;Reddit&lt;/a&gt; and &lt;a href="https://stackoverflow.com/"&gt;Stack Overflow&lt;/a&gt; have done but without splitting the count in either direction.&lt;/p&gt;
&lt;p&gt;The “&lt;strong&gt;Read&lt;/strong&gt;” page — to be found in the navigation bar — shows posts from people users follow at the top, allowing to filter the content of posts based on their interests. The total number of points is shown next to each post entry. As a section section on that page, users have the ability to see a list of public posts as well as search for keywords of interest, just like in the first section just described.&lt;/p&gt;
&lt;p&gt;On any page that gets longer than 500 pixels when scrolling down, there will be a little arrow icon allowing users to swiftly glide to the top of the page.&lt;/p&gt;
&lt;p&gt;When clicking on the avatar icon displayed in the top-right corner of the application, a “drawer” (in &lt;a href="https://mui.com/"&gt;Material &lt;span class="caps"&gt;UI&lt;/span&gt;&lt;/a&gt;‘s terms) will open to allow users to quickly jump to their profile and to log out of the application.&lt;/p&gt;
&lt;p&gt;Behind the scenes, administrators and superusers can be created with full privileges to modify and delete other accounts. These special accounts will be hidden by default from the public-facing frontend, although their profile can later be made public and used as any other account on the website.&lt;/p&gt;
&lt;p&gt;Last but not least, there is a public chat room where all users of the application can go to have a spontaneous discussion. In fact, the web application is programmed to automatically discard messages that are older than 20 seconds (by default), allowing users to share special moments that are very much unique and time-limited while avoiding being overwhelmed by content. In the event that a constant flow of messages might be entering the chat room at a given time, users will still have the ability to scroll up in the view (assuming they read fast enough). If they do not scroll up, the view will always focus on the latest incoming message so their attention span will be maintained on this very moment. Every time a user reloads the page or goes somewhere else in the application, the content of the chat window will disappear on purpose, because good discussions are meant to happen in real-time on this website. Users will not be distracted by anything else other than a little avatar icon and people’s names so they can know at a glance who is interacting with them… but they will need to have a good memory to remember everything. After all, the idea behind this chat application really is to exchange some good thoughts in the moment. What lives on is only the memory of time well spent with others.&lt;/p&gt;
&lt;p&gt;At the &lt;span class="caps"&gt;API&lt;/span&gt; level, users can interact with the application directly via &lt;span class="caps"&gt;API&lt;/span&gt; endpoints, provided they send their authentication token should a view have a requirement in this regard. These endpoints are listed succinctly below, but a file &lt;code&gt;openapi-schema.yml&lt;/code&gt; has been provided in the &lt;code&gt;backend&lt;/code&gt; directory for a complete reference.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;accounts/ profiles/
accounts/ profiles/&amp;lt;int:user_id&amp;gt;
accounts/ profiles/&amp;lt;int:user_id&amp;gt;/image
accounts/ profiles/&amp;lt;int:pk&amp;gt;/followers
accounts/ profiles/&amp;lt;int:pk&amp;gt;/followers/add
accounts/ profiles/&amp;lt;int:pk&amp;gt;/followers/remove
accounts/ profiles/gallery/add
accounts/ profiles/gallery/remove/&amp;lt;int:gallery_pk&amp;gt;
accounts/ ^media/(?P&amp;lt;path&amp;gt;.*)$
api/ posts/&amp;lt;int:pk&amp;gt;/
api/ posts/author/&amp;lt;int:pk&amp;gt;/
api/ posts/&amp;lt;int:pk&amp;gt;/up/
api/ posts/&amp;lt;int:pk&amp;gt;/down/
api/ posts/&amp;lt;int:pk&amp;gt;/pointsby/
api/ posts/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h1 id="executing-the-unit-tests"&gt;Executing the unit tests&lt;/h1&gt;
&lt;p&gt;To run the unit tests, it is a matter of activating a virtual environment (as described in the section &lt;a href="#running-locally"&gt;Running locally&lt;/a&gt;) and using the built-in &lt;code&gt;test&lt;/code&gt; command provided by Django in the following manner, which must be run from within the &lt;code&gt;backend&lt;/code&gt; directory:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;python&lt;span class="w"&gt; &lt;/span&gt;manage.py&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;test&lt;/span&gt;
Found&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;119&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;test&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;)&lt;/span&gt;.
Creating&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;test&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;database&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'default'&lt;/span&gt;...
System&lt;span class="w"&gt; &lt;/span&gt;check&lt;span class="w"&gt; &lt;/span&gt;identified&lt;span class="w"&gt; &lt;/span&gt;no&lt;span class="w"&gt; &lt;/span&gt;issues&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;silenced&lt;span class="o"&gt;)&lt;/span&gt;.
..............................................................
--------------------------------------------------------------
Ran&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;119&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;tests&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.584s

OK
Destroying&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;test&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;database&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'default'&lt;/span&gt;...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h1 id="logical-approach"&gt;Logical approach&lt;/h1&gt;
&lt;h2 id="frontend-framework-react"&gt;Frontend framework: React&lt;/h2&gt;
&lt;p&gt;The application was designed with the goal in mind of having a modern frontend framework relying on an excellent &lt;span class="caps"&gt;CSS&lt;/span&gt; framework to provide icons and other components. Speaking of components, React was chosen for its strong focus on designing small components that can be reused. Taking advantage of this approach, some components such as the “profile intro” (the box showing the main information regarding a user profile) are literally displayed on different pages, such as when viewing a single profile or when viewing a list of profiles.&lt;/p&gt;
&lt;p&gt;Similarly, a “post” entry represents the exact same React component when viewed in isolation or when browsing for many more posts. When search bars are used, these share the same characteristics and behaviors across the page while managing a different state.&lt;/p&gt;
&lt;p&gt;&lt;img alt="demo3" src="https://www.sglavoie.com/images/posts/0032_building_the_next_Facebook_in_a_couple_of_weeks_as_a_humble_experiment/demo3.png"/&gt;&lt;/p&gt;
&lt;h2 id="react-components-and-icons-material-ui"&gt;React components and icons: Material &lt;span class="caps"&gt;UI&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;On the design side, the presentation of the website was made much more consistent with the help of Material &lt;span class="caps"&gt;UI&lt;/span&gt;, which provides many ready-made React components. The whole application was built around the concept of adding building blocks from Material &lt;span class="caps"&gt;UI&lt;/span&gt; such as a “&lt;code&gt;box&lt;/code&gt;&lt;span class="dquo"&gt;“&lt;/span&gt;, “&lt;code&gt;button&lt;/code&gt;” or “&lt;code&gt;typography&lt;/code&gt;” to guarantee that all aspects of the application look homogeneous and with the same modern style.&lt;/p&gt;
&lt;p&gt;Components such as a “&lt;code&gt;drawer&lt;/code&gt;” and a “&lt;code&gt;navbar&lt;/code&gt;” really sped up development and were expected to be used extensively right from the start.&lt;/p&gt;
&lt;h2 id="api-django-rest-framework"&gt;&lt;span class="caps"&gt;API&lt;/span&gt;: Django Rest Framework&lt;/h2&gt;
&lt;p&gt;Since the use of Django was mandatory for the backend part of this work, Django &lt;span class="caps"&gt;REST&lt;/span&gt; framework was an ideal choice considering the need for an &lt;span class="caps"&gt;API&lt;/span&gt; to be directly accessible to end-users and to benefit from an easy-to-use toolkit to build an &lt;span class="caps"&gt;API&lt;/span&gt; that can be accessed from React without breaking a sweat.&lt;/p&gt;
&lt;p&gt;Django &lt;span class="caps"&gt;REST&lt;/span&gt; Framework simplifies data serialization and even allows dealing with nested serialization in a straightforward way. Because it comes with powerful features for authentication and permission management, it was also a great option for this specific use case which depend easily on these sets of features which would arguably be very complex, error-prone and time consuming to implement manually.&lt;/p&gt;
&lt;h2 id="user-management-djoser"&gt;User management: Djoser&lt;/h2&gt;
&lt;p&gt;Beyond Django’s default user management system, there was a desire to extend the default behaviour, for instance to use an email address instead of a username to authenticate users. Djoser makes these changes and much more a lot more simple, adding easy management of logins, logouts, password confirmation resets, activation emails and so forth.&lt;/p&gt;
&lt;p&gt;By leveraging Django’s built-in features with Djoser, the user model can be extended with ease and flexibility.&lt;/p&gt;
&lt;h2 id="asynchronous-communication"&gt;Asynchronous communication&lt;/h2&gt;
&lt;p&gt;To build the chat application, Channels and &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API"&gt;WebSocket&lt;/a&gt; were considered as one of the best combination of libraries because they are simple to use and allow high concurrency to be possible. Channels makes it easy to create an asynchronous WebSocket consumer to deal with many users connecting to possibly many different groups: it is therefore an ideal option for a growing social network.&lt;/p&gt;
&lt;p&gt;The WebSocket library in JavaScript is then used to communicate with Channels via the WebSockets technology, sending and receiving messages with additional payload to extend the functionality of the chat application.&lt;/p&gt;
&lt;h2 id="deployment-docker-cloudflare-tunnel"&gt;Deployment: Docker, Cloudflare Tunnel&lt;/h2&gt;
&lt;p&gt;To deploy an application to production, Docker Compose is a robust and reliable solution, especially for this use case where different microservices can be pieced together seamlessly, sharing resources across a single network on different ports.&lt;/p&gt;
&lt;p&gt;Docker makes it possible to containerize parts of the application (i.e., the backend, frontend and in-memory cache database) to be run potentially on many virtual machines in the cloud and Docker Compose makes the process of orchestring an application such as this one much more accessible than configure web servers from start to finish.&lt;/p&gt;
&lt;p&gt;Poetry, a package and dependencies management system for Python, allows requirements to be pinned to specific versions and ensures reproducibility is achieved, which is critically important when it comes to deploying to production. Its dependencies resolver is much more reliable when the exactitude of a list of requirements must be met.&lt;/p&gt;
&lt;p&gt;In terms of deploying a real application on a small scale, &lt;a href="https://www.cloudflare.com/products/tunnel/"&gt;Cloudflare Tunnel&lt;/a&gt; was also considered as it is useful to share prototypes during development and to instantly deploy a local server. Furthermore, it can work hand in hand with Docker Compose and Poetry since a container can be run in the background and the application can be exposed on multiple ports locally without having to configure firewalls.&lt;/p&gt;
&lt;p&gt;Because &lt;code&gt;pip&lt;/code&gt; is traditionally used in the Python world to manage requirements, the command &lt;code&gt;pip freeze&lt;/code&gt; was used to generate a standard list of pinned dependencies, although for an actual deployment to production, an open source alternative like Poetry would likely be preferable.&lt;/p&gt;
&lt;h2 id="formatting-prettier-black-vulture-pylint"&gt;Formatting: Prettier, Black, Vulture, Pylint&lt;/h2&gt;
&lt;p&gt;While code formatting is of utmost importance for readability, it is also a tremendous waste of time to try to do it manually. For this reason, multiple tools were used to aid with this gargantuan task. &lt;a href="https://prettier.io/"&gt;Prettier&lt;/a&gt; was used on the frontend side to format everything related to JavaScript and &lt;span class="caps"&gt;CSS&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;On the backend side, &lt;a href="https://black.readthedocs.io/en/stable/"&gt;Black&lt;/a&gt; was the primary formatter used. Its use was complemented with &lt;a href="https://pylint.pycqa.org/en/latest/"&gt;Pylint&lt;/a&gt;, which helps to clean up and refactor the code by finding hard-to-spot warnings, such as unnecessary return statements or the use of more complex expressions when an equivalent such as a list comprehension could be used.&lt;/p&gt;
&lt;p&gt;Finally, to keep the code tidy and alive, &lt;a href="https://github.com/jendrikseipp/vulture"&gt;Vulture&lt;/a&gt; was used to find “dead” code not in used anywhere else. Even if code is well formatted, code that is not needed become a liability. In the source code world, less really is more.&lt;/p&gt;
&lt;h2 id="api-calls-axios"&gt;&lt;span class="caps"&gt;API&lt;/span&gt; calls: Axios&lt;/h2&gt;
&lt;p&gt;The &lt;a href="https://axios-http.com/"&gt;Axios&lt;/a&gt; JavaScript library was used for the attractiveness and flexibility of its &lt;span class="caps"&gt;API&lt;/span&gt;. Because it supports fully the Promise &lt;span class="caps"&gt;API&lt;/span&gt; and allow making asynchronous calls with the async/await syntax, it makes for a good tool to communicate with the backend. It has extensive documentation and excellent support on various web platforms including GitHub, which is an important consideration when thinking about deploying an application in the real world.&lt;/p&gt;
&lt;p&gt;There are new and shiny technological options all the time, but a battle-tested software like Axios remain a competent tool apt for the job.&lt;/p&gt;
&lt;h2 id="state-management-redux-and-immer"&gt;State management: Redux and Immer&lt;/h2&gt;
&lt;p&gt;Despite the Context &lt;span class="caps"&gt;API&lt;/span&gt; from React being powerful and easy to use, Redux and &lt;a href="https://immerjs.github.io/immer/"&gt;Immer&lt;/a&gt; really make dealing with state management a breeze. Redux on its own is one of the best in its category to provide state management at scale: its documentation is also fantastic and detailed and its popularity on Stack Overflow is only a plus in its favour should there be a need to fix issues while using it (because there will inevitably be such a need). The Redux workflow with actions being dispatched with types makes sense and adding new features is very fast without having to change existing pieces of states when combining reducers.&lt;/p&gt;
&lt;p&gt;One possible drawback of using plain Redux to manage the store is that states can be mutated and unexpected consequences may ensue. For this reason, Immer was included so that dealing with a Redux store is stripped down to a direct object assignment, where Immer takes care of updating items and even nested items as needed.&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="design-and-implementation-decisions"&gt;Design and implementation decisions&lt;/h1&gt;
&lt;p&gt;Because deployment with Docker was a primordial concern, the application was built with a backend that is completely decoupled from a frontend. In fact, with just a little bit of ingenuity, Django could be swapped entirely with another web framework as long as the same endpoints are provided to the frontend with the necessary technologies (such as web sockets) being implemented. In a similar way, the frontend, which is built primarily with React, could be upgraded to another popular alternative such as Vue.js. This gives flexibility and should there be a greater need for optimization once the social network takes off for a real spin, there is the possibility to bundle React with Django by building minimized versions of the assets and shipping everything as a Docker container that can be run on powerful machines in the cloud.&lt;/p&gt;
&lt;p&gt;Beyond this original concern, more concrete decisions were taken. For instance, Django signals were used to simplify how user profiles are created. Instead of allowing users to create a profile from their user account, the experience was unified by transparently automating this process whenever a user account is created such that it is attached to a newly created profile associated with it. Leaving the option to the end-user of manually creating a profile could be confusing at best and lead to unexpected results at worst, where user accounts and user profiles IDs become out of sync, which is a nice side-effect of having them created as well as deleted at the same time.&lt;/p&gt;
&lt;p&gt;From the start, Djoser was chosen to override specific built-in functions performed by Django and to facilitate email management. To integrate Djoser with the administrative bits of the application — namely, the Django admin interface — Django forms were used to customize how users are to be registered as well as superusers and staff accounts. By overriding the user creation, it is now possible to update parts of the process with simple configuration variables implemented by Djoser, such as forcing users to retype their passwords or not.&lt;/p&gt;
&lt;p&gt;&lt;img alt="demo4" src="https://www.sglavoie.com/images/posts/0032_building_the_next_Facebook_in_a_couple_of_weeks_as_a_humble_experiment/demo4.png"/&gt;&lt;/p&gt;
&lt;p&gt;With Django models, the base model became a &lt;code&gt;UserAccount&lt;/code&gt;, which allow users to join the network. However, the functionality related to account management is kept separate from other features of the application by interfacing with the accounts using a &lt;code&gt;UserProfile&lt;/code&gt; model on which a &lt;strong&gt;user&lt;/strong&gt; field exist. In turn, this model integrates other parts of the models, such as many-to-many relationships with followers and a gallery image model, which is also linked as a many-to-many relationship. Another part of the application implements a &lt;code&gt;Post&lt;/code&gt; model where the &lt;strong&gt;author&lt;/strong&gt; field corresponds to a &lt;code&gt;UserAccount&lt;/code&gt;, effectively linking a different part of the application to the user accounts. Again, a &lt;code&gt;Post&lt;/code&gt; then interfaces with other models to take points into account, which are also linked to user profiles.&lt;/p&gt;
&lt;p&gt;To manage all kinds of &lt;span class="caps"&gt;POST&lt;/span&gt; requests as well as to guarantee that models communicate as expected between each other, serializers using Django &lt;span class="caps"&gt;REST&lt;/span&gt; framework features were used in the process. These generally use a &lt;code&gt;SerializerMethodField&lt;/code&gt; to define more complex behaviors, such as getting all non-hidden followers for a single profile.&lt;/p&gt;
&lt;p&gt;Views were implemented with &lt;span class="caps"&gt;DRF&lt;/span&gt; &lt;code&gt;APIView&lt;/code&gt;, bridging the gap between a RESTful &lt;span class="caps"&gt;API&lt;/span&gt; and the ability to define simple views using methods like &lt;strong&gt;get&lt;/strong&gt; and &lt;strong&gt;delete&lt;/strong&gt;. Views rely on serializers and specify a &lt;code&gt;permission_classes&lt;/code&gt; list of custom values, which were implemented separately in a &lt;code&gt;permissions.py&lt;/code&gt; file. This allows customizing the default behavior so that by default all views require authentication unless explicitly stated otherwise by these permission classes. This is also more secure, preventing users from inadvertently being able to access what should have been protected resources.&lt;/p&gt;
&lt;p&gt;In terms of &lt;span class="caps"&gt;API&lt;/span&gt; definition, simplicity was key: every endpoint regarding authentication is accessed under &lt;code&gt;/auth&lt;/code&gt; while our specific implementation of user accounts is accessed under &lt;code&gt;/accounts&lt;/code&gt;. Additionally, all endpoints to deal with user posts are to be found with an endpoint starting with &lt;code&gt;/posts&lt;/code&gt;. Finally, there is another set of endpoints to work with profiles, these being accessible under &lt;code&gt;/profiles&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The Django chat application, due to its asynchronous nature, uses different technologies behind the scenes, including notably WebSockets. Channels was chosen to implement this portion because it extends Django’s capabilities beyond &lt;span class="caps"&gt;HTTP&lt;/span&gt; and is ideally suited for chat applications like the one being built as part of this social network.&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="evaluation-of-the-final-product"&gt;Evaluation of the final product&lt;/h1&gt;
&lt;h2 id="what-worked-well"&gt;What worked well&lt;/h2&gt;
&lt;p&gt;&lt;img alt="demo5" src="https://www.sglavoie.com/images/posts/0032_building_the_next_Facebook_in_a_couple_of_weeks_as_a_humble_experiment/demo5.png"/&gt;&lt;/p&gt;
&lt;p&gt;Opting for React made for a flexible framework that behaves extremely well with Django. React has complete documentation and extensive support offered on different medium, making it ideal for a robust and complex web application. Coupled with Material &lt;span class="caps"&gt;UI&lt;/span&gt;, the frontend aspect of the work was taken care of and didn’t need particular attention when developing. For any basic functionality that was not available out of the box in JavaScript, the Lodash library was used to make object comparisons and such much more readable and understandable when multiple conditions were being evaluated in a &lt;span class="caps"&gt;JSX&lt;/span&gt; expression, often with ternary operators.&lt;/p&gt;
&lt;p&gt;The state was managed beautifully with Redux and the Redux Devtools web browser extension, allowing for rapid iterations and feedback where debugging would otherwise become very cumbersome. The &lt;code&gt;useState&lt;/code&gt; hook was used profusely to separate concerns as well.&lt;/p&gt;
&lt;p&gt;Keeping with React, the application was divided into logical sections that made it easy to add new features. Small components were created for different parts of the application, Redux actions and reducers were stored in their respective directories, containers and other higher-order components were given a special place in the frontend hierarchy, utility functions were well organized and accessible, pages and custom hooks also had their own place to reside.&lt;/p&gt;
&lt;p&gt;Deploying with Docker remained a clean process, where a single &lt;code&gt;Dockerfile&lt;/code&gt; was created to power the backend and another &lt;code&gt;Dockerfile&lt;/code&gt; added for the frontend. Finally, all these instructions were put together with a readable &lt;code&gt;docker-compose.yaml&lt;/code&gt; file, which purpose was to join all the different containers in a single place and to allow adding more microservices, such as Redis. Postgres was not used in this version for practical reasons when sharing the source code of the web application with others, but only a few steps would need to be taken to update Django’s settings file as well as pulling from DockerHub a suitable image to run Postgres.&lt;/p&gt;
&lt;p&gt;Testing with Django went particularly well: the documentation had a clear guide about testing and any aspect of the application — serializers, views, models, forms, consumers, signals and so on — were tested according to the Django standards, leading to a whopping total of 119 passing unit tests, which are to be found inside a &lt;code&gt;tests&lt;/code&gt; directory inside each Django application within the project.&lt;/p&gt;
&lt;h2 id="what-could-have-been-improved"&gt;What could have been improved&lt;/h2&gt;
&lt;p&gt;&lt;img alt="demo6" src="https://www.sglavoie.com/images/posts/0032_building_the_next_Facebook_in_a_couple_of_weeks_as_a_humble_experiment/demo6.png"/&gt;&lt;/p&gt;
&lt;p&gt;Planning of the technical stack could have gone much better. During the experimentation phase in the early steps of this project, good portions of functionality were implemented using Django templates without any frontend framework, except for the &lt;span class="caps"&gt;CSS&lt;/span&gt; framework Bootstrap. Features such as user notifications, personal messaging between two users with the ability to use different “inboxes” and “threads” was a very good selling point of the first version of this web application. Alas, due to time constraints, these useful additions were left behind (preserved with a Git history) but did not manage to make it to the final product. It would have been much more productive to take a closer look at the panoply of requirements to be implemented from the very beginning and determining the best fit as early as possible to avoid rewriting code from one framework to another.&lt;/p&gt;
&lt;p&gt;Although Redux was a lifesaver in many circumstances, it was also a hurdle in terms of productivity because of its complexity and different moving parts. Being more careful to not use Redux at all costs everywhere possible, dispatching updates in the application would surely be simplified with the Context &lt;span class="caps"&gt;API&lt;/span&gt; using pure React or even some &lt;code&gt;useEffect&lt;/code&gt; hooks, which were used profusely with good results. Immer was also introduced a bit later in the thought process when dealing with nested &lt;span class="caps"&gt;JSON&lt;/span&gt; objects. Although it made the remaining development easier, it was also probably a red flag meaning that the Redux store could have been simplified into smaller reducers where different selectors could access parts of the store that wouldn’t need to be nested objects. This may also indicate a flaw in the way models were implemented, but most likely there were errors made when dispatching messages in a part of the Redux store that really should belong somewhere else. In concrete terms, dispatching an event regarding users inside the “user” reducer was probably more complicated than simply dealing with all notifications in a different reducer. In actuality, this led to some dispatch actions that did more than one thing, which is not ideal when thinking about the concept of separation of concerns.&lt;/p&gt;
&lt;p&gt;Although this is not perceptible in the final product, Django migrations were at times a pain to work with. This is because the models weren’t thought through very well at the beginning and despite the iterative process being an inherent part of software development, iterating over models in Django definitely counts as an exception to the rule where clearly defined models will not cause migrations to break or need to be modified in any way. It would have been more productive to produce well-designed diagrams, depicting the architecture of the application as well as the complete schema of the database to avoid surprises down the road.&lt;/p&gt;
&lt;h2 id="state-of-the-art-in-web-development"&gt;State of the art in web development&lt;/h2&gt;
&lt;p&gt;&lt;img alt="source_code" src="https://www.sglavoie.com/images/posts/0032_building_the_next_Facebook_in_a_couple_of_weeks_as_a_humble_experiment/source_code.png"/&gt;&lt;/p&gt;
&lt;p&gt;On a technical aspect, many parts of this web application conform to modern web standards. The latest stable release versions of libraries were used whenever convenient and/or possible. This non-exhaustive list would include, at the time of this writing, React 17.0.2, Redux 4.1.2, WebSocket 1.0.34 and Material &lt;span class="caps"&gt;UI&lt;/span&gt; 5.5.0 for the frontend. On the backend, Django 4.0.3, Channels 3.0.4, Djoser 2.1.0 and Redis 4.2.0 were used.&lt;/p&gt;
&lt;p&gt;When dealing with dependencies, Poetry was used with great benefit to make sure that Docker containers could be deployed reliably. Using Docker and Docker Compose was another touch that was added since most contemporary software will ship with a Docker solution for convenience. An excellent example in this regard would be PlantUML, a Java-based application to generate diagrams from textual descriptions that can be deployed in only a few seconds via Docker, launching a local server with the full capabilities offered by the piece of software in question. Nowadays, with Docker containers being more secure and very fitting for a deployment to the cloud at most big technology companies, it really is a best practice adopted by good software teams to work with containerized versions of their products.&lt;/p&gt;
&lt;p&gt;The wider community was consulted in an effort to bring the maximum quality possible to the end result. Concretely, advice was taken from prominent figures in the web development world, including &lt;a href="https://www.dennisivy.com/"&gt;Dennis Ivanov&lt;/a&gt; and &lt;a href="https://laithharb.com/"&gt;Laith Harb&lt;/a&gt;, both Django and React experts and &lt;a href="https://coreyms.com/"&gt;Corey Schafer&lt;/a&gt;, an accomplished software developer from the Python world. &lt;a href="https://nigelpoulton.com/"&gt;Nigel Poulton&lt;/a&gt; — author of Docker Deep Dive — served as a good reference for the deployment part. &lt;a href="https://realpython.com/"&gt;Real Python&lt;/a&gt; was a godsend with its in-depth articles, for instance about debugging code with Pdb. Less well-known yet high-quality content producers inspired work with Djoser and the implementation of user posts, including &lt;a href="https://www.youtube.com/channel/UCf_Y89gbkB1bJGkmqiQIAnQ"&gt;Bryan Dunn&lt;/a&gt; and &lt;a href="https://www.legionscript.com/"&gt;Legion Script&lt;/a&gt;. &lt;a href="https://www.cloudflare.com/"&gt;Cloudflare&lt;/a&gt; was also one of the best resources used to deploy a secure web server locally and to learn about &lt;span class="caps"&gt;JSON&lt;/span&gt; web tokens and their use specifically with Python. Needless to say, the official documentation from each major framework and tool was referenced all way through, many names which are going to sound familiar by now — Django &lt;span class="caps"&gt;REST&lt;/span&gt; Framework, React, Redux, Immer.js, Django, Djoser, Channels, etc.&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="demo-of-the-app"&gt;Demo of the app&lt;/h1&gt;
&lt;div class="youtube youtube-16x9"&gt;
&lt;iframe allowfullscreen="" frameborder="0" seamless="" src="https://www.youtube.com/embed/LFJfL2ejhAU"&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;hr/&gt;
&lt;h2 id="resources-and-references"&gt;Resources and references&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://axios-http.com/"&gt;Axios&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://black.readthedocs.io/en/stable/"&gt;Black&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/channel/UCf_Y89gbkB1bJGkmqiQIAnQ"&gt;Bryan Dunn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.cloudflare.com/products/tunnel/"&gt;Cloudflare Tunnel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.cloudflare.com/"&gt;Cloudflare&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.conventionalcommits.org/en/v1.0.0/"&gt;Conventional Commits specification&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://coreyms.com/"&gt;Corey Schafer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.dennisivy.com/"&gt;Dennis Ivanov&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://channels.readthedocs.io/en/stable/"&gt;Django Channels&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.django-rest-framework.org/"&gt;Django &lt;span class="caps"&gt;REST&lt;/span&gt; Framework&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/compose/"&gt;Docker Compose&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.docker.com/"&gt;Docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://immerjs.github.io/immer/"&gt;Immer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://laithharb.com/"&gt;Laith Harb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.legionscript.com/"&gt;Legion Script&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mui.com/"&gt;Material &lt;span class="caps"&gt;UI&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nigelpoulton.com/"&gt;Nigel Poulton&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://python-poetry.org/"&gt;Poetry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://prettier.io/"&gt;Prettier&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pylint.pycqa.org/en/latest/"&gt;Pylint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://realpython.com/"&gt;Real Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/"&gt;Reddit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://redis.io/"&gt;Redis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://redux.js.org/"&gt;Redux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/"&gt;Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jendrikseipp/vulture"&gt;Vulture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API"&gt;WebSocket&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="learnings"></category><category term="bsc"></category><category term="django"></category><category term="lessons"></category><category term="python"></category></entry><entry><title>A retrospective on creating an impractical little tool just for fun</title><link href="https://www.sglavoie.com/posts/2022/09/18/a-retrospective-on-creating-an-impractical-little-tool-just-for-fun/" rel="alternate"></link><published>2022-09-18T20:06:00-05:00</published><updated>2022-09-18T20:06:00-05:00</updated><author><name>Sébastien Lavoie</name></author><id>tag:www.sglavoie.com,2022-09-18:/posts/2022/09/18/a-retrospective-on-creating-an-impractical-little-tool-just-for-fun/</id><summary type="html">&lt;p&gt;Sometimes, spending hundreds of hours on something that could easily have been achieved in a fraction of the time makes for a rewarding journey! While it&amp;#8217;s important to be selective about where our attention goes in the first place, it matters equally to realize when the end of the rope is in sight so we can jump off the boat with good enough&amp;nbsp;timing&amp;#8230;&lt;/p&gt;</summary><content type="html">
&lt;hr/&gt;
&lt;h1 id="introduction"&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Building little projects to scratch one’s own needs is a great way to practice the craft of software development, or at least this is some consistent advice I have picked up from legendary figures in the field. Whether it be formulated by the famous &lt;a href="https://twitter.com/ID_AA_Carmack"&gt;John Carmack&lt;/a&gt; (&lt;a href="https://www.youtube.com/watch?v=I845O57ZSy4"&gt;an excellent interview with Lex Fridman was recently released&lt;/a&gt;) or a rising star like &lt;a href="https://twitter.com/ThePrimeagen"&gt;The Primeagen&lt;/a&gt; (he has a fantastic &lt;a href="https://www.youtube.com/c/ThePrimeagen"&gt;YouTube channel&lt;/a&gt; too), the core of the message remains the same: &lt;em&gt;deliberate practice is required to make progress&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;While I was in the middle of completing a BSc in computer science, I decided that a simple and reliable spreadsheet was not enough to keep track of my grades and decided to tackle the creation of a &lt;span class="caps"&gt;TUI&lt;/span&gt; — terminal user interface — to come to my rescue by providing, hopefully, correct answers. And so &lt;a href="https://github.com/sglavoie/uol-grades-calculator"&gt;uol-grades-calculator&lt;/a&gt; (&lt;code&gt;ugc&lt;/code&gt; for short) was born out of the desire to learn more about &lt;a href="https://en.wikipedia.org/wiki/Test-driven_development"&gt;&lt;span class="caps"&gt;TDD&lt;/span&gt;&lt;/a&gt; in a practical way, the &lt;a href="https://hypothesis.readthedocs.io/en/latest/"&gt;Hypothesis&lt;/a&gt; testing library written in Python, &lt;a href="https://www.sphinx-doc.org/"&gt;Sphinx&lt;/a&gt; and &lt;a href="https://readthedocs.org/"&gt;Read The Docs&lt;/a&gt; for publishing nice-looking documentation in reStructuredText format (the Markdown format being another option). Even though the goal of this tool has never been to gather a growing user base, it was a good learning experience because alternatives to it spawn up over time and, arguably, some of them were much friendlier and simpler to use (who would have thought that…).&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="setting-up-the-stage"&gt;Setting up the stage&lt;/h1&gt;
&lt;p&gt;To put things in perspective, this tool was never really under active development, but it did receive updates from August 2020 until September 2022, so the project slowly took shape in a time frame of a little over 2 years as can be shown in the following repurposed Gantt chart, where the length associated with each Git commit corresponds to the amount of time elapsed from one commit to the next.&lt;/p&gt;
&lt;div style="max-width:100%; height: 60vh; overflow:auto;"&gt;
&lt;img alt="ugc's development timeline" class="max-size-img-post" src="https://www.sglavoie.com/images/posts/0030_a_retrospective_on_creating_an_impractical_little_tool_just_for_fun/diagram.svg" style="min-width: 1800px"/&gt;
&lt;/div&gt;
&lt;h2 id="vim-magic-behind-the-scenes"&gt;Vim magic behind the scenes&lt;/h2&gt;
&lt;p&gt;While the chart itself is neither the prettiest nor the most interesting, the &lt;em&gt;how&lt;/em&gt; of it has a possibly more entertaining story attached to it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The list of commits was extracted with the command &lt;code&gt;git log --pretty=format:'%s    : %cs' &amp;gt; commits.txt&lt;/code&gt; to get a one-liner for each commit with the description followed by the date, piped/stored in the text file &lt;code&gt;commits.txt&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Some Vim regex magic was done to substitute the first ‘&lt;code&gt;:&lt;/code&gt;&lt;span class="quo"&gt;‘&lt;/span&gt; character on each line so that &lt;a href="https://mermaid-js.github.io/"&gt;Mermaid&lt;/a&gt; wouldn’t struggle to render the graph: ‘&lt;code&gt;%s/^\(\w\+\): /\1 - /&lt;/code&gt;&lt;span class="quo"&gt;‘&lt;/span&gt;. This pattern was actually predictable because the &lt;a href="https://www.conventionalcommits.org/en/v1.0.0/"&gt;Conventional Commits specification&lt;/a&gt; was followed religiously right from the beginning.&lt;/li&gt;
&lt;li&gt;The previous command left some ‘&lt;code&gt;:&lt;/code&gt;&lt;span class="quo"&gt;‘&lt;/span&gt; characters in there that weren’t needed, so they were removed except where a digit was immediately following such that the last part of the line including the date would be left in place (here, &lt;code&gt;\v&lt;/code&gt; is the “very magic” flag used so that we don’t need backslashes around the captured group, i.e. the digit, which looks a bit more readable): ‘&lt;code&gt;%s/\v: (\d)@!/ -&lt;/code&gt;&lt;span class="quo"&gt;‘&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;To show the elapsed time between two commits, a Vim macro was concocted so that the date on the current line would be copied and pasted on the following line in a specific way, which works because the Git history appears in chronological order by default: ‘&lt;code&gt;kf:wv9ly0jA,^[pj0&lt;/code&gt;&lt;span class="quo"&gt;‘&lt;/span&gt;. It’s Ugly but it gets the job done ;).&lt;/li&gt;
&lt;li&gt;In essence, it goes up by one line (&lt;code&gt;k&lt;/code&gt;), searches for the &lt;code&gt;:&lt;/code&gt; character with &lt;code&gt;f&lt;/code&gt; (which precedes the date), moves ahead by one &lt;code&gt;w&lt;/code&gt;ord, highlights the date which is in the format &lt;code&gt;YYYY-MM-DD&lt;/code&gt; with &lt;code&gt;v9l&lt;/code&gt;, yanks/copies the date with &lt;code&gt;y&lt;/code&gt;, goes back to the beginning of the line (&lt;code&gt;0&lt;/code&gt;), goes down one line with &lt;code&gt;j&lt;/code&gt;, &lt;code&gt;A&lt;/code&gt;ppends a &lt;code&gt;,&lt;/code&gt; at the end of the line, goes out of insert mode with a &lt;code&gt;Ctrl - c&lt;/code&gt; shortcut (which visually translates to the escape sequence &lt;code&gt;^[&lt;/code&gt;), &lt;code&gt;p&lt;/code&gt;astes the date, goes down one line again with &lt;code&gt;j&lt;/code&gt; to be ready to process the next date and goes to the beginning of the line again with &lt;code&gt;0&lt;/code&gt; so we don’t miss a match. Vim macros are definitely quite expressive in a terse way!&lt;/li&gt;
&lt;li&gt;Then, it’s just a matter of running the macro for the number of lines below the cursor in the file. We can quickly get a sense of the number of lines in the file with &lt;code&gt;Ctrl - g&lt;/code&gt; and run the macro on the required number of lines with &lt;code&gt;100@a&lt;/code&gt;, replacing &lt;code&gt;100&lt;/code&gt; with the number of lines and &lt;code&gt;a&lt;/code&gt; with the register where the macro was saved (in this case, in the register &lt;code&gt;a&lt;/code&gt; with &lt;code&gt;qa&lt;/code&gt; to start recording the macro there, which is to be stopped by pressing &lt;code&gt;q&lt;/code&gt; once more in normal mode).&lt;/li&gt;
&lt;li&gt;Once the macro is run, the output needs to be reversed so that the initial commit can be displayed where the graph starts in the top-left corner, which can be done with the &lt;a href="https://vim.fandom.com/wiki/Reverse_order_of_lines"&gt;clever command&lt;/a&gt; ‘&lt;code&gt;g/^/m0&lt;/code&gt;&lt;span class="quo"&gt;‘&lt;/span&gt;: it runs on every line of the file, successively putting each line at the very top of the file (line &lt;code&gt;0&lt;/code&gt;) to have the effect of reversing the whole document!&lt;/li&gt;
&lt;li&gt;Finally, the graph is generated literally by copying and pasting that list of commits into a Mermaid textual chart, which shall be the topic of another post!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The whole process is done in a few minutes at most, making it a nice solution to deal with manageable outputs under a few thousand lines. Otherwise, it might be more convenient — albeit a bit more time consuming too — to write a script to do the work since Vim macros, when run at a relatively large scale, can be slow and error-prone.&lt;/p&gt;
&lt;h1 id="what-went-well"&gt;What went well&lt;/h1&gt;
&lt;p&gt;With all that fluffy preamble, we might hope that something went well in the end. Well, there were a couple of noteworthy things indeed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Even though I worked on this project alone, I created a bunch of &lt;a href="https://github.com/sglavoie/uol-grades-calculator/issues?q=is%3Aissue+is%3Aclosed"&gt;GitHub issues&lt;/a&gt; that I assigned to myself, each with its own set of tasks, acceptance criteria, a short analysis section as required, linked pull requests and referenced commits. It is more work and arguably could be done more simply in a notes application, but &lt;em&gt;it feels good to be publicly accountable for one’s work&lt;/em&gt; and that also encouraged (very few) people to submit their own issues. Additionally, managing tasks on a platform like GitHub makes it easy to review the state of a project and to manage a backlog of tasks, which was a nice plus when the project was linked to what was meant to be its successor, &lt;a href="https://github.com/sglavoie/uol-grades-calculator-server"&gt;uol-grades-calculator-server&lt;/a&gt;, a backend using &lt;code&gt;ugc&lt;/code&gt; as its &lt;span class="caps"&gt;API&lt;/span&gt; which was to be hooked to a React frontend to display the data (more on that in the list of things that went poorly).&lt;/li&gt;
&lt;li&gt;&lt;em&gt;The &lt;span class="caps"&gt;TDD&lt;/span&gt; approach was embraced&lt;/em&gt; right from the start and I consider that being one of the highlights of the project in hindsight. With over 250 tests (some of which are randomly generated to do property-based testing with Hypothesis), I felt confident it was giving somewhat sensible answers.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Best practices were adopted&lt;/em&gt;: Pylint, the king of complainers amongst the Python linters, was very verbose but set up to be slightly more quiet after a while. A &lt;code&gt;pyproject.toml&lt;/code&gt; file was included, a clean &lt;code&gt;pytest&lt;/code&gt; config file was used to automate the input of some parameters when running the test suite, the project was developed with the intention of being &lt;a href="https://pypi.org/project/uol-grades-calculator/"&gt;deployed as a package&lt;/a&gt;, only popular and stable libraries were used and just as importantly, only portable formats like &lt;span class="caps"&gt;JSON&lt;/span&gt; made it to the final version of the project.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Sub-modules were created&lt;/em&gt; to make everything a bit more… modular.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;A GitHub workflow was added to automatically deploy new releases&lt;/em&gt; to &lt;a href="https://pypi.org/"&gt;PyPI&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Documentation was generated and hosted on Read The Docs&lt;/em&gt;, with clean outputs and images and an entire section dedicated to developers (i.e., myself :)) so that reproducibility wouldn’t become an issue for any step taken along the way.&lt;/li&gt;
&lt;li&gt;Using &lt;a href="https://pre-commit.com/"&gt;pre-commit&lt;/a&gt; helped with catching some annoyingly formatted code before reaching production by taking advantage of &lt;em&gt;Git pre-commit hooks&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With what seems like a glowing review so far, needless to say, a whole lot went wrong too.&lt;/p&gt;
&lt;figure&gt;
&lt;a href="https://www.sglavoie.com/images/posts/0030_a_retrospective_on_creating_an_impractical_little_tool_just_for_fun/ugc_summarize.png"&gt;&lt;img alt="ugc_summarize" class="max-size-img-post" src="https://www.sglavoie.com/images/posts/0030_a_retrospective_on_creating_an_impractical_little_tool_just_for_fun/ugc_summarize.png"/&gt;&lt;/a&gt;
&lt;figcaption&gt;Illustrating the &lt;code&gt;summarize&lt;/code&gt; command.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;hr/&gt;
&lt;h1 id="what-could-have-been-done-better"&gt;What could have been done better&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Independently of the expectations with regards to the user base, it would have been beneficial to &lt;em&gt;do more research and planning&lt;/em&gt; initially before writing a single line of code. After working on other projects, I’ve found that what works well for me is to follow a specific set of steps, broadly speaking:&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Gather a list of requirements&lt;/em&gt; as precisely as possible to validate assumptions and define the correct scope for the work to be done (&lt;a href="https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it"&gt;&lt;span class="caps"&gt;YAGNI&lt;/span&gt;&lt;/a&gt;!);&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Produce some early flowcharts&lt;/em&gt; to make sense of how the application might be structured and iterate on this until a clear winner emerges;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Produce low-fidelity wireframes&lt;/em&gt; (even for a &lt;span class="caps"&gt;TUI&lt;/span&gt;, that would be informative before committing to doing the wrong thing!) — even if this is just quickly sketched on paper;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Create high-fidely mockups&lt;/em&gt; (or at least reasonable-looking ones for a small project like this one) once things have been thought through carefully;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Design a general plan of work&lt;/em&gt; before writing any code to have a better idea of how the different parts of the system should communicate together;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Research existing tools to be leveraged&lt;/em&gt; so as to not re-invent the wheel all the time and see how they fit in together;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Go with &lt;span class="caps"&gt;TDD&lt;/span&gt;&lt;/em&gt; and stick to it piously for anything of relative importance that should be tested;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Go at it with atomic commits&lt;/em&gt; so that rewinding errors on the path will be a breeze — at least that ought to help significantly.&lt;/li&gt;
&lt;li&gt;Related to the first point, issues could have been more substantial instead of having to often deal with useless refactoring due to not thinking things through fully.&lt;/li&gt;
&lt;li&gt;With more mental processing done upfront, it would have been clear which features should have been part of the tool earlier and which ones could have waited longer. Glancing at the Gantt chart above, one can see that many commits happened at the beginning just to get the structure right, the project was not documented until much later and basic functionality such as being able to plot results (which was really a core feature to be expected) was not integrated until past the mid-life of the project.&lt;/li&gt;
&lt;li&gt;On top of the above, it was clear that using &lt;span class="caps"&gt;YAML&lt;/span&gt; in the presence of the other technologies used for a backend and frontend to the &lt;span class="caps"&gt;CLI&lt;/span&gt; made things more complicated and it wasn’t until one of the latest versions that &lt;span class="caps"&gt;JSON&lt;/span&gt; was used instead.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;The user experience could have been improved drastically at the beginning by relying on well-known libraries&lt;/em&gt; such as &lt;a href="https://github.com/Textualize/rich"&gt;Rich&lt;/a&gt; to make the &lt;span class="caps"&gt;UI&lt;/span&gt; much more appealing and even a bit more interactive.&lt;/li&gt;
&lt;li&gt;Some features were presented in a way that did not make much sense. For instance, the &lt;code&gt;Dockerfile&lt;/code&gt; does allow one to use the tool from a Docker container, but not all functionality works out of the box that way (e.g., saving a plot to the filesystem or loading a configuration file).&lt;/li&gt;
&lt;li&gt;&lt;em&gt;It wasn’t productive at all to start scattering the few resources put into this project&lt;/em&gt; by creating a sister repository &lt;a href="https://github.com/sglavoie/uol-grades-calculator-server"&gt;uol-grades-calculator-server&lt;/a&gt;. The &lt;span class="caps"&gt;CLI&lt;/span&gt; should have been more feature-rich before considering such an endeavor and it should have been made in a way that’s easier for a backend to consume.&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;
&lt;a href="https://www.sglavoie.com/images/posts/0030_a_retrospective_on_creating_an_impractical_little_tool_just_for_fun/plot_output.png"&gt;&lt;img alt="plot_output" class="max-size-img-post" src="https://www.sglavoie.com/images/posts/0030_a_retrospective_on_creating_an_impractical_little_tool_just_for_fun/plot_output.png"/&gt;&lt;/a&gt;
&lt;figcaption&gt;Showing the image generated by running the &lt;code&gt;plot modules&lt;/code&gt; (sub-)command.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;hr/&gt;
&lt;h1 id="key-lessons-learnt-and-where-to-take-it-from-here"&gt;Key lessons learnt and where to take it from here&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Studying better the available libraries&lt;/em&gt; would have avoided some headaches. For instance, the display of what should have been tabular data started out as plain &lt;span class="caps"&gt;JSON&lt;/span&gt; (printing a &lt;code&gt;dict&lt;/code&gt; object), then &lt;code&gt;beautifultable&lt;/code&gt; was used to create some colored output, then &lt;code&gt;pandas&lt;/code&gt; replaced the previous library because some limitations were found with it — reverting to a plain table output in the process — and finally &lt;code&gt;rich&lt;/code&gt; was used to create a more decent-looking output.&lt;/li&gt;
&lt;li&gt;Likewise, &lt;em&gt;spending more time in the planning department&lt;/em&gt; before getting started would probably have resulted in a tool that’s more straightforward to use, focused on the most needed features and possessing a broader feature set by not having invested extra resources on building a backend and a frontend separately. It should have been either a more powerful &lt;span class="caps"&gt;TUI&lt;/span&gt; limited to be used within a terminal or a web application, but not both in the way it was designed.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Work on small, isolated parts of the system&lt;/em&gt;. Some issues were split into large chunks of work (&lt;a href="https://github.com/sglavoie/uol-grades-calculator/issues/29"&gt;this one for instance&lt;/a&gt;, implementing at once the &lt;code&gt;plot&lt;/code&gt; command and its sub-commands). This wasn’t a problem per se given that I worked alone, but it would be harder for someone else to follow and to create a reasonably-sized pull request from such an issue. This feature could have been broken down into different sets of related flags.&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;
&lt;a href="https://www.sglavoie.com/images/posts/0030_a_retrospective_on_creating_an_impractical_little_tool_just_for_fun/ugc-server.png"&gt;&lt;img alt="ugc-server" class="max-size-img-post" src="https://www.sglavoie.com/images/posts/0030_a_retrospective_on_creating_an_impractical_little_tool_just_for_fun/ugc-server.png"/&gt;&lt;/a&gt;
&lt;figcaption&gt;A simple component diagram demonstrating how the &lt;span class="caps"&gt;CLI&lt;/span&gt; was to be used in a greater context.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;hr/&gt;
&lt;h1 id="conclusion"&gt;Conclusion&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span class="dquo"&gt;“&lt;/span&gt;Regardless of what we discover, we understand and truly believe that everyone did the best job they could, given what they knew at the time, their skills and abilities, the resources available, and the situation at hand.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="quote-author"&gt;&lt;a href="https://retrospectivewiki.org/index.php?title=The_Prime_Directive"&gt;—Norm Kerth, Project Retrospectives: A Handbook for Team Review&lt;/a&gt;&lt;/div&gt;
&lt;p&gt;All in all, this has been a fun experiment to bring to fruition. It would have been much quicker to use a spreadsheet given what the final result ended up being, but the experience obtained was worth every drop of developer sweat! Using Python felt appropriate as iterations of the tool could be produced fast and the &lt;span class="caps"&gt;CLI&lt;/span&gt; was responsive enough to be useful and pleasant to interact with thanks to its intuitive commands. In the near future, using a library like &lt;a href="https://github.com/Textualize/textual"&gt;Textual&lt;/a&gt; could be more rewarding as one could expect a much nicer visual experience in the terminal at a fraction of the current implementation efforts.&lt;/p&gt;
&lt;h2 id="resources-and-references"&gt;Resources and references&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.conventionalcommits.org/en/v1.0.0/"&gt;Conventional Commits specification&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://leaddev.com/communication-relationships/how-run-great-retrospective"&gt;How to run a great retrospective - LeadDev&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/ID_AA_Carmack"&gt;John Carmack - Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=I845O57ZSy4"&gt;John Carmack: Doom, Quake, &lt;span class="caps"&gt;VR&lt;/span&gt;, &lt;span class="caps"&gt;AGI&lt;/span&gt;, Programming, Video Games, and Rockets | Lex Fridman Podcast - YouTube&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mermaid-js.github.io/"&gt;Mermaid - Markdownish syntax for generating flowcharts, sequence diagrams, class diagrams, gantt charts and git graphs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/"&gt;PyPI - The Python Package Index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://readthedocs.org/"&gt;Read The Docs - Create, host, and browse documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.atlassian.com/team-playbook/plays/retrospective"&gt;Retrospective - Atlassian&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://retrospectivewiki.org/index.php?title=Retrospective_Plans"&gt;Retrospective Plans - Agile Retrospective Resource Wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vim.fandom.com/wiki/Reverse_order_of_lines"&gt;Reverse order of lines - Vim Tips Wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.sphinx-doc.org/"&gt;Sphinx - Python Documentation Generator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Test-driven_development"&gt;Test-driven development - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Textualize/textual"&gt;Textual - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://retrospectivewiki.org/index.php?title=The_Prime_Directive"&gt;The Prime Directive - Agile Retrospective Resource Wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/ThePrimeagen"&gt;The Primeagen - Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/c/ThePrimeagen"&gt;The Primeagen - YouTube&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it"&gt;You aren’t gonna need it - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="learnings"></category><category term="lessons"></category><category term="open-source"></category><category term="retrospective"></category><category term="terminal"></category></entry><entry><title>What it took to propel a career in tech in five years</title><link href="https://www.sglavoie.com/posts/2022/06/18/what-it-took-to-propel-a-career-in-tech-in-five-years/" rel="alternate"></link><published>2022-06-18T14:22:00-05:00</published><updated>2022-09-19T18:50:00-05:00</updated><author><name>Sébastien Lavoie</name></author><id>tag:www.sglavoie.com,2022-06-18:/posts/2022/06/18/what-it-took-to-propel-a-career-in-tech-in-five-years/</id><summary type="html">&lt;p&gt;Learning is an eternal path. I have been sharing my own adventure primarily for the following practical reasons: to help me remember what I have been working on technology-wise and to help me practice a technique known as &lt;a href="https://en.wikipedia.org/wiki/Spaced_repetition"&gt;spaced repetition&lt;/a&gt;. This has been a summary to motivate myself to keep on track, to practice consistent self-reflection and to be reminded as often as possible to stay a bit more humble. In the process, I hope you may found some inspiration&amp;nbsp;too.&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;After having kept a concise (and incomplete) log of my technical learnings for five years at this point, I can see I’ve come a long way, yet this is only the beginning. From now on, it is time to focus on taking concrete action, build on the foundation that has been laid out over time and start appreciating life from a broader perspective, too, as there are of course many aspects that have contributed to put me at this exact spot on this journey. Theory leads to a deeper understanding in any field, but in the end, the results being produced are what matter most and spending quality time getting good at one’s craft is key to making real progress. I think the most important steps to take in this context are &lt;em&gt;getting into the habit of learning constantly&lt;/em&gt; and &lt;em&gt;working towards generating a profound desire to excel&lt;/em&gt;, just for its own sake.&lt;/p&gt;
&lt;p&gt;To glory and beyond!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr/&gt;
&lt;p&gt;The output below was formatted automatically with a tool that converts the content of a Google Sheet into Markdown. If you’re curious, you might enjoy reading &lt;a href="https://www.sglavoie.com/posts/2021/12/19/using-google-sheets-as-a-database-to-extract-data-converted-to-markdown/"&gt;this article&lt;/a&gt;!&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="2022"&gt;2022&lt;/h1&gt;
&lt;h2 id="april"&gt;April&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Articles&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Google Cloud Platform&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/storage/docs/access-control/lists"&gt;Access control lists (ACLs)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/compute/docs/oslogin/set-up-oslogin"&gt;Set up &lt;span class="caps"&gt;OS&lt;/span&gt; Login&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;React&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://reactjs.org/docs/jsx-in-depth.html"&gt;&lt;span class="caps"&gt;JSX&lt;/span&gt; In Depth&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Technology&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://shift.infinite.red/flutter-is-better-than-react-native-fed10c92a768"&gt;Flutter is better than React Native&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Web development&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://kentcdodds.com/blog/how-i-built-a-modern-website-in-2021"&gt;How I built a modern website in 2021&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;University of London&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;3D Graphics and Animation&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;Computer Graphics: From Pixels to Programmable Graphics Hardware (book)&lt;/li&gt;
&lt;li&gt;Lighting models and shading&lt;/li&gt;
&lt;li&gt;Transforms in 3D&lt;/li&gt;
&lt;li&gt;&lt;a href="https://unityatscale.com/unity-version-control-guide/how-to-setup-unity-project-on-github/"&gt;How to set up a Unity project in GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=pwZpJzpE2lQ"&gt;&lt;span class="caps"&gt;LEARN&lt;/span&gt; &lt;span class="caps"&gt;UNITY&lt;/span&gt; - The Most &lt;span class="caps"&gt;BASIC&lt;/span&gt; &lt;span class="caps"&gt;TUTORIAL&lt;/span&gt; I’ll Ever Make&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://learn.unity.com/tutorial/essential-unity-concepts#"&gt;Unity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Orientation&lt;/li&gt;
&lt;li&gt;Coordinates&lt;/li&gt;
&lt;li&gt;3D models&lt;/li&gt;
&lt;li&gt;Components&lt;/li&gt;
&lt;li&gt;Lights, Prefab&lt;/li&gt;
&lt;li&gt;Essential Unity Concepts&lt;/li&gt;
&lt;li&gt;Basic movement, building a scene&lt;/li&gt;
&lt;li&gt;Types of light&lt;/li&gt;
&lt;li&gt;Script communication&lt;/li&gt;
&lt;li&gt;Physics and collisions&lt;/li&gt;
&lt;li&gt;Movements and forces&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Mobile Development&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.apple.com/design/human-interface-guidelines/ios/visual-design/adaptivity-and-layout/"&gt;Adaptivity and Layout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reactnative.express/app"&gt;App Development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://reactnative.dev/docs/components-and-apis"&gt;Core Components and APIs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Dark patterns&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reactnative.express/core_components"&gt;React Native Express&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;JavaScript&lt;/li&gt;
&lt;li&gt;React&lt;/li&gt;
&lt;li&gt;Core Components&lt;/li&gt;
&lt;li&gt;&lt;a href="https://reactnative.dev/docs/flexbox"&gt;React Native flex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;React Native – Programming &lt;span class="caps"&gt;UI&lt;/span&gt; elements&lt;/li&gt;
&lt;li&gt;&lt;a href="https://reactnavigation.org/docs/getting-started/"&gt;React Navigation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Read documentation&lt;/li&gt;
&lt;li&gt;Skeuomorphism, minimalism and neumorphism&lt;/li&gt;
&lt;li&gt;Universal Access in Human-Computer Interaction (book)&lt;/li&gt;
&lt;li&gt;User Interfaces in Dark Mode During Daytime – Improved Productivity or Just Cool-Looking?&lt;/li&gt;
&lt;li&gt;Impact of Sentence Length on the Readability of Web for Screen Reader Users&lt;/li&gt;
&lt;li&gt;Wireframing&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;YouTube&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Bash&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=VIUoHnFwEH4"&gt;bash quoting is really not that difficult!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Git&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=p0eVyhv2rbk"&gt;Git Annex Is The Coolest Program You’ve Never Heard Of&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Graphic Design&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=2rMbRW2zU7E"&gt;Logo Design Process Overview &lt;span class="caps"&gt;EP&lt;/span&gt; 2 44&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=bDILg149lvE"&gt;Perfecting Colour Palettes For Logo Design &lt;span class="caps"&gt;EP&lt;/span&gt; 29 44&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=oZ9QdBWLgIE"&gt;Project Design Brief - Design For a Music Festival &lt;span class="caps"&gt;EP&lt;/span&gt; 1 44&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;NFTs&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=C7plHMKIFcU"&gt;You’re Wrong About NFTs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;React Native&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=0-S5a0eXPoc"&gt;React Native Tutorial for Beginners - Build a React Native App&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Software design&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=8GONv6jJsG0"&gt;How To Avoid Big Upfront Design&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Software engineering&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=ElMnHDSFaCw"&gt;What Software Architecture Should Look Like&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;span class="caps"&gt;TDD&lt;/span&gt;&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=ln4WnxX-wrw"&gt;How To Perfect Software Design With Test Driven Development&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Unity&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=gB1F9G0JXOo"&gt;Learn Unity - Beginner’s Game Development Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="march"&gt;March&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Articles&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Data science&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://towardsdatascience.com/the-complete-guide-to-time-series-analysis-and-forecasting-70d476bfe775"&gt;The Complete Guide to Time Series Analysis and Forecasting&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Django&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.codingforentrepreneurs.com/blog/how-to-create-a-custom-django-user-model"&gt;How to Create a Custom Django User Model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/4.0/intro/tutorial05/#test-a-view"&gt;Writing your first Django app, part 5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Testing in Django&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Docker&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/network/network-tutorial-standalone/"&gt;Networking with standalone containers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://javascript.plainenglish.io/immer-js-101-making-redux-state-updates-in-react-predictable-62efe93e03dc"&gt;Immer.js 101 — Making Redux state updates in React predictable&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Security&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://auth0.com/docs/get-started/identity-fundamentals/identity-and-access-management"&gt;Introduction to Identity and Access Management (&lt;span class="caps"&gt;IAM&lt;/span&gt;)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developers.cloudflare.com/cloudflare-one/identity/users/validating-json/"&gt;&lt;span class="caps"&gt;JSON&lt;/span&gt; web tokens&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developers.cloudflare.com/cloudflare-one/tutorials/share-new-site/"&gt;Share development environments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://auth0.com/docs/authenticate/single-sign-on"&gt;Single Sign On&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.cloudflare.com/learning/access-management/what-is-saml/"&gt;What is &lt;span class="caps"&gt;SAML&lt;/span&gt;? How &lt;span class="caps"&gt;SAML&lt;/span&gt; authentication works&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.cloudflare.com/learning/access-management/what-is-sso/"&gt;What is &lt;span class="caps"&gt;SSO&lt;/span&gt;? How single sign-on works&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Streamlit&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/artefact-engineering-and-data-science/visual-time-series-forecasting-with-streamlit-prophet-71d86a769928"&gt;Visual time series forecasting with Streamlit Prophet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Documentation&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Django&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/4.0/topics/signals/"&gt;Signals&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;University of London&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Databases and Advanced Data Techniques&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;Review course concepts (see past entries)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;YouTube&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Django&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=F4nwRQPXD8w"&gt;Build an Asynchronous Chatroom with Django and Channels&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=5rh853GTgKo&amp;amp;list=PLJRGQoqpRwdfoa9591BcUS6NmMpZcvFsM&amp;amp;index=9"&gt;Django &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; React Authentication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Password reset&lt;/li&gt;
&lt;li&gt;Sign Up &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; Account Activation&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=oBQxFn1CDno"&gt;Docker - Django, Celery &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; Redis Docker Compose setup&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;React Native&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=1hPgQWbWmEk"&gt;Build an Instagram Clone with React Native, Firebase Firestore, Redux, Expo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="february"&gt;February&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Articles&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Python&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://python-course.eu/oop/count-function-calls-with-help-metaclass.php"&gt;Count Function calls with the help of a Metaclass&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://realpython.com/python-debugging-pdb/#printing-expressions"&gt;Python Debugging With Pdb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://eulertech.wordpress.com/2018/06/10/the-pitfall-of-eval-function-and-its-safe-alternative-in-python/"&gt;The pitfall of eval function and its safe alternative in Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://towardsdatascience.com/using-class-decorators-in-python-2807ef52d273"&gt;Using Class Decorators in Python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Terraform&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://willianantunes.medium.com/the-easiest-way-to-run-a-container-on-gce-with-terraform-139b2ec8f03d"&gt;The easiest way to run a container on &lt;span class="caps"&gt;GCE&lt;/span&gt; with Terraform&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Books&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Terraform&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.manning.com/books/terraform-in-action"&gt;Terraform in Action&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ch. 1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Courses&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Google Cloud Platform&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://app.pluralsight.com/library/courses/google-cloud-platform-fundamentals-core-infrastructure/table-of-contents"&gt;Google Cloud Platform Fundamentals - Core Infrastructure&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Python&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://app.pluralsight.com/library/courses/build-web-apps-python-streamlit/table-of-contents"&gt;Build Web Apps in Python with Streamlit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Terraform&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://app.pluralsight.com/library/courses/terraform-google-cloud-platform-implementing/table-of-contents"&gt;Implementing Terraform with Google Cloud Platform&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://app.pluralsight.com/library/courses/terraform-getting-started-2021/table-of-contents"&gt;Terraform - Getting Started&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Documentation&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Google Cloud Platform&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/functions/docs/running/direct"&gt;Calling Cloud Functions Directly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/compute/docs/disks/add-persistent-disk#format_and_mount_linux"&gt;Creating and attaching a disk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/iam/docs/creating-managing-service-accounts"&gt;Creating and managing service accounts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/storage/docs/resumable-uploads"&gt;Resumable uploads&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/compute/docs/disks#disk-types"&gt;Storage options&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Terraform&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://learn.hashicorp.com/collections/terraform/gcp-get-started"&gt;Get Started - Google Cloud&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;University of London&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Advanced Web Development&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=a2pcXvZG8Pc"&gt;Learn React &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; Django - Chatroom Concept - React Django+Channels Chatroom Heroku Deploy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;YouTube&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Blender&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=OqMLfMXVhhI&amp;amp;list=PLjEaoINr3zgFX8ZsChQVQsuDSjEqdWMAD&amp;amp;index=17"&gt;Blender 3.0 Beginner Donut Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;whole series&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Django&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=j4Yzfh3qIKU&amp;amp;list=PLPSM8rIid1a3TkwEmHyDALNuHhqiUiU5A&amp;amp;index=20"&gt;Building a Social Media App With Python 3 and Django&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Replying to Comments&lt;/li&gt;
&lt;li&gt;User Notifications&lt;/li&gt;
&lt;li&gt;Adding Images to Posts&lt;/li&gt;
&lt;li&gt;Sending DMs&lt;/li&gt;
&lt;li&gt;Finishing DMs&lt;/li&gt;
&lt;li&gt;Sharing Other Posts&lt;/li&gt;
&lt;li&gt;Tags&lt;/li&gt;
&lt;li&gt;Finishing tags&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=sZxxU9zqCGU&amp;amp;list=PLJRGQoqpRwdfoa9591BcUS6NmMpZcvFsM&amp;amp;index=7"&gt;Django &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; React Authentication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Navbar and check authenticated status&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=JD-age0BPVo&amp;amp;list=PLzMcBGfZo4-kCLWnGmK0jUBmGLaJxvi4j&amp;amp;index=2"&gt;Django &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; React Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=tYKRAXIio28"&gt;Django + React Notes App&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=cw8-KFVXpTE"&gt;Django Channels &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; WebSockets Oversimplified&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=U3CGt9jFGOI"&gt;Django &lt;span class="caps"&gt;REST&lt;/span&gt; Framework Tutorial Class Based Views Pt. 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=XpUe0XnK7Gk"&gt;Django &lt;span class="caps"&gt;REST&lt;/span&gt; Framework Tutorial Class Based Views Pt. 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Python&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=rdlQzhP71pQ"&gt;Python lists remember what you did to them&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="january"&gt;January&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Articles&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Docker&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://phoenixnap.com/kb/how-to-ssh-into-docker-container"&gt;How to &lt;span class="caps"&gt;SSH&lt;/span&gt; into a Running Docker Container and Run Commands&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sleeplessbeastie.eu/2021/09/17/how-to-squash-docker-image/"&gt;How to squash Docker image&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Mastering the craft&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://betterprogramming.pub/what-makes-a-senior-developer-senior-bb37f5a861fc"&gt;What Makes a Senior Developer… Senior?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Python&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://realpython.com/python-logging/"&gt;Logging in Python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;span class="caps"&gt;SSH&lt;/span&gt;&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://monovm.com/blog/how-to-access-a-linux-server-using-an-ios-device/"&gt;How to access a Linux Server using an iOS device&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Books&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Docker&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.goodreads.com/en/book/show/36411996-docker-deep-dive"&gt;Docker Deep Dive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ch. 1-6 (&lt;em&gt;Docker engine, images&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;ch. 7 (&lt;em&gt;Containers&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;ch. 8 (&lt;em&gt;Containerizing an app&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;ch. 9 (&lt;em&gt;Deploying apps with Docker Compose&lt;/em&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Documentation&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Cloud&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.aws.amazon.com/ses/latest/dg/send-email-api.html"&gt;Amazon &lt;span class="caps"&gt;SES&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/code/docs/vscode"&gt;Cloud Code for &lt;span class="caps"&gt;VS&lt;/span&gt; Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/compute/docs/reference/rest/v1"&gt;Compute Engine &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/artifact-registry/docs/integrate-compute"&gt;Deploying to Compute Engine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/functions/docs/calling/storage"&gt;Google Cloud Storage Triggers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.min.io/docs/python-client-api-reference.html"&gt;MinIO - Python Client &lt;span class="caps"&gt;API&lt;/span&gt; Reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://googleapis.dev/python/storage/latest/index.html"&gt;Python Client for Google Cloud Storage&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Django &lt;span class="caps"&gt;REST&lt;/span&gt; framework&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.django-rest-framework.org/api-guide/schemas/"&gt;Schemas&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Python&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/library/logging.html"&gt;Logging&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/howto/logging-cookbook.html"&gt;Logging Cookbook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/library/shutil.html"&gt;shutil — High-level file operations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Slack&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://api.slack.com/methods"&gt;Web &lt;span class="caps"&gt;API&lt;/span&gt; methods&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;University of London&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Advanced Web Development&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;Asynchronous Web Services (&lt;em&gt;Celery, Django, Pillow&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;Attacks on websites (&lt;em&gt;&lt;span class="caps"&gt;XSS&lt;/span&gt;, &lt;span class="caps"&gt;CSRF&lt;/span&gt;, &lt;span class="caps"&gt;SQL&lt;/span&gt; injection, clickjacking&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;Consuming WebSockets&lt;/li&gt;
&lt;li&gt;Deployment automation&lt;/li&gt;
&lt;li&gt;Django authentication and administration&lt;/li&gt;
&lt;li&gt;&lt;a href="https://channels.readthedocs.io/en/stable/introduction.html"&gt;Django channels&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Introduction to production deployment&lt;/li&gt;
&lt;li&gt;Introduction to web sockets&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tools.ietf.org/id/draft-loreto-http-bidirectional-07.html"&gt;Known Issues and Best Practices for the Use of Long Polling and Streaming in Bidirectional &lt;span class="caps"&gt;HTTP&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;OpenAPI&lt;/li&gt;
&lt;li&gt;Profiling and performance&lt;/li&gt;
&lt;li&gt;Scaling and load balancing&lt;/li&gt;
&lt;li&gt;Tutorial Pillow (Python)&lt;/li&gt;
&lt;li&gt;Web APIs&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Databases and Advanced Data Techniques&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;Distributed Relational Databases&lt;/li&gt;
&lt;li&gt;Document databases and MongoDB&lt;/li&gt;
&lt;li&gt;Introduction to Linked Data and the Semantic Web&lt;/li&gt;
&lt;li&gt;Introduction to semantic databases&lt;/li&gt;
&lt;li&gt;Linked Data in a Graph Database&lt;/li&gt;
&lt;li&gt;Multimedia databases and Information Retrieval&lt;/li&gt;
&lt;li&gt;Using &lt;span class="caps"&gt;XML&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;XML&lt;/span&gt; Schemata&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;YouTube&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Django&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=L3kgyBERw04"&gt;Building a Social Media App With Python 3 and Django&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Landing Page and User Authentication&lt;/li&gt;
&lt;li&gt;Posts and a Social Feed&lt;/li&gt;
&lt;li&gt;Get a Post and the Comment Model&lt;/li&gt;
&lt;li&gt;Edit Posts, Delete Posts, Add Comments&lt;/li&gt;
&lt;li&gt;Profiles&lt;/li&gt;
&lt;li&gt;Followers&lt;/li&gt;
&lt;li&gt;Likes and dislikes&lt;/li&gt;
&lt;li&gt;User search&lt;/li&gt;
&lt;li&gt;Final improvements Part 1&lt;/li&gt;
&lt;li&gt;Final improvements Part 2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Linux&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=HbgzrKJvDRw"&gt;Linux File System Structure Explained&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;p&gt;&lt;a href="https://www.sglavoie.com/learning-progress-2021.html"&gt;2021&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.sglavoie.com/learning-progress-2020.html"&gt;2020&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.sglavoie.com/learning-progress-2019.html"&gt;2019&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.sglavoie.com/learning-progress-2018-earlier.html"&gt;2018 and earlier&lt;/a&gt;&lt;/p&gt;</content><category term="learnings"></category><category term="career"></category></entry><entry><title>Book summary: Letters to a New Developer</title><link href="https://www.sglavoie.com/posts/2021/11/08/book-summary-letters-to-a-new-developer/" rel="alternate"></link><published>2021-11-08T10:12:00-06:00</published><updated>2023-04-16T15:04:00-06:00</updated><author><name>Sébastien Lavoie</name></author><id>tag:www.sglavoie.com,2021-11-08:/posts/2021/11/08/book-summary-letters-to-a-new-developer/</id><summary type="html">&lt;p&gt;If you are still early in your career as a software developer (or not so much!), I think you might enjoy reading &lt;em&gt;Letters to a New Developer: What I Wish I Had Known When Starting My Development Career&lt;/em&gt; written by Dan Moore, who also features &lt;a href="https://letterstoanewdeveloper.com/"&gt;a very insightful blog&lt;/a&gt;.&lt;/p&gt;</summary><content type="html">
&lt;hr/&gt;
&lt;h1 id="introduction"&gt;Introduction&lt;/h1&gt;
&lt;p&gt;I’ve taken quite a few notes while devouring that book, which is a quick and easy read. It’s not the typical non-fiction, technically-oriented manual: this book makes you feel like having an older family member taking the time to sit right next to you to openly share all sorts of golden nuggets from a lifetime of rich and varied experiences so you can get prepared to face the challenges that lie ahead in your own career and avoid some of the more common mistakes during the journey. It is the kind of publication you can read literally five minutes at a time thanks to the convenient format it adopts.&lt;/p&gt;
&lt;p&gt;Some of the following notes are verbatim and reading the whole title will be worth it! Nevertheless, you will find below some passages that deeply resonated with me, reflecting the gist of this prose from my perspective. Beware! There are numerous gems to be gleaned from this excellent author.&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="book-summary"&gt;Book summary&lt;/h1&gt;
&lt;h2 id="first-month-at-a-job"&gt;First month at a job&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;See problems as opportunities to contribute.&lt;/li&gt;
&lt;li&gt;During the &lt;strong&gt;onboarding&lt;/strong&gt;, figure out:&lt;/li&gt;
&lt;li&gt;All the &lt;strong&gt;&lt;span class="caps"&gt;HR&lt;/span&gt; stuff&lt;/strong&gt;: benefits, agreements, bonuses, interacting with different departments, meetings, requesting vacation, raises/reviews cycles.&lt;/li&gt;
&lt;li&gt;And the &lt;strong&gt;technical stuff&lt;/strong&gt; too: who to ask questions to, how to ask them (batch them, chat, meeting, etc.), how long to work on a problem before asking for help, how to communicate progress, how to set up a local development environment, &lt;span class="caps"&gt;CI&lt;/span&gt;/&lt;span class="caps"&gt;CD&lt;/span&gt; and branches process, when do you know you’re done working on a task, how are tasks managed (manager, issue tracker, etc.).&lt;/li&gt;
&lt;li&gt;Questions that arise and have no answers → See where to document them (e.g. wiki).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;First impressions&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;Be there early.&lt;/li&gt;
&lt;li&gt;Say what you’ll do, then do it.&lt;/li&gt;
&lt;li&gt;Research before asking questions (and record answers).&lt;/li&gt;
&lt;li&gt;Volunteer to take extra work (don’t become a punching bag, though).&lt;/li&gt;
&lt;li&gt;Own your mistakes but don’t make the same ones twice.&lt;/li&gt;
&lt;li&gt;Be polite and professional, always.&lt;/li&gt;
&lt;li&gt;Make sure with manager we’re on the same page, working on the right stuff, at the right cadence with appropriate updates.&lt;/li&gt;
&lt;li&gt;Write docs to make the next hire easier.&lt;/li&gt;
&lt;li&gt;Have the reputation to be a hard, smart worker: it will follow you.&lt;/li&gt;
&lt;li&gt;Be ready for the trepidations: &lt;strong&gt;celebrate successes&lt;/strong&gt; (“&lt;em&gt;today I [fixed, learnt…]&lt;/em&gt;“).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;To excel&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;Communicate what you’re working on.&lt;/li&gt;
&lt;li&gt;Ask questions.&lt;/li&gt;
&lt;li&gt;Don’t make the same mistake twice: write down what went wrong and plan to avoid repeating them.&lt;/li&gt;
&lt;li&gt;Show up consistently.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Know the team&lt;/strong&gt;: their names, their roles, their behaviours (who posts what, who is in which meetings, who seems funny and approachable on Slack, etc.).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Read code and take notes&lt;/strong&gt;: dig into a section of the system, follow data flow, make diagrams of how things are connected.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="questions"&gt;Questions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Ask prepared questions&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;Research before asking.&lt;/li&gt;
&lt;li&gt;Find where to search (Slack, issue trackers, &lt;span class="caps"&gt;YT&lt;/span&gt;, internal docs or wiki, etc.).&lt;/li&gt;
&lt;li&gt;But also be mindful of how long you should spend time searching (Is there a tight deadline? Are you wasting your time?).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ask good questions&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;Specify the problem in detail, narrow the scope as much as possible.&lt;/li&gt;
&lt;li&gt;Show you’ve done &lt;em&gt;research&lt;/em&gt;. Links, videos, posts, logs (without sensitive info), etc.&lt;/li&gt;
&lt;li&gt;Follow up after a day or so to share additional research.&lt;/li&gt;
&lt;li&gt;Express gratitude.&lt;/li&gt;
&lt;li&gt;If you have the answer, add it.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Don’t be afraid to ask questions&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;If it’s a learning experience, spend more time figuring out the answer.&lt;/li&gt;
&lt;li&gt;The more time you have before the task is due, the more time you should spend looking for an answer.&lt;/li&gt;
&lt;li&gt;How busy is the rest of the team? If they can’t help, you’ll have to do it yourself.&lt;/li&gt;
&lt;li&gt;If there’s a bug that’s really specific to the internal project, asking for help from coworkers is probably best (be careful not to disclose business knowledge!).&lt;/li&gt;
&lt;li&gt;Have you tried working on other aspects of the task? It may unblock you.&lt;/li&gt;
&lt;li&gt;Put in the effort before asking: research, list hypotheses, etc.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ask why&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;It may help prevent mistakes down the line (e.g. wrong choice of tech) and get more perspective, understand better.&lt;/li&gt;
&lt;li&gt;Document findings in wiki or similar (could be in a question/answer format).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;If you don’t know something&lt;/strong&gt;, don’t guess or make an incorrect decision: admit it and say you’ll find out the answer (may have to ask others in the process too).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="writing"&gt;Writing&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Read your texts out aloud&lt;/strong&gt;: spot typos, awkward sentences, etc.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Document the intent behind what you’re doing&lt;/strong&gt; (code, reason for change, who asked what…).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Emails&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;As &lt;em&gt;short&lt;/em&gt; as possible. Otherwise, add &lt;em&gt;executive summary&lt;/em&gt; at the top.&lt;/li&gt;
&lt;li&gt;Is it sensitive? Maybe have face-to-face instead.&lt;/li&gt;
&lt;li&gt;Add &lt;em&gt;links&lt;/em&gt; to supporting documents rather than attaching them. Email chains are hard to follow: may put them in a document instead.&lt;/li&gt;
&lt;li&gt;Don’t use &lt;em&gt;relative time references&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Keep them &lt;em&gt;focused&lt;/em&gt;: go into &lt;em&gt;one topic&lt;/em&gt;. New topic = new email with different subject line.&lt;/li&gt;
&lt;li&gt;Real-time messaging: Default to &lt;em&gt;public&lt;/em&gt; channels to benefit the organization.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Write a technical ebook&lt;/em&gt;: working on a complex project over time and being able to see the high-level and details, all presented in a coherent way for the readers.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Write and update technical documentation&lt;/strong&gt;: you save time in the long run, it’s useful for you and the rest of the organization.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Blog&lt;/strong&gt;: this is the process of clarifying your own thoughts. You’ll be a better writer and thinker for it.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Motivation about writing&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;It crystallizes thoughts, make them clearer;&lt;/li&gt;
&lt;li&gt;Builds credibility;&lt;/li&gt;
&lt;li&gt;Helps others;&lt;/li&gt;
&lt;li&gt;Illustrates an ability to convey technical information and context.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="tools-to-learn"&gt;Tools to learn&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Leverage for increased productivity&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Test suite&lt;/em&gt;: living documentation. Can evolve code base without fear.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Libraries&lt;/em&gt; and &lt;em&gt;frameworks&lt;/em&gt;: saves time.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;IaaS&lt;/em&gt; (infrastructure as a service, e.g. &lt;span class="caps"&gt;AWS&lt;/span&gt; &lt;span class="caps"&gt;EC2&lt;/span&gt;): can use APIs to manage.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Paas&lt;/em&gt; (platform as a service, e.g. Heroku): Allows to focus on business logic.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Saas&lt;/em&gt; (software as a service, e.g. Google Apps): integrate with existing software.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Command-line&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Typing is quicker&lt;/em&gt; than using GUIs for many tasks.&lt;/li&gt;
&lt;li&gt;Can automate &lt;em&gt;recurring tasks&lt;/em&gt; easily.&lt;/li&gt;
&lt;li&gt;Can easily &lt;em&gt;share task scripts&lt;/em&gt; with others.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;jq, awk, sed&lt;/em&gt;: put them to good use.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Version control&lt;/strong&gt;: if in doubt, use it, except for large files and other scenarios that don’t make sense.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Text editor&lt;/strong&gt;: learn one well.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IDEs&lt;/strong&gt;: Use them when it makes sense (programming in Java with a text editor? Probably a bad idea).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Standard library&lt;/strong&gt;: get a good overview of what’s available, leads to transferable skills, more idiomatic code, better tested, etc.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Automated testing&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;Prevents bug regression.&lt;/li&gt;
&lt;li&gt;Serves as live documentation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Network engineering&lt;/strong&gt;: Learn about it, it will pay off. Know:&lt;/li&gt;
&lt;li&gt;Basics of routing;&lt;/li&gt;
&lt;li&gt;Basics of &lt;span class="caps"&gt;DNS&lt;/span&gt;;&lt;/li&gt;
&lt;li&gt;Rundown of the &lt;span class="caps"&gt;OSI&lt;/span&gt; model;&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;TCP&lt;/span&gt;/&lt;span class="caps"&gt;IP&lt;/span&gt;, &lt;span class="caps"&gt;HTTP&lt;/span&gt;, what a proxy is;&lt;/li&gt;
&lt;li&gt;Answer questions like How do CDNs work, what’s the difference between &lt;span class="caps"&gt;HTTP&lt;/span&gt; and WebSockets, how does &lt;span class="caps"&gt;SSL&lt;/span&gt; work, what can nginx be used for…&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;span class="caps"&gt;SQL&lt;/span&gt;&lt;/strong&gt;: this is fundamental knowledge as it’s almost everywhere.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Debuggers&lt;/strong&gt;: learn how to debug in your &lt;span class="caps"&gt;IDE&lt;/span&gt;, on the command-line and in a web browser (your &lt;span class="caps"&gt;IDE&lt;/span&gt; won’t always be available).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Benchmarking&lt;/strong&gt;: do not optimize prematurely and use benchmarking tools when performance matters to see if the code is fast enough.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Search engines&lt;/strong&gt;: learn to be an expert Googler.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="practices"&gt;Practices&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Solve problems, don’t just write code&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;Use library/framework.&lt;/li&gt;
&lt;li&gt;Use third-party SaaS tool.&lt;/li&gt;
&lt;li&gt;Make sure tasks need to be done. (Why are you doing it? Does it provide value?)&lt;/li&gt;
&lt;li&gt;If a task isn’t recurring often enough, manual work may be the best way to go (time to automate vs. actual savings).&lt;/li&gt;
&lt;li&gt;Think ahead, envision all paths (not just the happy one) before taking a decision.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Read code&lt;/strong&gt;: scan it; dive down; use the &lt;em&gt;scientific method&lt;/em&gt; to make changes and debug.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Get good at estimating your work&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Opportunity cost&lt;/em&gt; (can’t do everything: prioritize and do the tasks that &lt;em&gt;bring the most value&lt;/em&gt;).&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Scheduling&lt;/em&gt;: software is not built in a vacuum, hard and soft deadlines will occur.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Discussing requirements&lt;/em&gt; first can save a lot of troubles and money: building the wrong thing quickly is of no use. Use lightweight prototyping tools instead of building the whole software.&lt;/li&gt;
&lt;li&gt;Recommended reading: &lt;a href="https://www.goodreads.com/book/show/93891.Software_Estimation"&gt;Software Estimation: Demystifying the Black Art&lt;/a&gt;, by Steve McConnell.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here’s one way to keep track of your estimates in a spreadsheet:&lt;/p&gt;
&lt;div class="table-wrapper"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Task&lt;/th&gt;
&lt;th&gt;Low estimate&lt;/th&gt;
&lt;th&gt;High estimate&lt;/th&gt;
&lt;th&gt;Notes, questions, research&lt;/th&gt;
&lt;th&gt;Final estimate&lt;/th&gt;
&lt;th&gt;Estimate in days&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Requirements definition, research, development, testing, deployment, estimates on bug fixes…&lt;/td&gt;
&lt;td&gt;Everything going smoothly.&lt;/td&gt;
&lt;td&gt;Facing obstacles, having to rebuild part of the system, etc.&lt;/td&gt;
&lt;td&gt;Answer questions and verify assumptions to complete the estimate.&lt;/td&gt;
&lt;td&gt;(low + high) * 1.2 (add 20%, “fudge factor”)&lt;/td&gt;
&lt;td&gt;Total hours estimated divided by number of ideal hours per day&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Tracking the actual accuracy of tasks&lt;/em&gt; can be insightful too.&lt;/li&gt;
&lt;li&gt;Always tell people who are depending on the completion of a task &lt;em&gt;if it’s going to take longer than expected&lt;/em&gt;. Share alternative solutions if you have any.&lt;/li&gt;
&lt;li&gt;Even for side projects or when working on open source projects, it may be useful to &lt;em&gt;practice estimating&lt;/em&gt; (and users like seeing a roadmap).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Debug systems&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;Make the problem as &lt;em&gt;simple&lt;/em&gt; as possible.&lt;/li&gt;
&lt;li&gt;Begin with an &lt;em&gt;hypothesis&lt;/em&gt; and either prove it or refine it.&lt;/li&gt;
&lt;li&gt;Determine the &lt;em&gt;desired end state&lt;/em&gt;: fix the root problem but if it’s too costly, find a workaround if possible.&lt;/li&gt;
&lt;li&gt;Pay &lt;em&gt;attention&lt;/em&gt; if anything seems amiss.&lt;/li&gt;
&lt;li&gt;Keep &lt;em&gt;notes&lt;/em&gt; about what you’ve tried.&lt;/li&gt;
&lt;li&gt;If there’s a new bug, &lt;em&gt;inspect recent changes&lt;/em&gt; in the log.&lt;/li&gt;
&lt;li&gt;Write an &lt;em&gt;automated test&lt;/em&gt; before fixing the bug so it doesn’t reappear and you’ll be sure when the bug was fixed.&lt;/li&gt;
&lt;li&gt;Follow the &lt;em&gt;flow of data&lt;/em&gt; (e.g. in a three-tier application, start with the browser or with the database).&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Minimize impact&lt;/em&gt; for users if the bug is in the production environment. Ideally, test on the &lt;em&gt;staging&lt;/em&gt; environment.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Test the right thing&lt;/em&gt;. Make sure that what’s being tested mirrors as closely as possible where the bug appears.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Assume positive intent&lt;/strong&gt;: be solution-focused.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;span class="caps"&gt;ROI&lt;/span&gt; on trust&lt;/em&gt;: about 4% of the population are sociopaths; meaning 96% of the population has some working conscience and could be trusted by default to reap great benefits. This may speed decision making, for instance.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Express gratitude&lt;/strong&gt;: it will make you feel better and showing appreciation to others will make working with colleagues a breeze. Thanking people and writing a &lt;em&gt;gratitude journal&lt;/em&gt; will be helpful.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cultivate the skill of undivided attention&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;To produce your best output, you need to &lt;em&gt;commit to deep work&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;To thrive in today’s economy, you need to &lt;em&gt;be able to quickly master hard things&lt;/em&gt; and be able to &lt;em&gt;produce at an elite level&lt;/em&gt; in terms of both &lt;em&gt;quality&lt;/em&gt; and &lt;em&gt;speed&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;To learn hard things quickly, you must &lt;em&gt;focus intensely without distraction&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Add routines and rituals to your working life&lt;/em&gt; to limit the amount of willpower required to get started.&lt;/li&gt;
&lt;li&gt;Book recommendation: &lt;a href="https://www.calnewport.com/books/deep-work/"&gt;Deep Work: Rules for Focused Success in a Distracted World&lt;/a&gt;, by Cal Newport.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Build empathy&lt;/strong&gt;: Remember your own frustrations. Your users are people who can struggle on tasks you’d find simple yourself. They’re trying to make something work, just like you.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Don’t complain about the code&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;It’s not helpful.&lt;/li&gt;
&lt;li&gt;It displays a lack of empathy.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Avoid jargon&lt;/strong&gt;: If you can’t explain it to a non-technical user, you don’t understand it well enough (good framework: try the &lt;a href="https://en.wikipedia.org/wiki/Feynman_Technique"&gt;Feynman Technique&lt;/a&gt;). You gain clarity for yourself, the ability to teach others and you can influence your organization. (Personal additional: get good at critical thinking and use &lt;a href="https://untools.co/"&gt;frameworks for better thinking&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Time is money&lt;/strong&gt;: &lt;em&gt;buying services from others gives you time&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Buying a book or video instead of reading free documentation.&lt;/li&gt;
&lt;li&gt;Buying and using exceptional tools (e.g. JetBrains IDEs).&lt;/li&gt;
&lt;li&gt;Paying for support.&lt;/li&gt;
&lt;li&gt;Buy commercial software.&lt;/li&gt;
&lt;li&gt;Pay for consulting or training.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Say no&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;If there are pending tasks, ensure they are worked in the &lt;em&gt;right order of priority&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Life is short&lt;/em&gt;: if you end up working 90 hours per week, make sure you’re happy doing it and are not sacrificing other important aspects.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Build on your own&lt;/strong&gt;: pick a project you can envision yourself sticking to for more than six month and learn.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Consistency is key&lt;/strong&gt;: learn by showing up every day. Becoming great at something takes time.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="understanding-the-business"&gt;Understanding the business&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Software is about people, not code&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;Software is created for people.&lt;/li&gt;
&lt;li&gt;Users need to be heard to buy in.&lt;/li&gt;
&lt;li&gt;Most people don’t care about the code. &lt;em&gt;Their goal is to get things done&lt;/em&gt;. Beautiful code that doesn’t solve the right problem is useless.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Outcomes over output&lt;/strong&gt;: the end-goal for the business is more &lt;em&gt;revenue&lt;/em&gt;, more &lt;em&gt;profit&lt;/em&gt;, more &lt;em&gt;users&lt;/em&gt;, more &lt;em&gt;product availability&lt;/em&gt;, happier users, etc. Your contributions should be holistic in nature and work towards achieving these goals.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Understanding the big picture&lt;/em&gt; of why money is spent on certain projects or services pays off as you can better contribute to the bottom line of the company by knowing why things are done the way they are.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Business model&lt;/strong&gt;: know how money is being made. Get a good understanding of the domain in which the business operates.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Knowing how software is used at the company&lt;/em&gt; helps you to understand the business.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;The size of a company impacts how it solves problems&lt;/em&gt;: a bigger company will usually move more slowly towards its goals when change is required, attacking possibly bigger problems with powerful tools and teams. A smaller company may pivot more quickly and shift focus, but it may not work on problems of comparative scales.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Starting a company&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;As a new developer, starting one wouldn’t be wise. Learning to become a software developer and learning how to run a business all at once can lead to a huge amount of stress.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;It will take longer than you think&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Know your &lt;em&gt;financial runway&lt;/em&gt; (“burn rate” vs. what you have in the bank). Extend it by lowering the burn rate.&lt;/li&gt;
&lt;li&gt;Consider your &lt;em&gt;emotional runway&lt;/em&gt;: how are things going for you outside of work? Are there any trying events like moving or having a new baby?&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Talk to your customers&lt;/em&gt;: learn from them. Get feedback.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Provide value to customers&lt;/em&gt;: you won’t have time to make everything go as smoothly as you’d like, but the customer must still be served.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Know your market&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Be ready to move away from code and focus more on a position of &lt;em&gt;management&lt;/em&gt; as the company grows.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Learn from your customers&lt;/em&gt;:&lt;/li&gt;
&lt;li&gt;Digging into a ticketing system will be informative to understand how a product is being used and may reveal flaws or bugs.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Focus on the problems mentioned, not on the solutions proposed&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Ask them about their pressing problems, not only those that have been reported so far. This may inform about issues with related systems.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="learning"&gt;Learning&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Never stop learning&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;Be clear about &lt;em&gt;why&lt;/em&gt; you want to be learning.&lt;/li&gt;
&lt;li&gt;Once you have the why, determine the &lt;em&gt;what&lt;/em&gt; that will take you there.&lt;/li&gt;
&lt;li&gt;Once you have both of the above, find the &lt;em&gt;how&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Execute.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Build expert intuition&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;It’s the difference between a junior and a senior developer.&lt;/li&gt;
&lt;li&gt;A regular world + many opportunities to learn + frequent feedback + expert intuition.&lt;/li&gt;
&lt;li&gt;Regular world: gives a chance to find out whether you’d prefer to specialize in a specific branch of the software development tree or remain a generalist.&lt;/li&gt;
&lt;li&gt;Many opportunities to learn: write code, work on technical projects and observe those who are more senior than you.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Frequent feedback&lt;/em&gt;: code reviews and one on ones with the manager. Reflect on your performance with a daily &lt;em&gt;journal&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Know what to learn&lt;/strong&gt; (i.e. general skills vs. specific technology and techniques):&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Domain knowledge&lt;/em&gt;: understand the business you are in, who the major players are, etc. If you stick in a given domain long enough, you become more valuable as this kind of knowledge tends to last a long time. Talk to experts and read books.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Theoretical expertise&lt;/em&gt;: data structures and algorithms, &lt;span class="caps"&gt;HTTP&lt;/span&gt; and best practices fall within this category. It serves for years as a solid foundation for everything else. Books are a fine source to delve deeper.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Practical knowledge&lt;/em&gt;:&lt;ul&gt;
&lt;li&gt;React, Kubernetes, Rails are some examples of specific technologies that belong in this category.&lt;/li&gt;
&lt;li&gt;Have a good understanding of the underlying technology whenever possible (e.g. learn the language in depth, not just the framework).&lt;/li&gt;
&lt;li&gt;This type of knowledge &lt;em&gt;tends to age quickly&lt;/em&gt; and can be learnt through &lt;em&gt;videos&lt;/em&gt;, &lt;em&gt;conference talks&lt;/em&gt; and &lt;em&gt;tutorials&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Leadership knowledge&lt;/em&gt;: This will pay dividends through your career. Books and experience in the real-world are useful here.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Avoid being an expert beginner&lt;/strong&gt; (an authority with nontransferable skills):&lt;/li&gt;
&lt;li&gt;Never believe you have all the answers.&lt;/li&gt;
&lt;li&gt;Don’t bend tools to do something they weren’t meant to do.&lt;/li&gt;
&lt;li&gt;Don’t ignore best practices (but don’t blindly apply them everywhere either!).&lt;/li&gt;
&lt;li&gt;Keep in touch with the larger software community: you may temporarily be at the top somewhere technically speaking, but that won’t remain true in a bigger context.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Pair with people that are more experienced than you&lt;/em&gt;: ask them questions, read the pull requests they submit.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pattern match to be a just-in-time learner&lt;/strong&gt;: explore by pattern and analogy (e.g. compare terminology that’s similar to tools you’ve used before) and learn just enough to get the task done. Learn the nuances as you go.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Learning boring stuff&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;Focus on the big picture. &lt;em&gt;Why&lt;/em&gt; are you learning this?&lt;/li&gt;
&lt;li&gt;Notice the &lt;em&gt;fun&lt;/em&gt; parts.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Take breaks&lt;/em&gt; when needed. If no strict deadline is in sight, you might cross off a different task on your to-do list for now.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Automate&lt;/em&gt; what you can but consider clearly the time savings when doing so.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Learn relevant things&lt;/em&gt;: this applies once you have a base to lean on, but accumulating random concepts that aren’t often applicable after that isn’t useful (unused knowledge rots and gets forgotten).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Your team will teach you&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;They can teach you more than you can learn on your own: tools; languages; frameworks; business domain knowledge; approaches to problem-solving; understanding of the problem; stakeholder empathy.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Observe how senior people work&lt;/em&gt; (face-to-face, read their code and pull requests).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Use an &lt;span class="caps"&gt;RSS&lt;/span&gt; reader&lt;/strong&gt;: for blogs, online community discussions, tags in Stack Overflow, news sites.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Listen to podcasts&lt;/strong&gt;: good to gather ideas about high-level concepts while doing other things (dishes, exercise, watering plants, cooking, etc.).&lt;/li&gt;
&lt;li&gt;Listen to those that are &lt;em&gt;domain specific&lt;/em&gt; to help you at work.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Technology specific&lt;/em&gt;: expose yourself to tools, techniques and libraries.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;General software development&lt;/em&gt;: those are broadly applicable to software engineering and will work across different jobs you have within the industry.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Subscribe to email newsletters&lt;/strong&gt;: great to get curated content on a given topic. These could include software development practices, security, &lt;span class="caps"&gt;AWS&lt;/span&gt; and career skills.&lt;/li&gt;
&lt;li&gt;Find them with searches like &lt;code&gt;&amp;lt;subject area&amp;gt; weekly/email newsletter&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Read the archives&lt;/em&gt; first to get a sense of whether you’ll enjoy the content.&lt;/li&gt;
&lt;li&gt;Like with podcasts, focus on what’s interesting and &lt;em&gt;skim&lt;/em&gt; the rest.&lt;/li&gt;
&lt;li&gt;When sources lead to more articles of interest, those can be captured in your &lt;em&gt;&lt;span class="caps"&gt;RSS&lt;/span&gt; reader&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Good to &lt;em&gt;explore new technologies and frameworks&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;To start your own, &lt;a href="https://tinyletter.com/"&gt;TinyLetter&lt;/a&gt; is a great option.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Read great books about software development&lt;/strong&gt;: don’t look for cutting-edge information but rather for a source of timeless practices.&lt;/li&gt;
&lt;li&gt;Good examples include &lt;a href="https://archive.org/details/mythicalmanmonth00broo"&gt;The Mythical Man-Month&lt;/a&gt;, &lt;a href="https://pragprog.com/titles/tpp20/the-pragmatic-programmer-20th-anniversary-edition/"&gt;The Pragmatic Programmer&lt;/a&gt;, &lt;a href="https://martinfowler.com/books/refactoring.html"&gt;Refactoring&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Ask great engineers&lt;/em&gt; you respect for recommendations.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Listen actively&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Do not multitask&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Take notes of…&lt;/em&gt; salient points; ah-ha moments; terms to review in the future (those concepts you may not understand). Note the date of the conversation as well.&lt;/li&gt;
&lt;li&gt;If it is a video chat, see whether it can be &lt;em&gt;recorded&lt;/em&gt;. Turn on video if possible to get contextual clues.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Learn two programming languages&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;Lets you see the strengths and weaknesses of your first language.&lt;/li&gt;
&lt;li&gt;May support concepts that weren’t there before (e.g. classes in Java vs. their absence in Perl).&lt;/li&gt;
&lt;li&gt;Makes it easier to learn a third language.&lt;/li&gt;
&lt;li&gt;Illustrates &lt;em&gt;different approaches&lt;/em&gt; to common problems.&lt;/li&gt;
&lt;li&gt;Teaches you how languages fit certain problems better than others.&lt;/li&gt;
&lt;li&gt;Makes you less passionate about your first language. &lt;em&gt;Programming languages are only tools&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Makes it clear what you understand about language #1.&lt;/li&gt;
&lt;li&gt;Tutorials are great to get started and &lt;em&gt;side projects&lt;/em&gt; even better to cement the learning.&lt;/li&gt;
&lt;li&gt;Generally, &lt;em&gt;learn at least two of “everything”&lt;/em&gt; (e.g. databases, frameworks, development methodologies, etc.).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="mistakes"&gt;Mistakes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Get used to failure&lt;/strong&gt;: learning something new is difficult. &lt;em&gt;Document internal knowledge&lt;/em&gt; as best as you can so the same mistakes do not repeat themselves. Look around (online, colleagues…) to make sure the problem you are trying to solve hasn’t been worked on already and take any new information into account.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Making mistakes is okay&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;Find out what the &lt;em&gt;oversight&lt;/em&gt; was so you don’t repeat the same mistake.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Acknowledge&lt;/em&gt; you made an error.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Clean up&lt;/em&gt; the mess, with or without help.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Avoid making the same mistake again&lt;/em&gt;. You might keep notes around, write a blog post, etc. Document it or create a script to solve the issue from now on if applicable and share your new knowledge with the rest of the team.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mistakes are forgiven, hiding them is not&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;Make sure you did a mistake to start with.&lt;/li&gt;
&lt;li&gt;The people who need to know about your errors should be told. &lt;em&gt;Transparency and honesty are important&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Think of a plan to fix the mistake (both short-term and long-term).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Don’t make the same mistake twice&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;Make sure you understand what the mistake was.&lt;/li&gt;
&lt;li&gt;Dive deeper when it makes sense. For instance, it is worth mastering a version control system as this is a tool that’s going to be used all the time and is critical to understand when working with other software engineers.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Don’t be afraid to “fail”&lt;/strong&gt;: the only true failure is to quit working towards success.&lt;/li&gt;
&lt;li&gt;Failures don’t stop happening when you become a “better” developer.&lt;/li&gt;
&lt;li&gt;The more you fail, the more you learn.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;You don’t know what you don’t know&lt;/strong&gt;. Doing pattern matching and recognizing concepts at a high level will help when there’s a need to dig deeper.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;When you see someone else making a mistake&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Make sure you have all the necessary context&lt;/em&gt; (you usually don’t have it) before jumping in to shine a light on how you think things could be done or fixed.&lt;/li&gt;
&lt;li&gt;Make sure you &lt;em&gt;fully understand the issue at hand&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Think about the ramifications of a poor decision&lt;/em&gt;: the higher the stakes are, the more likely it is that you should/could intervene.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Contemplate your role&lt;/em&gt;: depending on the relationship you have with that person, tolerance levels will change (personal note: ask questions early as needed, but make sure you show progress as stagnation won’t lead to joyful relationships with your colleagues and may get you fired).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;It’s &lt;span class="caps"&gt;OK&lt;/span&gt; to fail and it’s &lt;span class="caps"&gt;OK&lt;/span&gt; to feel bummed about it&lt;/strong&gt;. See how core/important the task is for the company, whether somebody else would be better positioned to do it, how long it would take you to become good at it, whether you enjoy it, whether there’s another way to solve the problem, if there’s someone else at the company who could teach you. Don’t beat yourself up with despair: be strategic about the way you spend you efforts.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Admit your weaknesses… and own them&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Is it something innate, like bluntness, or is it something you can learn, like Python?&lt;/li&gt;
&lt;li&gt;If a weakness is related to a core competency needed for your job, be proactive in overcoming the obstacle or find another job that’s better suited to your skills.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="your-career"&gt;Your career&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Favor learning over earning&lt;/strong&gt;: take the job with the highest learning potential.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Beware of stunting your growth by working alone&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;You will become more valuable to your future employers and have a better idea of what you like.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;You will never be in a better position to leave a bad job than before you start&lt;/strong&gt;: interviewing is a two-way street.&lt;/li&gt;
&lt;li&gt;Do your research before accepting a job offer.&lt;/li&gt;
&lt;li&gt;Investigate through your network, e.g. LinkedIn, if you have a connection that worked at that company and ask about the good and bad of this organization.&lt;/li&gt;
&lt;li&gt;Ask good questions about the company during the interview.&lt;/li&gt;
&lt;li&gt;As an exception, you might want to consider getting your feet wet in the industry with your first job by being less picky, especially if the job market is bad. Experience will prove useful.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pick a flaw&lt;/strong&gt;: no company is perfect.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;You don’t want an indifferent team&lt;/em&gt; just punching the clock and waiting for the week to be done.&lt;/li&gt;
&lt;li&gt;Avoid nonsense: ask how a typical day goes, who makes decisions about priorities, in what kinds of projects does the company shine and what the best and worst parts of a job are.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Preparing for a recruiting event&lt;/strong&gt;. Have: a resume; a good intro to yourself; a good conversation you can have; be well presented.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Resume&lt;/em&gt;: make sure you have the address, phone, email, &lt;span class="caps"&gt;GPA&lt;/span&gt; and graduation date (for students) at the top. It should show you’re motivated, skilled, passionate, adaptable, collaborative and articulate. When you have less experience, projects should be the centerpiece of your resume. Project descriptions should be brief and focus on the &lt;em&gt;what&lt;/em&gt;, &lt;em&gt;why&lt;/em&gt; and the outcome, avoiding mentions of tech stack unless it adds to the narrative. These can be side hustles, open source, personal interest or hackathons. Have more than one resume for different audiences.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Practice programming&lt;/strong&gt;: &lt;em&gt;you learn by doing&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Start at a consulting company if you’re looking to gain experience across technologies, domains and businesses. Work for a small one if you want to have an impact. This will provide contacts and set you up for future work. Seek out mentorship, request conference attendance and pursue assistance as formal education programs tend to be lacking in those environments.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Potential vs. delivery&lt;/strong&gt;: Ask smart questions, show you’ve learned stuff. Say what you’re going to do, then do it.&lt;/li&gt;
&lt;li&gt;The more experienced you become, the more you are assessed on your &lt;em&gt;ability to deliver&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Expect to demonstrate your experience during interviews.&lt;/li&gt;
&lt;li&gt;Periodically, or when you complete a project, take a few minutes to &lt;em&gt;write some lessons you’ve learned&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Take risks early&lt;/em&gt; as pivoting later on in your career becomes more difficult.&lt;/li&gt;
&lt;li&gt;Book recommendation for more senior developers when switching domains, tech stacks or employers: &lt;a href="https://www.parachutebook.com/"&gt;What Color Is Your Parachute&lt;/a&gt;, by Richard N. Bolles, with Katherine Brooks.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Maintain work-life balance&lt;/strong&gt;: preserve a firm boundary. &lt;em&gt;Work is a marathon, not a sprint&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Get clear on how the employer expects you to handle unplanned work with conflicting priorities.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Listen to the voices when they help and ignore them when they don’t&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Be willing to do things you didn’t think you wanted to do&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Connect with non-tech people outside of work to take a break and experience life from their point of view too.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Manage your career&lt;/strong&gt;: &lt;em&gt;know your goals&lt;/em&gt;; &lt;em&gt;communicate your goals&lt;/em&gt;; &lt;em&gt;progress towards them&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Knowledge: pick an interest and follow it. Plan for a decade or more, with some milestones in between.&lt;/li&gt;
&lt;li&gt;Communication: communicate your desires and ambitions. Good companies want to see their employees grow.&lt;/li&gt;
&lt;li&gt;Progress: study for a certification, read a book, go to a meetup. Be active.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Know your runway&lt;/strong&gt;: this is the time you have at your current spending until you have no money. Calculate it once a month and know how long it would take to get a new job (guess).&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Get a job before you need to&lt;/em&gt; to avoid accepting an ill-fitting job due to desperation.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Cutting expenses&lt;/em&gt; is hard but it’s where you usually have the most control.&lt;/li&gt;
&lt;li&gt;Spending savings for a career transition is an &lt;em&gt;investment&lt;/em&gt; in yourself.&lt;/li&gt;
&lt;li&gt;Activities that draw down your savings should lead to new opportunities and valuable personal knowledge.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Managing one on ones&lt;/strong&gt;: for remote ones, it’s best to have a &lt;em&gt;great Internet connection&lt;/em&gt;, a &lt;em&gt;quiet space&lt;/em&gt; and &lt;em&gt;video turned on&lt;/em&gt; (personal note: you do lose visual clues without video, but you can connect deeply without anyone being too self-aware with voice-only communication).&lt;/li&gt;
&lt;li&gt;Regular ones (weekly or bi-weekly) are preferred so you don’t dread feedback only when you ask for a raise or do something wrong. Knowing your manager beyond these scenarios will help.&lt;/li&gt;
&lt;li&gt;Reasons to schedule them: understand where we are headed so I know what to learn; know how I can best help the manager and the company; understand your priorities better.&lt;/li&gt;
&lt;li&gt;The direction of the one on one should be &lt;em&gt;determined by the employee&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Shoot for &lt;em&gt;regular&lt;/em&gt; ones that &lt;em&gt;do not get re-scheduled&lt;/em&gt;. Otherwise, propose having them less frequently if needed.&lt;/li&gt;
&lt;li&gt;If one-on-one meetings aren’t desirable, go for an asynchronous &lt;em&gt;weekly status report&lt;/em&gt; and get feedback from your manager this way: &lt;em&gt;it is critical for your career growth early on in your career&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Come with a &lt;em&gt;prepared agenda&lt;/em&gt; to make the most of them. A shared document in reverse chronological order works well. Example questions to add:&lt;ul&gt;
&lt;li&gt;How should I have handled situation &lt;code&gt;X&lt;/code&gt;?&lt;/li&gt;
&lt;li&gt;I would like to learn more about &lt;code&gt;Y&lt;/code&gt;; what are the opportunities?&lt;/li&gt;
&lt;li&gt;I’m struggling with &lt;code&gt;&amp;lt;problem&amp;gt;&lt;/code&gt;, do you have any suggestions?&lt;/li&gt;
&lt;li&gt;What are the challenges you see facing our team during project &lt;code&gt;Z&lt;/code&gt;?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;You should be able to &lt;em&gt;trust and rely on your manager/boss&lt;/em&gt;. If not, improve the relationship or go elsewhere: being constantly under threat and not knowing what to expect is mentally draining.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Write a brag document&lt;/strong&gt;: show everything you’re proud of so they know you’re a great team member. It should be thorough yet easy to read. Along with the agendas from your one-on-one meetings, it will serve to highlight your accomplishments for your next performance review.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Be adaptable and authentic&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Working remotely&lt;/strong&gt;: you need a &lt;em&gt;fast Internet connection&lt;/em&gt;; &lt;em&gt;iron discipline&lt;/em&gt;; be okay with &lt;em&gt;solitude&lt;/em&gt; and have the &lt;em&gt;ability to work through communication obstacles&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;If you are comfortable asking a dumb question, remote work can work well for you&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;You will need to &lt;em&gt;get used to asking questions and interrupting others&lt;/em&gt; as you more often than not won’t have enough context to infer whether it’s a good time to ask or not. It’s better than the alternative of wasting your time.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;How to go through a layoff&lt;/strong&gt;: &lt;em&gt;this isn’t personal and you will get through it&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Ask questions:&lt;ul&gt;
&lt;li&gt;Know the deadline to sign the necessary documents;&lt;/li&gt;
&lt;li&gt;Find out if there’s a severance and how much is it;&lt;/li&gt;
&lt;li&gt;What about funds like 401k, &lt;span class="caps"&gt;FSA&lt;/span&gt; or &lt;span class="caps"&gt;HSA&lt;/span&gt;;&lt;/li&gt;
&lt;li&gt;How can I say goodbye to teammates (emails and LinkedIn are good options);&lt;/li&gt;
&lt;li&gt;What about company’s property, e.g. laptop, books and equipments;&lt;/li&gt;
&lt;li&gt;Who can I contact if have I more questions;&lt;/li&gt;
&lt;li&gt;Make sure they have your personal email;&lt;/li&gt;
&lt;li&gt;Take notes of what happened;&lt;/li&gt;
&lt;li&gt;Get involved with a lawyer before signing anything (e.g. non-compete agreements).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Use LinkedIn&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;Send a note when you connect and keep in touch with past colleagues.&lt;/li&gt;
&lt;li&gt;Ask recruiters about the job market, salary ranges for people with your experience and good skills to learn.&lt;/li&gt;
&lt;li&gt;Review your connections’ companies, review posted jobs and ask for introductions from your connections (let them know why the company is awesome, why you’re awesome and why you want to work there).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Contracting&lt;/strong&gt;: try it during the first decade of your career.&lt;/li&gt;
&lt;li&gt;It’s easier than applying for a full-time job given you’re easier to let go.&lt;/li&gt;
&lt;li&gt;It will keep your skills sharp if you want to find clients.&lt;/li&gt;
&lt;li&gt;If/when you’re an employee again, job hunting won’t feel as scary.&lt;/li&gt;
&lt;li&gt;You will &lt;em&gt;strengthen your network&lt;/em&gt; by being able to refer former colleagues.&lt;/li&gt;
&lt;li&gt;Contracting can be more lucrative on a per-hour basis.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Contracting via an agency&lt;/em&gt; is easier (you avoid sales and accounting) but it pays less.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Direct contracting&lt;/em&gt; is harder but you’ll learn beyond software development (sales, customer support, marketing, invoicing and chasing payments). It leads to more control over the clients you work with and more income. You may spend as much as 50% of your time on non-billable work such as seeking new opportunities: your rate needs to reflect this.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Engineering management&lt;/strong&gt;: if you move to a management position, &lt;em&gt;be prepared to be a novice again&lt;/em&gt; as the skill set involved is not the same.&lt;/li&gt;
&lt;li&gt;You should understand the code but &lt;em&gt;keep out of the critical path&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;You shouldn’t make technical decisions&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;You are here to &lt;em&gt;enable teams to do great work&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;The fun, technical stuff should only be done during hackathons.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Be clear about what you want&lt;/em&gt; and &lt;em&gt;maintain the right set of skills&lt;/em&gt; so you can keep doing what you enjoy the most.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Someday, you won’t want to code for a living&lt;/strong&gt;: becoming a manager gives you leverage to have more impact in the world.&lt;/li&gt;
&lt;li&gt;Impact can be achieved through writing, project management, product management, speaking, starting a business, mentoring, leading a team, managing, teaching, architecting and consulting. Notice that coding is not the primary output.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="community"&gt;Community&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Building a community/network puts you in a situation where &lt;strong&gt;you can help people help others&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Meetups&lt;/strong&gt;: find one on &lt;a href="https://www.meetup.com/"&gt;meetup.com&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;It will expose you to &lt;em&gt;new ideas&lt;/em&gt; you can bring to your job.&lt;/li&gt;
&lt;li&gt;You can have &lt;em&gt;professional conversations with low stakes&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;It gives you a way to &lt;em&gt;practice talking&lt;/em&gt; to new people and &lt;em&gt;make friends&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;It provides a network outside of your coworkers should you need to &lt;em&gt;find a new job&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Conversational hooks&lt;/strong&gt;: give some details about where you work and what projects you have been working on to give the chance to the other person to steer the conversation in the direction they want. Flip the question to ask people to talk about themselves (most people like to do that).&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Don’t make transactional conversations&lt;/em&gt;: find something interesting to talk about.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Online tech communities&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Sign up for an email list&lt;/em&gt; related to the technologies you are interested in. &lt;em&gt;Sign up for notifications on projects&lt;/em&gt;. You can &lt;em&gt;follow project contributors on Twitter&lt;/em&gt; or other social media places.&lt;/li&gt;
&lt;li&gt;For something more general, have a look on &lt;em&gt;Slack&lt;/em&gt;, &lt;em&gt;forums&lt;/em&gt;, &lt;em&gt;&lt;span class="caps"&gt;IRC&lt;/span&gt; channels&lt;/em&gt;, &lt;em&gt;Facebook groups&lt;/em&gt; and so on. &lt;em&gt;Slashdot&lt;/em&gt;, &lt;em&gt;Hacker News&lt;/em&gt;, &lt;em&gt;Reddit&lt;/em&gt;, &lt;em&gt;Stack Overflow&lt;/em&gt; are other good options.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;You get what you give&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;Offering to help &lt;em&gt;makes you more empathetic&lt;/em&gt; and &lt;em&gt;aware of other people’s needs&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;It feels good to help&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;You become less arrogant&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;You help &lt;em&gt;build the positivity of the community&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;People will be quicker to &lt;em&gt;recommend you for a job&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;It improves your &lt;em&gt;sense of self-worth&lt;/em&gt; and &lt;em&gt;confidence&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Build your work community&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;Use &lt;em&gt;LinkedIn&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Never leave a job on bad terms&lt;/em&gt;. Give the requisite notice, document your work and prepare for a hand off.&lt;/li&gt;
&lt;li&gt;Keep in touch with past coworkers, even if it’s just to leave a note on their work anniversary.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Three daily mantras&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Surround yourself with people smarter than you&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Build community and give without expecting anything in return&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Listen to your gut, without exception&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Build a personal board of advisors&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Some issues you can discuss with them that aren’t topics for current coworkers:&lt;ul&gt;
&lt;li&gt;Someone under your supervision is not succeeding;&lt;/li&gt;
&lt;li&gt;You have an issue with your manager that you’re not sure how to solve;&lt;/li&gt;
&lt;li&gt;You are evaluating job offers.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Make sure to keep these relationships fresh and &lt;em&gt;offer to help too&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;This circle shifts over time&lt;/em&gt;: a new developer doesn’t have the same questions that a team lead would have.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h1 id="conclusion"&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;That’s it: we went through a short overview of a book I’ve enjoyed and recommend heartily. You can find more on &lt;a href="https://letterstoanewdeveloper.com/"&gt;the author’s website&lt;/a&gt;. You might also enjoy a follow-up book summary about &lt;a href="https://www.sglavoie.com/posts/2023/04/16/book-summary-the-effective-engineer/"&gt;The Effective Engineer&lt;/a&gt;. May you live this knowledge!&lt;/p&gt;</content><category term="learnings"></category><category term="advice"></category><category term="best practices"></category><category term="books"></category><category term="career"></category></entry></feed>