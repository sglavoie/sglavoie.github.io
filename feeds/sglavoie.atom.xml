<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>sglavoie.com</title><link href="https://www.sglavoie.com/" rel="alternate"></link><link href="https://www.sglavoie.com/feeds/sglavoie.atom.xml" rel="self"></link><id>https://www.sglavoie.com/</id><updated>2023-10-01T19:45:00-06:00</updated><entry><title>First Steps with RxJS</title><link href="https://www.sglavoie.com/posts/2023/10/01/first-steps-with-rxjs/" rel="alternate"></link><published>2023-10-01T19:45:00-06:00</published><updated>2023-10-01T19:45:00-06:00</updated><author><name>Sébastien Lavoie</name></author><id>tag:www.sglavoie.com,2023-10-01:/posts/2023/10/01/first-steps-with-rxjs/</id><summary type="html">&lt;p&gt;An introduction to &lt;a href="https://rxjs.dev/"&gt;RxJS&lt;/a&gt;, a library for reactive programming in JavaScript/TypeScript. We&amp;#8217;ll cover core concepts like observables, operators, testing, and tips for managing asynchronous data&amp;nbsp;flows.&lt;/p&gt;</summary><content type="html">
&lt;hr/&gt;
&lt;h1 id="introduction"&gt;Introduction&lt;/h1&gt;
&lt;p&gt;While building an &lt;a href="https://learn.microsoft.com/en-us/office/dev/add-ins/excel/?view=excel-js-preview"&gt;Excel add-in&lt;/a&gt;, I came across the need for a more reactive style of programming due to the asynchronous nature of the APIs and the unpredictability of some events occurring in the spreadsheet. RxJS is one of those frameworks that can help with that. It’s a library for composing asynchronous and event-based programs by using observable sequences. It provides a set of operators to transform and combine streams of data. It’s a powerful tool that can be used to manage complex flows of data in a declarative fashion. It’s also a bit of a beast to learn, so I thought I’d share some of my notes and learnings along the way.&lt;/p&gt;
&lt;p&gt;We’ll first go over some basic concepts and terminology, move on to an attempt at depicting those various concepts, present common operators, touch upon reactive testing and then cover some tips and tricks.&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="basic-concepts"&gt;Basic concepts&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;This is a push-based approach as opposed to a more common pull-based approach.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;Observer&lt;/strong&gt; design pattern is implemented.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Observables&lt;/strong&gt; are the &lt;strong&gt;producers&lt;/strong&gt; of a &lt;strong&gt;stream&lt;/strong&gt; (the &lt;strong&gt;Subject&lt;/strong&gt;) that you can &lt;strong&gt;subscribe&lt;/strong&gt; (listen) to.&lt;ul&gt;
&lt;li&gt;They are “&lt;em&gt;cold&lt;/em&gt;” by default, meaning they don’t emit values until they are subscribed to.&lt;/li&gt;
&lt;li&gt;They can deliver values &lt;em&gt;synchronously&lt;/em&gt; and &lt;em&gt;asynchronously&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;They can be cancelled by &lt;em&gt;unsubscribing&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Observers&lt;/strong&gt; are the &lt;strong&gt;consumers&lt;/strong&gt; of data produced by observables. They “&lt;em&gt;subscribe&lt;/em&gt;” via a &lt;strong&gt;subscription&lt;/strong&gt; to the stream of events emitted by the observable.&lt;ul&gt;
&lt;li&gt;They execute some code when a new value is received.&lt;/li&gt;
&lt;li&gt;They implement &lt;code&gt;next&lt;/code&gt;, &lt;code&gt;error&lt;/code&gt; and/or &lt;code&gt;complete&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;next&lt;/code&gt; method is called whenever a new value is emitted.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;error&lt;/code&gt; method is called whenever an error occurs with an emission from the observable.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;complete&lt;/code&gt; method is called whenever the observable is done, i.e. when no more values will be emitted from the stream in the future.&lt;/li&gt;
&lt;li&gt;By default, this leads to &lt;strong&gt;unicasting&lt;/strong&gt;, where a single subscription gets values from the producer.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;In the context of an Excel spreadsheet, we could think of the values from cells &lt;code&gt;A1&lt;/code&gt; and &lt;code&gt;B1&lt;/code&gt; as the producers of a stream of values that can be subscribed to by a cell &lt;code&gt;C1&lt;/code&gt; — the consumer — to perform some calculations based on the values from &lt;code&gt;A1&lt;/code&gt; and &lt;code&gt;B1&lt;/code&gt; which could be updated over time (i.e., emitting new values in the stream of data).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In an imperative programming paradigm, we would write code that executes a series of steps to produce a result. In a reactive programming paradigm, we would write code that reacts to events as they occur. Here’s a simple example to illustrate this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// Imperative approach&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// 5&lt;/span&gt;

&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// 5: `a` was updated but `c` was not&lt;/span&gt;

&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// 6: `c` was updated after `a` was updated&lt;/span&gt;

&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// 8: `c` was updated after `b` was updated&lt;/span&gt;


&lt;span class="c1"&gt;// Reactive approach&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Subject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;combineLatest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"rxjs"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;a$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Subject&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;b$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Subject&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;c$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;combineLatest&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;a$&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;b$&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(([&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nx"&gt;c$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nx"&gt;a$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// logs nothing because b$ has not emitted yet&lt;/span&gt;
&lt;span class="nx"&gt;b$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// logs 7 at this point (latest a + b)&lt;/span&gt;
&lt;span class="nx"&gt;a$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// logs 8 at this point (latest a + b)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h2 id="everything-is-a-stream"&gt;Everything is a stream&lt;/h2&gt;
&lt;p&gt;What follows is a metaphorical drawing designed (as best as I could…) to help you understand the complex world of reactive programming with RxJS. It’s not a one-to-one mapping but aims to give a general feel of how things interconnect.&lt;/p&gt;
&lt;p&gt;Think of reactive programming as managing a complex water supply system for a bustling town and a high-tech factory. Water from the glacier (&lt;code&gt;Producer&lt;/code&gt;) flows as a river (&lt;code&gt;Stream&lt;/code&gt;) through a landscape filled with dams, turbines, and filters (&lt;code&gt;Operators&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Town residents and the factory subscribe to this river to fulfill their water needs. A subscription is like turning on a valve at the pumping station to let the water flow into your pipeline.&lt;/p&gt;
&lt;p&gt;Meanwhile, the factory refines the water and feeds it back into the system, acting like a &lt;code&gt;Subject&lt;/code&gt; in RxJS. Natural calamities (or dirty, unfiltered water) disrupting the flow signify errors, while the dam’s control room (&lt;code&gt;Schedulers&lt;/code&gt;) regulates the rhythm of the entire system.&lt;/p&gt;
&lt;div class="image"&gt;
&lt;img alt="Drawing representing most major concepts found in  RxJS" src="https://www.sglavoie.com/images/posts/0041_first_steps_with_rxjs/everything_is_a_stream.svg"/&gt;
&lt;/div&gt;
&lt;p&gt;A simple drawing like that won’t do justice to the complexity of the RxJS ecosystem. Let’s nevertheless try to break down a bit more how concepts relate to each other.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;Producer&lt;/strong&gt; (glacier) is the source of the stream. It can be a user action, a network request, a timer, etc. There can be multiple sources of data emitting different types of values. In this example, there is a tributary (a smaller river) that feeds into the main river. By merging the two streams, we can get a single stream of data from both sources.&lt;ul&gt;
&lt;li&gt;While it may be useful to merge different streams of data and transform them along the way, it is not necessary or always needed. In this drawing, the &lt;strong&gt;ReplaySubject&lt;/strong&gt; merely captures raw data as it arrives from the river and makes it available to late subscribers.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;Stream&lt;/strong&gt; is the flow of data. It can be a single value or a sequence of values over time. Here, it may represent the flow of data throughout the whole application, where different events (mouse click, keyboard, etc.) are emitted from different sources (or components) and may be consumed in a modified fashion (e.g., keeping a single property from an object, filtering out some values, etc.).&lt;ul&gt;
&lt;li&gt;Here, we have the town which subscribes to different streams that have been transformed already (electricity and water subscriptions). The town might be considered a &lt;strong&gt;Consumer&lt;/strong&gt; of the stream and is the data that ends up being displayed in the &lt;span class="caps"&gt;UI&lt;/span&gt; or sent back to a server.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Operators&lt;/strong&gt; are functions that transform the stream. They can be used to filter, combine, or modify the data.&lt;ul&gt;
&lt;li&gt;Our metaphor contains a couple of them. There’s a water turbine — representing a &lt;strong&gt;transformation operator&lt;/strong&gt; — that transforms water into electricity (maybe it’s a &lt;code&gt;mergeMap&lt;/code&gt; that creates a new observable and maps it to a different structure) or water filters — representing the &lt;strong&gt;filtering operators&lt;/strong&gt; — that filter out unwanted particles (maybe it’s a &lt;code&gt;filter&lt;/code&gt; that removes some values from the stream).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Subscriptions&lt;/strong&gt; are the consumers of the stream. They can be used to listen to the stream and perform actions when new values are emitted.&lt;ul&gt;
&lt;li&gt;For instance, when the water bottling company receives water via its pipe, it may modify the stream by adding minerals to it (e.g., &lt;code&gt;map&lt;/code&gt; operator) and then bottle it up to deliver water. This creates a dependency chain where the bottling company is a consumer of the stream and a producer of a new stream that can be consumed by the town.&lt;/li&gt;
&lt;li&gt;If we zoom in on the water bottling company section, we can see that the water delivery truck “subscribes” to the product of the company and will likely want to deliver a truckload of water bottles once it is full (e.g., &lt;code&gt;buffer&lt;/code&gt; operator). If we look at the case where the truck delivers water with a giant container that happens to have a small leak, then we know that once the container starts filling with water, it will start leaking. This is akin to a &lt;strong&gt;hot observable&lt;/strong&gt; where the stream starts emitting values immediately, even if there are no subscribers. We could say this is also a stream that uses the &lt;code&gt;throttleTime&lt;/code&gt; operator to only emit values every 5 seconds, dropping a small amount of water in the process. Whether the container is nearly empty or full, it will still leak water every 5 seconds. This is different from a &lt;strong&gt;cold observable&lt;/strong&gt; where the stream only starts emitting values once a subscriber is listening to it, such as when a well-functioning container is plugged into a destination to deliver water.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Subjects&lt;/strong&gt; are both producers and consumers. They can be used to multicast values to multiple subscribers.&lt;ul&gt;
&lt;li&gt;The water purification factory consumes water from the stream: as such, it is an &lt;strong&gt;observer&lt;/strong&gt; as it reacts to the input stream (&lt;code&gt;next&lt;/code&gt;, &lt;code&gt;error&lt;/code&gt;, &lt;code&gt;complete&lt;/code&gt;), but it is also a &lt;strong&gt;producer&lt;/strong&gt; (because it can &lt;code&gt;pipe&lt;/code&gt; and consumers can &lt;code&gt;subscribe&lt;/code&gt; to it) as it emits a new stream of data that can be consumed by the town. This is akin to a &lt;strong&gt;multicast&lt;/strong&gt; where a single producer can emit values to multiple consumers. The factory processes the incoming stream and may re-process values (&lt;code&gt;retryWhen&lt;/code&gt;) or discard them (&lt;code&gt;filter&lt;/code&gt;) before emitting a new stream of purified data.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Schedulers&lt;/strong&gt; are used to control the timing of the stream. They can be used to delay, throttle, or debounce emissions.&lt;ul&gt;
&lt;li&gt;In this thirsty scenario, we can see that if the dam’s control room blocks the flow of water entirely, this will affect the whole system downstream. If the control room were to stop the flow of water at night and schedule it to resume in the morning, this would be akin to a &lt;strong&gt;scheduler&lt;/strong&gt; that controls the timing of the stream. This is useful to avoid flooding the system with too much data at once, such as when a user types in a search box and we want to avoid making too many network requests at once. We can use a scheduler to throttle the stream of data to only emit values every 500 milliseconds, for instance, although in many cases we can directly rely on &lt;a href="#time-based"&gt;time-based operators&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Unicast&lt;/strong&gt; is a one-to-one mapping between the producer and the consumer. It’s the default behavior of RxJS.&lt;ul&gt;
&lt;li&gt;Assuming our dam blocks and redirects the entire stream coming from the glacier, then the initial part of the diagram would be a unicast with a single producer emitting values to a single consumer.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Multicast&lt;/strong&gt; is a one-to-many mapping between the producer and the consumers. It’s the behavior of RxJS when using &lt;strong&gt;Subjects&lt;/strong&gt;.&lt;ul&gt;
&lt;li&gt;If we take each resident of the town to be a subscriber of the water purification factory, then we have a multicast where a single producer emits values to multiple consumers. Likewise, the power utility company is a consumer of the electricity stream and a producer of a new stream that can be consumed by the town.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cold&lt;/strong&gt; observables are lazy and only start emitting values when subscribed to.&lt;ul&gt;
&lt;li&gt;In the case of the pond, it is a cold observable that only starts emitting values when a subscriber is listening to it, such as when a pump is plugged into it or someone fills a bucket of water from it.&lt;/li&gt;
&lt;li&gt;In the diagram, a person acts as an &lt;code&gt;AsyncSubject&lt;/code&gt;: it will work for a time to get water from the pond, but once it’s done, it will emit a single value (the last value, i.e., the bucket) to all subscribers (let’s pretend for the sake of simplicity and for this metaphor to keep working that all subscribers effectively receive the exact same stream/value when it is emitted all at once). This is different from a &lt;code&gt;BehaviorSubject&lt;/code&gt; where the last value is emitted to late subscribers upon subscription. Subscribers will not receive any values from an &lt;code&gt;AsyncSubject&lt;/code&gt; until it completes and, as depicted, can also unsubscribe before the stream emits any value.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Hot&lt;/strong&gt; observables are eager and start emitting values immediately, even if there are no subscribers.&lt;/li&gt;
&lt;li&gt;There is a part of the river that’s identified near the bottom-left corner as a &lt;code&gt;hot observable&lt;/code&gt;, because whether there are subscribers or not, it will keep emitting values. A &lt;code&gt;ReplaySubject&lt;/code&gt; — the cameraman — was added to capture the values emitted from the river and make them available to late subscribers right upon subscription (e.g., when they watch it live on &lt;span class="caps"&gt;TV&lt;/span&gt; at some point).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;My representation of the world may be flawed as I haven’t gone out much since the pandemic. Yet, that drawing tried to encapsulate most of the RxJS ecosystem and to some extent, that of reactive programming.&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="operators"&gt;Operators&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Operators allow to hook into a stream, operate on it and even combine it with other streams.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="creation"&gt;Creation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;They are standalone functions to create observables, such as &lt;code&gt;of&lt;/code&gt;, &lt;code&gt;from&lt;/code&gt;, &lt;code&gt;fromEvent&lt;/code&gt;, &lt;code&gt;interval&lt;/code&gt;, &lt;code&gt;timer&lt;/code&gt; or &lt;code&gt;range&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;You should always clean up subscriptions by unsubscribing when they’re no longer needed to avoid memory leaks and unintended consequences.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fromEvent&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;Can create observables from &lt;span class="caps"&gt;DOM&lt;/span&gt; events or Node.js streams.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;of&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;Values are emitted synchronously, one at a time.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;from&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;Values are emitted synchronously, looping through a provided iterable (i.e., object with a &lt;code&gt;length&lt;/code&gt; property). Also works with promises (e.g., &lt;code&gt;from(fetch(url))&lt;/code&gt;) or generators (&lt;code&gt;function* () { yield … }&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;interval&lt;/code&gt; and &lt;code&gt;timer&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;They can emit values over time as a timer, where &lt;code&gt;timer&lt;/code&gt; is useful to specify a different delay on the first value being emitted (e.g., specifying the first argument to &lt;code&gt;timer&lt;/code&gt; to be &lt;code&gt;0&lt;/code&gt; to emit the first value immediately).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mapTo&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;This is a shortcut to remap an input to a different output (e.g., a constant string).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;filter&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;It returns values when the evaluate to &lt;code&gt;true&lt;/code&gt; from a function that itself returns a boolean value.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reduce&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;It works exactly like &lt;code&gt;Array.reduce&lt;/code&gt;. It will emit the final value once the observable completes. That means it needs a stop condition in the pipeline, such as reaching the end of a synchronous stream or taking a few values only from an infinite stream (e.g., &lt;code&gt;interval(1000).pipe(take(3), reduce((acc, curr) =&amp;gt; acc + curr) …)&lt;/code&gt;) to take the the sum of the first three values emitted after 3 seconds.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scan&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;Just like &lt;code&gt;reduce&lt;/code&gt; but emits every time the stream receives a new value, not just once the stream completes.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tap&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;Used to &lt;em&gt;spy&lt;/em&gt; on the observable source to perform side effects without affecting the underlying stream, which is useful when debugging to observe output values at different steps of the pipeline.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="pipe"&gt;Pipe&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Operators are comma-separated inside the &lt;code&gt;pipe&lt;/code&gt; method that’s called on the observable. Then, the &lt;code&gt;subscribe&lt;/code&gt; method is called on the assembled pipeline with a given observer to start producing the values from the stream.&lt;/li&gt;
&lt;li&gt;The operators create a new observable at each step in a “pure” fashion, so that the original observable does not change. Each operator in the pipe is akin to a different step in an assembly line.&lt;/li&gt;
&lt;li&gt;When &lt;code&gt;subscribe&lt;/code&gt; is called, each operator in the pipe in turn subscribe to the observable and pass its value(s) along to the next operator in the pipeline.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;map&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;It’s similar to &lt;code&gt;Array.map&lt;/code&gt; but it works on every element emitted from the stream, not on the stream as a whole.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;finalize&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;It is called once on the completion of the observable, which could be used to perform some cleanup logic after an action completes, such as updating a status field.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="filtering"&gt;Filtering&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;take&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;Accepts a given number of items from the source before completing.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;first&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;To &lt;code&gt;take&lt;/code&gt; a single value based on a filtering condition.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;takeWhile&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;Emits values from the source observable as long as a predicate condition is met. A value of &lt;code&gt;true&lt;/code&gt; can be passed to the second argument of the function signature of &lt;code&gt;takeWhile&lt;/code&gt; to also emit the value that caused the stream to stop emitting. It is used to limit the lifetime of an observable based on a known condition to apply.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;takeUntil&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;It takes a value until another stream emits a value. It accepts as an argument another observable for this purpose.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;distinctUntilChanged&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;It will emit values only if they are distinct from the previously emitted value from the stream.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;distinctUntilKeyChanged&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;Will compare the previous value emitted with the current value to evaluate whether a given key of an object has changed.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="time-based"&gt;Time-based&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;debounceTime&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;Useful when you need the last value emitted within a short period of time, discarding all previously emitted values until enough delay has passed.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;debounce&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;Does the same thing as &lt;code&gt;debounceTime&lt;/code&gt;, but allows passing a function so that variables can be used to determine the emission of results.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;throttleTime&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;Ignore values after the last emission for a specified duration, creating a “silence window”. It can help ignore spammy events by reacting after a certain time has passed only, such as listening for scroll events (e.g., do not process values instantly but rather every 20-30 ms).&lt;/li&gt;
&lt;li&gt;We can use &lt;code&gt;asyncScheduler&lt;/code&gt; as the second parameter to &lt;code&gt;throttleTime&lt;/code&gt;, and give it a config object as the third argument to specify whether we’re interested in emitting the &lt;code&gt;leading&lt;/code&gt; (first) or &lt;code&gt;trailing&lt;/code&gt; (last) event from the stream within the silence window (e.g., for a scroll event, we want to know the last position).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sampleTime&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;It “samples” a time window to emit only the last value from that window, doing so at precise intervals.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;auditTime&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;This is like &lt;code&gt;sampleTime&lt;/code&gt;, but starting a counter once the stream emits at least one value, keeping the last value emitted within the desired time window. This is the same as &lt;code&gt;throttleTime&lt;/code&gt; where &lt;code&gt;leading&lt;/code&gt; is set to &lt;code&gt;false&lt;/code&gt; and &lt;code&gt;trailing&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="transformation"&gt;Transformation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;One type of transformation operator is a flattening operator. This type of operator takes an observable that emits an observable to which RxJS internally subscribes to, simplifying the pipeline management. One such operator is &lt;code&gt;mergeAll&lt;/code&gt;. Instead of mapping an emitted value to a new observable (e.g., with &lt;code&gt;Ajax.getJSON&lt;/code&gt;) and then flattening the pipe to get the emitted value from that nested observable with &lt;code&gt;mergeAll&lt;/code&gt;, we can do this in a single step with &lt;code&gt;mergeMap&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mergeMap&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;This is good for “fire and forget” type of behavior. For example, we may have an observable of click events from which we save the &lt;code&gt;clientX&lt;/code&gt; and &lt;code&gt;clientY&lt;/code&gt; coordinates, using these values to make an Ajax request that can perform an operation in the background which we do not want to cancel. Need to be careful with this as long-running observables may need cleanup.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;switchMap&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;While &lt;code&gt;mergeMap&lt;/code&gt; can maintain any number of inner subscriptions at a time, &lt;code&gt;switchMap&lt;/code&gt; will maintain a single one. Any time a new observable is mapped, the previous one is automatically completed. This is useful if a previous request needs to be cancelled where only the last request makes sense, such as in a type-ahead behavior where we don’t want results from previous requests to be shown, but rather only the last one. This is the safest default for flattening because it won’t create leaks like &lt;code&gt;mergeMap&lt;/code&gt;, which will leave other inner observables running in the background unless they are explicitly completed.&lt;ul&gt;
&lt;li&gt;Great for reset, pause and resume functionality.&lt;/li&gt;
&lt;li&gt;Should avoid it when cancelling a request will have negative side effects, like saving a document.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;concatMap&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;Like &lt;code&gt;switchMap&lt;/code&gt;, &lt;code&gt;concatMap&lt;/code&gt; works on a single observable at a time, queuing up events (&lt;span class="caps"&gt;FIFO&lt;/span&gt;) from other observables until the first one completes. Should only be used when you have observables with a finite lifespan, otherwise the queue will never empty. This is useful when execution order of requests is important on the client side and when events will have a finite lifespan.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;exhaustMap&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;Only maintains one inner subscription at a time. It will ignore values from new events until the first observable completes, discarding those events while there’s still an ongoing active subscription. This could be used to prevent further requests when clicking a button such as when submitting a form, effectively “disabling” the button while the submission is happening to avoid spamming the server with duplicate requests.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;catchError&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;By default, when an observable throws an error, it will stop emitting values as the errors are not handled. It can catch and return the error or return an empty observable to ignore the current value, which prevents the stream from breaking and will continue emitting values.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="combination"&gt;Combination&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Can join multiple observables into a single stream, such as when you need to perform calculations based on multiple stream inputs.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;startWith&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;Lets you prepend any value(s) at the beginning of the stream.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;endWith&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;Lets you append any value(s) at the end of the stream.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;concat&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;Useful to execute multiple observables in order. When the first one finishes, the second one starts. That may come in handy to manage &lt;span class="caps"&gt;UI&lt;/span&gt; animations and to complete network requests in order.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;merge&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;Creates a single observable from any other number of observables. This means that it emits all values from all the observables as a single stream as they occur. For example, if we have a countdown related to both a “start” and a “pause” button, we might want the same stream to return “true” values when “start” is clicked and “false” values when “pause” is clicked to determine the next step to take in the pipeline.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;combineLatest&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;Takes two or more observables, combining the latest value received from each one only once all the observables have emitted at least one value. This would be useful when all values depend on each other to produce a common result.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;forkJoin&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;It emits the last produced value from each observable subscribed to as an array. This is like combineLatest, but returning values only once all streams have completed. The observables can be wrapped with brackets to emit an object, where a property (key) can be assigned to the result of each observable (set as a value of the object). This is somewhat equivalent to &lt;code&gt;Promise.all&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;share&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;It is used to “share” the result of a stream to all subscribers. This can be useful to avoid running heavy computations more than once.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="creating-a-custom-operator"&gt;Creating a custom operator&lt;/h2&gt;
&lt;p&gt;We can create a custom operator by creating a function that returns a function that accepts an observable and returns a new observable. While that might be a bit of an abstract explanation to follow, here is a basic example illustrating this concept.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'rxjs'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;multiplyBy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;multiplier&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Observable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;number&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;number&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="ow"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;subscription&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;multiplier&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;complete&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;complete&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;subscription&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unsubscribe&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Usage:&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'rxjs'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;multiplyBy&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'./multiplyBy'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;5&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;multiplyBy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="c1"&gt;// logs 2, 4, 6, 8, 10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here is another example combining &lt;code&gt;filter&lt;/code&gt;, &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;reduce&lt;/code&gt; to create a custom operator that will filter out values from a stream, map them to a new value and then reduce them to a single value.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'rxjs'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;filterMapReduce&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;R&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;predicate&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;mapFn&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;R&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;reduceFn&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;R&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;R&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;R&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Observable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;R&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;predicate&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mapFn&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reduceFn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Usage:&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"rxjs"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;filterMapReduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// keep only even numbers (2 and 4)&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;===&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// multiply each of these even numbers by 2 (4 and 8)&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// sum all these values&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// accumulator is initialized to 0&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// so we get 0 + 4 for the first value&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// then 4 + 8 for the second value, which is returned&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;curr&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// logs 12&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h1 id="marble-diagrams"&gt;Marble diagrams&lt;/h1&gt;
&lt;div class="image"&gt;
&lt;img alt="Showing a basic marble diagram with filter operator" src="https://www.sglavoie.com/images/posts/0041_first_steps_with_rxjs/marble_diagram.svg"/&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;They are used to represent the behavior of operators. They can be used to test observables.&lt;/li&gt;
&lt;li&gt;They allow comparing at a glance how a set of inputs maps to a set of outputs (i.e., which transformations are applied to the source stream).&lt;/li&gt;
&lt;li&gt;An &lt;code&gt;X&lt;/code&gt; represents an error and a vertical line &lt;code&gt;|&lt;/code&gt; represents the end of emission of values from the input stream.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;div class="image"&gt;
&lt;img alt="Showing merging of streams with pipeline in the middle flowing towards a single output stream" src="https://www.sglavoie.com/images/posts/0041_first_steps_with_rxjs/marble_diagram_pipeline.svg"/&gt;
&lt;/div&gt;
&lt;hr/&gt;
&lt;h1 id="subjects"&gt;Subjects&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;strong&gt;Subject&lt;/strong&gt; is an &lt;strong&gt;Observable&lt;/strong&gt;: it has both &lt;code&gt;pipe&lt;/code&gt; and &lt;code&gt;subscribe&lt;/code&gt; methods. A Subject is also an &lt;strong&gt;Observer&lt;/strong&gt;: it has &lt;code&gt;next&lt;/code&gt;, &lt;code&gt;error&lt;/code&gt; and &lt;code&gt;complete&lt;/code&gt; methods. Unlike Observables which are unicast (1-to-1 mapping with observers, each observer gets an independent stream of data), Subjects are &lt;strong&gt;multicast&lt;/strong&gt;, meaning they broadcast the same information to any “listeners” (observers).&lt;/li&gt;
&lt;li&gt;Multicasting operators include &lt;code&gt;share&lt;/code&gt;, &lt;code&gt;shareReplay&lt;/code&gt; and &lt;code&gt;multicast&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="behaviorsubject"&gt;BehaviorSubject&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;It allows delivering a seed/initial value to late subscribers such that a subscription happening at a later point can still receive the last emitted value upon subscribing.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="replaysubject"&gt;ReplaySubject&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;It allows replaying the whole stream (or the last items desired via its first argument) to late subscribers, effectively providing a way to multicast (i.e., the stream is played only once and multiple subscribers can receive the values at once).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shareReplay&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;This can be added to a pipeline and any subscriber to that stream will receive updates as if a ReplaySubject has been manually set up. For time sensitive matters where receiving a value too late isn’t useful, a second argument can be passed to &lt;code&gt;shareReplay&lt;/code&gt; to only capture events within the last &lt;code&gt;x&lt;/code&gt; milliseconds.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="asyncsubject"&gt;AsyncSubject&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Only emits the last value to all subscribers when it completes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is a real-world example of a setup making use of a &lt;code&gt;BehaviorSubject&lt;/code&gt; from an Excel add-in. The goal is to perform some actions in the &lt;span class="caps"&gt;UI&lt;/span&gt; whenever the connection status of a WebSocket changes by using a &lt;strong&gt;subject&lt;/strong&gt;, which can be subscribed to from another part of the add-in to perform the needed updates. Omitting the details of the WebSocket connection, the following code snippet shows how we can use a &lt;code&gt;BehaviorSubject&lt;/code&gt; to keep track of the connection status and emit the latest value to late subscribers.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;BehaviorSubject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;distinctUntilChanged&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'rxjs'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ConnectionManager&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;apiConnection$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;BehaviorSubject&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;boolean&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ws&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;WebSocket&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// Expose connection status as an Observable emitting whenever the connection status changes&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;connectionStatus$&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;boolean&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apiConnection$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;asObservable&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;distinctUntilChanged&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// ...&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="ow"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ws&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;WebSocket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'ws://localhost:8080/ws'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ws&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onopen&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apiConnection$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ws&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onclose&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apiConnection$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ws&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onerror&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In other words, we can subscribe to the &lt;code&gt;connectionStatus$&lt;/code&gt; observable and react to changes in the connection status. This is useful to update the &lt;span class="caps"&gt;UI&lt;/span&gt;, for instance, to show a “&lt;em&gt;disconnected&lt;/em&gt;” message when the connection is lost.&lt;/p&gt;
&lt;p&gt;In a state manager, this might be dealt with like this to keep track of the sheets we have:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;sheetSubscriptions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sheetId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Subject&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// track the sheet subscriptions&lt;/span&gt;

&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="c1"&gt;// delete the subscriptions to the sheet at some point in the future&lt;/span&gt;
&lt;span class="nx"&gt;sheetSubscriptions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sheetId&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// unsubscribe from all subscriptions for this sheet&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The implementation details of the &lt;code&gt;sheetSubscriptions&lt;/code&gt; map are omitted here, but the idea is that we can use a &lt;code&gt;Subject&lt;/code&gt; to keep track of the subscriptions to a given sheet. When we want to unsubscribe from all subscriptions to a given sheet, we can call &lt;code&gt;next&lt;/code&gt; on the subject to complete the stream and unsubscribe from all subscriptions.&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="schedulers"&gt;Schedulers&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;All schedulers accept three arguments: &lt;code&gt;work&lt;/code&gt; (task to execute), &lt;code&gt;delay&lt;/code&gt; (in milliseconds) and &lt;code&gt;state&lt;/code&gt; (when used, the first argument &lt;code&gt;work&lt;/code&gt; defines the function to execute and &lt;code&gt;state&lt;/code&gt; the data passed to it).&lt;/li&gt;
&lt;li&gt;Most basic observables (e.g., &lt;code&gt;range&lt;/code&gt;) accept as the last argument a scheduler, so this can be set there (e.g., &lt;code&gt;range(1, 5, asapScheduler)&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AsyncScheduler&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;Can be used as an equivalent to setTimeout. It’s simpler to just use the &lt;code&gt;delay&lt;/code&gt; operator for that purpose. When used with &lt;code&gt;subscribeOn&lt;/code&gt; in the pipeline, this is equivalent to wrapping the whole observable with setTimeout.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;asapScheduler&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;This is used to queue micro tasks, which are run after other synchronous pieces of code but before asynchronous code.&lt;/li&gt;
&lt;li&gt;Micro tasks are run after the currently running synchronous code but will block the &lt;span class="caps"&gt;UI&lt;/span&gt; when run.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;animationFrameScheduler&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;This is similar to requestAnimationFrame. Set no delay or set it to &lt;code&gt;0&lt;/code&gt; so that it will not be async and will update before every browser repaint.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;queueScheduler&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;It is synchronous by default. Inner calls to &lt;code&gt;queueScheduler&lt;/code&gt; will be executed once the outer calls are done running.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While it’s possible to use schedulers directly to provide fine-grained control over concurrency, it’s often easier to use the &lt;code&gt;delay&lt;/code&gt; operator to delay the emission of values from the stream. For instance, we can use &lt;code&gt;delay(1000)&lt;/code&gt; to delay the emission of values by 1 second.&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="example-flow"&gt;Example flow&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;BehaviorSubject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;EMPTY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;Observer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;Subject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;catchError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;distinctUntilChanged&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kr"&gt;from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;switchMap&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;tap&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'rxjs'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Create a subject (stream emitting AND receiving values over time) with a default&lt;/span&gt;
&lt;span class="c1"&gt;// value. A common pattern is to suffix the variable name with a `$` to indicate that&lt;/span&gt;
&lt;span class="c1"&gt;// it's a stream&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;stream1Subject$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;BehaviorSubject&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;boolean&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Get the observable (stream emitting values over time) from the subject&lt;/span&gt;
&lt;span class="c1"&gt;// Doing this, we can `pipe` and `subscribe` to the observable but we can't emit values&lt;/span&gt;
&lt;span class="c1"&gt;// with `next`, `error` or `complete` methods.&lt;/span&gt;
&lt;span class="c1"&gt;// We can also use the subject directly to emit values with `next`, `error` or&lt;/span&gt;
&lt;span class="c1"&gt;// `complete`.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;stream1Observable$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;stream1Subject$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;asObservable&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// Will use to send the final result of the status$ observable to this second stream&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;stream2Subject$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;BehaviorSubject&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;stream2Observable$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;stream2Subject$&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;asObservable&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;boolean&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// ignore initial/empty values&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;stream3ObservableForErrorsSubject$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Subject&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;stream3ObservableForErrors$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;stream3ObservableForErrorsSubject$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;asObservable&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// Some async operation that will update the connection status&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;asyncFuncOnStatusChanged&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;isConnected&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;boolean&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="ow"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// ... `await` some async operation to update the UI with the new connection status&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sb"&gt;` -&amp;gt; onStatusChanged: &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;isConnected&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isConnected&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;throw&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ne"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Disconnected!'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// Create an observable (stream emitting values over time) from an another observable.&lt;/span&gt;
&lt;span class="c1"&gt;// The idea is to transform the original event into another event:&lt;/span&gt;
&lt;span class="c1"&gt;// event1 -&amp;gt; event2 -&amp;gt; event3 -&amp;gt; ... -&amp;gt; result&lt;/span&gt;
&lt;span class="c1"&gt;// Any observer on these events could push new values into other streams&lt;/span&gt;
&lt;span class="c1"&gt;// (e.g. `otherSubject$.next("value")`)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;observable1GetConnectionStatusChangedForRibbon$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;connectionStatus$&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Observable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;boolean&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="ow"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// Transform the original event with `pipe`&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;connectionStatus$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Prevent the observable from completing when an error is thrown&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;catchError&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sb"&gt;`Caught error in observable1: &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}),&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;tap&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sb"&gt;` -&amp;gt; observable start: &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// If the value is the same as the previous one, don't emit it&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;distinctUntilChanged&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Perform side effects with `tap` (useful for logging/debugging)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;tap&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sb"&gt;` -&amp;gt; observable before switchMap: &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Ensure async execution&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;switchMap&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="kr"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;asyncFuncOnStatusChanged&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// This will catch errors thrown by `asyncFuncOnStatusChanged` in a 'local' way.&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// We would still need to catch errors thrown directly from the source observable&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// as we did above&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;catchError&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sb"&gt;`Caught error: &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="c1"&gt;// Emit the error to the third observable&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nx"&gt;stream3ObservableForErrorsSubject$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'error'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="c1"&gt;// This completes the inner observable&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;EMPTY&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// EMPTY is an observable that completes immediately&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// In this case, we could just as well have used `status$` directly,&lt;/span&gt;
&lt;span class="c1"&gt;// but this could be useful if we want to transform the original event or if we want to&lt;/span&gt;
&lt;span class="c1"&gt;// merge multiple observables into one&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;stream1ObservableTransformed$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;observable1GetConnectionStatusChangedForRibbon$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stream1Observable$&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Create an observer (object with `next`, `error` and `complete` methods) to subscribe&lt;/span&gt;
&lt;span class="c1"&gt;// to the observable&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;observer1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Observer&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="ow"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;' -&amp;gt; observer: subscription started'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;' -&amp;gt; observer: status changed'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;// We could trigger another event here to continue the pipeline elsewhere, e.g.:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;// otherSubject$.next("value");&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;// Then, if there's a subscription to `otherSubject$`, it will receive the value&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;// "value" and continue the pipeline&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sb"&gt;` -&amp;gt; observer: subscription errored: &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;complete&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s1"&gt;' -&amp;gt; observer: subscription completed, notifying stream2Subject$'&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;stream2Subject$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s1"&gt;'observer1 sent this message to observer2 in `.complete()`!'&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Subscribing to secondObservable$...'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;observer2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Observer&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;' -&amp;gt; observer2: subscription started'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sb"&gt;` -&amp;gt; observer2: got '&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;'`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sb"&gt;` -&amp;gt; observer2: subscription errored: &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;complete&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;' -&amp;gt; observer2: subscription completed'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;stream2ObservableSubscription&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;stream2Observable$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;observer2&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'\nSubscribing to thirdObservableForErrors$...'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;stream3ObservableSubscription$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;stream3ObservableForErrors$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="sb"&gt;` -&amp;gt; observer3: got value '&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;' from observer2.complete()`&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sb"&gt;` -&amp;gt; observer3: subscription errored: &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;complete&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;' -&amp;gt; observer3: subscription completed'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'\nSubscribing to observable status$...'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Subscribe to the observable. Until we subscribe, nothing happens!&lt;/span&gt;
&lt;span class="nx"&gt;stream1ObservableTransformed$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;observer1&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'\nEmitting `true` to stream1Subject$...'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;stream1Subject$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'\nEmitting `true` to stream1Subject$...'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;stream1Subject$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'\nEmitting an error to stream1Subject$...'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;stream1Subject$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Error emitted from the outside'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'\nEmitting message to stream2Subject$...'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;stream2Subject$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Sent unrelated message from the outside'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'\nEmitting `false` to stream1Subject$...'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;stream1Subject$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'\nEmitting `true` again to stream1Subject$...'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;stream1Subject$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'\nEmitting `false` again to stream1Subject$, causing error...'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;stream1Subject$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'\nStreams keep listening until completion or unhandled error'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Add some async behavior so this will happen at the end&lt;/span&gt;
&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;stream3ObservableForErrorsSubject$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s1"&gt;'Will receive one more value before unsubscribing'&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'\nUnsubscribing from thirdObservableSubscription$...'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;stream3ObservableSubscription$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unsubscribe&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;stream3ObservableForErrorsSubject$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s1"&gt;'Will not be received after unsubscribe'&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;stream1Subject$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;complete&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'\nEmitting `true` to statusSubject$...'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// This is ignored because the stream is completed by now&lt;/span&gt;
&lt;span class="nx"&gt;stream1Subject$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// already unsubscribed since they completed: nothing will happen&lt;/span&gt;
&lt;span class="nx"&gt;stream1Subject$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unsubscribe&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;stream2ObservableSubscription&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unsubscribe&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will result in the following output being logged to the console:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Subscribing to secondObservable$...
 -&amp;gt; observer2: subscription started

Subscribing to thirdObservableForErrors$...

Subscribing to observable status$...
 -&amp;gt; observer: subscription started
 -&amp;gt; observable start: false
 -&amp;gt; observable before switchMap: false
 -&amp;gt; onStatusChanged: false

Emitting `true` to stream1Subject$...
 -&amp;gt; observable start: true
 -&amp;gt; observable before switchMap: true
 -&amp;gt; onStatusChanged: true

Emitting `true` to stream1Subject$...
 -&amp;gt; observable start: true

Emitting an error to stream1Subject$...
Caught error in observable1: Error emitted from the outside
 -&amp;gt; observable start: false
 -&amp;gt; observable before switchMap: false
 -&amp;gt; onStatusChanged: false

Emitting message to stream2Subject$...
 -&amp;gt; observer2: got 'Sent unrelated message from the outside'

Emitting `false` to stream1Subject$...

Emitting `true` again to stream1Subject$...

Emitting `false` again to stream1Subject$, causing error...

Streams keep listening until completion or unhandled error

Emitting `true` to statusSubject$...
Caught error: Error: Disconnected!
 -&amp;gt; observer3: got value 'error' from observer2.complete()
 -&amp;gt; observer: subscription completed, notifying stream2Subject$
 -&amp;gt; observer3: got value 'Will receive one more value before unsubscribing' from observer2.complete()

Unsubscribing from thirdObservableSubscription$...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While this example is a bit abstract and contrived, RxJS can be used for a bunch of different use cases, including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;debounceTime&lt;/code&gt; and &lt;code&gt;switchMap&lt;/code&gt; to limit requests and cancel previous searches in a search auto-complete;&lt;/li&gt;
&lt;li&gt;Typeahead search box: &lt;code&gt;fromEvent&lt;/code&gt; on keystrokes, combined with &lt;span class="caps"&gt;API&lt;/span&gt; requests;&lt;/li&gt;
&lt;li&gt;Scroll position can be tracked with &lt;code&gt;fromEvent&lt;/code&gt; to lazily load content;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;combineLatest&lt;/code&gt; and &lt;code&gt;map&lt;/code&gt; can be used to validate fields as user fills them out;&lt;/li&gt;
&lt;li&gt;Progress bar updates could be animated using &lt;code&gt;interval&lt;/code&gt; and &lt;code&gt;map&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;fromEvent&lt;/code&gt; to track mouse drags and &lt;code&gt;merge&lt;/code&gt; to handle multiple event streams;&lt;/li&gt;
&lt;li&gt;Create a real-time dashboard updating based on WebSocket streams with &lt;code&gt;merge&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;Debounce input changes with &lt;code&gt;debounceTime&lt;/code&gt; to trigger saves;&lt;/li&gt;
&lt;li&gt;Create heatmaps from click events using &lt;code&gt;fromEvent&lt;/code&gt; and &lt;code&gt;reduce&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;Retry &lt;span class="caps"&gt;XHR&lt;/span&gt; requests on failure using &lt;code&gt;catchError&lt;/code&gt; and &lt;code&gt;retry&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Going back to the world of Excel add-ins, here is a real-world example of a setup using RxJS to listen to events from the Excel &lt;span class="caps"&gt;API&lt;/span&gt;. The goal is to listen to selection changes on a table and perform some actions when the selection changes. The &lt;code&gt;fromEventPattern&lt;/code&gt; method allows us to create an observable from an &lt;span class="caps"&gt;API&lt;/span&gt; event. We basically “hook” into the Excel &lt;span class="caps"&gt;API&lt;/span&gt; event and transform it into an observable. We can then use the &lt;code&gt;filter&lt;/code&gt; operator to filter out unrelated events and the &lt;code&gt;takeUntil&lt;/code&gt; operator to unsubscribe when the notifier emits (when the table is deleted).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Subject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;fromEventPattern&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;takeUntil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'rxjs'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;notifier$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Subject&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="ow"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;table&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Excel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// some actual table object (omitted for brevity)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;getTableOnSelectionChanged$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;table&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Excel.Table&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;notifier$&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Subject&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="ow"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Excel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;TableSelectionChangedEventArgs&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;fromEventPattern&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Excel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;TableSelectionChangedEventArgs&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;TAnyExcelValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onSelectionChanged&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;TAnyExcelValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onSelectionChanged&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// unsubscribe when notifier emits (table is deleted)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;takeUntil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;notifier$&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;// filter unrelated events...&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Excel.TableSelectionChangedEventArgs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tableName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;Excel.TableSelectionChangedEventArgs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sb"&gt;`Event triggered at &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sb"&gt;`Subscription errored: &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;complete&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sb"&gt;`Subscription completed for table '&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;tableName&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;'`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;selectionChanged$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;getTableOnSelectionChanged$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;table&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;notifier$&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;subscriber&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;selectionChanged$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// ... do something with the subscription&lt;/span&gt;

&lt;span class="nx"&gt;notifier$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// unsubscribe from the observable and delete the table&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h1 id="reactive-testing"&gt;Reactive testing&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Reactive testing&lt;/strong&gt; is a way to test observables. It can be done with marble diagrams or by subscribing and asserting values. While it’s more difficult to wrap one’s head around marble diagrams, they are more accurate and can be used to test timing. Subscribing and asserting values is easier to understand but requires more boilerplate and is less accurate.&lt;/p&gt;
&lt;h2 id="marble-testing"&gt;Marble testing&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;We can test streams with expressive &lt;span class="caps"&gt;ASCII&lt;/span&gt; representations of marble diagrams.&lt;/li&gt;
&lt;li&gt;This allows for greater test accuracy of values and timing.&lt;/li&gt;
&lt;li&gt;It requires quite a bit of setup.&lt;/li&gt;
&lt;li&gt;A dash &lt;code&gt;-&lt;/code&gt; represents a frame of virtual time.&lt;/li&gt;
&lt;li&gt;Any character from the set &lt;code&gt;[a-z0-9]&lt;/code&gt; represents an emitted value.&lt;/li&gt;
&lt;li&gt;Errors are represented with a &lt;code&gt;#&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;()&lt;/code&gt; represent synchronous groupings.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;|&lt;/code&gt; represents the completion of the stream.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="example"&gt;Example&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'rxjs'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;TestScheduler&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'rxjs/testing'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;testScheduler&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;TestScheduler&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;actual&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;expected&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;actual&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;expected&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'testing async behavior'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'should test asynchronous operations'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;testScheduler&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;helpers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;expectObservable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;helpers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;source$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;from&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;final&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;source$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;expected&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'1s (abc|)'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;expectObservable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;final&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toBe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;expected&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="subscribe-and-assert-testing"&gt;Subscribe and assert testing&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Less setup required.&lt;/li&gt;
&lt;li&gt;Can use typical testing APIs and testing patterns.&lt;/li&gt;
&lt;li&gt;Because this runs outside the test scheduler, we must manage async test completion.&lt;/li&gt;
&lt;li&gt;Requires more boilerplate for assertions with multiple items.&lt;/li&gt;
&lt;li&gt;Hard to accurately test timing.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="example_1"&gt;Example&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;toArray&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'rxjs'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'testing with subscribe and assert pattern'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'compare emitted values on completion'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;source$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;final&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;source$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;5&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;toArray&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;expected&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;15&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kr"&gt;final&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;actual&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;actual&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;expected&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h1 id="tips-and-tricks"&gt;Tips and tricks&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Using &lt;code&gt;finalize&lt;/code&gt; to execute side effects on completion.&lt;ul&gt;
&lt;li&gt;Do not put side effects to run inside the &lt;code&gt;complete&lt;/code&gt; function as it is not called when manually unsubscribing or when an error occurs.&lt;/li&gt;
&lt;li&gt;Instead, we can add the &lt;code&gt;finalize&lt;/code&gt; operator tacked onto the end of the pipeline.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Extract common operator logic into standalone functions.&lt;ul&gt;
&lt;li&gt;These functions will accept an observable source and return a new observable. See &lt;a href="#creating-a-custom-operator"&gt;Creating a custom operator&lt;/a&gt; for an example.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Use combination operators to access state from secondary streams.&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;withLatestFrom(store$)&lt;/code&gt; to retrieve the current state. This works when subscribing to a BehaviorSubject which will have emitted the value by the time it’s needed but may be a source of headaches if subscribing to a regular Subject since the last value will not have been emitted by the time the subscription happens.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Automate observable cleanup with &lt;code&gt;takeUntil&lt;/code&gt; and &lt;code&gt;Subjects&lt;/code&gt;.&lt;ul&gt;
&lt;li&gt;While we can manually unsubscribe from observables and even unsubscribe from multiple observables at once by having a single subscription to which we add more subscriptions and then unsubscribe from, it is easier to react to a value emitted from a &lt;code&gt;Subject&lt;/code&gt; like &lt;code&gt;onDestroy$&lt;/code&gt; by appending &lt;code&gt;takeUntil(onDestroy$)&lt;/code&gt; to the pipeline. Whenever &lt;code&gt;onDestroy$.next()&lt;/code&gt; is called, any subscription depending on it will unsubscribe automatically, then &lt;code&gt;onDestroy$.complete()&lt;/code&gt; will clean up unused resources.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Use partition and filter for conditional logic.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;filter&lt;/code&gt; can be very useful when a single type of output is expected, filtering values before they reach the end of the stream.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;partition&lt;/code&gt; will return two observables, which we can destructure. The first one will filter and catch emissions that match our condition and the other stream will contain the values that didn’t match the condition. This is useful to avoid creating two different streams when there’s an &lt;code&gt;if&lt;/code&gt;/&lt;code&gt;else&lt;/code&gt; situation where two types of outputs would be expected.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h1 id="conclusion"&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;RxJS is a powerful yet complex toolkit for managing asynchronous data flows. While the learning curve can be steep, the benefits are significant for reactive web apps and complex logic with many asynchronous operations. With practice, RxJS makes it possible to write declarative code that reacts to real-time data updates. By modeling everything as streams of data and applying transformations, RxJS helps tackle challenging programming tasks in a maintainable way. While it takes effort to master, reactive programming with RxJS might just be an essential skill for modern JavaScript/TypeScript developers working on reactive web applications!&lt;/p&gt;
&lt;h2 id="resources-and-references"&gt;Resources and references&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://learn.microsoft.com/en-us/office/dev/add-ins/excel/?view=excel-js-preview"&gt;Excel add-ins documentation&lt;/a&gt;, Microsoft&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.learnrxjs.io/"&gt;Learn RxJS&lt;/a&gt;, Learn RxJS&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rxjs.dev/"&gt;RxJS - Reactive Extensions Library for JavaScript&lt;/a&gt;, RxJS&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=lkUrkNdczpI&amp;amp;list=PLj2oFNVaxfJ8nRFUA2CLyt8TymA0_vQux&amp;amp;index=1"&gt;RxJS &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; Reactive Programming&lt;/a&gt;, Josh Ribakoff&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rxjs.dev/guide/testing/marble-testing"&gt;RxJS Marbles - Testing&lt;/a&gt;, RxJS&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rxmarbles.com/"&gt;RxJS Marbles&lt;/a&gt;, RxJS Marbles&lt;/li&gt;
&lt;/ul&gt;</content><category term="tools"></category><category term="functional-programming"></category><category term="reactive-programming"></category><category term="rxjs"></category><category term="typescript"></category></entry><entry><title>Book summary: Refactoring UI</title><link href="https://www.sglavoie.com/posts/2023/09/09/book-summary-refactoring-ui/" rel="alternate"></link><published>2023-09-09T17:56:00-06:00</published><updated>2023-09-09T17:56:00-06:00</updated><author><name>Sébastien Lavoie</name></author><id>tag:www.sglavoie.com,2023-09-09:/posts/2023/09/09/book-summary-refactoring-ui/</id><summary type="html">&lt;p&gt;&lt;a href="https://www.refactoringui.com/"&gt;Refactoring &lt;span class="caps"&gt;UI&lt;/span&gt;&lt;/a&gt; provides guidance for non-designers on how to create polished, professional visual interfaces without formal graphic design&amp;nbsp;skills.&lt;/p&gt;</summary><content type="html">
&lt;hr/&gt;
&lt;h1 id="introduction"&gt;Introduction&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;It covers core principles like establishing consistent systems for recurring elements such as spacing and typography.&lt;/li&gt;
&lt;li&gt;It advises generous use of white space and thoughtful visual hierarchy.&lt;/li&gt;
&lt;li&gt;Steps for adding depth through lighting, shadows, and layers are outlined.&lt;/li&gt;
&lt;li&gt;Recommendations are provided for working with images and illustrations effectively.&lt;/li&gt;
&lt;li&gt;Tips on elevating default elements and breaking conventions to avoid typical, cookie-cutter designs are included.&lt;/li&gt;
&lt;li&gt;Studying other designers’ work and unintuitive decisions is encouraged to expand one’s skills.&lt;/li&gt;
&lt;li&gt;The goal is to equip readers with knowledge to thoughtfully craft interfaces that appear purposefully designed without simply mimicking common graphical tropes.&lt;/li&gt;
&lt;li&gt;By learning fundamental visual design concepts tailored to user interfaces, anyone can create clean, functional, and visually engaging digital experiences.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h1 id="starting-from-scratch"&gt;Starting from scratch&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Start with a feature, not a layout&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Design the shell and navigation later once you know what features you need.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Detail comes later&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Design with a big sharpie.&lt;/li&gt;
&lt;li&gt;Design in grayscale to use spacing, contrast and size to do the heavy lifting.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Don’t over-invest&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Go with low-fidelity sketches and wireframes first to move fast. Don’t get bogged down with details like fonts and colors early on.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Don’t design too much&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Work in cycles&lt;/strong&gt;: design a feature simply, build it, fix errors.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Be a pessimist&lt;/strong&gt;: expect it to be hard to build, and postpone building it (e.g., commenting system without attachments at first).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="choose-a-personality"&gt;Choose a personality&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Font choice&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Elegant/classic&lt;/em&gt;: serif&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Playful&lt;/em&gt;: Sans-serif&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Plain&lt;/em&gt;: neutral sans-serif&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Color&lt;ul&gt;
&lt;li&gt;Blue: safe and familiar, good overall pick.&lt;/li&gt;
&lt;li&gt;Gold: expensive, sophisticated.&lt;/li&gt;
&lt;li&gt;Pink: more fun, less serious.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Border radius&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Small&lt;/em&gt; — neutral, not much personality.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Large&lt;/em&gt; — more playful.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;None&lt;/em&gt; — more serious/formal.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Stay consistent&lt;/strong&gt; — either rounded or not, same everywhere.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Language&lt;ul&gt;
&lt;li&gt;Choose the right words for the desired tone.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Decide what you actually want&lt;ul&gt;
&lt;li&gt;Look at the websites your expected customers use? Serious, then that’s the feel. Playful? Then that.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="limit-your-choices"&gt;Limit your choices&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Define systems in advance&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Have a working palette color and limit yourself to it.&lt;/li&gt;
&lt;li&gt;Use a type scale to avoid picking specific font sizes.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Designing by process of elimination.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Systematize&lt;/strong&gt; as much as possible to avoid repetitive low-level decisions.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h1 id="hierarchy"&gt;Hierarchy&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Visual hierarchy refers to how elements appear in importance relative to one another.&lt;/li&gt;
&lt;li&gt;Don’t let &lt;span class="caps"&gt;HTML&lt;/span&gt; semantics dictate visual styling — style based on visual hierarchy.&lt;/li&gt;
&lt;li&gt;Size isn’t everything. Bold font communicates importance. &lt;em&gt;De-emphasize&lt;/em&gt; secondary/tertiary information to highlight the most important elements.&lt;/li&gt;
&lt;li&gt;Rely on &lt;em&gt;font weight&lt;/em&gt; and &lt;em&gt;color&lt;/em&gt;, not just font size, to create hierarchy.&lt;/li&gt;
&lt;li&gt;Limit yourself to &lt;em&gt;2-3 colors&lt;/em&gt; and font weights to define hierarchy.&lt;/li&gt;
&lt;li&gt;On colored backgrounds, pick a color with similar hue but lower saturation/lightness rather than just making text gray.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Avoid label&lt;/strong&gt;: value formats — use formats, context, and combined labels/values for clarity without labels.&lt;/li&gt;
&lt;li&gt;Treat labels as secondary content when needed — smaller, lower contrast, lighter weight.&lt;/li&gt;
&lt;li&gt;De-emphasize competing elements instead of just emphasizing the key element.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Combine labels and values&lt;/em&gt;: e.g., instead of “&lt;em&gt;In stock: 12&lt;/em&gt;“, use “&lt;em&gt;12 left in stock&lt;/em&gt;“.&lt;/li&gt;
&lt;li&gt;Treat labels as supporting content.&lt;/li&gt;
&lt;li&gt;Design buttons based on hierarchy, not just semantics. Primary/destructive actions don’t always need prominence.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h1 id="layout-and-spacing"&gt;Layout and spacing&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Start with too much white space&lt;/strong&gt;, then remove until happy — often ends up being “just enough”.&lt;/li&gt;
&lt;li&gt;Compact layouts have their place but should be a deliberate choice, not the default.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Establish a spacing and sizing system&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;A linear scale won’t work&lt;/li&gt;
&lt;li&gt;Create a constrained spacing/sizing system based on a base unit (like &lt;code&gt;16px&lt;/code&gt;) to work faster with more consistency.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Don’t feel the need to fill the whole screen&lt;/em&gt; — give elements only the space they need.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Grids are overrated&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Not all elements should be fluid&lt;/li&gt;
&lt;li&gt;Don’t shrink an element until you need to.&lt;/li&gt;
&lt;li&gt;Grids can bring order but don’t have to dictate every layout decision.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Balance layouts in columns&lt;/em&gt; instead of just making things wider.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Relative sizing doesn’t scale&lt;/em&gt;.&lt;ul&gt;
&lt;li&gt;Fix element widths when flexibility isn’t needed.&lt;/li&gt;
&lt;li&gt;Scale elements independently — don’t rely on relative units like &lt;code&gt;em&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Avoid ambiguous spacing&lt;/strong&gt;: increase spacing between groups and reduce spacing within groups to show relationships.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h1 id="text"&gt;Text&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Establish a constrained type scale&lt;/strong&gt; to speed up font size decisions and add consistency. Avoid strict modular scales.&lt;/li&gt;
&lt;li&gt;Use &lt;em&gt;pixel&lt;/em&gt; or &lt;code&gt;rem&lt;/code&gt; units — not &lt;code&gt;em&lt;/code&gt; — to guarantee sizes match the scale.&lt;/li&gt;
&lt;li&gt;For &lt;span class="caps"&gt;UI&lt;/span&gt; design, &lt;em&gt;pick scale values by hand&lt;/em&gt; instead of using a mathematical ratio.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Use high quality fonts&lt;/strong&gt; — safe bets are neutral sans-serifs and system fonts.&lt;/li&gt;
&lt;li&gt;Use the system stack if not sure: &lt;code&gt;-apple-system, Segoe UI, Roboto, Noto Sans, Ubuntu, Cantarell, Helvetica Neue;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Favor fonts with &lt;em&gt;5+ weights&lt;/em&gt; and optimized for legibility.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Keep line length between 45-75 characters&lt;/strong&gt; (20-35 &lt;code&gt;em&lt;/code&gt;) for optimal readability.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Align mixed font sizes by their baselines&lt;/strong&gt;, not centers.&lt;/li&gt;
&lt;li&gt;Use taller line-heights for small text and shorter line-heights for large text.&lt;/li&gt;
&lt;li&gt;Subtly emphasize links in UIs, no need for high contrast colors.&lt;/li&gt;
&lt;li&gt;Left align most text, right align numbers in tables. Justify only with hyphenation.&lt;/li&gt;
&lt;li&gt;Don’t center long form text.&lt;/li&gt;
&lt;li&gt;Tighten letter-spacing for headlines set in text faces. Loosen letter-spacing for all-caps.&lt;/li&gt;
&lt;li&gt;Not all links need to be emphasized boldly, especially in UIs where there is plenty of interactivity.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h1 id="colors"&gt;Colors&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;span class="caps"&gt;HSL&lt;/span&gt;&lt;/strong&gt; (&lt;em&gt;hue&lt;/em&gt;, &lt;em&gt;saturation&lt;/em&gt;, &lt;em&gt;lightness&lt;/em&gt;) is more intuitive to the human eye: use it instead of &lt;strong&gt;&lt;span class="caps"&gt;HEX&lt;/span&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;span class="caps"&gt;RGB&lt;/span&gt;&lt;/strong&gt;.&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Hue&lt;/em&gt; is the color position on the color wheel. 0° is red, 120° is green, and 240° is blue.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Saturation&lt;/em&gt; represents the vividness. 0% is grey while 100% is vibrant and intense.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Lightness&lt;/em&gt; measures how close a closer is to black (0%) or white (100%), where 50% is the pure color.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;span class="caps"&gt;HSL&lt;/span&gt;&lt;/strong&gt; is not the same as &lt;strong&gt;&lt;span class="caps"&gt;HSB&lt;/span&gt;&lt;/strong&gt; (&lt;code&gt;lightness != brightness&lt;/code&gt;). In &lt;strong&gt;&lt;span class="caps"&gt;HSB&lt;/span&gt;&lt;/strong&gt;, 0% brightness is always black but 100% brightness is white when saturation is set to 0%.&lt;ul&gt;
&lt;li&gt;With 100% saturation in both &lt;span class="caps"&gt;HSL&lt;/span&gt; and &lt;span class="caps"&gt;HSB&lt;/span&gt;, 100% brightness is equivalent to 50% lightness (pure color).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Don’t rely solely on color to convey information&lt;/em&gt; - support it with other indicators.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="a-good-color-palette"&gt;A good color palette&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;You need more colors than you think - aim for &lt;em&gt;10+ shades&lt;/em&gt; of &lt;em&gt;greys&lt;/em&gt;, &lt;em&gt;primary colors&lt;/em&gt;, and &lt;em&gt;accent colors&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Grey&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;There is a lot of grey in UIs: between &lt;em&gt;8-10 shades of grey&lt;/em&gt; is a good array of options to pick from. Use very dark grey instead of true black so it looks more natural.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Primary colors&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;em&gt;1 or 2 is great, with 5-10 different shades&lt;/em&gt; (e.g., Facebook is basically blue). A very light shade is good for a tinted background (e.g., alerts), darker shades work great for text.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Accent colors&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Use sparingly&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Needed to bring &lt;em&gt;semantic meaning&lt;/em&gt;, such as red for danger, yellow for warnings and green for positive trends.&lt;/li&gt;
&lt;li&gt;For a complex &lt;span class="caps"&gt;UI&lt;/span&gt;, can be as many as 10 different colors, each with 5-10 shades.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="building-a-color-palette"&gt;Building a color palette&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Define color shades upfront instead of generating on the fly. Pick base, darkest, lightest, then fill in gaps.&lt;/li&gt;
&lt;li&gt;Don’t rely purely on math to generate shades - trust your eyes and tweak if needed.&lt;/li&gt;
&lt;li&gt;Choose the base color first. This is the color in the middle that light and dark shades are derived from.&lt;/li&gt;
&lt;li&gt;Center: pick a shade that would work well as a button background.&lt;/li&gt;
&lt;li&gt;Extremes: pick the lightness color to work as a background and the darkest to work on top as text to get enough contrast.&lt;/li&gt;
&lt;li&gt;Repeat the process to pick the remaining colors in between. &lt;em&gt;9 shades is a good sweet spot as it divides cleanly&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;For grays, the base color doesn’t matter nearly as much: same process.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="perceived-brightness"&gt;Perceived brightness&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;In the &lt;span class="caps"&gt;HSL&lt;/span&gt; system, the further away a color is from 50% lightness, the more saturated it should be so it doesn’t look washed out.&lt;/li&gt;
&lt;li&gt;The perceived brightness of a color to the human eye can be calculated as follows:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="math"&gt;$$\frac{{\sqrt{0.299 r^2 + 0.587 g^2 + 0.114 b^2}}}{255}$$&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Green is perceived as more bright than red, which in turn is perceived as more bright than blue. With this data point, we can tweak the perceived brightness of a color by rotating the color wheel towards the desired perceived brightness.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Grays aren’t usually totally desaturated&lt;/em&gt;.&lt;ul&gt;
&lt;li&gt;To make them feel “&lt;em&gt;cool&lt;/em&gt;” saturate them with some blue.&lt;/li&gt;
&lt;li&gt;To make them feel “&lt;em&gt;warm&lt;/em&gt;“, saturate them with yellow or orange.&lt;/li&gt;
&lt;li&gt;The same “&lt;em&gt;saturation curve&lt;/em&gt;” applies to grays: the further away from 50% brightness, the more they should be saturated to avoid looking washed out.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="a-word-on-accessibility"&gt;A word on accessibility&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Instead of having elements like dark-colored pills with a white foreground color, flip the contrast by having light-colored pills with a dark version of the color in the foreground so they won’t grab too much attention.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Rotate the hue to make the color pop more&lt;/strong&gt;. For instance, instead of cranking up the lightness to meet ideal contrast ratios, rotate the hue and possibly keep the saturation high for a vibrant contrast.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Don’t rely on color alone&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Add visual cues (like arrows for upward/downward trends). Designing in grayscale first will help spot these kinds of issues.&lt;/li&gt;
&lt;li&gt;For things like a graph, playing with contrast will produce clearer results.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h1 id="depth"&gt;Depth&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Mimic how light works in the real world.&lt;ul&gt;
&lt;li&gt;Emulate a light source coming from above to make elements appear raised or inset.&lt;/li&gt;
&lt;li&gt;For instance, with a button, if light comes from above, then the top should be lighter (e.g., &lt;code&gt;box-shadow inset&lt;/code&gt;) than the bottom (&lt;code&gt;box-shadow&lt;/code&gt;, casting shadow only below).&lt;/li&gt;
&lt;li&gt;For elements that are “inset” (I.e., more depth in the center), the opposite effect should happen: more light reaches the bottom part (vertical &lt;code&gt;box-shadow&lt;/code&gt;, going up) than the top part (&lt;code&gt;box-shadow inset&lt;/code&gt; such that it casts some shadow towards the bottom).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Don’t overdo it&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="shadows"&gt;Shadows&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Use shadows to convey elevation&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;When something appears to be raised from the background (e.g., bigger &lt;code&gt;drop-shadow&lt;/code&gt;), &lt;em&gt;it attracts the user’s focus&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Small shadows&lt;/em&gt; are useful to attract attention to the primary action to be performed.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Medium shadows&lt;/em&gt; are useful for things like a dropdown so it looks separate from the background.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Large shadows&lt;/em&gt; are great for modals.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;5 options&lt;/em&gt; is usually plenty.&lt;/li&gt;
&lt;li&gt;Can be used for interactivity, like when dragging a row from a table.&lt;/li&gt;
&lt;li&gt;A button can feel like it’s being “pressed” by reducing its shadow on click (i.e., it gets closer to the page or farther away from the user).&lt;/li&gt;
&lt;li&gt;Casting shadows&lt;ul&gt;
&lt;li&gt;To simulate a shadow cast by &lt;em&gt;direct light&lt;/em&gt; (e.g., a long shadow behind a plant getting some sunlight), use a larger, more diffuse and subtle shadow.&lt;/li&gt;
&lt;li&gt;To simulate a shadow cast by &lt;em&gt;ambient light&lt;/em&gt; (e.g., the shadow right below the plant’s pot where light can’t hardly reach), use a narrow and darker shadow.&lt;/li&gt;
&lt;li&gt;Apply both types of shadow casting at once to create visually compelling effects.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Define a fixed set of shadows as an elevation system for consistency.&lt;/li&gt;
&lt;li&gt;Even flat designs can have depth&lt;ul&gt;
&lt;li&gt;Flat design does not convey depth with shadows and gradients.&lt;/li&gt;
&lt;li&gt;Create depth with color: lighter colors feel closer.&lt;/li&gt;
&lt;li&gt;Can use short, offset shadows with no blur at all.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Overlap elements to create layers&lt;ul&gt;
&lt;li&gt;E.g., position a block with a negative margin so it appears on top of two different sections.&lt;/li&gt;
&lt;li&gt;For smaller elements like avatars, an invisible border around it can make it pop better.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h1 id="images-and-contrast"&gt;Images and contrast&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Images&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Use high quality photos&lt;/em&gt; - hire a pro or use stock sites for generics. Don’t expect good results from phone pics.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Text needs consistent contrast&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Add an overlay to background images to get readable headlines.&lt;/li&gt;
&lt;li&gt;Lower the image contrast. Adjust the brightness to compensate.&lt;/li&gt;
&lt;li&gt;Colorize the image with a single color.&lt;/li&gt;
&lt;li&gt;Use text shadows instead of overlays to preserve image dynamics.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h1 id="scale"&gt;Scale&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Don’t scale up icons&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Even for SVGs, they will lack detail if they were designed correctly at a smaller scale: use a more detailed icon instead.&lt;/li&gt;
&lt;li&gt;If updating the icon is not an option, enclose it inside another shape (e.g., a circle with a background color) to occupy more space.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Don’t scale down screenshots&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Details will be distorted and hard to read.&lt;/li&gt;
&lt;li&gt;Either use a presentation from a smaller device (e.g., the tablet version on a desktop) or take a partial screenshot (e.g., “zoom in” effect with a circle or simply crop the original image).&lt;/li&gt;
&lt;li&gt;If a more complex &lt;span class="caps"&gt;UI&lt;/span&gt; needs to be presented, simplify the original image so the user doesn’t try to read a 4px font size but instead sees simpler shapes.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Don’t scale down icons&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;E.g. for a favicon, redraw a simplified version instead: details will look fuzzy at a small size.&lt;/li&gt;
&lt;li&gt;User-submitted content (e.g., Instagram feed)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Control the size and shape&lt;/em&gt;: crop images to keep the aspect ratio of containers  so they don’t disturb layout (e.g., background-size: cover).&lt;/li&gt;
&lt;li&gt;Add inner shadows or borders to user images to prevent background bleed.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h1 id="finishing-touches"&gt;Finishing touches&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Use icons instead of bullets in a bulleted list.&lt;/li&gt;
&lt;li&gt;Play with size and colors. E.g., you can have huge quotes around the block of text representing a testimonial.&lt;/li&gt;
&lt;li&gt;Links deserve special styling.&lt;/li&gt;
&lt;li&gt;Use custom checkboxes and radio buttons in forms: integrate the brand’s primary color(s).&lt;/li&gt;
&lt;li&gt;Add color with accent borders, e.g. across the top of a card element, when highlighting active elements in the &lt;span class="caps"&gt;UI&lt;/span&gt; or to the left of alert messages.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Decorate backgrounds&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;Change the background color. Works great for different page sections.&lt;/li&gt;
&lt;li&gt;Can use gradients: use two hues that are within 30˚ of each other.&lt;/li&gt;
&lt;li&gt;Use repeating patterns.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Consider the empty state carefully&lt;/strong&gt;, especially when the user is meant to fill the &lt;span class="caps"&gt;UI&lt;/span&gt; with data.&lt;ul&gt;
&lt;li&gt;Prioritize empty states with illustrations and clear calls to action.&lt;/li&gt;
&lt;li&gt;I.e., a contact page with no contacts should feel welcoming, with some icon and button to add a contact instead of a blank page with an error-like statement.&lt;/li&gt;
&lt;li&gt;Similarly, things like dashboard may present a bunch of options that won’t apply until there is something to show: simplify the user experience.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Use less borders&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Use box shadows, spacing, and color instead of borders to distinguish elements.&lt;/li&gt;
&lt;li&gt;Have two background colors for containers (e.g., darker footer that looks separate from the main content).&lt;/li&gt;
&lt;li&gt;Replace borders with additional spacing.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Make components more exciting&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;E.g., a table  may not need all its columns if a particular column does not need to be sorted and could instead be part of another one (e.g., combining a dollar amount with a plan type or a person’s name with its title).&lt;/li&gt;
&lt;li&gt;Radio buttons could be cards instead if they are an important part of the &lt;span class="caps"&gt;UI&lt;/span&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h1 id="next-level"&gt;Next level&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Look for unintuitive decisions in designs you admire to find new ideas.&lt;/li&gt;
&lt;li&gt;Rebuild interfaces you love to discover small details that make them exceptional.&lt;/li&gt;
&lt;li&gt;Study others to build a solid foundation.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h1 id="conclusion"&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;The concepts covered in this book demonstrate that effective visual design does not require innate artistic talent or formal training. By approaching interfaces methodically, establishing constraints through systems for recurring elements, and learning to strategically apply principles like visual hierarchy, white space, and depth cues, anyone can create designs that appear polished and purposeful. While internalizing these fundamentals does take practice, the ideas presented remove much of the subjective, nuanced expertise needed for things like picking complementary colors or balancing composition in illustrations.&lt;/p&gt;
&lt;p&gt;By focusing on interfaces rather than free-form graphical work, the required skills become more structured and intentional choices drive outcomes. While studying formally can provide more breadth, the core principles in this text are enough to equip non-designers with the ability to build clean, intuitive, and aesthetically pleasing digital products. By implementing the recommendations covered, engineers and others new to design can gain confidence in their interface design skills. A great, concise read!&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: '#007bff ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="learnings"></category><category term="best practices"></category><category term="books"></category><category term="design"></category><category term="refactoring"></category><category term="ui"></category></entry><entry><title>Building a task planner with React Native: an academic journey</title><link href="https://www.sglavoie.com/posts/2023/07/30/building-task-planner-react-native/" rel="alternate"></link><published>2023-07-30T18:44:00-06:00</published><updated>2023-07-30T18:44:00-06:00</updated><author><name>Sébastien Lavoie</name></author><id>tag:www.sglavoie.com,2023-07-30:/posts/2023/07/30/building-task-planner-react-native/</id><summary type="html">&lt;p&gt;After having &lt;a href="https://www.sglavoie.com/posts/2023/03/04/reviewing-the-process-of-building-a-first-React-Native-application/"&gt;built a somewhat original habit tracker&lt;/a&gt;, I was keen on coming up with a solution to a much more common problem: task management. This is the story of how I built a task planner with React Native, explored from an academic perspective first and&amp;nbsp;foremost.&lt;/p&gt;</summary><content type="html">
&lt;hr/&gt;
&lt;h1 id="preamble"&gt;Preamble&lt;/h1&gt;
&lt;p&gt;For my last assignment in a &lt;a href="https://www.london.ac.uk/courses/computer-science"&gt;BSc in Computer Science at the University of London&lt;/a&gt;, I decided to get involved in the world of task management to tackle one of the most common challenges usually offered to programmers, but with a twist based on scientific evidence. The result ended up being a cross-platform mobile application built with React Native, named ProductiviDo. Due to intellectual property concerns, I will not be able to share the source code of the application, but I hope you will nonetheless find joy in reading about the process of building it through the lens of the report I submitted for the assignment. For a complete list of references and appendices in context, please refer to &lt;a href="https://www.sglavoie.com/files/posts/0039_productivido/productivido.pdf"&gt;the original report&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="App icon ProductiviDo" src="https://www.sglavoie.com/images/posts/0039_productivido/app_icon.png"/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="1-introduction"&gt;1 Introduction&lt;/h1&gt;
&lt;p&gt;The world needs a new kind of task manager, just like &lt;strong&gt;ProductiviDo&lt;/strong&gt;, which comes to life through the “&lt;em&gt;task manager mobile app&lt;/em&gt;” template provided for the Mobile Development module taught at Goldsmiths, University of London.&lt;/p&gt;
&lt;h2 id="11-inspiration-the-main-contenders"&gt;1.1 Inspiration: the main contenders&lt;/h2&gt;
&lt;figure&gt;
&lt;a href="https://www.sglavoie.com/images/posts/0039_productivido/inspiration.png"&gt;&lt;img alt="inpiration main contenders" class="max-size-img-post" src="https://www.sglavoie.com/images/posts/0039_productivido/inspiration.png"/&gt;&lt;/a&gt;
&lt;figcaption&gt;Inspiration.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;There are a few wonderful products that deliver a good experience. Desirable features range from filters, labels and reminders to custom views and breadcrumbs. With &lt;strong&gt;Todoist&lt;/strong&gt;, tasks can be quickly captured and will be added to an “&lt;em&gt;Inbox&lt;/em&gt;” section. Once categorized, tasks are organized into projects, sections and sub-tasks.&lt;/p&gt;
&lt;p&gt;Although &lt;strong&gt;Todoist&lt;/strong&gt; recently added a board view, &lt;strong&gt;ClickUp&lt;/strong&gt; takes it to the next level by labelling columns. In &lt;strong&gt;ClickUp&lt;/strong&gt;, tasks are organized into multiple levels of hierarchies, down to task dependency, where sub-tasks depend on parent tasks.&lt;/p&gt;
&lt;figure&gt;
&lt;a href="https://www.sglavoie.com/images/posts/0039_productivido/clickup-overview.png"&gt;&lt;img alt="clickup overview" class="max-size-img-post" src="https://www.sglavoie.com/images/posts/0039_productivido/clickup-overview.png"/&gt;&lt;/a&gt;
&lt;figcaption&gt;ClickUp overview.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Trello&lt;/strong&gt; takes an entirely different approach, where planning happens by moving cards onto different columns horizontally and re-ordering them vertically. Even though it has a concept of workspaces which is a group of boards, all the organization of a project usually takes place within a single board which contains multiple columns, each containing multiple cards.&lt;/p&gt;
&lt;p&gt;Planning in &lt;strong&gt;Airtable&lt;/strong&gt; is much more freestyle with a spreadsheet-like system. There is a Gantt view in the paid plan to visualize tasks over time. Using &lt;strong&gt;Airtable&lt;/strong&gt; feels like interacting directly with a &lt;span class="caps"&gt;SQL&lt;/span&gt; database with its heavily grid-focused appearance.&lt;/p&gt;
&lt;figure&gt;
&lt;a href="https://www.sglavoie.com/images/posts/0039_productivido/airtable-project.png"&gt;&lt;img alt="airtable project" src="https://www.sglavoie.com/images/posts/0039_productivido/airtable-project.png" style="max-width: 500px"/&gt;&lt;/a&gt;
&lt;figcaption&gt;Airtable project.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Finally, &lt;strong&gt;Asana&lt;/strong&gt; shines mostly within a team setting and mainly works with the core concept of projects, which themselves can contain tasks, sub-tasks and even sub-projects.&lt;/p&gt;
&lt;figure&gt;
&lt;a href="https://www.sglavoie.com/images/posts/0039_productivido/asana-calendar.png"&gt;&lt;img alt="asana calendar" src="https://www.sglavoie.com/images/posts/0039_productivido/asana-calendar.png" style="max-width: 500px"/&gt;&lt;/a&gt;
&lt;figcaption&gt;Asana calendar.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="12-drawbacks-of-existing-solutions"&gt;1.2 Drawbacks of existing solutions&lt;/h2&gt;
&lt;figure&gt;
&lt;a href="https://www.sglavoie.com/images/posts/0039_productivido/drawbacks.png"&gt;&lt;img alt="drawbacks main contenders" class="max-size-img-post" src="https://www.sglavoie.com/images/posts/0039_productivido/drawbacks.png"/&gt;&lt;/a&gt;
&lt;figcaption&gt;Drawbacks.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;There are usability issues across all these mobile apps (and others) for different reasons. Most popular task managers have a limited search functionality, making it hard to find what one needs quickly unless a good organizational system has been consciously put in place beforehand. Crucially, such applications do not address the fact that unimportant tasks accumulate over time and provide no system to focus on what matters to avoid the fate of having “&lt;em&gt;41% of to-do items […] never completed&lt;/em&gt;“.&lt;/p&gt;
&lt;p&gt;A second point worth mentioning is that a calendar integration is not a core feature deeply integrated into these apps. For instance, &lt;strong&gt;Todoist&lt;/strong&gt; offers a 2-way sync with Google Calendar, but tags, labels, priorities and areas of responsibilities are not shown nor taken into account in the calendar. Some task managers will provide their own built-in set of calendar features that partially solve the problem of being able to navigate a complete schedule in a breeze. However, none of these applications really allow efficient scheduling within the calendar. Some allow the user to add or modify events in the calendar, but this remains a slow process working with reduced functionality.&lt;/p&gt;
&lt;p&gt;With regards to organization, all these applications are well-suited to manage tasks but when it comes to “&lt;em&gt;time boxing&lt;/em&gt;” or “&lt;em&gt;time blocking&lt;/em&gt;“, they will show every single task in the calendar view. This is impractical at scale as it quickly becomes overwhelming with dense information, a setup encouraging fragmented work and multitasking. Fragmented work caused by context switching has been shown to have a negative impact on productivity and on output quality while multitasking will lead to “&lt;em&gt;experiencing more stress, higher frustration, time pressure and effort&lt;/em&gt;“.&lt;/p&gt;
&lt;h2 id="13-market-overview"&gt;1.3 Market overview&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;ProductiviDo&lt;/strong&gt; will target in its first iteration Google Calendar because this product can be consumed from a plethora of desktop and mobile applications and there are about 4.3 billion Google users. Once data is integrated into Google Calendar, it can be consumed by different applications such as Apple Calendar, Zoom, Slack or other Google products, including Google Docs.&lt;/p&gt;
&lt;p&gt;The number of smartphone users will increase by almost 23% over the next 5 years, forecasting more than a doubling over a 10-year period (2016–2026). Task management software is going upwards of &lt;span class="caps"&gt;USD&lt;/span&gt;$5 billion in market size, the &lt;span class="caps"&gt;CAGR&lt;/span&gt; —&lt;em&gt;compound annual growth rate&lt;/em&gt;— is hovering around 14% and continuously growing. Combining supply and demand, we can see that both are expected to increase drastically over the coming years and that task managers fall into a category of growth market, which is desirable as it clearly indicates there is room for new rivals in the field: this is distinctly the case given that the task management world is still dominated by a few big players, many products have retired over the years (which unsaturates the market) and considering that &lt;strong&gt;ProductiviDo&lt;/strong&gt; solves a real problem —that of staying on top of a growing list of commitments— with an innovative solution not yet implemented elsewhere.&lt;/p&gt;
&lt;h2 id="14-motivation"&gt;1.4 Motivation&lt;/h2&gt;
&lt;p&gt;One reason why &lt;strong&gt;ProductiviDo&lt;/strong&gt; will shine is because calendars are still under-appreciated in existing task managers, yet all major task manager applications integrate them in one way or another. It has been shown through many studies that calendars save time, improve productivity, reduce stress and make it simpler to batch similar activities. Plus, they can be consumed in a myriad of ways with their Application Programming Interfaces (APIs). The problem with using only a calendar without a task manager is that they are inconvenient when dealing with many events or tasks. On the other hand, relying only on task managers makes it difficult to appreciate how useful calendars are when it comes to visualizing one’s schedule from different perspectives such as a weekly or monthly view. Regarding &lt;strong&gt;ProductiviDo&lt;/strong&gt; as a task manager and not only a calendar integration, it will distinguish itself by allowing users to quickly and efficiently record their routine activities. This is because it has been shown that these occupy a good amount of time even for productive people and there is currently no application that really implements a direct solution to this.&lt;/p&gt;
&lt;p&gt;Intelligent prioritization is essential, yet difficult to achieve with existing products. Beyond capturing tasks and categorizing them, this application will feature a prioritization system that will help users focus on their most high-leverage activities with the help of custom sorting algorithms as advocated by Edmond Lau in his book &lt;em&gt;The Effective Engineer&lt;/em&gt;. These will take into consideration aspects such as urgency and importance — in the spirit of the Eisenhower Matrix — as well as deadlines to calculate the impact that completing a task will have. Importantly, the priority matrix is adapted to account for other needed facets, such as when other people are involved in the task dependency chain (delegatees), an adaptation of the “&lt;em&gt;fit&lt;/em&gt;” variable from the Sung Diagram, which is an extension of the Eisenhower Matrix.&lt;/p&gt;
&lt;p&gt;The application will benefit users by providing a built-in planning system that will make it easier to follow a successful schedule. This goes hand in hand with findings illustrating how, in the absence of a mindful review process, users will want to focus on small or unimportant tasks to release dopamine even though they know what would bring them the best outcomes, a real productivity threat leading to a decrease in output and an increase in completion time. Therefore, by offering a system that will encourage users to take better decisions and visualize evidently their highest-leverage tasks in a familiar and useful fashion, &lt;strong&gt;ProductiviDo&lt;/strong&gt; will carve its place in the market by solving unmet needs.&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="2-literature-review"&gt;2 Literature review&lt;/h1&gt;
&lt;h2 id="21-previous-work"&gt;2.1 Previous work&lt;/h2&gt;
&lt;p&gt;As alluded to in section 1.1, the current work found inspiration in well-established task management software. There are numerous alternatives available on the market: only the most well-known and relevant ones for this project will be covered. Evaluating such products in depth goes beyond the scope of this report: key points will be highlighted to justify the need for a new solution.&lt;/p&gt;
&lt;h2 id="211-todoist"&gt;2.1.1 Todoist&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Todoist&lt;/strong&gt; is one of the most popular task management software, with over 20 million users. It is a web-based application that allows users to create tasks, organize them into projects, and assign them to specific dates. It also features a priority system that allows users to sort tasks by importance, and a reminder system that will notify users of upcoming tasks. While &lt;strong&gt;Todoist&lt;/strong&gt; is a very popular solution, it has some shortcomings. Its design is arguably polished, yet its dark theme lacks contrast, recurring tasks don’t show immediately on which schedule they recur and tasks with comments or attachments are difficult to locate. Other functional deficiencies include the fact that the “Upcoming” view shows all tasks from all projects as a large, single list of items without allowing filtering or that the app has a concept of “due date” with no “start date” such that duration is not taken into account nor can be visually represented meaningfully in a calendar. Equally relevant when comparing to what &lt;strong&gt;ProductiviDo&lt;/strong&gt; will offer is the fact that there is no way to apply “time boxing” as there is no calendar view and only a functionally limited Google Calendar integration, task filtering is not intuitive due to the custom query language syntax used by the app and there is no easy way to find recurring or routine tasks without setting up a custom labelling system on one’s own.&lt;/p&gt;
&lt;figure&gt;
&lt;a href="https://www.sglavoie.com/images/posts/0039_productivido/todoist-upcoming-view.png"&gt;&lt;img alt="todoist upcoming view" src="https://www.sglavoie.com/images/posts/0039_productivido/todoist-upcoming-view.png" style="max-width: 500px"/&gt;&lt;/a&gt;
&lt;figcaption&gt;Todoist upcoming view.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="212-trello"&gt;2.1.2 Trello&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Trello&lt;/strong&gt; lies on the other end of the feature creep spectrum when compared to &lt;strong&gt;ClickUp&lt;/strong&gt; and can be seen as possessing an even more basic set of capabilities than &lt;strong&gt;Todoist&lt;/strong&gt;. With its simple and uncluttered drag &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; drop interface, &lt;strong&gt;Trello&lt;/strong&gt; is much more intuitive than a more sophisticated and flexible option such as &lt;code&gt;Todo.txt&lt;/code&gt; which can be technically extended at will and can be operated from the command-line on a desktop computer or from a multitude of third-party applications on mobile devices. &lt;strong&gt;Trello&lt;/strong&gt;‘s simplicity comes at a cost, however: it is not uncommon to lose track of “cards” because one must swipe horizontally in order to navigate the &lt;span class="caps"&gt;UI&lt;/span&gt;; and very little information fits on the screen at once, where only a fraction of a “board” with up to a few “cards” is shown. There is a copious amount of calendar integrations available for &lt;strong&gt;Trello&lt;/strong&gt;, yet the core of the issue that &lt;strong&gt;ProductiviDo&lt;/strong&gt; aims to address remains unsolved: the app’s metadata is not accessible from Google Calendar (e.g., priority, area of work, task status, etc.) and the app does not provide a way to visualize the user’s tasks in a convenient calendar view as it only “&lt;em&gt;displays all cards with due dates by month&lt;/em&gt;” and only when using one of its paid feature, called “Power Ups”.&lt;/p&gt;
&lt;figure&gt;
&lt;a href="https://www.sglavoie.com/images/posts/0039_productivido/trello-boards.png"&gt;&lt;img alt="trello boards" src="https://www.sglavoie.com/images/posts/0039_productivido/trello-boards.png" style="max-width: 500px"/&gt;&lt;/a&gt;
&lt;figcaption&gt;Trello boards.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="22-contributions-from-the-literature-and-gaps-being-filled"&gt;2.2 Contributions from the literature and gaps being filled&lt;/h2&gt;
&lt;h3 id="221-initial-design-justifications"&gt;2.2.1 Initial design justifications&lt;/h3&gt;
&lt;p&gt;Amongst a panoply of scientific papers on the subject of task management, the quintessential work of Bellotti et al. serves as an excellent entrypoint listing a set of design requirements to be expected in an efficiently conceived task manager. Of particular relevance to the creation of &lt;strong&gt;ProductiviDo&lt;/strong&gt; are the needs for the app to be “&lt;em&gt;instantly on&lt;/em&gt;” with the option to have “&lt;em&gt;no formal task description&lt;/em&gt;” and a “&lt;em&gt;mechanism for handling stale to-dos of low importance&lt;/em&gt;“. The authors highlight that the main issue is “&lt;em&gt;making sure that the important tasks get done&lt;/em&gt;“, which led to further research being exposed on the topic of prioritization matrices. The authors also advocate for task states, location, social relations, notes and time constraints to be captured, all of which are taken into account in the design. In a more recent study looking at the importance of prioritizing tasks, further evidence suggested that a prioritization model should be adopted (e.g., &lt;span class="caps"&gt;HI&lt;/span&gt;/&lt;span class="caps"&gt;LO&lt;/span&gt;, &lt;span class="caps"&gt;CARVER&lt;/span&gt; or Carpenter) in a task management system, pointing at the Eisenhower Matrix as a useful framework to use for this very purpose. Other less formal alternatives such as the &lt;span class="caps"&gt;RICE&lt;/span&gt; or &lt;span class="caps"&gt;ICE&lt;/span&gt; frameworks have also been reported to be used with success and could be adapted to this project with their scoring model.&lt;/p&gt;
&lt;p&gt;Another aspect which served to inform the overall direction to take is the well-known fact that humans do not work optimally when multi-tasking as this leads to a high cognitive load in keeping track of different areas of focus or projects. Fragmentation of information in one’s work —which occurs when multitasking— is a problem because people won’t remember where to find the information. Applying this idea of fragmentation to the digital world, it only makes sense that offering too many ways to store and retrieve data (such as with &lt;strong&gt;ClickUp&lt;/strong&gt;) is counterproductive. Furthermore, the ability to customize the &lt;span class="caps"&gt;UI&lt;/span&gt; is a double-edged sword because “&lt;em&gt;users make mistakes and create building blocks with unintended consequences&lt;/em&gt;“. Indeed, if the user interface is cluttered or offers too many bells and whistles, managing the global context of one’s tasks becomes difficult and one inevitably encounters obstacles when trying to juggle with multiple actions at once, because “&lt;em&gt;prospective memory is fallible&lt;/em&gt;“. Hence, simplicity is key to a good task manager (which certainly helps to explain &lt;strong&gt;Todoist&lt;/strong&gt;‘s wild success). While simplification is part of the gamified model —Habitica being one example of a product incorporating many elements of gamification— this model suffers from the “&lt;em&gt;undifferentiated use of rewards&lt;/em&gt;“, leads to “&lt;em&gt;punishments for productivity&lt;/em&gt;“, to “&lt;em&gt;feeling of not being taken seriously&lt;/em&gt;” and cause “&lt;em&gt;negative anticipation&lt;/em&gt;“. Moreover, “&lt;em&gt;people found their standard task manager simpler to use&lt;/em&gt;” and the integration of extrinsic motivational factors such as a reward system “&lt;em&gt;would not excite them to continue being immersed in a gamification application&lt;/em&gt;“. While this form of motivation does not appear to be effective in goal attainment, the literature concludes that “&lt;em&gt;valuing extrinsic goals […] does not seem to increase our happiness, but attaining those goals does&lt;/em&gt;“, adding that giving weight to intrinsic goals (such as personal growth, loving relationships and physical health) and achieving them is a better way to increase happiness. As long as a task manager nourishes intrinsic motivation, it is likely to be effective in helping people to achieve their goals while maintaining optimal psychological health.&lt;/p&gt;
&lt;p&gt;Other approaches were considered, notably the “&lt;em&gt;Binary Priority List&lt;/em&gt;” due to its simplicity when it comes to comparing two elements (such as tasks). However, it lacks flexibility and becomes inefficient as more and more tasks are added because —unlike the famous binary search algorithm— this algorithm requires human intervention to classify tasks, which becomes burdensome faster than &lt;code&gt;O(log n)&lt;/code&gt;. The literature on gamification also linked to sources that revealed solutions to solving procrastination, a self-regulation failure that gamified systems sought to minimize to no avail, which led to identifying a desirable core component of the application: implementation intentions. These can be integrated into the “mental flexibility” facet of “planfulness” —through a technique known as “mental contrasting with implementation intentions” (&lt;span class="caps"&gt;MCII&lt;/span&gt;)— along with temporal orientation and cognitive strategies, all of which improve goal outcomes.&lt;/p&gt;
&lt;h3 id="222-implementation-intentions"&gt;2.2.2 Implementation intentions&lt;/h3&gt;
&lt;p&gt;Implementation intentions have shown their effectiveness in helping people to achieve their goals, the real purpose behind using task managers in the first place. The idea is to create a plan of action for a specific goal, which is then followed by a specific time and place. The plan must be broken down into a series of steps, which are written down in a way that is easy to remember using so-called “if–then plans”. The specific formulation of such plans “&lt;em&gt;produce much more favorable and reliable outcomes than broad intentions to pursue a goal&lt;/em&gt;“. Findings from Bieleke et al. show that implementation intentions are also useful when planning one’s work because they help “&lt;em&gt;evaluate information from a certain perspective&lt;/em&gt;” —which can be verbally recommended to users so they adopt a “&lt;em&gt;certain processing style (e.g., deliberative thought) or perspective (e.g., neutral observer)&lt;/em&gt;“. Their research also highlight the high potential of implementation intentions in reviewing tasks because “&lt;em&gt;participants can strategically adopt a reflective mode of information processing that helps them make more sophisticated decisions when facing uncertainty&lt;/em&gt;“. Other studies show that such “&lt;em&gt;plans to deliberate can be used to increase the likelihood of deliberation and thereby the effective processing of newly available information&lt;/em&gt;“, which further supports the benefits of implementation intentions with regards to planning. To make the planning stage more effective, research also “&lt;em&gt;indicates that having plans that focus on overcoming obstacles are important for maintaining progress and staying on track with one’s goals&lt;/em&gt;“, so this aspect will also be featured when creating tasks in the &lt;strong&gt;“Inscribe”&lt;/strong&gt; step described in section 2.3.1. Once planning has been done, implementation intentions will also prove useful to take action towards accomplishing one’s goals because they lead to “&lt;em&gt;automatic action initiation without further conscious intent&lt;/em&gt;” —surprisingly and encouragingly, even in participants suffering from mild to moderate depression. While this is obviously beneficial during the initial stages of a project or task to overcome procrastination, it is equally important to re-evaluate one’s course of action because sticking to a plan stubbornly “&lt;em&gt;can hinder overall goal performance by causing one to overlook alternative opportunities for achievement&lt;/em&gt;“, amongst other negative consequences. This explains why &lt;strong&gt;ProductiviDo&lt;/strong&gt; encompasses a &lt;strong&gt;“Review”&lt;/strong&gt; step which deals with this particular problem and more, described in section 2.3.4.&lt;/p&gt;
&lt;p&gt;While this self-regulation technique can be applied successfully in the context of a task manager, it bears mentioning that it is not a panacea as it suffers from some limitations, one of which being that “&lt;em&gt;formulating multiple implementation intentions is ineffective when changing unwanted behavior […] due to interference in the enacting phase of the planning process&lt;/em&gt;“. In other words, multiple implementation intentions can compete for attention, which makes one lose focus. To drastically mitigate this issue, &lt;strong&gt;ProductiviDo&lt;/strong&gt; dedicates an entire step to &lt;strong&gt;“Focus”&lt;/strong&gt;, which is described in more detail in section 2.3.3. The &lt;strong&gt;“Review”&lt;/strong&gt; step will help with reducing the number of tasks one has to juggle with while there will be a &lt;strong&gt;“Prioritize”&lt;/strong&gt; step (described in section 2.3.2) to help users decide which tasks to focus on before they get conveniently extracted in the &lt;strong&gt;“Focus”&lt;/strong&gt; step.&lt;/p&gt;
&lt;h3 id="223-calendars-planning-scheduling"&gt;2.2.3 Calendars, planning &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; scheduling&lt;/h3&gt;
&lt;p&gt;Section 1.4 introduced some of the core benefits of using calendars for planning and scheduling, yet scientific examination supplies a treasure trove of additional findings justifying their use alongside a task manager. A study exploring the use of a personal calendar discovered that most interviewees prefer a weekly view to aid with “&lt;em&gt;opportunistic rehearsal&lt;/em&gt;“, a fact that sits well with the need for a reviewing system such as the one proposed in section 2.3.4 as well as the realization that a simple list or Kanban presentation is helpful but not sufficient to get a clear overview of one’s schedule at a glance. The same study made it clear that most users rely on their calendar to store efficiently certain types of information such as the date (97%), time (96%), location (93%) and purpose (69%). Quite convincingly, participants also used their calendar for “&lt;em&gt;tentative event scheduling&lt;/em&gt;“, revealing the need to empty their mind to stay on top of their duties, a need addressed with the &lt;strong&gt;“Inscribe”&lt;/strong&gt; step referred to earlier. This study also emphasized the fact that calendars can be viewed on the web from most devices or even printed for offline reference. Finally, this paper also found that a majority of users (63%) reported using reminders and alarms with the help of their calendar.&lt;/p&gt;
&lt;p&gt;Even though almost two thirds of working professional consider using a calendar application to be very important in their workflow, it was also found in another study that “&lt;em&gt;it is inconvenient to schedule on calendar apps&lt;/em&gt;“, which supports the use of task managers for that specific necessity since they can alter tasks brilliantly and speedily. Calendars are not necessarily the best tactic when it comes to scheduling all kinds of activities either. Indeed, “&lt;em&gt;when consumers schedule their leisure, they may inadvertently reduce their utility for the activity&lt;/em&gt;“. With this type of activity, the authors divulge that “&lt;em&gt;roughly scheduling (i.e., without pre-specified times)&lt;/em&gt;” constitutes a practical alternative. This results in effective scheduling when tasks are entered via a task manager and synced with Google Calendar since blocks of activities can still be displayed in the calendar view without the added burden of specifying a strict duration for each event.&lt;/p&gt;
&lt;p&gt;There are some use cases that simply are not well suited for task managers, such as synchronizing events from Gmail (i.e., capturing tasks from different sources), setting reminders on appointments scheduled by third parties (where the primary source of truth must remain the calendar itself) or sharing a schedule with groups across the G suite applications with the help of smart suggestions coming from Google users’ data which is not entirely available to external applications.&lt;/p&gt;
&lt;h2 id="23-the-four-pillars-forming-a-new-approach-evaluating-their-effectiveness"&gt;2.3 The four pillars forming a new approach: evaluating their effectiveness&lt;/h2&gt;
&lt;h3 id="231-inscribe"&gt;2.3.1 Inscribe&lt;/h3&gt;
&lt;figure&gt;
&lt;a href="https://www.sglavoie.com/images/posts/0039_productivido/inscribe.png"&gt;&lt;img alt="inscribe screen" src="https://www.sglavoie.com/images/posts/0039_productivido/inscribe.png" style="max-width: 500px"/&gt;&lt;/a&gt;
&lt;figcaption&gt;Inscribe screen.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;ProductiviDo&lt;/strong&gt; features four core components to help tackle one’s work skillfully, the first of which being all about jotting down tasks, a demonstration of the “generation effect” which assists with remembering information better. At this stage of the process, the idea is to record any potential future action that is required while being fully aware of the impact that such action will have on one’s life, benefitting at once from reducing one’s cognitive load by storing or discarding thoughts that do not require immediate response. “Inscribing” in this application is an intentional step demanding a certain level of mindfulness and acts as a precursor to the use of implementation intentions as it similarly “&lt;em&gt;serves an important self-regulatory function&lt;/em&gt;” according to a study on mindfulness done at the University of Rochester. A 2020 study from Bieleke and Keller found that “&lt;em&gt;opportunity-focused plans are especially important for initial progress towards the goal&lt;/em&gt;“, therefore this step ensures —through questioning the user’s aspirations— that the task is indeed a priority and that it is not just a distraction by evaluating its “leverage”, a notion introduced in section 1.4.&lt;/p&gt;
&lt;h3 id="232-prioritize"&gt;2.3.2 Prioritize&lt;/h3&gt;
&lt;figure&gt;
&lt;a href="https://www.sglavoie.com/images/posts/0039_productivido/prioritize.png"&gt;&lt;img alt="Prioritize screen" src="https://www.sglavoie.com/images/posts/0039_productivido/prioritize.png" style="max-width: 500px"/&gt;&lt;/a&gt;
&lt;figcaption&gt;Prioritize screen.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;There is substantial evidence to establish that the concept of a “master list” has been popularized and has found multiple concrete applications (e.g., as a list of relevant jobs held by an applicant, as an Excel spreadsheet keeping track of crucial information at a high-level, in some jurisdictions in the legal world, etc.), including as a way to manage tasks, an idea also sprouting from Edmond Lau’s work. In the context of task management systems, a master list manifests itself as a centralized location where all tasks are accessible once they have been “inscribed”. With &lt;strong&gt;ProductiviDo&lt;/strong&gt;, “prioritizing” is a transient state: it is about handling a database of data to be referenced later when progress must be undertaken on specific tasks. It is a digital space separate from the current areas of focus (presented in the following step in section 2.3.3) used to find the next priorities to work on, where filters are available to that end (see section 3 for the technical details). As defended by Bellotti’s research as a set of desirable features, the &lt;strong&gt;“Prioritize”&lt;/strong&gt; step offers the “&lt;em&gt;ability to sort by importance and deadlines&lt;/em&gt;” as well as a “&lt;em&gt;smart prioritization&lt;/em&gt;” of tasks by default, where the most important ones will flow to the top of the list, ready to be acted upon. Because tasks listed in the &lt;strong&gt;“Prioritize”&lt;/strong&gt; step are forcibly distinct from those listed in the &lt;strong&gt;“Focus”&lt;/strong&gt; step as they are mutually exclusive, this intermediate step helps to reduce the number of tasks shown in the schedule, improving one’s perceived control of time, busyness and stress.&lt;/p&gt;
&lt;h3 id="233-focus"&gt;2.3.3 Focus&lt;/h3&gt;
&lt;figure&gt;
&lt;a href="https://www.sglavoie.com/images/posts/0039_productivido/focus.png"&gt;&lt;img alt="focus screen" src="https://www.sglavoie.com/images/posts/0039_productivido/focus.png" style="max-width: 500px"/&gt;&lt;/a&gt;
&lt;figcaption&gt;Focus screen.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Once there are prioritized tasks in the application defined in terms of implementation intentions, science dictates that there is a need to “&lt;em&gt;support the viewing of entire task vistas, but also allow different perspectives for different kinds of planning&lt;/em&gt;” and for “&lt;em&gt;top priority items to be made apparent&lt;/em&gt;“. It is also known that setting clear goals eliminates intrusive thoughts and that “&lt;em&gt;commitment to a later behavior was linked to reduced rather increased strain on mental resources&lt;/em&gt;“. For these reasons, the &lt;strong&gt;“Focus”&lt;/strong&gt; step is a crucial component of the application. This component has the additional benefit of mitigating the problem uncovered in section 2.2.2 about the lesser efficacy of having multiple implementation intentions at once because it helps to recall all the high-leverage tasks in a filtered version of the master list (i.e., the current working list), leading to the observation of the Zeigarnik Effect which states that “&lt;em&gt;an activity that has been interrupted may be more readily recalled&lt;/em&gt;“. In addition, seeing a list of promises to oneself in the form of MCIIs “&lt;em&gt;seems to facilitate behavior change even when there is an initial reluctance to engage in the targeted behavior&lt;/em&gt;“. Even more benefits from MCIIs include “&lt;em&gt;sustained task value and higher persistence&lt;/em&gt;“, two aspects that contribute to goal achievement and, consequently, to turning a task manager into an efficacious product.&lt;/p&gt;
&lt;h3 id="234-review"&gt;2.3.4 Review&lt;/h3&gt;
&lt;figure&gt;
&lt;a href="https://www.sglavoie.com/images/posts/0039_productivido/review.png"&gt;&lt;img alt="review screen" src="https://www.sglavoie.com/images/posts/0039_productivido/review.png" style="max-width: 500px"/&gt;&lt;/a&gt;
&lt;figcaption&gt;Review screen.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;At this point, a working list of tasks exists to &lt;strong&gt;“Focus”&lt;/strong&gt; and a backlog of work remains to &lt;strong&gt;“Prioritize”&lt;/strong&gt;, yet not all labor should be brought to fruition as initially planned. Life circumstances change and “&lt;em&gt;plans to deliberate can be used to increase the likelihood of deliberation and thereby the effective processing of newly available information&lt;/em&gt;“, which can help eliminate or update tasks that are no longer considered important or relevant enough given an ever-changing environmental context. A paper on making informed scheduling decisions also noted that “&lt;em&gt;self-monitoring and self-reflection often affect behavior, and this change typically goes in the desired direction of improvement&lt;/em&gt;“. These findings can be applied practically by creating plans focusing on overcoming obstacles to make sustained progress, allowing one to ponder every major decision during the journey. A 2021 study on task management tools proposed to break complex tasks into smaller chunks (using a sophisticated approach with dependency graphs), an idea that can auspiciously be employed in a simpler way by breaking down a larger unit of work into smaller ones, which can be done during the information-gathering phase (i.e. the &lt;strong&gt;“Inscribe”&lt;/strong&gt; step) as well as during the reviewing phase with existing units of work, which is known as “compartmentalization”. This self-reflection process can also contribute to one’s well-being by providing written cues to recollect positive images from past accomplishments. Looking towards the future, cueing the users to imagine positive outcomes and encouraging them to restructure their priorities can equally evoke optimism and improve life satisfaction while inspiring them to live according to their personal values. After all, a “&lt;em&gt;person who sets up life and its routines to avoid inner conflict between goals is better off in the sense that he or she ends up feeling fewer bad emotional states and is generally happier&lt;/em&gt;“.&lt;/p&gt;
&lt;figure&gt;
&lt;a href="https://www.sglavoie.com/images/posts/0039_productivido/review-later.png"&gt;&lt;img alt="review screen with later filter applied" src="https://www.sglavoie.com/images/posts/0039_productivido/review-later.png" style="max-width: 500px"/&gt;&lt;/a&gt;
&lt;figcaption&gt;Review screen, showing a filter being applied.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;hr/&gt;
&lt;h1 id="3-design"&gt;3 Design&lt;/h1&gt;
&lt;h2 id="31-domain-and-target-audience"&gt;3.1 Domain and target audience&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;ProductiviDo&lt;/strong&gt; is a task management system staying clear of project management and time management, geared towards being a capture and review tool leaving notifications and scheduling to external systems, primarily to Google Calendar in these first product iterations. As such, the target audience is represented by conscientious people desiring to optimize their productivity with a tool discouraging multitasking, who don’t mind hand holding to achieve their goals — willing to trade off flexibility in exchange for a more rigid system backed by science —, expecting a simple set of essential features for a distraction-free environment to get things done and wanting to manage their own set of personal tasks (as this product is not designed with teams or businesses in mind).&lt;/p&gt;
&lt;p&gt;Explicitly supported users include people who want to follow a useful system without having to build it from scratch (e.g., setting up projects, tags, custom priorities, etc.) as well as those who need to keep track of tasks involving others with basic functionality (via Google Calendar and filters in the application). The application will not cater to those who want to rely mainly on desktop applications (because the core of the application is mobile only), nor to those who want to use a calendar other than Google Calendar (which is the only calendar undeniably supported in this version) or those who are looking for a solution integrating into other applications, since there will be no publicly accessible &lt;span class="caps"&gt;API&lt;/span&gt; at first to make this possible.&lt;/p&gt;
&lt;h2 id="32-design-decisions-and-principles"&gt;3.2 Design decisions and principles&lt;/h2&gt;
&lt;figure&gt;
&lt;a href="https://www.sglavoie.com/images/posts/0039_productivido/figma_design.png"&gt;&lt;img alt="Designing and wireframing in Figma" class="max-size-img-post" src="https://www.sglavoie.com/images/posts/0039_productivido/figma_design.png"/&gt;&lt;/a&gt;
&lt;figcaption&gt;Designing and wireframing in Figma.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Section 2 abstractly laid out the foundation for the core ideas being implemented in the application meeting
the needs of the target audience. Concretely, a few design principles listed in “The Pocket Universal
Principles of Design” inform how the application has been thought out, markedly:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The 80/20 rule: “&lt;em&gt;80 percent of a product’s usage involves 20 percent of its features&lt;/em&gt;“, which is true with &lt;strong&gt;ProductiviDo&lt;/strong&gt; where users will spend most of their time focusing on the work they have to accomplish;&lt;/li&gt;
&lt;li&gt;Chunking: “&lt;em&gt;Chunk information when people are required to recall and retain information&lt;/em&gt;“, where each task will display the most important information to contextualize work;&lt;/li&gt;
&lt;li&gt;Constraint: “&lt;em&gt;Limiting the actions that can be performed to simplify use and prevent error&lt;/em&gt;“, where each screen will have a single function with a premedidated lack of customization;&lt;/li&gt;
&lt;li&gt;Five Hat Racks: the five ways in which information can be organized (i.e., category, time, location, alphabet, and continuum), all of which are supported by &lt;strong&gt;ProductiviDo&lt;/strong&gt;;&lt;/li&gt;
&lt;li&gt;Form follows function: “&lt;em&gt;Aesthetic considerations should be secondary to functional considerations&lt;/em&gt;“, where the application maximizes the functionality available on each screen while taking into consideration the primary interactions needed at each step, regardless of the visual impact these decisions have;&lt;/li&gt;
&lt;li&gt;Garbage in, garbage out: “&lt;em&gt;Make it impossible to store bad data types&lt;/em&gt;“, where the application will not accept invalid inputs on any field that could jeopardize the integrity of the data;&lt;/li&gt;
&lt;li&gt;Nudges: “&lt;em&gt;smart defaults, clear feedback, aligned incentives, structured choices, and visible goals&lt;/em&gt;“, where the app makes the purpose of each interaction crystal clear;&lt;/li&gt;
&lt;li&gt;Progressive disclosure: “&lt;em&gt;A method of managing complexity, in which only necessary or requested information is displayed&lt;/em&gt;“, where filters are selectively shown to match the intent of each screen and where optional fields are hidden away by default until they are needed.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It is noteworthy that calendar integration will be optional and that the application will remain fully functional without relying on external calendars for maximum convenience, especially while users are offline. Even though this work underlined the usefulness of calendars when used as companions for task managers, one of the primary goals of a task manager is to be available at all times regardless of internet connectivity so that users can access their list of priorities and get work done: requiring an active connection and access to a calendar via sign-on before being able to do any work would break the principle of least astonishment in this type of application.&lt;/p&gt;
&lt;figure&gt;
&lt;a href="https://www.sglavoie.com/images/posts/0039_productivido/prioritize-wireframes.png"&gt;&lt;img alt="Some of the original wireframes for the Prioritize screen" class="max-size-img-post" src="https://www.sglavoie.com/images/posts/0039_productivido/prioritize-wireframes.png"/&gt;&lt;/a&gt;
&lt;figcaption&gt;Some of the original wireframes for the &lt;strong&gt;Prioritize&lt;/strong&gt; screen.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="33-structure-of-the-application"&gt;3.3 Structure of the application&lt;/h2&gt;
&lt;p&gt;The application is structured in such a way that each screen has a single function and that the user is guided through the process of adding, editing, and reviewing tasks4. The application is designed to be as simple as possible, with a minimalistic interface and a limited number of interactions to keep the user focused on the task at hand. Technically, it is arranged according to a pyramid schematic architecture, where the “hub” is the hamburger menu which links to all other pages and where all the sub-pages can go back to the “hub”. In this architecture, the tab navigation at the bottom of the screen lists the core sub-pages which are always accessible and can lead back to the hub as needed so that the user does not need to remember how to get from one screen to another, since they are all identified with both a recognizable icon and text label.&lt;/p&gt;
&lt;p&gt;The application is structured in a way that makes it easy to add, edit, and review tasks, with the following screens:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Inscribe&lt;/strong&gt;: Looking at the tab bar (bottom part of the wireframes) from left to right, this is the first screen meant to be easily accessible and also the first step that is part of the process of managing tasks by carefully adding them to the system;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Prioritize&lt;/strong&gt;: this is the screen responsible for displaying the list of tasks that have been added to &lt;strong&gt;ProductiviDo&lt;/strong&gt; in the first step (&lt;strong&gt;Inscribe&lt;/strong&gt;) but still require planning (i.e., they represent the tasks to prioritize);&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Focus&lt;/strong&gt;: Once the tasks have been prioritized from the previous screen (&lt;strong&gt;Prioritize&lt;/strong&gt;), they are ready to be scheduled and worked on, which is the purpose of this screen — it displays the current working list of tasks in a digestible format;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Review&lt;/strong&gt;: Periodically (daily, weekly, etc.), the application will ask the user to review the tasks that remain to be completed to ensure that they are still relevant and that they are still a priority.&lt;/li&gt;
&lt;/ol&gt;
&lt;figure&gt;
&lt;a href="https://www.sglavoie.com/images/posts/0039_productivido/edit-task.png"&gt;&lt;img alt="edit task screen" src="https://www.sglavoie.com/images/posts/0039_productivido/edit-task.png" style="max-width: 500px"/&gt;&lt;/a&gt;
&lt;figcaption&gt;Edit task screen.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;These core screens are accessible at all times from the tab bar to allow for easy navigation between them. The application will also have a few other screens that are not part of the core workflow but that are still important for the user experience:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;About&lt;/strong&gt;: This screen will display information about the application, such as the purpose behind each aspect as well as the version number;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Help&lt;/strong&gt;: There will be a help system embedded in this screen to help users understand how to use the application and how to get the most out of it, which will be fully searchable;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Recycle bin&lt;/strong&gt;: Sometimes, tasks will be added to &lt;strong&gt;ProductiviDo&lt;/strong&gt; by mistake or they will be completed before they are scheduled. This screen will allow the user to review and restore these tasks if they are still relevant;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Accomplishments&lt;/strong&gt;: This screen will display a list of tasks that have been completed and will allow the user to review them and reflect on their accomplishments;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Settings&lt;/strong&gt;: This screen will allow the user to customize the application to their liking, such as changing the theme, determining default values on new tasks, etc.&lt;/li&gt;
&lt;/ol&gt;
&lt;figure&gt;
&lt;a href="https://www.sglavoie.com/images/posts/0039_productivido/about.png"&gt;&lt;img alt="about screen" src="https://www.sglavoie.com/images/posts/0039_productivido/about.png" style="max-width: 500px"/&gt;&lt;/a&gt;
&lt;figcaption&gt;About screen.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;These secondary screens are accessible from each core screen in the top-right corner to toggle the presence of a “drawer” menu. The menu can also be revealed by swiping from right to left on the screen. The menu will be hidden by default to keep the interface as clean as possible and to avoid cluttering it with unnecessary information. The menu will be revealed by default on the first launch of the application to help users discover the features available to them.&lt;/p&gt;
&lt;figure&gt;
&lt;a href="https://www.sglavoie.com/images/posts/0039_productivido/menu.png"&gt;&lt;img alt="Menu screen" src="https://www.sglavoie.com/images/posts/0039_productivido/menu.png" style="max-width: 500px"/&gt;&lt;/a&gt;
&lt;figcaption&gt;Menu screen.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="34-libraries-and-services"&gt;3.4 Libraries and services&lt;/h2&gt;
&lt;p&gt;At a high level, the application will be built using React Native to support both Android and iOS platforms.
In terms of software user-facing dependencies, the application will use the following libraries:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;react-native-async-storage/async-storage&lt;/code&gt;: The application will use this library to store data
  locally on the device;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;react-native-community/datetimepicker&lt;/code&gt;: This library will be used to display the date and time pickers;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;React Navigation&lt;/code&gt;: This library will be used to implement the navigation system;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Redux&lt;/code&gt;: This library will be used to manage the state of the application;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NativeBase&lt;/code&gt;: it will be used to implement the user interface;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;redux-persist&lt;/code&gt;: This library will be used to persist the state of the application locally on the device;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;redux-thunk&lt;/code&gt;: This library will be used to implement asynchronous actions in the application;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;react-native-collapsible&lt;/code&gt;: This library will be used to implement all the collapsible sections to
  provide progressive disclosure;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;react-native-extended-stylesheet&lt;/code&gt;: This library will be used to implement the theming system;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nandorojo/anchor&lt;/code&gt;: This library will be used to implement the anchor system so that users can jump
  from one section to another in the help system.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The application will also use the following libraries to support the development process:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Eslint&lt;/code&gt;: This library will be used to enforce a consistent coding style;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Babel&lt;/code&gt;: This library will be used to transpile the code to support older versions of JavaScript;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Jest&lt;/code&gt;: This library will be used to implement unit tests;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;react-native-testing-library&lt;/code&gt;: This library will be used to implement integration tests;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;react-native-dotenv&lt;/code&gt;: This library will be used to manage environment variables;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;react-test-renderer&lt;/code&gt;: This library will be used to implement snapshot tests;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TypeScript&lt;/code&gt;: It will ensure type checking is available app-wide and reduce the number of bugs.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On the backend side, the application will make use mainly of the following services:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Firebase&lt;/code&gt;: This service will be used to implement the authentication system needed to deal with
  Google accounts as an optional add-on;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Google Calendar&lt;/code&gt;: This service will be used to implement the calendar system;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SQLite&lt;/code&gt;: It will be used to implement the database system locally and will be backed up to the cloud.&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;
&lt;a href="https://www.sglavoie.com/images/posts/0039_productivido/db_schema.png"&gt;&lt;img alt="Showing the database design behind ProductiviDo." class="max-size-img-post" src="https://www.sglavoie.com/images/posts/0039_productivido/db_schema.png"/&gt;&lt;/a&gt;
&lt;figcaption&gt;Showing the database design behind ProductiviDo.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="35-plan-of-work"&gt;3.5 Plan of work&lt;/h2&gt;
&lt;p&gt;In a nutshell, the plan of work will be followed as shown below:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Gantt Chart" src="https://www.sglavoie.com/images/posts/0039_productivido/gantt_chart.png"/&gt;&lt;/p&gt;
&lt;h2 id="36-testing-and-evaluation"&gt;3.6 Testing and evaluation&lt;/h2&gt;
&lt;p&gt;The project will be tested primarily using the following methods:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Unit tests&lt;/strong&gt;: Unit tests will be implemented to ensure that each component of the application works as expected. These tests will be implemented using &lt;code&gt;Jest&lt;/code&gt; and &lt;code&gt;react-test-renderer&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Integration tests&lt;/strong&gt;: Integration tests will be implemented to ensure that the application works as expected when all the components are combined. These tests will be implemented using the apt &lt;code&gt;react-native-testing-library&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;User and usability testing&lt;/strong&gt;: User testing will be implemented to ensure that the application is easy to use and that it meets the needs of the users. These tests will be implemented using a combination of user interviews and surveys.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Performance, load and stress testing&lt;/strong&gt;: Performance testing will be implemented to ensure that the application is fast and responsive. These tests will be performed by simulating the presence of a large number of tasks and events.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Security testing&lt;/strong&gt;: Security testing will be implemented to ensure that the application is secure, most definitely when it comes to protecting user’s data in the cloud to avoid data breaches.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Regression testing&lt;/strong&gt;: Regression testing will be implemented to ensure that the application does not break when new features are added, using a mixture of automated &lt;code&gt;git bisect&lt;/code&gt; scripts to locate anomalies and by automatically running test suites with Git pre-commit hooks.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Compatibility testing&lt;/strong&gt;: Compatibility testing will be implemented to ensure that the application works on all the supported platforms.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Accessibility testing&lt;/strong&gt;: Accessibility testing will be implemented to ensure that the application is accessible to all users.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h1 id="4-implementation"&gt;4 Implementation&lt;/h1&gt;
&lt;h2 id="41-overview"&gt;4.1 Overview&lt;/h2&gt;
&lt;p&gt;At its core, &lt;strong&gt;ProductiviDo&lt;/strong&gt; aims to provide a system that facilitates “getting things done” in the manner of the famously successful productivity system &lt;span class="caps"&gt;GTD&lt;/span&gt;, created and shared with millions of people by David Allen. The system is based on the following principles, worth expanding on as it bears strong resemblance with the final design of the application:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Capture&lt;/strong&gt;: All tasks and events should be captured in a single place, so that they can be easily accessed and managed. This is achieved with the &lt;strong&gt;“Inscribe”&lt;/strong&gt; screen, the first step in the &lt;strong&gt;ProductiviDo&lt;/strong&gt; system.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Clarify&lt;/strong&gt;: All tasks and events should be clarified, so that they can be easily understood and prioritized. This is achieved in the &lt;strong&gt;“Inscribe”&lt;/strong&gt; screen, where the user can add a description to the task or event along with necessary metadata to help classify and prioritize the data being added.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Organize&lt;/strong&gt;: All tasks and events should be organized, so that they can be easily accessed and managed. While this &lt;span class="caps"&gt;GTD&lt;/span&gt; step does not map directly to a step in &lt;strong&gt;ProductiviDo&lt;/strong&gt;, the &lt;strong&gt;“Focus”&lt;/strong&gt; screen serves a similar purpose in that it allows the user to organize tasks and events into a list of immediately actionable items that are easy to reference.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reflect&lt;/strong&gt;: All tasks and events should be reflected upon, so that they can be easily understood and prioritized. With &lt;strong&gt;ProductiviDo&lt;/strong&gt;, this is done in the &lt;strong&gt;“Review”&lt;/strong&gt; screen, which invites users to review tasks logically according to their deadline, priority, an&lt;strong&gt;d other meta&lt;/strong&gt;data.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Engage&lt;/strong&gt;: All tasks and events should be engaged with, so that they can be easily accessed and managed. &lt;strong&gt;ProductiviDo&lt;/strong&gt; deals with this &lt;span class="caps"&gt;GTD&lt;/span&gt; step in a simpler way via the &lt;strong&gt;“Prioritize”&lt;/strong&gt; screen and the &lt;strong&gt;“Focus”&lt;/strong&gt; screen, which allow users to prioritize tasks and events and then focus on the most important ones.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="42-features-implemented-a-visual-tour"&gt;4.2 Features implemented: a visual tour&lt;/h2&gt;
&lt;figure&gt;
&lt;a href="https://www.sglavoie.com/images/posts/0039_productivido/quick-actions.png"&gt;&lt;img alt="Quick actions screen" src="https://www.sglavoie.com/images/posts/0039_productivido/quick-actions.png" style="max-width: 500px"/&gt;&lt;/a&gt;
&lt;figcaption&gt;Quick actions.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The application has the following features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Add a task&lt;/strong&gt;: The user can add tasks by navigating to the &lt;strong&gt;“Inscribe”&lt;/strong&gt; screen and filling in the required fields. The user can also add a deadline date and time, a duration, a location, a priority to the task and so on. By choosing the type of task as “&lt;strong&gt;Calendar&lt;/strong&gt;” and filling in the required fields, the task will be added to the user’s Google Calendar. This screen hides any navbar and tab bar to maximize the screen real estate.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Prioritize a task&lt;/strong&gt;: The user can prioritize tasks by navigating to the &lt;strong&gt;“Prioritize”&lt;/strong&gt;, where filtering options are available to help the user find the task to prioritize. The main task action that can be performed on this screen is to “focus” a task, effectively moving it to the &lt;strong&gt;“Focus”&lt;/strong&gt; screen.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Focus on a task&lt;/strong&gt;: The user can focus on a task by navigating to the &lt;strong&gt;“Focus”&lt;/strong&gt; screen, where the user can see a list of tasks that are immediately actionable. The user can also filter the tasks to focus on. The main action that can be performed on this screen is to “complete” a task, effectively moving it to the “Accomplishments” screen.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Review tasks&lt;/strong&gt;: The user can review tasks by navigating to the &lt;strong&gt;“Review”&lt;/strong&gt; screen, where the user can see a list of tasks that are overdue, due soon (e.g., today, tomorrow, this week), due later (e.g., next week, next month, next year) as well as tasks that are “old” (i.e., tasks that have been added to the system more than a month ago relative to today’s date but have not been worked on yet). This screen features “&lt;em&gt;quick actions&lt;/em&gt;” that are relevant to the tasks being reviewed. These actions provide the ability to reschedule a task, update its current state (i.e., move it from and to the Prioritize and Focus screens) and to delete a task without having to open the task details screen to edit it.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Filter tasks to review&lt;/strong&gt;: The user can filter tasks to review by navigating to the &lt;strong&gt;“Review”&lt;/strong&gt; screen and selecting the filter options. The user can filter tasks by one of the categories “&lt;strong&gt;Overdue&lt;/strong&gt;“, “&lt;strong&gt;Soon&lt;/strong&gt;“, “&lt;strong&gt;Later&lt;/strong&gt;“, “&lt;strong&gt;Old&lt;/strong&gt;” and by all of these at once when no filters are applied.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Edit task details&lt;/strong&gt;: Once a task has been added to the system, it can be edited from any of the main screens (i.e., &lt;strong&gt;“Prioritize”&lt;/strong&gt;, &lt;strong&gt;“Focus”&lt;/strong&gt;, &lt;strong&gt;“Review”&lt;/strong&gt;). The user can edit all the same properties as when adding a task as well as add new ones not present when the task was added. When a task is of type “Calendar”, its related details will also be updated on the user’s Google Calendar.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;About screen&lt;/strong&gt;: while the About screen does not provide any functionality related to tasks, it allows users to learn more about the application. The screen includes a link to the application’s website, a link to a dynamic feedback form to help &lt;strong&gt;ProductiviDo&lt;/strong&gt; become a better fit for its users, an email address to contact the developers (which opens the default email client on the user’s device) and other less frequently accessed information, including a link to the GitHub repository of the project and a list of open source libraries used to create the product.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Help screen&lt;/strong&gt;: the application has been designed to avoid relying on documentation in order to be used. However, the Help screen is a useful resource for users who want to learn more about the concepts involved in the application. It describes possible workflows and guides users through the application’s main screens so they will be able to use it even more effectively.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Recycle bin screen&lt;/strong&gt;: &lt;strong&gt;ProductiviDo&lt;/strong&gt; makes it very easy to access and manage tasks that have been deleted by the user. The Recycle bin screen allows users to restore deleted tasks (which are sent back to the Prioritize screen for the next round of prioritization) or to permanently delete them by emptying the recycle bin.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Accomplishments screen&lt;/strong&gt;: While the Recycle bin holds all deleted tasks, the Accomplishments screen holds all tasks that have been completed by the user from the Focus screen. The Accomplishments screen is a great way to keep track of the user’s progress and to celebrate the user’s accomplishments, yet it also allows removing completed tasks from the system if the user wishes to do so.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Settings screen&lt;/strong&gt;: The Settings provided by &lt;strong&gt;ProductiviDo&lt;/strong&gt; allow users to customize the application to their needs in a basic way — and all settings are persisted across reboots of the application or device. There is a dark mode available to protect the users’ eyes from screen brightness. Other settings include the ability to set default behaviours on new tasks, set the increment in minutes to be shown in the time picker, set a different locale to represent dates and times and some more options to toggle the display of certain elements in the application.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Filters&lt;/strong&gt;: What &lt;strong&gt;ProductiviDo&lt;/strong&gt; lacks in customizations, it makes up for in filters. The application allows users to filter tasks by type, status, priority, deadline date, deadline time, duration, location and more. The filters are applied in real-time, so the user can see the results of the filters as they are being applied. The filters can be applied to any of the main screens (i.e., &lt;strong&gt;“Prioritize”&lt;/strong&gt;, &lt;strong&gt;“Focus”&lt;/strong&gt;, &lt;strong&gt;“Review”&lt;/strong&gt;) and can be combined to create more precise filters.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Google Calendar&lt;/strong&gt;: One of the key tenets of &lt;strong&gt;ProductiviDo&lt;/strong&gt; is to make it easy for users to manage their tasks and to have a visual window into their schedule, which is achieved by integrating with the user’s primary calendar on Google Calendar. The application allows users to connect their Google Calendar account to &lt;strong&gt;ProductiviDo&lt;/strong&gt; and to create calendar events from new or existing tasks. At the same time, this functionality remains entirely optional: users can choose to never opt in to the Google Calendar integration and can disconnect their Google account at any time, which will prevent any synchronization from happening between &lt;strong&gt;ProductiviDo&lt;/strong&gt; and Google Calendar.&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;
&lt;a href="https://www.sglavoie.com/images/posts/0039_productivido/settings.png"&gt;&lt;img alt="settings screen" src="https://www.sglavoie.com/images/posts/0039_productivido/settings.png" style="max-width: 500px"/&gt;&lt;/a&gt;
&lt;figcaption&gt;Settings screen.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;a href="https://www.sglavoie.com/images/posts/0039_productivido/dark-mode.png"&gt;&lt;img alt="dark mode screen" src="https://www.sglavoie.com/images/posts/0039_productivido/dark-mode.png" style="max-width: 500px"/&gt;&lt;/a&gt;
&lt;figcaption&gt;Dark mode.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="43-techniques-and-methods"&gt;4.3 Techniques and methods&lt;/h2&gt;
&lt;figure&gt;
&lt;a href="https://www.sglavoie.com/images/posts/0039_productivido/help.png"&gt;&lt;img alt="help screen" src="https://www.sglavoie.com/images/posts/0039_productivido/help.png" style="max-width: 500px"/&gt;&lt;/a&gt;
&lt;figcaption&gt;Help screen.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Beyond the libraries mentioned in section 3.4, the actual implementation of the application happened in the following way:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;React Native bare workflow&lt;/strong&gt;: The application was developed using the React Native bare workflow, which allows for the use of native code in the application. This was necessary to implement the Google Calendar integration, which was not possible using the Expo workflow.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;State management&lt;/strong&gt;: The application was architected in such a way that React Context was used to avoid “&lt;em&gt;props drilling&lt;/em&gt;” and to provide a global state to the application, using data coming from the SQLite database loaded at launch. All context that does not require persistence is managed by React Context, while the rest of the state (e.g., settings) is managed by Redux Toolkit.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TypeScript&lt;/strong&gt;: The app was developed using TypeScript, a typed superset of JavaScript that compiles to plain JavaScript. TypeScript was used to ensure type safety and to provide a better developer experience with autocomplete and other features that help developers write code with fewer errors.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;React Navigation&lt;/strong&gt;: The navigation between screens uses a combination of stack and tab navigation, with the main screens being accessible through the tab navigation and the rest of the screens being accessible through the stack navigation. Additionally, a drawer navigation is used to provide access to all secondary screens via the traditional “hamburger” menu.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NativeBase&lt;/strong&gt;: This library was used to provide a consistent look and feel to the application and get access to components that are not available in React Native. Many of its components were put to use in the application, including &lt;code&gt;Actionsheet&lt;/code&gt;, &lt;code&gt;AlertDialog&lt;/code&gt;, &lt;code&gt;Badge&lt;/code&gt;, &lt;code&gt;FlatList&lt;/code&gt;, &lt;code&gt;Modal&lt;/code&gt;, &lt;code&gt;Switch&lt;/code&gt; and &lt;code&gt;Transitions&lt;/code&gt; to name a few.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Google Calendar &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/strong&gt;: The application uses the Google Calendar &lt;span class="caps"&gt;API&lt;/span&gt; to allow users to connect their Google Calendar account to &lt;strong&gt;ProductiviDo&lt;/strong&gt; and to create calendar events from new or existing tasks. The &lt;span class="caps"&gt;API&lt;/span&gt; is used to create new events, to update existing events and to delete events. The &lt;span class="caps"&gt;API&lt;/span&gt; is also used to retrieve the user’s primary calendar and to retrieve the list of calendars available to the user.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SQLite&lt;/strong&gt;: The application uses SQLite to store all data locally on the device. The application uses the expo-sqlite library to interact with the SQLite database. The database is initialized at launch and is updated whenever the user makes changes to the data.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Form validation&lt;/strong&gt;: The application uses the yup library to validate forms and to provide error messages to the user. Coupled with &lt;code&gt;formik&lt;/code&gt;, the library provides a great way to validate forms and to provide a consistent experience to the user.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Custom hooks and functional components&lt;/strong&gt;: This project explicitly embraces new React features such as custom hooks and functional components. The application uses custom hooks to encapsulate logic for all the main screens. The application also uses functional components to avoid the use of class components, which are considered legacy in React.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h1 id="5-evaluation-results-and-discussion"&gt;5 Evaluation: results and discussion&lt;/h1&gt;
&lt;h2 id="51-successes"&gt;5.1 Successes&lt;/h2&gt;
&lt;h3 id="511-planning-and-execution"&gt;5.1.1 Planning and execution&lt;/h3&gt;
&lt;p&gt;Extensive research and preparation went into the project before writing a single line of production code. A multitude of potential implementations and concepts were explored in great details and the idea of the final product was refined from a very early stage, leading to a more focused development of the todo application. Because there existed a tangible vision of the desired outcome, it made it much simpler to define the database schema and the React context needed throughout the application to pass adequate data structures around. On a related note, doing all this work upfront helped to avoid wasting time learning libraries that would not entirely meet the needs of the application and to stop contemplating features that would not fit within the constraints of the chosen concept.&lt;/p&gt;
&lt;p&gt;Another decision that proved to be quite useful was to postpone dealing with complicated services till much later during development. For instance, storing mock data as simple &lt;span class="caps"&gt;JSON&lt;/span&gt; allowed for quick iterations during development without having to manually add tasks one by one by using the application itself to do so. Once it came time to integrate database functionality, data was first stored as a temporary in-memory database for fast read/write speeds (because the task view, filtering and sorting was not optimized yet) and it was later persisted to disk. Likewise, external services (e.g., Firebase and Google Calendar) were only integrated until the internal application design was set in stone. Performance optimizations were favorably delayed until most of the logic was implemented, which gave ample time to test and refine the design, productively steering clear of premature optimization due to the changing nature of the application still being validated and tested by beta users.&lt;/p&gt;
&lt;h3 id="512-functionality-achieved"&gt;5.1.2 Functionality achieved&lt;/h3&gt;
&lt;p&gt;One concept that served the final design well was a direct application of Fitt’s law, which states that “&lt;em&gt;the time required to touch a target is a function of the target size and the distance to the target&lt;/em&gt;“, meaning that it is important to keep controls close and large when speed or accuracy matters. As a concrete demonstration of this law, tasks can be added with the touch of a single button in the &lt;strong&gt;“Inscribe”&lt;/strong&gt; button located in the tab bar, making it frictionless for users to add tasks and events to the application. This meets the need of being “&lt;em&gt;always on&lt;/em&gt;“, especially since all data is accessible locally without the need for an internet connection, allowing users to quickly get their priorities out of their mind and onto a digital device to allow for proper referencing later on. Other critical interactions such as focusing tasks and completing them can be done by tapping on a large icon next to each task.&lt;/p&gt;
&lt;p&gt;The application allows visualizing all tasks at once in the &lt;strong&gt;“Prioritize”&lt;/strong&gt; screen, which contains all necessary filters in order to make filtering and sorting through a growing list of incoming data not only feasible but also simple and practical. Indeed, the lack of hierarchical organization in the information architecture is absolutely intentional. This design decision allows flexibility with the use of filters without incurring a cognitive cost to understand how information is organized. As long as users are diligent with the metadata they input in the application (as they should if they wish to accomplish their goals), they will be able to easily find the information they need in the &lt;strong&gt;“Prioritize”&lt;/strong&gt; screen. Excluding the hierarchical access to information, all other aspects of information architecture (location, alphabet, time, category) are available as filters to the users.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;“Focus”&lt;/strong&gt; screen intuitively lets users know which tasks are most important to work on at any given time, sorting them by deadline, priority and other metadata, making the data “&lt;em&gt;always actionable&lt;/em&gt;“. Since focused tasks are isolated from the rest of the data, users are able to focus on the task at hand without being distracted by other tasks. On this screen, users are able to complete tasks, which effectively disappear from the task list and are kept in the “&lt;strong&gt;Accomplishments&lt;/strong&gt;” screen for later retrieval. This is a way to keep track of tasks that have been completed, which is a feature that is not available in the Google Calendar application and which complements its functionality very well. Additionally, this screen allows users to “restore” tasks, which performs the opposite action. Notably, it will prevent mistakes by letting users undo their actions; it will also allow users to review tasks and events that have been deleted and to permanently delete them as needed. This feature is not available in the Google Calendar application and contributes to making &lt;strong&gt;ProductiviDo&lt;/strong&gt; a useful ally in this case so that events can be restored to the calendar view. The final active step required to use &lt;strong&gt;ProductiviDo&lt;/strong&gt; effectively, found in the &lt;strong&gt;“Review”&lt;/strong&gt; screen, provides complimentary functionality to that found in most modern calendar applica&lt;strong&gt;tions. While&lt;/strong&gt; a calendar is useful to get a sense of upcoming events, a review system is needed to stay on top of one’s priorities to make sure that time-insensitive yet important events do not slip through the cracks. The &lt;strong&gt;“Review”&lt;/strong&gt; screen is a way to make sure that users are not only aware of the tasks and events they ha&lt;strong&gt;ve scheduled&lt;/strong&gt;, but also of the tasks and events that they have not scheduled but are important to them. Furthermore, reviewing one’s work periodically in an automatic way allows for better planning and will make sure that longstanding tasks are either updated, prioritized, delegated or removed.&lt;/p&gt;
&lt;h2 id="52-failures-and-limitations"&gt;5.2 Failures and limitations&lt;/h2&gt;
&lt;p&gt;The following points of failures are discussed in more details in section 6.2, where solutions for brighter times ahead are pictured.&lt;/p&gt;
&lt;h3 id="521-google-calendar-integration"&gt;5.2.1 Google Calendar integration&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;ProductiviDo&lt;/strong&gt; solves real-world issues related to task management and scheduling in a robust manner, yet it does so partially. One major caveat to the current implementation is that it supports only Google Calendar, which severely limits the potential market the application can tap into. Because only Google Calendar was taken into account during this project, it is highly likely that the application will not be able to support other calendar applications without a major overhaul of the codebase. The application was thought to be a companion to Google Calendar from the ground up, which means that while it integrates seamlessly with it, it creates tight coupling between the two applications. There are in fact more issues to delve into when it comes to Google Calendar. In particular, full synchronization of tasks and events is not supported in a scalable way. For one, Google Calendar &lt;span class="caps"&gt;API&lt;/span&gt;’s daily and monthly rates are limited: instead of calling that &lt;span class="caps"&gt;API&lt;/span&gt; on every little detail being updated in a task, the application should really try its best to batch requests so that heavy users will not be penalized if they happen to trigger many updates in their calendar or if Google decides to lower the number of requests that can be processed in a given amount of time. Another pitfall is that the application does not support recurring tasks as originally intended due to lack of human resources, which is a feature that is available in the Google Calendar application. While it is technically possible to implement this feature, more context would need to be stored in the application to avoid duplication of tasks in the database and to allow recurring tasks to be reset to their original state or updated as desired, all of which would need to communicate with the Google Calendar &lt;span class="caps"&gt;API&lt;/span&gt; in an efficient way. There is, at the moment, no task tracking facility: a completed task is simply removed from the list of tasks by updating its status in the database. This is a considerable limitation, since it prevents users from creating tasks that are recurring, such as weekly meetings or monthly bills.&lt;/p&gt;
&lt;h3 id="522-unit-testing"&gt;5.2.2 Unit testing&lt;/h3&gt;
&lt;p&gt;One clear oversight in the development process was the lack of unit testing. While the application was profusely tested in a manual way, it would have been much more efficient to have had a suite of unit tests that would have allowed for a more sturdy and scalable application. &lt;strong&gt;ProductiviDo&lt;/strong&gt; comprises a few essential unit tests regarding the Google Calendar integration, but it is nowhere near the level of testing that would be required to ensure that the application is robust and that it will not break in the future. Amongst some of the types of tests that should have been implemented are unit tests for the database, unit tests for the application’s business logic, snapshot testing and testing of asynchronous &lt;span class="caps"&gt;API&lt;/span&gt; calls through mocking. In hindsight, the reason more tests did not make it into the final application is that the development process was not agile enough to allow for the time required to write unit tests and there have been too many side experiments that have taken priority over the core functionality of the application. Of equal relevance is the fact that unanticipated issues have arisen during the development process, which have required more time and effort to be spent on fixing them rather than on writing unit tests. It is also important to keep in mind that unit testing is not a one-time activity: it should be done continuously throughout the development process, more akin to the test-driven development (&lt;span class="caps"&gt;TDD&lt;/span&gt;) workflow. Failing in that department was a major setback for the application, since it will make it harder to maintain and to scale in the future and it likely contributed to the fact that more time was spent on debugging than was necessary.&lt;/p&gt;
&lt;h3 id="523-advanced-features-powered-by-ai"&gt;5.2.3 Advanced features powered by &lt;span class="caps"&gt;AI&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;Besides the issues already raised in this section, there are a few other features that would have optimized the user experience, but which were not implemented due to lack of time as otherwise the scope of the project would have fallen appreciably out of reasonable proportions. For instance, the application does not support batch editing of tasks, which is a feature that is available in many other task managers in one form or another. It also does not support location-based notifications, which would have been useful to send reminders to users based on their location. The application does not make use of advancements in machine learning: learning users’ preferences over time to provide helpful shortcuts when creating new tasks could have been a fantastic time saver. &lt;strong&gt;ProductiviDo&lt;/strong&gt; could have stored task templates such that creating recurring tasks would be faster and more intuitive by providing logical default values based on what the algorithm thinks is going to be needed next. Similarly, the app could add locations, people, and other properties to tasks once it figures out that certain actions only happen in given locations or with the same people repeatedly. Yet another feature that would have proven handy would be to provide time-based notifications based on predictions from past data derived from tracking user movements and time taken to complete specific types of tasks. For instance, if a user has a task that is due at 9:00 &lt;span class="caps"&gt;AM&lt;/span&gt;, the app could send a notification to the user’s phone at 8:45 &lt;span class="caps"&gt;AM&lt;/span&gt; if the user is at home, but at 8:30 &lt;span class="caps"&gt;AM&lt;/span&gt; if the user is at work once the travel time could reliably be estimated from prior activities.&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="6-conclusion"&gt;6 Conclusion&lt;/h1&gt;
&lt;h2 id="61-salient-takeaways"&gt;6.1 Salient takeaways&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;ProductiviDo&lt;/strong&gt; set out to fathom the needs of the modern-day, demanding user and to provide a novel solution to the problem of task management and scheduling. The application was designed from the start to work alongside Google Calendar, which is a popular calendar application that is used by many millions of people around the world. The application was designed to be a simple and intuitive task manager that would allow users to create tasks and events, to schedule them, and to track their progress. While there is room for improvement, &lt;strong&gt;ProductiviDo&lt;/strong&gt; goes far beyond a proof of concept or “&lt;em&gt;Goldilocks Quality&lt;/em&gt;” and shows how it can be used by anyone who wants to manage their tasks and schedule more efficiently, as it relies on strong scientific foundations that were dispersed throughout this work as convincing evidence backing up such a claim.&lt;/p&gt;
&lt;p&gt;One of the key takeaways from this work is that despite a crowded task management digital market, innovation can take place by taking inspiration from different fields and by applying them to the problem at hand. In the case of &lt;strong&gt;ProductiviDo&lt;/strong&gt;, the needs of business users and productivity seekers alike were distilled into an almost mechanical process, where the application flow is extremely simple and strives to put forward in a visually sensible manner all the required functionality to get work done without friction: this meant taking a few assumptions about users for granted, knowingly reducing the user base to better serve those who will resonate with the offering.&lt;/p&gt;
&lt;p&gt;There are a few dominant players in the industry, albeit niches are still well underserved. Almost every software application out there in this space endeavors to serve customers in a very generic way, but it could be flourishingly argued that a task manager could be designed to serve a specific industry. For instance, a task manager for a construction company could be designed to be more intuitive for construction workers, who are not necessarily computer savvy, and could be designed to be more efficient for project managers, who are likely to be more tech-savvy. The same could be said for a task manager for a law firm, a task manager for a restaurant, or a task manager for a school. The possibilities are endless, and the key is to understand the needs of the users and to design the application to be as intuitive as possible. Even though “task templates” can, up to a point, be used to achieve this, nothing competes with a well-designed application that is tailored to the needs of a well-known target audience. Such applications will by definition be adopted within a given niche and will dispense unique value to the users. A generic task manager may be suitable for simple projects and may require fiddling around with the settings to get it to work for a specific use case, but a task manager dedicated to culinary chefs will natively understand and care for concepts such as “ingredients” and “recipes”, which will be baked into the product (no pun intended).&lt;/p&gt;
&lt;h2 id="62-improvements-and-future-research"&gt;6.2 Improvements and future research&lt;/h2&gt;
&lt;p&gt;Even though Google users abound, using exclusively Google Calendar as an calendar integration is not a universal solution. In the future, it would be interesting to explore the possibility of integrating other calendar applications such as Apple Calendar, Outlook, and others. This would allow users to use the application with their preferred calendar application and would also allow for a more seamless integration with the calendar application, which would be a great benefit to users.&lt;/p&gt;
&lt;p&gt;Expanding on the notion of “delegatees” explored in this project, a task manager with built-in collaboration would be welcome to further satisfy the needs of business users. This is because a calendar can become social and collaborative by itself, and it is not uncommon for colleagues or friends to share their calendars with others. This is especially true for business users, who often need to coordinate their activities with other members of their team. It would certainly not be far-fetched to have business teams be formed and given access to their shared task assignments and calendars. This would allow for a more efficient and transparent way of working together, and it would also allow for a more efficient way of tracking the progress of a project and would pave the way to generating insightful analytics dashboards, another place where machine learning would shine by finding patterns and making it possible to optimize overlapping schedules and projects based on people’s availability, area of expertise and so on.&lt;/p&gt;
&lt;p&gt;Recent reports have shown that job creation and entrepreneurship is at its highest peak and that the United States of America is leading the way in terms of new business creation, with literally millions of companies being born each year. This is a great sign for the economy and it shows numerous opportunities in the business world when considering task managers embarking on a journey to become a collaborative platform for teams and businesses within a specific line of work. In the meantime, &lt;strong&gt;ProductiviDo&lt;/strong&gt; comes to the rescue of the millions of people who are looking for simplicity and intuitiveness in a task manager to get their work done with less technological grinding.&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="demo-of-the-app"&gt;Demo of the app&lt;/h1&gt;
&lt;div class="youtube youtube-16x9"&gt;
&lt;iframe allowfullscreen="" frameborder="0" seamless="" src="https://www.youtube.com/embed/l_5JRL1UDzY"&gt;&lt;/iframe&gt;
&lt;/div&gt;</content><category term="learnings"></category><category term="bsc"></category><category term="lessons"></category><category term="mobile-dev"></category><category term="react-native"></category></entry><entry><title>Book summary: Effective Java</title><link href="https://www.sglavoie.com/posts/2023/06/11/book-summary-effective-java/" rel="alternate"></link><published>2023-06-11T18:15:00-06:00</published><updated>2023-06-11T18:15:00-06:00</updated><author><name>Sébastien Lavoie</name></author><id>tag:www.sglavoie.com,2023-06-11:/posts/2023/06/11/book-summary-effective-java/</id><summary type="html">&lt;p&gt;The following are some notes I have taken while reading &lt;a href="https://www.oreilly.com/library/view/effective-java-3rd/9780134686097/"&gt;Effective Java&lt;/a&gt; (Third Edition), written by Joshua Bloch. Each item is an actual heading taken verbatim from the book, while the bullet points are my rehash of the original&amp;nbsp;content.&lt;/p&gt;</summary><content type="html">
&lt;hr/&gt;
&lt;h1 id="book-summary"&gt;Book summary&lt;/h1&gt;
&lt;h2 id="creating-and-destroying-objects"&gt;Creating and destroying objects&lt;/h2&gt;
&lt;h3 id="item-1-consider-static-factory-methods-instead-of-constructors"&gt;Item 1: Consider static factory methods instead of constructors&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Use static factory methods to increase readability and make classes more flexible (e.g., &lt;code&gt;Foo.withOpenBar()&lt;/code&gt; instead of &lt;code&gt;new Foo(true)&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-2-consider-a-builder-when-faced-with-many-constructor-parameters"&gt;Item 2: Consider a builder when faced with many constructor parameters&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;When a class has many parameters, use a builder instead of a “&lt;em&gt;telescoping constructor pattern&lt;/em&gt;” (i.e., having a separate method to call the class with any number of parameters, which may or may not all be used, leading to confusion and difficulty to use).&lt;/li&gt;
&lt;li&gt;The “JavaBeans pattern” uses setters and a parameter-less constructor, allowing the use of any parameters as needed when using the code (e.g., &lt;code&gt;Foo.setMethod()&lt;/code&gt;). This allows the class to enter in an inconsistent state (it is difficult to guarantee that a combination of used parameters makes sense) and makes it difficult to create an immutable class.&lt;/li&gt;
&lt;li&gt;This pattern allows calling code like &lt;code&gt;NutritionFacts cocaCola = new NutritionFacts.Builder(240, 8).calories(100).sodium(35).carbohydrate(27).build();&lt;/code&gt;, which basically instantiate a class with optional parameters as would be the case in Python.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-3-enforce-the-singleton-property-with-a-private-constructor-or-an-enum-type"&gt;Item 3: Enforce the singleton property with a private constructor or an enum type&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The recommended path forward is to use an &lt;code&gt;enum&lt;/code&gt; type like so:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;enum&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MyClass&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="n"&gt;INSTANCE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;myMethod&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="n"&gt;MyClass&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MyClass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;INSTANCE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;myMethod&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="item-4-enforce-non-instantiability-with-a-private-constructor"&gt;Item 4: Enforce non-instantiability with a private constructor&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Simply define the class constructor to be &lt;code&gt;private&lt;/code&gt; so that the class cannot be instantiated. This is useful for utility classes that may contain a bunch of static methods where instantiating the class itself is nonsensical.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-5-prefer-dependency-injection-to-hardwiring-resources"&gt;Item 5: Prefer dependency injection to hardwiring resources&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The example given with a &lt;code&gt;SpellChecker&lt;/code&gt; that depends on a &lt;code&gt;Dictionary&lt;/code&gt; makes a lot of sense: instead of having a class &lt;code&gt;SpellChecker&lt;/code&gt; define a &lt;code&gt;Dictionary&lt;/code&gt; that won’t be reusable elsewhere or that may need to change, pass the &lt;code&gt;Dictionary&lt;/code&gt; into the constructor of the class so that different dictionaries can be used with the same class, making it easier to test things independently and update an existing implementation.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-6-avoid-creating-unnecessary-objects"&gt;Item 6: Avoid creating unnecessary objects&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The author provides two striking examples of where creating unnecessary objects can be detrimental to performance: using &lt;code&gt;Long sum = 0L;&lt;/code&gt; instead of &lt;code&gt;long sum = 0L;&lt;/code&gt; when summing up positive integers and matching a regular expression on a string repeatedly instead of compiling the regular expression once for re-use. In short, avoid creating unnecessary objects and prefer primitives over boxed primitives.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-7-eliminate-obsolete-object-references"&gt;Item 7: Eliminate obsolete object references&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The author provides an example of a stack implementation that has a memory leak because the stack maintains obsolete references to objects that have been popped off the stack. The solution is to null out references once they are no longer needed, which in this case happened in a class where manual memory management was occurring. This is a problem because the garbage collector has no way of knowing that the objects it references after a certain portion of the array are no longer needed.&lt;/li&gt;
&lt;li&gt;The author also shows an example of a cache that uses a &lt;code&gt;WeakHashMap&lt;/code&gt; to store the cache, which allows the garbage collector to remove entries from the cache when they are no longer referenced elsewhere in the program.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-8-avoid-finalizers-and-cleaners"&gt;Item 8: Avoid finalizers and cleaners&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="dquo"&gt;“&lt;/span&gt;&lt;em&gt;Finalizers are unpredictable, often dangerous, and generally unnecessary.&lt;/em&gt;” They can lead to performance issues and resource leaks. They should be avoided. There is no guarantee that they will be called in a timely manner, or at all.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-9-prefer-try-with-resources-to-try-finally"&gt;Item 9: Prefer try-with-resources to try-finally&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The author provides an example of a class that reads the first line of a file and returns it as a string. The class uses a &lt;code&gt;BufferedReader&lt;/code&gt; to read the file and a &lt;code&gt;FileReader&lt;/code&gt; to open the file. The problem is that the &lt;code&gt;FileReader&lt;/code&gt; is never closed, which can lead to resource leaks. The solution is to use a &lt;code&gt;try-with-resources&lt;/code&gt; block, which will automatically close the &lt;code&gt;FileReader&lt;/code&gt; when the block is exited.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="methods-common-to-all-objects"&gt;Methods common to all objects&lt;/h2&gt;
&lt;h3 id="item-10-obey-the-general-contract-when-overriding-equals"&gt;Item 10: Obey the general contract when overriding &lt;code&gt;equals&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;equals&lt;/code&gt; method must be reflexive, symmetric, transitive, consistent, and &lt;code&gt;x.equals(null)&lt;/code&gt; must return &lt;code&gt;false&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;It is generally a bad idea to &lt;code&gt;@Override&lt;/code&gt; the &lt;code&gt;equals&lt;/code&gt; method when inheriting from a concrete class, as it is difficult to ensure that the contract is respected. It is better to use composition instead of inheritance in this case.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-11-always-override-hashcode-when-you-override-equals"&gt;Item 11: Always override &lt;code&gt;hashCode&lt;/code&gt; when you override &lt;code&gt;equals&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;If two objects are equal according to the &lt;code&gt;equals&lt;/code&gt; method, they must have the same hash code. The reverse is not true: two objects with the same hash code are not necessarily equal.&lt;/li&gt;
&lt;li&gt;Using the AutoValue framework in Java, it is possible to automatically generate &lt;code&gt;equals&lt;/code&gt; and &lt;code&gt;hashCode&lt;/code&gt; methods for a class.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-12-always-override-tostring"&gt;Item 12: Always override &lt;code&gt;toString&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;toString&lt;/code&gt; method should return a concise, useful description of the object. It should be overridden in every class unless the class is a utility class or a small value class.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;toString&lt;/code&gt; method should return all of the interesting information contained in the object when it is practical to do so. It should not return the memory address of the object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-13-override-clone-judiciously"&gt;Item 13: Override &lt;code&gt;clone&lt;/code&gt; judiciously&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;clone&lt;/code&gt; method is broken in Java. It is better to use a copy constructor or a copy factory instead of the &lt;code&gt;clone&lt;/code&gt; method.&lt;/li&gt;
&lt;li&gt;One exception is when a class implements the &lt;code&gt;Cloneable&lt;/code&gt; interface and has a final field that is a reference to an array or a final field that is a reference to an object. In this case, the &lt;code&gt;clone&lt;/code&gt; method can be used to create a copy of the object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-14-consider-implementing-comparable"&gt;Item 14: Consider implementing &lt;code&gt;Comparable&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Implement the &lt;code&gt;Comparable&lt;/code&gt; interface when a class has a natural ordering. This allows the class to be used in sorted collections and provides a way to compare objects of the class.&lt;/li&gt;
&lt;li&gt;An example is given to compare phone numbers using the &lt;code&gt;Comparable&lt;/code&gt; interface, where chaining happens in order to compare from the most significant field to the least significant field, e.g.:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// Comparable with comparator construction methods&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="kd"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;final&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Comparator&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;PhoneNumber&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;COMPARATOR&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="n"&gt;comparingInt&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;PhoneNumber&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;areaCode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;             &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;thenComparingInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;             &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;thenComparingInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;lineNum&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;compareTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PhoneNumber&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;COMPARATOR&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;compare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pn&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="classes-and-interfaces"&gt;Classes and interfaces&lt;/h2&gt;
&lt;h3 id="item-15-minimize-the-accessibility-of-classes-and-members"&gt;Item 15: Minimize the accessibility of classes and members&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Make each class or member as inaccessible as possible. This allows for better encapsulation and makes it easier to change the implementation of a class without breaking the code that uses it.&lt;/li&gt;
&lt;li&gt;In public classes, instance fields should rarely be public, as that generally makes the classes themselves non-thread-safe. Instead, use accessor methods to access the fields.&lt;/li&gt;
&lt;li&gt;Static final fields can be made public if they are immutable.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-16-in-public-classes-use-accessor-methods-not-public-fields"&gt;Item 16: In public classes, use accessor methods, not public fields&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;When a class needs to be accessed outside of its package, provide accessor methods instead of making the fields public. This allows the class to change its implementation without breaking the code that uses it.&lt;/li&gt;
&lt;li&gt;This does not really apply to nested or private classes that are only used within the package as long as they still represent data structures usefully, as this leads to less visual clutter.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-17-minimize-mutability"&gt;Item 17: Minimize mutability&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Don’t allow the class to use &lt;em&gt;mutators&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Prevent the class from being extendable.&lt;/li&gt;
&lt;li&gt;Make all fields final.&lt;/li&gt;
&lt;li&gt;Make all fields private.&lt;/li&gt;
&lt;li&gt;Don’t write setters when they are not needed.&lt;/li&gt;
&lt;li&gt;Reducing the number of states a class can find itself in makes it easier to reason about the class and reduces the number of bugs that can occur.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-18-favor-composition-over-inheritance"&gt;Item 18: Favor composition over inheritance&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Inheritance is often overused and can lead to fragile code. It is better to use composition instead of inheritance where appropriate.&lt;/li&gt;
&lt;li&gt;When a class takes a reference to another class as a parameter in its constructor while extending the interface for the class it is taking as a parameter via a forwarding class, it is using composition, as it calls &lt;code&gt;super(otherClass)&lt;/code&gt; in its constructor. This allows the class passed as a parameter to be extended without having to change the class itself. In this way, the class using composition becomes a wrapper that can add functionality on top of the class it is wrapping. The books gives an example of a &lt;code&gt;ForwardingSet&lt;/code&gt; that extends &lt;code&gt;Set&lt;/code&gt; and takes a &lt;code&gt;Set&lt;/code&gt; as a parameter in its constructor. The &lt;code&gt;ForwardingSet&lt;/code&gt; can then add functionality on top of the &lt;code&gt;Set&lt;/code&gt; it is wrapping, in this case by counting the number of times the &lt;code&gt;add&lt;/code&gt; method is called.&lt;/li&gt;
&lt;li&gt;The main, appropriate use case for inheritance is when a class is a subtype of another class and satisfies the &lt;em&gt;is-a&lt;/em&gt; relationship.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-19-design-and-document-for-inheritance-or-else-prohibit-it"&gt;Item 19: Design and document for inheritance or else prohibit it&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;To test a class for inheritance, try to extend it. If it is not possible to extend the class, it is not designed for inheritance.&lt;/li&gt;
&lt;li&gt;No &lt;em&gt;overridable&lt;/em&gt; methods should be called in the constructor, because the superclass runs before the subclass, and the subclass will not have been initialized yet.&lt;/li&gt;
&lt;li&gt;It is better to prohibit inheritance by declaring a class to be &lt;code&gt;final&lt;/code&gt; and ensuring that no constructors are accessible.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-20-prefer-interfaces-to-abstract-classes"&gt;Item 20: Prefer interfaces to abstract classes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Interfaces are better than abstract classes because they allow for multiple inheritance, they allow for the creation of mixins, and they allow for the creation of &lt;em&gt;tag interfaces&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Interfaces can define types that do not need to be represented hierarchically. For instance, a &lt;code&gt;DirectorPhotographer&lt;/code&gt; interface can be created that extends both the &lt;code&gt;Director&lt;/code&gt; and &lt;code&gt;Photographer&lt;/code&gt; interfaces.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-21-design-interfaces-for-posterity"&gt;Item 21: Design interfaces for posterity&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Multiple programmers should implement interfaces in different ways, and multiple client programs should use the interfaces to ensure they satisfy all intended uses. Flaws in interfaces are easier to correct before release.&lt;/li&gt;
&lt;li&gt;The moral is to be cautious when adding methods to existing interfaces using default methods and to thoroughly test and design interfaces to avoid issues and flaws in the long term.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-22-use-interfaces-only-to-define-types"&gt;Item 22: Use interfaces only to define types&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Interfaces serve as types that define what a client can do with instances of a class that implements the interface.&lt;/li&gt;
&lt;li&gt;Constant interfaces consist solely of static final fields, exporting constants. They are a poor use of interfaces as they expose implementation details and confuse users.&lt;/li&gt;
&lt;li&gt;Implementing a constant interface leaks implementation details into the class’s &lt;span class="caps"&gt;API&lt;/span&gt; and creates a commitment to maintain binary compatibility. Subclasses of a class implementing a constant interface are also affected.&lt;/li&gt;
&lt;li&gt;If constants are tied to an existing class or interface, add them directly to that class or interface. If constants are best viewed as members of an enumerated type, use an enum type. Otherwise, use a noninstantiable utility class to export the constants.&lt;/li&gt;
&lt;li&gt;Interfaces should be designed to define types and not used solely for the purpose of exporting constants.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-23-prefer-class-hierarchies-to-tagged-classes"&gt;Item 23: Prefer class hierarchies to tagged classes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Tagged classes are verbose, error-prone, and inefficient. They have boilerplate code, mix multiple implementations in a single class, increase memory footprint, require careful initialization, and make it difficult to add new flavors.&lt;/li&gt;
&lt;li&gt;Instead, abstract classes can be used as the root of the hierarchy, with concrete subclasses representing each flavor.&lt;/li&gt;
&lt;li&gt;Class hierarchies eliminate the shortcomings of tagged classes. They are simpler, clearer, have no boilerplate, ensure field initialization, prevent missing cases, support independent extensibility, and provide distinct data types for each flavor.&lt;/li&gt;
&lt;li&gt;Class hierarchies can reflect natural relationships among types. For example, a square can be represented as a subclass of a rectangle in the hierarchy.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-24-favor-static-member-classes-over-nonstatic"&gt;Item 24: Favor static member classes over nonstatic&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;There are four kinds of nested classes in Java: static member classes, nonstatic member classes (inner classes), anonymous classes, and local classes.&lt;/li&gt;
&lt;li&gt;Static member classes are ordinary classes declared inside another class and have access to all members of the enclosing class. They are static members of their enclosing class and serve as public helper classes. They obey the same accessibility rules as other static members.&lt;/li&gt;
&lt;li&gt;Nonstatic member classes are implicitly associated with an instance of the enclosing class and can access methods and fields of the enclosing instance. They require an enclosing instance to be created and cannot exist independently.&lt;/li&gt;
&lt;li&gt;Private static member classes are used to represent components of the object represented by their enclosing class. They don’t require access to the enclosing instance and avoid unnecessary memory usage compared to nonstatic member classes.&lt;/li&gt;
&lt;li&gt;If a member class doesn’t require access to an enclosing instance, it should be declared as a static member class to avoid the overhead of an extra reference and potential memory leaks.&lt;/li&gt;
&lt;li&gt;Static member classes are preferred over nonstatic member classes unless access to the enclosing instance is necessary.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-25-limit-source-files-to-a-single-top-level-class"&gt;Item 25: Limit source files to a single top-level class&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The risks stem from the possibility of providing multiple definitions for a class, and the order in which source files are passed to the compiler determines which definition is used.&lt;/li&gt;
&lt;li&gt;If there is a need to group related classes, consider using static member classes as an alternative. Static member classes enhance readability and allow for reduced accessibility by declaring them private.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="generics"&gt;Generics&lt;/h2&gt;
&lt;h3 id="item-26-dont-use-raw-types"&gt;Item 26: Don’t use raw types&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Raw types are generic types used without specifying any type parameters.&lt;/li&gt;
&lt;li&gt;Using raw types can lead to errors at runtime (the compiler doesn’t provide type safety) and should be avoided.&lt;/li&gt;
&lt;li&gt;Instead of using raw types, it is recommended to use parameterized types to ensure type safety and expressiveness.&lt;/li&gt;
&lt;li&gt;Unbounded wildcard types (e.g., &lt;code&gt;Set&amp;lt;?&amp;gt;&lt;/code&gt;) can be used when the actual type parameter is unknown or doesn’t matter: they offer flexibility while still maintaining type safety.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-27-eliminate-unchecked-warnings"&gt;Item 27: Eliminate unchecked warnings&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Some unchecked warnings are easy to eliminate by specifying the type parameter or using the diamond operator (&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Treat unchecked warnings seriously and make efforts to eliminate them, ensuring type safety and reducing the potential for ClassCastException at runtime.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-28-prefer-lists-to-arrays"&gt;Item 28: Prefer lists to arrays&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Arrays are covariant, which means if &lt;code&gt;Sub&lt;/code&gt; is a subtype of &lt;code&gt;Super&lt;/code&gt;, then the array type &lt;code&gt;Sub[]&lt;/code&gt; is a subtype of the array type &lt;code&gt;Super[]&lt;/code&gt;. Generics, on the other hand, are invariant.&lt;/li&gt;
&lt;li&gt;Arrays are reified, meaning they enforce their element type at runtime, while generics use erasure, enforcing their type constraints only at compile time.&lt;/li&gt;
&lt;li&gt;Arrays do not provide compile-time type safety, and errors may only be discovered at runtime, which is undesirable.&lt;/li&gt;
&lt;li&gt;Generic collections should be used instead of arrays to ensure better type safety and interoperability.&lt;/li&gt;
&lt;li&gt;Using lists instead of arrays allows for better compile-time type safety, even if it sacrifices some conciseness or performance.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-29-favor-generic-types"&gt;Item 29: Favor generic types&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The use of generic types eliminates the need for explicit casts and ensures type safety at compile time.&lt;/li&gt;
&lt;li&gt;Bounded type parameters can be used to restrict the permissible values of type parameters in generic types, allowing for more specific behavior without explicit casting.&lt;/li&gt;
&lt;li&gt;It is recommended to use generic types whenever possible to avoid casting and improve type safety. Existing non-generic types should be &lt;em&gt;generified&lt;/em&gt;, making them easier to use without breaking existing clients.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-30-favor-generic-methods"&gt;Item 30: Favor generic methods&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;To write a generic method, add type parameters to its declaration and use those type parameters throughout the method.&lt;/li&gt;
&lt;li&gt;Generic methods provide type safety and ease of use by eliminating the need for explicit casts.&lt;/li&gt;
&lt;li&gt;Bounded wildcard types can be used in generic methods to make them more flexible and allow for different types of arguments.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-31-use-bounded-wildcards-to-increase-api-flexibility"&gt;Item 31: Use bounded wildcards to increase &lt;span class="caps"&gt;API&lt;/span&gt; flexibility&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Parameterized types are invariant, meaning that &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt; is not a subtype of &lt;code&gt;List&amp;lt;Object&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Wildcard types allow you to specify that a parameter can be a subtype of a certain type, using &lt;code&gt;? extends Type&lt;/code&gt; for producers and &lt;code&gt;? super Type&lt;/code&gt; for consumers.&lt;/li&gt;
&lt;li&gt;Wildcard types should not be used as return types.&lt;/li&gt;
&lt;li&gt;Wildcard types are particularly useful when working with comparables and comparators.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-32-combine-generics-and-varargs-judiciously"&gt;Item 32: Combine generics and &lt;code&gt;varargs&lt;/code&gt; judiciously&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Varargs&lt;/code&gt; methods and generics do not interact well due to the nature of &lt;code&gt;varargs&lt;/code&gt; creating arrays to hold the arguments.&lt;/li&gt;
&lt;li&gt;Alternatively, using a List parameter instead of a generic &lt;code&gt;varargs&lt;/code&gt; parameter can provide type safety, relying on the &lt;code&gt;List.of&lt;/code&gt; method to handle a variable number of arguments. The code may be slightly more verbose and slower.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-33-consider-typesafe-heterogeneous-containers"&gt;Item 33: Consider typesafe heterogeneous containers&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Common uses of generics involve parameterizing the container itself, such as &lt;code&gt;Set&amp;lt;E&amp;gt;&lt;/code&gt; and &lt;code&gt;Map&amp;lt;K,V&amp;gt;&lt;/code&gt;, which limits the number of type parameters per container.&lt;/li&gt;
&lt;li&gt;Runtime type safety can be achieved by checking the type relationship between the key and the instance being stored using a dynamic cast.&lt;/li&gt;
&lt;li&gt;Bounded type tokens can be used to restrict the types that can be passed as keys by using a bounded type parameter or a bounded wildcard.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="enums-and-annotations"&gt;Enums and annotations&lt;/h2&gt;
&lt;h3 id="item-34-use-enums-instead-of-int-constants"&gt;Item 34: Use enums instead of &lt;code&gt;int&lt;/code&gt; constants&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Some variants use String constants instead of int constants, but this approach has even more disadvantages. It can lead to errors, performance issues, and lacks type safety.&lt;/li&gt;
&lt;li&gt;Enum types in Java are full-fledged classes and offer type safety, expressive power, and additional benefits.&lt;/li&gt;
&lt;li&gt;Enum types consist of a fixed set of constants, each represented as an instance of the enum class. Enum constants are exported via public static final fields. Enum types are effectively final and can’t be extended or instantiated outside the declared constants.&lt;/li&gt;
&lt;li&gt;Enum types provide compile-time type safety. If you declare a parameter or variable of an enum type, the compiler ensures that only valid enum constants can be assigned or passed as arguments.&lt;/li&gt;
&lt;li&gt;Each enum type has its own namespace, allowing identically named constants in different enum types without conflicts.&lt;/li&gt;
&lt;li&gt;Enum types can have methods, fields, and can implement interfaces.&lt;/li&gt;
&lt;li&gt;Enum types have comparable performance to int constants. The space and time cost of loading and initializing enum types is usually negligible.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-35-use-instance-fields-instead-of-ordinals"&gt;Item 35: Use instance fields instead of ordinals&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;While it’s possible to derive associated int values from the ordinal, it is strongly discouraged. Using ordinal-based calculations for associated values can lead to maintenance issues and limitations.&lt;/li&gt;
&lt;li&gt;The recommended solution is to store associated int values in instance fields instead of deriving them from the ordinal. By assigning each enum constant a specific value in the constructor, you can avoid the pitfalls of relying on the ordinal.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-36-use-enumset-instead-of-bit-fields"&gt;Item 36: Use &lt;code&gt;EnumSet&lt;/code&gt; instead of bit fields&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Traditionally, if the elements of an enumerated type are used primarily in sets, the int enum pattern (Item 34) is used. Each constant is assigned a different power of 2, allowing bitwise &lt;span class="caps"&gt;OR&lt;/span&gt; operations to combine multiple constants into a set.&lt;/li&gt;
&lt;li&gt;It is harder to interpret a bit field when printed as a number compared to a simple int enum constant.&lt;/li&gt;
&lt;li&gt;There is no easy way to iterate over all the elements represented by a bit field.&lt;/li&gt;
&lt;li&gt;Bit fields require choosing a specific type (int or long) with a fixed width, which limits the maximum number of bits that can be used without changing the &lt;span class="caps"&gt;API&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;EnumSet&lt;/code&gt; provides type safety and interoperability, just like any other set implementation.&lt;/li&gt;
&lt;li&gt;Built-in operations: Bulk operations like removeAll and retainAll are implemented efficiently using bitwise arithmetic.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-37-use-enummap-instead-of-ordinal-indexing"&gt;Item 37: Use &lt;code&gt;EnumMap&lt;/code&gt; instead of ordinal indexing&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Ordinal indexing involves using an enum’s ordinal value as an index to access elements in an array or list. Problems:&lt;/li&gt;
&lt;li&gt;Using ordinals directly lacks the type safety provided by enums.&lt;/li&gt;
&lt;li&gt;Due to the incompatibility of arrays with generics, the program requires an unchecked cast, resulting in a compile-time warning.&lt;/li&gt;
&lt;li&gt;If the ordinal values change, the code breaks, and there’s no compile-time checking to ensure correct indexing.&lt;/li&gt;
&lt;li&gt;When using a two-dimensional array indexed by ordinals, the size of the table grows quadratically, even if some entries are null.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;EnumMap&lt;/code&gt; is a specialized map implementation designed to work efficiently with enum keys.&lt;/li&gt;
&lt;li&gt;They provide type safety, eliminating the need for unchecked casts. They also allow for cleaner code with no manual labeling of output.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-38-emulate-extensible-enums-with-interfaces"&gt;Item 38: Emulate extensible enums with interfaces&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Enum types in Java are not extensible by design.&lt;/li&gt;
&lt;li&gt;The basic idea is to define an interface for the opcode type and an enum that implements this interface.&lt;/li&gt;
&lt;li&gt;Emulating extensible enums with interfaces provides flexibility but has limitations. Implementations cannot be inherited from one enum type to another, and some code duplication may occur. Shared functionality can be encapsulated in a helper class or static helper method to reduce duplication.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-39-prefer-annotations-to-naming-patterns"&gt;Item 39: Prefer annotations to naming patterns&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Annotations offer a superior alternative to naming patterns. They address the shortcomings of naming patterns by providing compile-time checking, better enforcement of usage constraints, and support for associating parameter values with program elements (e.g., &lt;code&gt;@Test&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;While most programmers may not need to define their own annotation types, they should use predefined annotations provided by Java and consider using annotations provided by IDEs or static analysis tools. These annotations can enhance code quality and diagnostic information.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-40-consistently-use-the-override-annotation"&gt;Item 40: Consistently use the &lt;code&gt;Override&lt;/code&gt; annotation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;@Override&lt;/code&gt; annotation is used on method declarations to indicate that the annotated method overrides a declaration in a supertype (class or interface).&lt;/li&gt;
&lt;li&gt;Consistently using &lt;code&gt;@Override&lt;/code&gt; protects against bugs by ensuring that overridden methods are correctly implemented. It helps catch errors where a method is intended to override a superclass method but ends up overloading it instead.&lt;/li&gt;
&lt;li&gt;In abstract classes and interfaces, it is worth annotating all methods that are believed to override superclass or super-interface methods, regardless of their nature (concrete or abstract). This helps ensure correctness and prevents accidental additions of new methods.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-41-use-marker-interfaces-to-define-types"&gt;Item 41: Use marker interfaces to define types&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;A marker interface is an interface that contains &lt;em&gt;no method declarations&lt;/em&gt; but serves as a marker to designate a class implementing it as having a specific property. An example is the Serializable interface, which marks a class as serializable.&lt;/li&gt;
&lt;li&gt;Marker interfaces define a type that is implemented by instances of the marked class, allowing compile-time error detection. They provide stronger type checking compared to marker annotations, which cannot define a type.&lt;/li&gt;
&lt;li&gt;If the marker applies only to classes and interfaces, and there is a possibility of writing methods that accept only objects with the marking, a marker interface should be used. This enables compile-time type checking. If there is no need for such methods or if the marker is part of a framework heavily using annotations, a marker annotation is more appropriate.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="lambdas-and-streams"&gt;Lambdas and streams&lt;/h2&gt;
&lt;h3 id="item-42-prefer-lambdas-to-anonymous-classes"&gt;Item 42: Prefer lambdas to anonymous classes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Lambdas are concise expressions that can be used to create instances of functional interfaces, providing a more compact alternative to anonymous classes.&lt;/li&gt;
&lt;li&gt;Lambdas lack names and documentation, making them less suitable for complex computations or those exceeding a few lines.&lt;/li&gt;
&lt;li&gt;Anonymous classes are still necessary for creating instances of abstract classes or interfaces with multiple abstract methods. Lambdas cannot obtain a reference to themselves, unlike anonymous classes.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-43-prefer-method-references-to-lambdas"&gt;Item 43: Prefer method references to lambdas&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Method references offer a more concise alternative to lambdas. They allow you to refer to a method by name instead of providing a lambda expression. This is particularly useful when the lambda expression only calls a method without any additional logic. E.g.:&lt;/li&gt;
&lt;li&gt;Method reference: &lt;code&gt;map.merge(key, 1, Integer::sum);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Lambda expression: &lt;code&gt;service.execute(() -&amp;gt; action());&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;By using method references, you can eliminate the need to declare parameter names explicitly in the lambda expression.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-44-favor-the-use-of-standard-functional-interfaces"&gt;Item 44: Favor the use of standard functional interfaces&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Instead of using the Template Method pattern, which involves sub-classing and overriding methods, the modern approach is to provide static factories or constructors that accept function objects as parameters.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;java.util.function&lt;/code&gt; package provides a collection of standard functional interfaces for various use cases. When choosing a functional parameter type, it is recommended to use the standard functional interfaces instead of creating custom interfaces.&lt;/li&gt;
&lt;li&gt;Functional interfaces should be annotated with the &lt;code&gt;@FunctionalInterface&lt;/code&gt; annotation. This annotation serves as documentation, enforces the single abstract method requirement, and prevents accidental addition of abstract methods in the interface.&lt;/li&gt;
&lt;li&gt;In &lt;span class="caps"&gt;API&lt;/span&gt; design, it’s important to avoid overloading methods that take different functional interfaces in the same argument position. This can create ambiguity for clients, and it’s best to design the &lt;span class="caps"&gt;API&lt;/span&gt; to prevent this situation.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-45-use-streams-judiciously"&gt;Item 45: Use streams judiciously&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Streams were introduced in Java 8 as a way to perform bulk operations on sequences of data elements. A stream represents a sequence of elements, and a stream pipeline consists of a source stream, intermediate operations, and a terminal operation.&lt;/li&gt;
&lt;li&gt;The streams &lt;span class="caps"&gt;API&lt;/span&gt; provides a fluent &lt;span class="caps"&gt;API&lt;/span&gt;, allowing multiple operations to be chained together in a single expression. This enables concise and readable code.&lt;/li&gt;
&lt;li&gt;Overusing streams can make code harder to read and maintain.&lt;/li&gt;
&lt;li&gt;They have restrictions on accessing and modifying local variables and limited control flow capabilities.&lt;/li&gt;
&lt;li&gt;Streams are well-suited for tasks such as transforming elements, filtering, combining elements, accumulating into collections, and searching. If a computation requires access to corresponding elements from multiple stages of the pipeline, streams might not be the best choice.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-46-prefer-side-effect-free-functions-in-streams"&gt;Item 46: Prefer side-effect-free functions in streams&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The fundamental aspect of the streams paradigm is structuring computations as a sequence of transformations where each stage’s result is a pure function of the previous stage’s result. A pure function depends only on its input and does not have any side effects or modify any state.&lt;/li&gt;
&lt;li&gt;When using stream operations, both intermediate and terminal, it’s important to ensure that the function objects passed to them are free of side effects. This means they should not depend on mutable state or update any state.&lt;/li&gt;
&lt;li&gt;The correct usage of streams involves utilizing collectors, which encapsulate reduction strategies. Collectors can be used to gather elements into collections or create maps based on grouping or other criteria (e.g., &lt;code&gt;toList&lt;/code&gt;, &lt;code&gt;toSet&lt;/code&gt;, &lt;code&gt;toMap&lt;/code&gt;, &lt;code&gt;groupingBy&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;There are parallel and concurrent variants of collectors, such as &lt;code&gt;groupingByConcurrent&lt;/code&gt; and &lt;code&gt;toConcurrentMap&lt;/code&gt;, which efficiently handle parallel execution and produce &lt;code&gt;ConcurrentHashMap&lt;/code&gt; instances.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-47-prefer-collection-to-stream-as-a-return-type"&gt;Item 47: Prefer Collection to Stream as a return type&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;code&gt;for&lt;/code&gt; loop cannot be used to iterate over a stream, and it’s not possible to add elements to a stream. This makes streams less flexible than collections.&lt;/li&gt;
&lt;li&gt;To enable iteration over a stream with a for-each loop, an adapter method can be created. The method converts a Stream to an Iterable, allowing for the use of for-each loops.&lt;/li&gt;
&lt;li&gt;When designing a public &lt;span class="caps"&gt;API&lt;/span&gt; that returns a sequence, it is important to consider users who may prefer stream pipelines or for-each loops. The Collection interface, being a subtype of Iterable and providing a stream method, is often the best choice for a return type. Arrays can also be used when appropriate.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-48-use-caution-when-making-streams-parallel"&gt;Item 48: Use caution when making streams parallel&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Simply adding the &lt;code&gt;parallel&lt;/code&gt; method to a stream pipeline does not guarantee improved performance. In some cases, it can lead to liveness failures, incorrect results, and unpredictable behavior.&lt;/li&gt;
&lt;li&gt;Performance gains from parallelism are most significant when working with data structures like &lt;code&gt;ArrayList&lt;/code&gt;, &lt;code&gt;HashMap&lt;/code&gt;, &lt;code&gt;HashSet&lt;/code&gt;, &lt;code&gt;ConcurrentHashMap&lt;/code&gt;, &lt;code&gt;arrays&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt; ranges, and &lt;code&gt;long&lt;/code&gt; ranges. These data structures can be easily split into sub-ranges, enabling efficient work division among parallel threads.&lt;/li&gt;
&lt;li&gt;Parallelization should only be used as a performance optimization.&lt;/li&gt;
&lt;li&gt;Certain domains, such as machine learning and data processing, are well-suited for parallel speedups.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="methods"&gt;Methods&lt;/h2&gt;
&lt;h3 id="item-49-check-parameters-for-validity"&gt;Item 49: Check parameters for validity&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Clearly document the restrictions on parameter values in the method’s documentation. Enforce these restrictions by performing parameter checks at the beginning of the method body. Detecting errors as soon as possible is crucial for maintaining code integrity.&lt;/li&gt;
&lt;li&gt;If a method fails to check its parameters, it may result in confusing exceptions, incorrect results, or compromised object states.&lt;/li&gt;
&lt;li&gt;For public and protected methods, use the &lt;code&gt;@throws&lt;/code&gt; tag in Javadoc to document the exception that will be thrown if a parameter value violates a restriction.&lt;/li&gt;
&lt;li&gt;Use the &lt;code&gt;Objects.requireNonNull&lt;/code&gt; method, introduced in Java 7, to check for null values. It is flexible and convenient, allowing you to specify your own exception detail message if desired. It returns the non-null value, enabling simultaneous null check and usage.&lt;/li&gt;
&lt;li&gt;Nonpublic methods can use assertions to check parameters since the package author controls the method’s usage. Assertions throw AssertionError if the condition fails. Enabling assertions with the &lt;code&gt;-ea&lt;/code&gt; flag is necessary for assertions to take effect.&lt;/li&gt;
&lt;li&gt;While it’s important to check parameter validity, avoid imposing unnecessary restrictions on parameters. Design methods to be as general as possible, accepting a wide range of valid parameter values.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-50-make-defensive-copies-when-needed"&gt;Item 50: Make defensive copies when needed&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;To protect against ill-behaved clients or honest mistakes, it is crucial to write robust classes that can handle unexpected behavior.&lt;/li&gt;
&lt;li&gt;Classes that contain mutable objects can be vulnerable to attacks that exploit their mutability.&lt;/li&gt;
&lt;li&gt;make defensive copies of each mutable parameter in the constructor. Use these copies as components of the class instance instead of the original objects. This ensures that changes to the original objects do not affect the class’s internal state.&lt;/li&gt;
&lt;li&gt;Accessor methods that provide access to mutable internal fields should also return defensive copies of the fields.&lt;/li&gt;
&lt;li&gt;Whenever possible, use immutable objects as components of your classes to eliminate the need for defensive copying. Immutable objects are inherently safe and can simplify your code.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-51-design-method-signatures-carefully"&gt;Item 51: Design method signatures carefully&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Choose method names carefully.&lt;/li&gt;
&lt;li&gt;Avoid excessive convenience methods. Convenience methods are useful, but they can make the &lt;span class="caps"&gt;API&lt;/span&gt; more difficult to learn and maintain.&lt;/li&gt;
&lt;li&gt;Limit parameter list length.&lt;/li&gt;
&lt;li&gt;Prefer interfaces over classes for parameter types. Use interfaces to define parameters instead of specific classes whenever possible. This allows for more flexibility and enables the use of different implementations. For example, use the &lt;code&gt;Map&lt;/code&gt; interface instead of the &lt;code&gt;HashMap&lt;/code&gt; class to allow different &lt;code&gt;Map&lt;/code&gt; implementations to be used.&lt;/li&gt;
&lt;li&gt;Use enums instead of boolean parameters. Enums allow for future expansion by adding more options without changing method signatures.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-52-use-overloading-judiciously"&gt;Item 52: Use overloading judiciously&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Overloading can lead to unexpected behavior: If overloaded methods have the same number of parameters and the same compile-time type of the arguments, the selection of the method is ambiguous.&lt;/li&gt;
&lt;li&gt;Overloaded methods should have “radically different” parameter types.&lt;/li&gt;
&lt;li&gt;Generics can create situations where two overloadings with different functional interfaces in the same argument position cause confusion. It’s recommended not to overload methods that take different functional interfaces in the same argument position.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-53-use-varargs-judiciously"&gt;Item 53: Use varargs judiciously&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Varargs allow methods to accept a variable number of arguments of a specified type. They work by creating an array internally and passing the array to the method.&lt;/li&gt;
&lt;li&gt;Use varargs when you want a method with a variable number of arguments. For example, when calculating the sum of integers or finding the minimum of a set of integers.&lt;/li&gt;
&lt;li&gt;Declare the method to take two parameters: one normal parameter and one varargs parameter. This ensures that the method can handle both cases when at least one argument is passed and when more than one argument is passed.&lt;/li&gt;
&lt;li&gt;Be aware that every invocation of a varargs method causes an array allocation and initialization, so consider the performance implications in performance-critical situations.&lt;/li&gt;
&lt;li&gt;To optimize performance while still using varargs, you can provide overloaded methods with a fixed number of parameters and a single varargs method for cases when the number of arguments exceeds a certain threshold.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-54-return-empty-collections-or-arrays-not-nulls"&gt;Item 54: Return empty collections or arrays, not nulls&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Returning null to indicate an empty collection or array is unnecessary and error-prone. It requires extra code in the client to handle the null return value and increases the risk of null pointer errors.&lt;/li&gt;
&lt;li&gt;Instead of returning null, return empty collections or arrays. This can be achieved by creating a new instance of the appropriate collection or array type. For example, returning &lt;code&gt;new ArrayList&amp;lt;&amp;gt;(cheesesInStock)&lt;/code&gt; will return an empty &lt;code&gt;ArrayList&lt;/code&gt; if &lt;code&gt;cheesesInStock&lt;/code&gt; is empty.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-55-return-optionals-judiciously"&gt;Item 55: Return optionals judiciously&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Exceptions should be reserved for exceptional conditions, and returning null requires special-case code to handle it and increases the risk of null pointer errors.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;Optional&amp;lt;T&amp;gt;&lt;/code&gt; class represents an immutable container that can hold either a single non-null value of type &lt;code&gt;T&lt;/code&gt; or nothing at all (empty). It provides a more flexible and less error-prone alternative to exceptions or null returns.&lt;/li&gt;
&lt;li&gt;Avoid using &lt;code&gt;Optional&amp;lt;T&amp;gt;&lt;/code&gt; for container types like collections, maps, streams, arrays, and other optionals. Return the empty container directly instead of wrapping it in an optional.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-56-write-doc-comments-for-all-exposed-api-elements"&gt;Item 56: Write doc comments for all exposed &lt;span class="caps"&gt;API&lt;/span&gt; elements&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Javadoc is a utility that generates &lt;span class="caps"&gt;API&lt;/span&gt; documentation automatically from specially formatted doc comments in the source code.&lt;/li&gt;
&lt;li&gt;Precede every exported class, interface, constructor, method, and field declaration with a doc comment. It describes the contract between the &lt;span class="caps"&gt;API&lt;/span&gt; element and its client.&lt;/li&gt;
&lt;li&gt;Document the preconditions, post-conditions, and side effects of methods. Use the &lt;code&gt;@param&lt;/code&gt; tag to describe parameters, &lt;code&gt;@return&lt;/code&gt; tag for the return value (if not void), and &lt;code&gt;@throws&lt;/code&gt; tag for exceptions thrown.&lt;/li&gt;
&lt;li&gt;Use &lt;span class="caps"&gt;HTML&lt;/span&gt; tags in doc comments to format and structure the generated documentation.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;{@code}&lt;/code&gt; tag to render code fragments in code font and to suppress processing of &lt;span class="caps"&gt;HTML&lt;/span&gt; markup and nested Javadoc tags within the code fragment.&lt;/li&gt;
&lt;li&gt;Write summary descriptions as &lt;em&gt;verb&lt;/em&gt; phrases for &lt;em&gt;methods and constructors&lt;/em&gt;, and &lt;em&gt;noun&lt;/em&gt; phrases for &lt;em&gt;classes&lt;/em&gt;, &lt;em&gt;interfaces&lt;/em&gt;, and &lt;em&gt;fields&lt;/em&gt;. The first sentence becomes the summary description.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;{@literal}&lt;/code&gt; tag to include &lt;span class="caps"&gt;HTML&lt;/span&gt; metacharacters in documentation, such as &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;amp;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Document self-use patterns in classes designed for inheritance using the &lt;code&gt;@implSpec&lt;/code&gt; tag. It describes the contract between the method and its subclass.&lt;/li&gt;
&lt;li&gt;Package-level doc comments should be placed in &lt;code&gt;package-info.java&lt;/code&gt; file. Similarly, module-level comments should be placed in &lt;code&gt;module-info.java&lt;/code&gt; file.&lt;/li&gt;
&lt;li&gt;Document thread-safety and serializability of classes.&lt;/li&gt;
&lt;li&gt;Read the generated documentation to ensure clarity and make any necessary improvements to the doc comments.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="general-programming"&gt;General programming&lt;/h2&gt;
&lt;h3 id="item-57-minimize-the-scope-of-local-variables"&gt;Item 57: Minimize the scope of local variables&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Declare variables where they are first used, rather than at the beginning of a block. This approach eliminates clutter and helps readers understand the purpose and type of the variable when it is used.&lt;/li&gt;
&lt;li&gt;Avoid prematurely declaring variables outside of the block in which they are used. By doing so, you ensure that the variable’s scope begins at the appropriate point and ends when it is no longer needed.&lt;/li&gt;
&lt;li&gt;Take advantage of the scope-limiting capabilities of for loops.&lt;/li&gt;
&lt;li&gt;Prefer for loops over while loops when the loop variable is not needed after the loop terminates.&lt;/li&gt;
&lt;li&gt;Minimizing the scope of local variables helps prevent copy-and-paste errors.&lt;/li&gt;
&lt;li&gt;Consider using multiple loop variables within a for loop to avoid redundant computations. This approach can improve performance by storing the limit of the first variable in a second variable, eliminating the need for redundant computations in each iteration.&lt;/li&gt;
&lt;li&gt;Keep methods small and focused to minimize the scope of local variables.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-58-prefer-for-each-loops-to-traditional-for-loops"&gt;Item 58: Prefer &lt;code&gt;for-each&lt;/code&gt; loops to traditional &lt;code&gt;for&lt;/code&gt; loops&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Traditional &lt;code&gt;for&lt;/code&gt; loops for iteration over collections and arrays can be cluttered and prone to errors. They require explicit use of an iterator or an index variable.&lt;/li&gt;
&lt;li&gt;The for-each loop (enhanced for statement) solves these issues by eliminating the need for explicit iterators or index variables: &lt;code&gt;for (Element e : elements) { ... }&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;For-each loops can be used with both collections and arrays, making it easy to switch the implementation type of a container without changing the loop syntax.&lt;/li&gt;
&lt;li&gt;For nested iteration, for-each loops offer greater clarity and simplicity compared to traditional for loops. They avoid common bugs that can occur when using multiple iterators or index variables.&lt;/li&gt;
&lt;li&gt;There are certain situations where for-each loops cannot be used, such as when performing destructive filtering, transforming values, or iterating in parallel. In these cases, traditional for loops or other approaches may be necessary.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;Iterable&lt;/code&gt; interface allows objects to be iterated over using the for-each loop. By implementing the &lt;code&gt;Iterable&lt;/code&gt; interface and providing an iterator method, your custom types can be used with for-each loops.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-59-know-and-use-the-libraries"&gt;Item 59: Know and use the libraries&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Libraries, such as &lt;code&gt;Random&lt;/code&gt;, offer well-designed and thoroughly tested methods for common tasks.&lt;/li&gt;
&lt;li&gt;The use of libraries saves time and effort. You can focus on your application logic instead of spending time on low-level implementations.&lt;/li&gt;
&lt;li&gt;Standard libraries tend to improve over time in terms of performance and functionality.&lt;/li&gt;
&lt;li&gt;While the libraries are extensive, every programmer should be familiar with the basics of &lt;code&gt;java.lang&lt;/code&gt;, &lt;code&gt;java.util&lt;/code&gt;, &lt;code&gt;java.io&lt;/code&gt;, and their sub-packages. Additional knowledge can be acquired on an as-needed basis.&lt;/li&gt;
&lt;li&gt;Certain libraries, such as the collections framework, streams library, and concurrency utilities in &lt;code&gt;java.util.concurrent&lt;/code&gt;, should be part of every programmer’s toolkit.&lt;/li&gt;
&lt;li&gt;Avoid reinventing the wheel. If a common task can be accomplished using existing library facilities, utilize them instead of writing your own code. Library code is often more robust and undergoes more scrutiny than individual developers can afford.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-60-avoid-float-and-double-if-exact-answers-are-required"&gt;Item 60: Avoid float and double if exact answers are required&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;float&lt;/code&gt; and &lt;code&gt;double&lt;/code&gt; types are designed for scientific and engineering calculations and provide fast but approximate results using binary floating-point arithmetic.&lt;/li&gt;
&lt;li&gt;The inherent imprecision of float and double types makes them unsuitable for applications where exact results are necessary, such as monetary calculations.&lt;/li&gt;
&lt;li&gt;Performing arithmetic operations with float and double types can lead to unexpected rounding errors and inaccuracies.&lt;/li&gt;
&lt;li&gt;Rounding the results before printing is not a reliable solution to the imprecision issue.&lt;/li&gt;
&lt;li&gt;To achieve accurate results in monetary calculations, it is recommended to use alternative data types like &lt;code&gt;BigDecimal&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, or &lt;code&gt;long&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BigDecimal&lt;/code&gt; is a precise data type that can handle exact decimal calculations. It is suitable for situations where accuracy is paramount, such as monetary calculations. However, it is less convenient to use than primitive types and slower in performance.&lt;/li&gt;
&lt;li&gt;An alternative approach is to perform calculations in cents using int or long types, keeping track of the decimal point manually. This approach is more efficient and convenient than using &lt;code&gt;BigDecimal&lt;/code&gt; but has limitations in handling large quantities.&lt;/li&gt;
&lt;li&gt;Use BigDecimal when precision is critical, int or long when performance and convenience are important, and float or double when approximate results are acceptable.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BigDecimal&lt;/code&gt; offers full control over rounding, which is useful in business calculations with legally mandated rounding behavior.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-61-prefer-primitive-types-to-boxed-primitives"&gt;Item 61: Prefer primitive types to boxed primitives&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Java has two types: primitives (e.g., &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt;, &lt;code&gt;boolean&lt;/code&gt;) and reference types (e.g., &lt;code&gt;String&lt;/code&gt;, &lt;code&gt;List&lt;/code&gt;). Each primitive type has a corresponding boxed primitive type (e.g., &lt;code&gt;Integer&lt;/code&gt;, &lt;code&gt;Double&lt;/code&gt;, &lt;code&gt;Boolean&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Primitives only have values, while boxed primitives have both values and identities.&lt;/li&gt;
&lt;li&gt;Boxed primitives have an additional nonfunctional value: &lt;code&gt;null&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Primitives are more time- and space-efficient compared to boxed primitives.&lt;/li&gt;
&lt;li&gt;Comparing boxed primitives with the &lt;code&gt;==&lt;/code&gt; operator performs an identity comparison, not a value comparison.&lt;/li&gt;
&lt;li&gt;Auto-unboxing a null boxed primitive results in a NullPointerException.&lt;/li&gt;
&lt;li&gt;Auto-boxing and auto-unboxing operations can lead to unnecessary object creations and performance issues.&lt;/li&gt;
&lt;li&gt;Use primitives whenever possible, especially when comparing values or performing computations.&lt;/li&gt;
&lt;li&gt;Boxed primitives are necessary in specific situations:&lt;/li&gt;
&lt;li&gt;When using collections, as primitives cannot be directly added to collections;&lt;/li&gt;
&lt;li&gt;As type parameters in parameterized types and methods;&lt;/li&gt;
&lt;li&gt;When making reflective method invocations.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-62-avoid-strings-where-other-types-are-more-appropriate"&gt;Item 62: Avoid strings where other types are more appropriate&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Strings should be used to represent text and should not be used as substitutes for other value types.&lt;/li&gt;
&lt;li&gt;Avoid using strings to represent numeric data. Translate numeric data into the appropriate numeric type, such as &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, or &lt;code&gt;BigInteger&lt;/code&gt;, to ensure accuracy and enable numerical operations.&lt;/li&gt;
&lt;li&gt;Enum types are better suited for enumerated type constants than strings. Use enums to represent a fixed set of values with distinct identities and behaviors.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-63-beware-the-performance-of-string-concatenation"&gt;Item 63: Beware the performance of string concatenation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The string concatenation operator is convenient for combining a few strings but does not scale well. When using the concatenation operator repeatedly, the time required is quadratic in the number of strings being concatenated because the contents of both strings are copied each time.&lt;/li&gt;
&lt;li&gt;To achieve better performance, use a &lt;code&gt;StringBuilder&lt;/code&gt; instead of the string concatenation operator when constructing a string from multiple components. &lt;code&gt;StringBuilder&lt;/code&gt; provides efficient appending of strings, and its performance is linear in the number of strings being concatenated.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;StringBuilder&lt;/code&gt; approach can significantly outperform the string concatenation operator, especially when the number of strings or the size of the resulting string is large. Preallocating a &lt;code&gt;StringBuilder&lt;/code&gt; with an appropriate capacity further improves performance by avoiding automatic growth.&lt;/li&gt;
&lt;li&gt;Consider alternatives to string concatenation, such as using a character array or processing strings individually instead of combining them if performance is a concern.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-64-refer-to-objects-by-their-interfaces"&gt;Item 64: Refer to objects by their interfaces&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Favor using interfaces as types over classes when referring to objects. Parameters, return values, variables, and fields should all be declared using interface types if appropriate interfaces exist.&lt;/li&gt;
&lt;li&gt;By using interfaces as types, your code becomes more flexible. If you decide to switch implementations, you can simply change the class name in the constructor (or use a different static factory) without affecting the surrounding code.&lt;/li&gt;
&lt;li&gt;It is appropriate to refer to objects by their class rather than an interface when no appropriate interface exists, such as with value classes like &lt;code&gt;String&lt;/code&gt; or &lt;code&gt;BigInteger&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Classes implementing an interface but providing additional methods not found in the interface should be referred to by their class only if the program relies on those extra methods.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-65-prefer-interfaces-to-reflection"&gt;Item 65: Prefer interfaces to reflection&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Reflection provides programmatic access to arbitrary classes and allows manipulation of their constructors, methods, and fields. However, it comes with several drawbacks:&lt;/li&gt;
&lt;li&gt;Loss of compile-time type checking and exception checking;&lt;/li&gt;
&lt;li&gt;Clumsy and verbose code required for reflective access;&lt;/li&gt;
&lt;li&gt;Poor performance compared to normal method invocation.&lt;/li&gt;
&lt;li&gt;Reflection is rarely needed in most applications.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-66-use-native-methods-judiciously"&gt;Item 66: Use native methods judiciously&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The use of native methods has serious disadvantages:&lt;/li&gt;
&lt;li&gt;Native languages are not memory safe, so applications using native methods are susceptible to memory corruption errors;&lt;/li&gt;
&lt;li&gt;Native methods make programs less portable as they are more platform-dependent than Java;&lt;/li&gt;
&lt;li&gt;Debugging native code is more challenging compared to Java code;&lt;/li&gt;
&lt;li&gt;Garbage collection and memory management become more complex since the garbage collector cannot track or automate native memory usage;&lt;/li&gt;
&lt;li&gt;Native methods require writing and maintaining “glue code,” which can be difficult to read and tedious to write.&lt;/li&gt;
&lt;li&gt;Use as little native code as possible.&lt;/li&gt;
&lt;li&gt;Thoroughly test the native code to avoid bugs that could corrupt the entire application.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-67-optimize-judiciously"&gt;Item 67: Optimize judiciously&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Premature optimization is often counterproductive. More computing sins are committed in the name of efficiency than for any other reason. Optimization without necessarily achieving it can lead to software that is neither fast nor correct and can be difficult to fix.&lt;/li&gt;
&lt;li&gt;Good programs should prioritize sound architectural principles over performance. Write good programs first, and if necessary, optimize them later. Good programs are designed with information hiding, allowing individual components to be changed without affecting the rest of the system.&lt;/li&gt;
&lt;li&gt;Performance should be considered during the design process. Avoid design decisions that limit performance, especially in APIs, wire-level protocols, and persistent data formats. &lt;span class="caps"&gt;API&lt;/span&gt; design can have a significant impact on performance, so be mindful of decisions such as mutability, inheritance, and interface usage.&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;API&lt;/span&gt; design and architectural decisions can have real performance consequences. Consider the trade-offs and implications of your design choices. For example, returning mutable objects may result in unnecessary defensive copying, and using implementation types instead of interfaces can limit future performance improvements.&lt;/li&gt;
&lt;li&gt;Before optimizing, ensure that your program has a clear, concise, and well-structured implementation. Measure performance before and after each attempted optimization. Profiling tools can help identify performance bottlenecks and guide optimization efforts. Be aware that Java’s performance model is less well-defined compared to lower-level languages, making it essential to measure the effects of optimizations on different implementations and hardware platforms.&lt;/li&gt;
&lt;li&gt;Algorithmic changes should be prioritized over low-level optimizations. If a quadratic or inefficient algorithm exists, no amount of tuning will fix the underlying problem.&lt;/li&gt;
&lt;li&gt;Performance measurement and optimization are iterative processes. Measure performance, identify bottlenecks, optimize relevant parts, and repeat until satisfied.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-68-adhere-to-generally-accepted-naming-conventions"&gt;Item 68: Adhere to generally accepted naming conventions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Typographical Naming Conventions:&lt;/li&gt;
&lt;li&gt;Package and module names should be hierarchical, separated by periods, and consist of lowercase alphabetic characters and digits. The name should begin with the organization’s Internet domain name, with the components reversed;&lt;/li&gt;
&lt;li&gt;Class and interface names should consist of one or more words, with the first letter of each word capitalized. Abbreviations should be avoided, except for acronyms and common abbreviations.&lt;/li&gt;
&lt;li&gt;Method and field names should follow the same typographical conventions as class and interface names, with the first letter lowercase for methods and fields. Acronyms occurring as the first word should be lowercase;&lt;/li&gt;
&lt;li&gt;Constant field names should consist of uppercase words separated by underscores;&lt;/li&gt;
&lt;li&gt;Local variable names follow similar conventions to member names, with abbreviations and short sequences of characters permitted.&lt;/li&gt;
&lt;li&gt;Grammatical Naming Conventions:&lt;/li&gt;
&lt;li&gt;Instantiable classes are generally named with a singular noun or noun phrase. Non-instantiable utility classes are often named with a plural noun;&lt;/li&gt;
&lt;li&gt;Interfaces are named like classes or with an adjective ending in “able” or “ible”;&lt;/li&gt;
&lt;li&gt;Methods that perform actions are named with a verb or verb phrase. Methods returning boolean values usually begin with “is” or “has”;&lt;/li&gt;
&lt;li&gt;Methods returning non-boolean values or attributes of the object are usually named with a noun, noun phrase, or a verb phrase beginning with “get”;&lt;/li&gt;
&lt;li&gt;Field names typically follow the same conventions as class and interface names, using nouns or noun phrases.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="exceptions"&gt;Exceptions&lt;/h2&gt;
&lt;h3 id="item-69-use-exceptions-only-for-exceptional-conditions"&gt;Item 69: Use exceptions only for exceptional conditions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Exceptions should be used for exceptional circumstances, situations that are uncommon and unexpected. They should not be used for regular control flow.&lt;/li&gt;
&lt;li&gt;Exceptions are not designed to be as fast as explicit tests, so using them for control flow can result in slower code execution.&lt;/li&gt;
&lt;li&gt;Placing code inside a try-catch block inhibits certain optimizations that &lt;span class="caps"&gt;JVM&lt;/span&gt; implementations may perform.&lt;/li&gt;
&lt;li&gt;The exception-based loop, which relies on throwing and catching exceptions for loop termination, is slower, obfuscates the code’s purpose, and can hide bugs in the code.&lt;/li&gt;
&lt;li&gt;Exceptions used for control flow can mask bugs, making debugging more complicated. Bugs that would generate uncaught exceptions in a standard loop idiom may be caught and misinterpreted as normal loop termination in an exception-based loop.&lt;/li&gt;
&lt;li&gt;An alternative to a state-testing method is to have the state-dependent method return an empty optional or a distinguished value (such as null) if it cannot perform the desired computation.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-70-use-checked-exceptions-for-recoverable-conditions-and-runtime-exceptions-for-programming-errors"&gt;Item 70: Use checked exceptions for recoverable conditions and runtime exceptions for programming errors&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Checked exceptions should be used for conditions from which the caller can reasonably be expected to recover. By throwing a checked exception, the &lt;span class="caps"&gt;API&lt;/span&gt; designer mandates the caller to handle the exception or propagate it.&lt;/li&gt;
&lt;li&gt;Checked exceptions indicate recoverable conditions, and the &lt;span class="caps"&gt;API&lt;/span&gt; user should make an effort to handle them appropriately.&lt;/li&gt;
&lt;li&gt;Unchecked throwables, which include runtime exceptions and errors, needn’t and generally shouldn’t be caught. They indicate situations where recovery is impossible, and continued execution would do more harm than good.&lt;/li&gt;
&lt;li&gt;Runtime exceptions are typically used to indicate programming errors, such as precondition violations.&lt;/li&gt;
&lt;li&gt;It may not always be clear whether a condition is recoverable or a programming error. In such cases, it is a matter of judgment for the &lt;span class="caps"&gt;API&lt;/span&gt; designer. If recovery is likely, use a checked exception; if not, use a runtime exception.&lt;/li&gt;
&lt;li&gt;Checked exceptions should provide methods that aid in recovery from the exceptional condition.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-71-avoid-unnecessary-use-of-checked-exceptions"&gt;Item 71: Avoid unnecessary use of checked exceptions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Overuse of checked exceptions can make APIs difficult to use.&lt;/li&gt;
&lt;li&gt;The burden on the programmer increases when dealing with checked exceptions, as they must be handled in catch blocks or propagated outward, placing a burden on the &lt;span class="caps"&gt;API&lt;/span&gt; user.&lt;/li&gt;
&lt;li&gt;Another approach is to refactor the method that throws the checked exception into two methods: one that returns a boolean indicating whether the exception would be thrown and another that performs the action. This allows the caller to check the state before invoking the action method.&lt;/li&gt;
&lt;li&gt;Use checked exceptions sparingly, consider returning optionals, and throw unchecked exceptions if recovery is not possible or meaningful for the caller.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-72-favor-the-use-of-standard-exceptions"&gt;Item 72: Favor the use of standard exceptions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Reusing standard exceptions in your APIs and programs provides several benefits, including easier learning and usage, improved readability, and reduced memory footprint and class loading time.&lt;/li&gt;
&lt;li&gt;The most commonly reused exception types are &lt;code&gt;IllegalArgumentException&lt;/code&gt; and &lt;code&gt;IllegalStateException&lt;/code&gt;. &lt;code&gt;IllegalArgumentException&lt;/code&gt; is used when the caller passes an &lt;em&gt;inappropriate argument value&lt;/em&gt;, while &lt;code&gt;IllegalStateException&lt;/code&gt; is used when the invocation is &lt;em&gt;illegal due to the state of the receiving object&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;It is recommended to use specific standard exceptions like &lt;code&gt;NullPointerException&lt;/code&gt; and &lt;code&gt;IndexOutOfBoundsException&lt;/code&gt; for certain kinds of illegal arguments and states instead of using &lt;code&gt;IllegalArgumentException&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;ConcurrentModificationException is a reusable exception used to indicate concurrent modification of an object that was designed for single-threaded use or with external synchronization.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;UnsupportedOperationException&lt;/code&gt; is another reusable exception used to indicate that an object does not support a particular operation, typically because it is an optional operation defined by an interface that the object implements.It is advised not to reuse the &lt;code&gt;Exception&lt;/code&gt;, &lt;code&gt;RuntimeException&lt;/code&gt;, &lt;code&gt;Throwable&lt;/code&gt;, or &lt;code&gt;Error&lt;/code&gt; classes directly. Treat them as abstract and avoid testing for them directly because they are superclasses of other exceptions.&lt;/li&gt;
&lt;li&gt;When reusing exceptions, ensure that the conditions under which you would throw them align with their documented semantics. You can subclass a standard exception to add more detail if needed.&lt;/li&gt;
&lt;li&gt;Choosing which exception to reuse can be challenging when multiple exceptions seem applicable. In such cases, follow the rule to throw &lt;code&gt;IllegalStateException&lt;/code&gt; if no argument values would have worked, otherwise throw &lt;code&gt;IllegalArgumentException&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-73-throw-exceptions-appropriate-to-the-abstraction"&gt;Item 73: Throw exceptions appropriate to the abstraction&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Higher layers should catch lower-level exceptions and throw exceptions that are meaningful and can be explained in terms of the higher-level abstraction. This is known as &lt;em&gt;exception translation&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Exception translation&lt;/em&gt; is achieved by catching the lower-level exception and throwing a higher-level exception that encapsulates the lower-level exception and provides a more meaningful explanation of the problem.&lt;/li&gt;
&lt;li&gt;Exception chaining is a special form of exception translation where the lower-level exception is passed to the higher-level exception as the cause. This allows for easy access to the lower-level exception and integration of its stack trace into the higher-level exception’s stack trace.&lt;/li&gt;
&lt;li&gt;Exception translation should not be overused. Whenever possible, exceptions from lower layers should be prevented or handled within the higher layer itself.&lt;/li&gt;
&lt;li&gt;If exceptions from lower layers cannot be prevented or handled, it may be appropriate for the higher layer to silently work around these exceptions, log them using an appropriate logging facility, and insulate the caller from lower-level problems.&lt;/li&gt;
&lt;li&gt;Exception translation allows for better encapsulation, clearer APIs, and the ability to investigate the underlying cause of failures while insulating clients from lower-level exceptions.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-74-document-all-exceptions-thrown-by-each-method"&gt;Item 74: Document all exceptions thrown by each method&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Documenting the exceptions thrown by a method is a critical part of the documentation required to use the method correctly.&lt;/li&gt;
&lt;li&gt;Always declare checked exceptions individually and document the specific conditions under which each exception is thrown using the Javadoc &lt;code&gt;@throws&lt;/code&gt; tag.&lt;/li&gt;
&lt;li&gt;While the language does not require documenting unchecked exceptions, it is wise to document them carefully as they often represent programming errors. Familiarizing programmers with all the possible errors helps them avoid making these mistakes.&lt;/li&gt;
&lt;li&gt;Do not use the &lt;code&gt;throws&lt;/code&gt; keyword on unchecked exceptions.&lt;/li&gt;
&lt;li&gt;It is ideal to document all unchecked exceptions that each method can throw, but in practice, it may not always be achievable due to dependencies on other classes that may throw additional unchecked exceptions.&lt;/li&gt;
&lt;li&gt;If an exception is thrown by many methods in a class for the same reason, you can document the exception in the class’s documentation comment instead of documenting it individually for each method.&lt;/li&gt;
&lt;li&gt;Failing to document the exceptions that your methods can throw can make it difficult or impossible for others to effectively use your classes and interfaces.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-75-include-failure-capture-information-in-detail-messages"&gt;Item 75: Include failure-capture information in detail messages&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The detail message of an exception should capture as much information as possible concerning the cause of the failure. It should contain the values of all parameters and fields that contributed to the exception.&lt;/li&gt;
&lt;li&gt;Including pertinent data in the detail message aids in diagnosing the cause of the failure. It helps identify specific errors such as incorrect index values, boundary violations, or invariant failures.&lt;/li&gt;
&lt;li&gt;It is crucial to avoid including security-sensitive information like passwords or encryption keys in exception detail messages as stack traces may be seen by multiple individuals during the debugging and issue-fixing process.&lt;/li&gt;
&lt;li&gt;Do not write lengthy prose descriptions.&lt;/li&gt;
&lt;li&gt;The detail message of an exception is primarily intended for programmers or site reliability engineers, not end users. Therefore, information content is more important than readability.&lt;/li&gt;
&lt;li&gt;Requiring failure-capture information as parameters in the constructors of exceptions can ensure that the detail message automatically includes the necessary information. This centralizes the code for generating a high-quality detail message in the exception class itself.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-76-strive-for-failure-atomicity"&gt;Item 76: Strive for failure atomicity&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Failure atomicity means that after an object throws an exception, it should still be in a well-defined, usable state, even if the failure occurred in the midst of performing an operation.&lt;/li&gt;
&lt;li&gt;Immutable objects naturally achieve failure atomicity because their state is consistent when they are created and cannot be modified thereafter.&lt;/li&gt;
&lt;li&gt;For methods that operate on mutable objects, one way to achieve failure atomicity is to check parameters for validity before performing the operation. This ensures that most exceptions are thrown before object modification commences.&lt;/li&gt;
&lt;li&gt;Another approach to achieving failure atomicity is to order the computation so that any part that may fail takes place before any part that modifies the object. This ensures that failure occurs before any modification to the object.&lt;/li&gt;
&lt;li&gt;A third approach is to perform the operation on a temporary copy of the object and replace the contents of the object with the temporary copy once the operation is complete. This is useful when the computation can be performed more efficiently on a temporary data structure.&lt;/li&gt;
&lt;li&gt;Recovery code can be written to intercept a failure and roll back the object’s state to the point before the operation began. This approach is mainly used for durable data structures.&lt;/li&gt;
&lt;li&gt;Failure atomicity is not always achievable, especially in cases of concurrent modification without proper synchronization. In such cases, objects may be left in an inconsistent state.&lt;/li&gt;
&lt;li&gt;It is not always desirable or practical to achieve failure atomicity, as it can increase cost and complexity. However, it is often easy to achieve once the issue is understood.&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;API&lt;/span&gt; documentation should clearly indicate whether failure atomicity is achieved and what state the object will be left in after a method invocation.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-77-dont-ignore-exceptions"&gt;Item 77: Don’t ignore exceptions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;When an &lt;span class="caps"&gt;API&lt;/span&gt; declares a method to throw an exception, it is indicating that there may be exceptional conditions that need to be handled.&lt;/li&gt;
&lt;li&gt;Ignoring exceptions by surrounding a method invocation with an empty catch block defeats the purpose of exceptions and can lead to disastrous results.&lt;/li&gt;
&lt;li&gt;Ignoring exceptions is like ignoring a fire alarm and preventing others from addressing the problem. It is important to handle exceptional conditions appropriately.&lt;/li&gt;
&lt;li&gt;There are situations where it may be appropriate to ignore an exception, such as when closing a file input stream where no recovery action is needed and the operation can proceed without issues.&lt;/li&gt;
&lt;li&gt;If an exception is intentionally ignored, the catch block should contain a comment explaining the reason for ignoring it, and the variable used to catch the exception should be named &lt;code&gt;ignored&lt;/code&gt; to indicate that it is intentionally disregarded.&lt;/li&gt;
&lt;li&gt;Ignoring exceptions can lead to a program that continues silently despite errors, potentially causing failures at unexpected points in the code.&lt;/li&gt;
&lt;li&gt;Letting exceptions propagate outward can at least result in a swift failure, preserving information for debugging purposes.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="concurrency"&gt;Concurrency&lt;/h2&gt;
&lt;h3 id="item-78-synchronize-access-to-shared-mutable-data"&gt;Item 78: Synchronize access to shared mutable data&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Synchronization ensures that only one thread can execute a synchronized method or block at a time, preventing an object from being seen in an inconsistent state by other threads.&lt;/li&gt;
&lt;li&gt;Synchronization not only guarantees mutual exclusion but also ensures that changes made by one thread are visible to other threads. It provides reliable communication between threads.&lt;/li&gt;
&lt;li&gt;Reading and writing a variable (other than long or double) is atomic, but it does not guarantee that changes made by one thread will be immediately visible to other threads without synchronization.&lt;/li&gt;
&lt;li&gt;Failing to synchronize access to shared mutable data can have dire consequences, even if the data is atomically readable and writable. It can lead to liveness failures and data corruption.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;java.util.concurrent.atomic&lt;/code&gt; package provides lock-free, thread-safe primitives, such as &lt;code&gt;AtomicLong&lt;/code&gt;, for performing atomic operations on single variables, which can be used as a more efficient alternative to synchronized methods.&lt;/li&gt;
&lt;li&gt;The best approach to avoid synchronization issues is to minimize sharing of mutable data. Either use immutable data or confine mutable data to a single thread. If sharing is necessary, ensure proper synchronization or use safe publication techniques.&lt;/li&gt;
&lt;li&gt;Safe publication involves ensuring that an object reference is safely shared with other threads by using techniques such as storing it in a static field during class initialization or using volatile or final fields.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-79-avoid-excessive-synchronization"&gt;Item 79: Avoid excessive synchronization&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Excessive synchronization can lead to reduced performance, deadlocks, or nondeterministic behavior.&lt;/li&gt;
&lt;li&gt;Excessive synchronization should be avoided for performance reasons. Excessive locking can lead to contention and limit parallelism, as well as hinder the &lt;span class="caps"&gt;VM&lt;/span&gt;’s ability to optimize code execution.&lt;/li&gt;
&lt;li&gt;Avoid unnecessary synchronization for mutable classes and document that they are not thread-safe if synchronization is omitted.&lt;/li&gt;
&lt;li&gt;If a method modifies a static field and can be called from multiple threads, synchronize access to the field internally to prevent data corruption and ensure deterministic behavior.&lt;/li&gt;
&lt;li&gt;Consider advanced synchronization techniques such as lock splitting, lock striping, and nonblocking concurrency control to achieve high concurrency when internal synchronization is necessary.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-80-prefer-executors-tasks-and-streams-to-threads"&gt;Item 80: Prefer executors, tasks, and streams to threads&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;java.util.concurrent&lt;/code&gt; package introduced the &lt;code&gt;Executor&lt;/code&gt; Framework, which provides a flexible interface-based task execution facility. It is recommended to use executors instead of writing your own work queues.&lt;/li&gt;
&lt;li&gt;Creating an executor service is as simple as calling a static factory method. For example, &lt;code&gt;Executors.newSingleThreadExecutor()&lt;/code&gt; creates an executor service with a single background thread.&lt;/li&gt;
&lt;li&gt;Tasks can be submitted for execution using the &lt;code&gt;execute()&lt;/code&gt; method of the executor service. The executor service takes care of managing the execution of tasks.&lt;/li&gt;
&lt;li&gt;To gracefully terminate the executor service, the &lt;code&gt;shutdown()&lt;/code&gt; method should be called. This ensures that the executor service will complete any pending tasks before exiting.&lt;/li&gt;
&lt;li&gt;The executor service provides various additional functionalities, such as waiting for specific tasks or collections of tasks to complete, scheduling tasks to run at specific times, retrieving task results, and more.&lt;/li&gt;
&lt;li&gt;Java provides static factory methods in the &lt;code&gt;Executors&lt;/code&gt; class that offer different types of executor services, such as cached thread pools, fixed thread pools, and scheduled thread pools. These cover most use cases, but the &lt;code&gt;ThreadPoolExecutor&lt;/code&gt; class allows fine-grained control over thread pool configuration.&lt;/li&gt;
&lt;li&gt;Choosing the right executor service depends on the specific requirements of the application. For small programs or lightly loaded servers, &lt;code&gt;Executors.newCachedThreadPool()&lt;/code&gt; is often sufficient. For heavily loaded production servers, &lt;code&gt;Executors.newFixedThreadPool()&lt;/code&gt; or ThreadPoolExecutor with custom configuration is recommended.&lt;/li&gt;
&lt;li&gt;The executor framework separates the unit of work (tasks) from the mechanism of executing it (executor service). This separation provides flexibility in selecting appropriate execution policies and allows easy changes if requirements evolve.&lt;/li&gt;
&lt;li&gt;Working directly with threads is discouraged. Instead, think in terms of tasks and let the executor service execute them. This approach allows you to leverage the flexibility and control provided by the executor framework.&lt;/li&gt;
&lt;li&gt;For a comprehensive understanding of the Executor Framework, it is recommended to refer to the book &lt;a href="https://jcip.net/"&gt;Java Concurrency in Practice&lt;/a&gt; by Brian Goetz.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-81-prefer-concurrency-utilities-to-wait-and-notify"&gt;Item 81: Prefer concurrency utilities to &lt;code&gt;wait&lt;/code&gt; and &lt;code&gt;notify&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The higher-level concurrency utilities fall into three categories: the Executor Framework (covered in Item 80), concurrent collections, and synchronizers.&lt;/li&gt;
&lt;li&gt;Concurrent collections are high-performance implementations of standard collection interfaces that internally manage their own synchronization. They provide high concurrency and state-dependent modify operations, making them ideal for concurrent applications.&lt;/li&gt;
&lt;li&gt;Synchronizers are objects that enable threads to coordinate their activities. Examples include &lt;code&gt;CountDownLatch&lt;/code&gt;, &lt;code&gt;Semaphore&lt;/code&gt;, &lt;code&gt;CyclicBarrier&lt;/code&gt;, and &lt;code&gt;Phaser&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The concurrent utilities provide high-level abstractions that simplify common concurrency scenarios. For example, a &lt;code&gt;ConcurrentHashMap&lt;/code&gt; can be used to implement a thread-safe canonicalizing map, and a &lt;code&gt;BlockingQueue&lt;/code&gt; can be used as a work queue for producer-consumer scenarios.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-82-document-thread-safety"&gt;Item 82: Document thread safety&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Thread safety, or how a class behaves when its methods are used concurrently, is an important part of its contract with clients.&lt;/li&gt;
&lt;li&gt;Failing to document the thread safety aspect of a class can lead to incorrect assumptions about synchronization, resulting in serious errors.&lt;/li&gt;
&lt;li&gt;The private lock object should be declared final to prevent accidental un-synchronized access and is particularly useful for classes designed for inheritance.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-83-use-lazy-initialization-judiciously"&gt;Item 83: Use lazy initialization judiciously&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Lazy initialization can be used to optimize the cost of initializing a class or creating an instance by deferring the initialization of a field until it is accessed.&lt;/li&gt;
&lt;li&gt;Lazy initialization should only be used when necessary, as it can increase the cost of accessing the lazily initialized field.&lt;/li&gt;
&lt;li&gt;Measure the performance impact of lazy initialization to determine whether it is beneficial for a specific scenario.&lt;/li&gt;
&lt;li&gt;In the presence of multiple threads, lazy initialization requires synchronization to avoid bugs.&lt;/li&gt;
&lt;li&gt;Normal initialization with the final modifier is usually preferable to lazy initialization for most fields.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-84-dont-depend-on-the-thread-scheduler"&gt;Item 84: Don’t depend on the thread scheduler&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The thread scheduler determines which threads get to run and for how long when many threads are runnable. However, the thread-scheduling policy can vary between operating systems, so relying on specific details of the policy can lead to non-portable programs.&lt;/li&gt;
&lt;li&gt;To write a robust, responsive, and portable program, aim to keep the average number of runnable threads close to the number of processors. This minimizes variations in behavior caused by different thread-scheduling policies.&lt;/li&gt;
&lt;li&gt;To keep the number of runnable threads low, ensure that each thread does some useful work and then waits for more. Thread pools should be sized appropriately, and tasks should be neither too short nor too long to avoid dispatch overhead.&lt;/li&gt;
&lt;li&gt;Avoid busy-waiting, where threads repeatedly check a shared object waiting for its state to change. Busy-waiting puts unnecessary load on the processor and reduces the amount of useful work that can be accomplished. It also makes the program vulnerable to the thread scheduler’s behavior.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="serialization"&gt;Serialization&lt;/h2&gt;
&lt;h3 id="item-85-prefer-alternatives-to-java-serialization"&gt;Item 85: Prefer alternatives to Java serialization&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Serialization in Java has proven to be risky, with problems related to correctness, performance, security, and maintenance.&lt;/li&gt;
&lt;li&gt;The attack surface of serialization is significant and constantly growing. Deserializing objects can execute code from any type on the classpath, making it vulnerable to exploits.&lt;/li&gt;
&lt;li&gt;Security researchers have discovered and exploited vulnerabilities in deserialization, leading to serious attacks, such as the &lt;span class="caps"&gt;SFMTA&lt;/span&gt; Muni ransomware attack.&lt;/li&gt;
&lt;li&gt;Deserialization bombs can be used to mount denial-of-service attacks by causing deserialization of byte streams that take a long time to process.&lt;/li&gt;
&lt;li&gt;The best defense against serialization exploits is to avoid deserializing untrusted data altogether. Serialization should be replaced with alternative mechanisms for translating objects to byte sequences.&lt;/li&gt;
&lt;li&gt;Cross-platform structured-data representations like &lt;span class="caps"&gt;JSON&lt;/span&gt; and Protocol Buffers offer advantages such as portability, high performance, tooling support, and a large community.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-86-implement-serializable-with-great-caution"&gt;Item 86: Implement &lt;code&gt;Serializable&lt;/code&gt; with great caution&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Implementing Serializable has long-term costs, as the serialized form of a class becomes part of its exported &lt;span class="caps"&gt;API&lt;/span&gt;. Changing the class’s internal representation while maintaining compatibility with the serialized form can be challenging and may limit the class’s evolution.&lt;/li&gt;
&lt;li&gt;Serialization introduces the risk of bugs and security vulnerabilities. Deserialization acts as a “hidden constructor” and must guarantee invariants established by constructors, while also preventing unauthorized access to object internals.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-87-consider-using-a-custom-serialized-form"&gt;Item 87: Consider using a custom serialized form&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;When the default serialized form is inappropriate for a class, it can result in several disadvantages, such as permanently tying the &lt;span class="caps"&gt;API&lt;/span&gt; to the current internal representation, consuming excessive space and time during serialization, and potentially causing stack overflows.&lt;/li&gt;
&lt;li&gt;Regardless of the serialized form chosen, any synchronization imposed on the object’s methods should also apply to the &lt;code&gt;writeObject&lt;/code&gt; method to prevent resource-ordering deadlocks.&lt;/li&gt;
&lt;li&gt;Taking the time to design a custom serialized form that accurately represents the logical data and excludes unnecessary implementation details can lead to more flexible, efficient, and maintainable serialization. The default serialized form should only be accepted if it aligns well with the class’s logical state.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-88-write-readobject-methods-defensively"&gt;Item 88: Write &lt;code&gt;readObject&lt;/code&gt; methods defensively&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;readObject&lt;/code&gt; method is similar to a public constructor for deserializing objects, and it requires the same care as any other constructor to ensure the object’s validity and invariants.&lt;/li&gt;
&lt;li&gt;To prevent invalid objects from being deserialized, the &lt;code&gt;readObject&lt;/code&gt; method should perform validity checks after calling &lt;code&gt;defaultReadObject&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-89-for-instance-control-prefer-enum-types-to-readresolve"&gt;Item 89: For instance control, prefer enum types to &lt;code&gt;readResolve&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;When a class is serialized and deserialized, the &lt;code&gt;readResolve&lt;/code&gt; method can be used to substitute another instance for the one created during deserialization.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;readResolve&lt;/code&gt; method can be implemented in a singleton class to return the original singleton instance and maintain the singleton property during deserialization.&lt;/li&gt;
&lt;li&gt;The preferred approach for instance control is to use an enum type. Enum types guarantee that only the declared constants are the instances of the class, preventing any additional instances from being created during deserialization.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="item-90-consider-serialization-proxies-instead-of-serialized-instances"&gt;Item 90: Consider serialization proxies instead of serialized instances&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The serialization proxy pattern involves designing a private static nested class, called the serialization proxy, that represents the logical state of the enclosing class in a concise manner.&lt;/li&gt;
&lt;li&gt;The serialization proxy should have a single constructor that takes the enclosing class as a parameter and copies its data without performing any consistency checking or defensive copying.&lt;/li&gt;
&lt;li&gt;Both the enclosing class and its serialization proxy should implement the &lt;code&gt;Serializable&lt;/code&gt; interface.&lt;/li&gt;
&lt;li&gt;The serialization proxy pattern eliminates the need for explicit field-level validation during deserialization and ensures that the invariants of the enclosing class are maintained.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h1 id="conclusion"&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;While I did not find this book to be particularly entertaining, it is a very useful reference for Java developers. It covers a wide range of topics and provides a lot of useful information. I would recommend this book to anyone who is interested in learning more about the Java language and its best practices.&lt;/p&gt;
&lt;h2 id="resources-and-references"&gt;Resources and references&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.oreilly.com/library/view/effective-java-3rd/9780134686097/"&gt;Effective Java, Third Edition&lt;/a&gt; - Joshua Bloch.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jcip.net/"&gt;Java Concurrency in Practice&lt;/a&gt; - Brian Goetz.&lt;/li&gt;
&lt;/ul&gt;</content><category term="learnings"></category><category term="best practices"></category><category term="books"></category><category term="java"></category></entry><entry><title>Systematic reviews</title><link href="https://www.sglavoie.com/posts/2023/05/14/systematic-reviews/" rel="alternate"></link><published>2023-05-14T15:58:00-06:00</published><updated>2023-05-17T21:02:00-06:00</updated><author><name>Sébastien Lavoie</name></author><id>tag:www.sglavoie.com,2023-05-14:/posts/2023/05/14/systematic-reviews/</id><summary type="html">&lt;p&gt;I find learning about productivity fascinating, yet I&amp;#8217;m aware that in the end, a simple set of rules and systems is what works best for me. These systems will continue to evolve over time, but I have found that the simpler they are, the more likely I am to stick with them. This post describes my current digital take on dealing with everyday&amp;nbsp;life.&lt;/p&gt;</summary><content type="html">
&lt;hr/&gt;
&lt;h1 id="introduction"&gt;Introduction&lt;/h1&gt;
&lt;p&gt;I used to think that merely using better or more sophisticated tools would magically make me more productive, blaming external factors and technology on my own lack of ability to achieve my dreams. But I’ve come to realize that it was only an escape into the procrastination playground to avoid facing hard work. Working &lt;em&gt;on&lt;/em&gt; a system is not the same as working &lt;em&gt;in&lt;/em&gt; a system. The former is a form of procrastination, while the latter is the actual work that needs to be done.&lt;/p&gt;
&lt;p&gt;While there are great approaches including &lt;a href="https://es.wikipedia.org/wiki/Zettelkasten"&gt;Zettelkasten&lt;/a&gt; and the &lt;a href="https://gettingthingsdone.com/"&gt;Getting Things Done&lt;/a&gt; methodology, I have found that I work optimally with simpler systems that are easier to maintain, which reduce cognitive load and friction (less to think about and no complicated setup when inputting information either). I used to be an avid user of &lt;a href="https://todoist.com/"&gt;Todoist&lt;/a&gt; where I would implement &lt;span class="caps"&gt;GTD&lt;/span&gt; almost as a pure devotee, making the most of all its (relatively) advanced features, but that was a double-edged sword as dealing with timezone and synchronization issues was more than enough to derail me from the path, sometimes with dire repercussions when tasks would suddenly disappear or be scheduled at the wrong time.&lt;/p&gt;
&lt;p&gt;Needless to say, I have since moved on to a simpler system that is more robust and that I can trust. I am not technologically turning back, but I have found &lt;a href="https://todoist.com/productivity-methods/weekly-review"&gt;Todoist’s weekly review process&lt;/a&gt; to be quite effective and easy to follow, so I have decided to adopt it as a basis for my own system, which I will be describing briefly in this post.&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="a-whirlwind-tour-of-the-system"&gt;A whirlwind tour of the system&lt;/h1&gt;
&lt;p&gt;What follows is nothing revolutionary, but the simplicity of it just stuck with me. From prior research on the topic as I was &lt;a href="https://github.com/sglavoie/cm3070-final-project"&gt;building a todo application&lt;/a&gt;, it really stood out to me that the most effective systems were the simplest ones, especially when the different components can be neatly decoupled from each other while working well together as a whole. Arguably, the Apple ecosystem has done a great job at this — although I’m still enthusiastic about creating a single software destination to manage one’s life even more efficiently ;).&lt;/p&gt;
&lt;p&gt;In reality, I just stuck with the default offerings for maximum compatibility and ease of use, but the truth is that the existing applications I have been in touch with do not fully address all my needs. As I’m not willing to try to bend reality to my will, I have decided to bend my will to reality for the time being and work with what I have. But I digress.&lt;/p&gt;
&lt;div class="image"&gt;
&lt;img alt="Overview of flow for systematic reviews" src="https://www.sglavoie.com/images/posts/0037_systematic_reviews/overviewReview.svg"/&gt;
&lt;/div&gt;
&lt;p&gt;So the main idea here is very simple: twice a day, a daily review occurs and once a week, a more thorough weekly review is performed. Then, at the end of every month and every year, an even more thorough exploration happens both to reflect on the past and plan for the future.&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="daily-review"&gt;Daily review&lt;/h1&gt;
&lt;div class="image"&gt;
&lt;img alt="Flow for systematic daily reviews" src="https://www.sglavoie.com/images/posts/0037_systematic_reviews/dailyReview.svg" style="max-width: 60%"/&gt;
&lt;/div&gt;
&lt;p&gt;The purpose behind the daily review is twofold:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;To make sure that the day is planned out and that the most important tasks are completed.&lt;/li&gt;
&lt;li&gt;To do a mindful check on one’s wellbeing and re-adjust as needed.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Point &lt;em&gt;1.&lt;/em&gt; is self-explanatory. It serves as a good reminder that task estimation skills are not perfect and that one should not be too hard on oneself if things do not go as planned. Point &lt;em&gt;2.&lt;/em&gt; is a bit more subtle, but it is important to frequently take a step back and reflect on one’s current state of mind and body. That may include taking a break, going for a walk, or even taking a nap. The point is to be mindful of one’s current state and to take action to improve it if needed. In that department, I like to exercise early in the morning, both to expose my eyes to sunlight and to get my blood flowing (more on this in the excellent &lt;a href="https://hubermanlab.com/"&gt;Huberman Lab podcast&lt;/a&gt;!). Besides sleeping well and eating healthy, I have found that this is the best way to ensure that I am in a good state of mind to tackle the day’s challenges.&lt;/p&gt;
&lt;h2 id="make-relevant-context-accessible"&gt;Make relevant context accessible&lt;/h2&gt;
&lt;p&gt;One thing I like to do to stay on top of priorities is to “pin” a couple of active notes I’m using from Apple Notes directly inside the list of widgets shown when swiping left with two fingers on the touch pad (or clicking on the clock in the top-right corner). There, I quickly see notes like &lt;strong&gt;Working notes&lt;/strong&gt; (to accompany the projects I’m currently working on), &lt;strong&gt;Standup&lt;/strong&gt; so I can share updates with my team, &lt;strong&gt;@next_action&lt;/strong&gt; which contains a list of stuff I plan to work on next without having to clutter my todo app and another one such as &lt;strong&gt;Ideas&lt;/strong&gt; which I use as a scratchpad to empty my mind of any thoughts that might be distracting me from the task at hand or that might be useful later on.&lt;/p&gt;
&lt;div class="image"&gt;
&lt;img alt="Apple widgets, shown when swiping left with the touch pad" src="https://www.sglavoie.com/images/posts/0037_systematic_reviews/apple_widgets.png" style="max-width: 670px"/&gt;
&lt;/div&gt;
&lt;p&gt;Another major component of the way I organize tasks (currently with Apple Reminders) is to rely on smart lists and split them by areas of responsibilities. So while I may create tasks under specific lists, I tend to simply schedule everything that’s either recurring or that will need attention in the near future, storing the remaining ideas and potential tasks in Apple Notes.&lt;/p&gt;
&lt;div class="image"&gt;
&lt;img alt="Apple Reminders: Daily focus lists" src="https://www.sglavoie.com/images/posts/0037_systematic_reviews/apple_reminders_daily_focus.png" style="max-width: 462px"/&gt;
&lt;/div&gt;
&lt;p&gt;So in this case, everything being scheduled for today or that has been flagged manually will appear in the &lt;strong&gt;Today&lt;/strong&gt; list. Anything else that has a deadline in the near future will appear in the &lt;strong&gt;Scheduled&lt;/strong&gt; list. Then, I simply divide my set of &lt;em&gt;work in progress&lt;/em&gt; (&lt;strong&gt;&lt;span class="caps"&gt;WIP&lt;/span&gt;&lt;/strong&gt;) tasks into work and personal and will drag and drop tasks from other lists/projects as needed to re-prioritize them. To avoid having a large list of items in the &lt;strong&gt;&lt;span class="caps"&gt;WIP&lt;/span&gt;&lt;/strong&gt; lists, I use two separate lists to keep track of the &lt;strong&gt;Next&lt;/strong&gt; actions: these are tasks that do not require immediate attention but used to be scheduled as being more urgent, since priorities will often need to shift under a set of constantly new circumstances.&lt;/p&gt;
&lt;p&gt;These tasks will be dragged out of other lists as needed — either from the backlog of tasks or from the &lt;strong&gt;&lt;span class="caps"&gt;WIP&lt;/span&gt;&lt;/strong&gt; tasks to declutter other lists. They will be prioritized as the &lt;strong&gt;Next&lt;/strong&gt; actions to ensure that once the &lt;strong&gt;&lt;span class="caps"&gt;WIP&lt;/span&gt;&lt;/strong&gt; is done, there is a continuity to the system. Just as with other lists, order matters, so that the most important tasks are at the top and the least important ones are at the bottom. This is a simple way to ensure that the most important tasks are always visible and that the least important ones are not forgotten.&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="weekly-review"&gt;Weekly review&lt;/h1&gt;
&lt;p&gt;The weekly review is a bit more involved, but it is still quite simple. The main idea is to take a step back and reflect on the past week, while planning for the next one. This is where I like to take a look at my calendar and make sure that I have not forgotten anything important. Given the current set of tools I use, I don’t really implement &lt;a href="https://www.mindtools.com/a9bt6jr/timeboxing"&gt;timeboxing&lt;/a&gt; as I find that I just tend to miss stuff I put into the calendar if it’s not an “all-day” event. Brace yourself, here it goes.&lt;/p&gt;
&lt;div class="image"&gt;
&lt;img alt="Flow for systematic weekly reviews" src="https://www.sglavoie.com/images/posts/0037_systematic_reviews/weeklyReview.svg"/&gt;
&lt;/div&gt;
&lt;p&gt;This probably looks more intimidating than it really is. I usually go through the whole process in under an hour. That may sound like a lot, but it really helps to declutter my mind while giving me the assurance I did my best to plan for the upcoming week. I also like to do this on Sunday mornings, so that I can start the week with clear focus. All in all, I find that this is a great investment and it becomes especially true if I adhere to doing it in the mornings right after I have a delicious cup of freshly ground coffee (but at least 90 to 120 minutes after waking up: again, see Huberman to get fantastic explanations on why this is ideal).&lt;/p&gt;
&lt;h2 id="automatic-reviews"&gt;Automatic reviews&lt;/h2&gt;
&lt;p&gt;Once more, nothing too fancy is happening here, but having &lt;em&gt;smart lists&lt;/em&gt; makes it very easy to review what is coming up. In this case, it’s mostly empty as it excludes all the work in progress, which makes it more useful as well since these are already accessible from their own lists, so the review section really highlights anything that is salient and non-recurring.&lt;/p&gt;
&lt;div class="image"&gt;
&lt;img alt="Tags and smart lists from Apple Reminders to review the week" src="https://www.sglavoie.com/images/posts/0037_systematic_reviews/apple_reminders_reviews.png" style="max-width: 538px"/&gt;
&lt;/div&gt;
&lt;hr/&gt;
&lt;h1 id="monthly-and-yearly-reviews"&gt;Monthly and yearly reviews&lt;/h1&gt;
&lt;p&gt;I can see the benefit in asking more questions and taking more time to plan ahead up to a point, but life is totally unpredictable and I find that it is not worth spending too much time planning for the future. Ultimately, everything is ephemeral: interests, hobbies or even relationships come and go. So my current approach is simply to repeat the weekly process with an emphasis on the things I might have neglected a bit more, such as planning new projects, dissolving old ones that no longer require attention and making sure that I am still on track with my goals at a higher level.&lt;/p&gt;
&lt;p&gt;These moments also form a great opportunity to look at finances and make sure that I am not spending too much money on things that do not bring me joy or that I do not need. They also serve as a reminder to take a step back and reflect on the bigger picture, taking a break to look at all the progress that has been made so far. This becomes easier when things are tracked down by writing, and so I maintain a private GitHub repository called &lt;code&gt;life-trail&lt;/code&gt; in which I write down a summary of my weekly reviews, keep track of the most important lessons I have learned and main events that happened in my life. This is heavily inspired from having gone through the &lt;a href="https://www.selfauthoring.com/"&gt;Self Authoring Program&lt;/a&gt;, which I highly recommend to anyone interested in bringing more meaning into their life.&lt;/p&gt;
&lt;p&gt;While (I think) I’d love to know for sure where I spend every minute of the day, I tend to track my time with &lt;a href="https://toggl.com/"&gt;Toggl&lt;/a&gt; only when I’m at the computer or reading books on my pretty old Nook e-ink reader. It doesn’t paint the full picture, yet it is not cumbersome to use and provides the kinds of insights I am looking for while forcing me to be more mindful about the actions I take moment to moment.&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="conclusion"&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;I have tried many different methodologies to get more organized and, after getting no further than where I used to be, I have reached the following conclusion, which can be elegantly summed up with Nike’s tagline: &lt;em&gt;Just Do It&lt;/em&gt;. While one might have lofty goals, it all means nothing if one does not take action towards attaining them. This is why I have decided to adopt a more systematic approach in all aspects of life. This is not to say that I will not be using any tools, but rather that I will be using them with a focus on pragmatism and manifesting actual results.&lt;/p&gt;
&lt;h2 id="more-resources-and-references"&gt;More resources and references&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hubermanlab.com/"&gt;Huberman Lab podcast&lt;/a&gt; - Andrew Huberman.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sglavoie/cm3070-final-project"&gt;ProductiviDo&lt;/a&gt; - GitHub.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.selfauthoring.com/"&gt;Self Authoring Program&lt;/a&gt; - Jordan Peterson.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.goodreads.com/book/show/18079767-solving-the-procrastination-puzzle"&gt;Solving the Procrastination Puzzle: A Concise Guide to Strategies for Change&lt;/a&gt; - Timothy A. Pychyl.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://todoist.com/productivity-methods/weekly-review"&gt;The Weekly Review&lt;/a&gt; - Todoist.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.mindtools.com/a9bt6jr/timeboxing"&gt;Timeboxing&lt;/a&gt; - MindTools.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toggl.com/"&gt;Toggl&lt;/a&gt; - Toggl Time tracking.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.readworknotes.com/"&gt;Work Notes by Sam Matla&lt;/a&gt; - Sam Matla.&lt;/li&gt;
&lt;/ul&gt;</content><category term="workflow"></category><category term="processes"></category><category term="planning"></category><category term="software"></category></entry><entry><title>Book summary: The Effective Engineer</title><link href="https://www.sglavoie.com/posts/2023/04/16/book-summary-the-effective-engineer/" rel="alternate"></link><published>2023-04-16T14:49:00-06:00</published><updated>2023-04-16T14:49:00-06:00</updated><author><name>Sébastien Lavoie</name></author><id>tag:www.sglavoie.com,2023-04-16:/posts/2023/04/16/book-summary-the-effective-engineer/</id><summary type="html">&lt;p&gt;After reading &lt;a href="https://www.sglavoie.com/posts/2021/11/08/book-summary-letters-to-a-new-developer/"&gt;Letters to a New Developer&lt;/a&gt;, one of the next logical steps on this learning path was to read &lt;a href="https://www.effectiveengineer.com/"&gt;The Effective Engineer&lt;/a&gt;. I hope you enjoy this simple yet effective book&amp;nbsp;summary!&lt;/p&gt;</summary><content type="html">
&lt;hr/&gt;
&lt;h1 id="introduction"&gt;Introduction&lt;/h1&gt;
&lt;p&gt;This wonderful, mostly non-technical book is a compilation of the best practices and lessons learned by the author, &lt;a href="https://edmondlau.co/"&gt;Edmond Lau&lt;/a&gt;, during his impressive career as a software engineer. It is a must-read for anyone who wants to improve their skills and become more effective at what they do. The following are short excerpts from the condensed knowledge found in the book, sprinkled with some minor comments of my own along the way. These are extracted from the book’s takeaway sections and headings: I wholeheartedly recommend &lt;a href="https://www.effectiveengineer.com/"&gt;reading the work&lt;/a&gt; in its entirety for an immersive exposure to the fantastic storytelling capabilities of Edmond!&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="book-summary"&gt;Book summary&lt;/h1&gt;
&lt;h2 id="part-1-adopt-the-right-mindset"&gt;Part 1: Adopt the Right Mindset&lt;/h2&gt;
&lt;h3 id="focus-on-high-leverage-activities"&gt;Focus on high-leverage activities&lt;/h3&gt;
&lt;div class="math"&gt;$$\text{Leverage} = \frac{\text{Impact produced}}{\text{Time invested}}$$&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Leverage is the &lt;span class="caps"&gt;ROI&lt;/span&gt; for the effort put in.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Meta-skills&lt;/strong&gt; are important to know where to focus one’s time and energy to translate more of one’s efforts into impact.&lt;/li&gt;
&lt;li&gt;Leverage your time by always finding ways to perform activities quicker and making sure those activities will have a &lt;strong&gt;meaningful impact&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="optimize-for-learning"&gt;Optimize for learning&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Make your learning rate a priority&lt;/strong&gt;: it compounds like interest over time.&lt;/li&gt;
&lt;li&gt;Study code for core abstractions written by the best engineers at your company.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Write more code&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Go through any technical, educational material available internally.&lt;/li&gt;
&lt;li&gt;Master the programming languages that you use.&lt;/li&gt;
&lt;li&gt;Send your code reviews to the harshest critics.&lt;/li&gt;
&lt;li&gt;Enroll in classes on areas where you want to improve.&lt;/li&gt;
&lt;li&gt;Participate in design discussions of projects you’re interested in.&lt;/li&gt;
&lt;li&gt;Work on a diversity of projects.&lt;/li&gt;
&lt;li&gt;Make sure you’re on a team with at least a few senior engineers whom you can learn from.&lt;/li&gt;
&lt;li&gt;Jump fearlessly into code you don’t know.&lt;/li&gt;
&lt;li&gt;Learn new programming languages and frameworks.&lt;/li&gt;
&lt;li&gt;Invest in skills that are in high demand.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Read books&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Join a discussion group.&lt;/li&gt;
&lt;li&gt;Attend talks, conferences, and meetups.&lt;/li&gt;
&lt;li&gt;Build and maintain a strong network of relationships.&lt;/li&gt;
&lt;li&gt;Follow bloggers who teach.&lt;/li&gt;
&lt;li&gt;Write to teach.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tinker on side projects&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pursue what you love&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="prioritize-regularly"&gt;Prioritize regularly&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Track to-dos in a single list.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Focus on what produces value directly&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Focus on the &lt;em&gt;important and non-urgent&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Limit the amount of work in progress.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Use implementation intentions&lt;/strong&gt; (if-then planning).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Prioritize&lt;/strong&gt; routinely.&lt;/li&gt;
&lt;li&gt;Write down and &lt;em&gt;review&lt;/em&gt; to-dos.&lt;/li&gt;
&lt;li&gt;Reduce &lt;em&gt;context switches&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="part-2-execute-execute-execute"&gt;Part 2: Execute, Execute, Execute&lt;/h2&gt;
&lt;h3 id="invest-in-iteration-speed"&gt;Invest in iteration speed&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Move fast to learn fast.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Invest in time-saving tools&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Shorten your debugging and validation loops.&lt;/li&gt;
&lt;li&gt;Master your programming environment.&lt;/li&gt;
&lt;li&gt;Get proficient with your favorite text editor or &lt;span class="caps"&gt;IDE&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;Learn at least one productive, high-level programming language (&lt;em&gt;scripting&lt;/em&gt;).&lt;/li&gt;
&lt;li&gt;Get familiar with &lt;span class="caps"&gt;UNIX&lt;/span&gt; (or Windows) &lt;em&gt;shell commands&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Prefer the keyboard&lt;/em&gt; over the mouse.&lt;/li&gt;
&lt;li&gt;Automate your manual workflows.&lt;/li&gt;
&lt;li&gt;Test out ideas on an interactive interpreter.&lt;/li&gt;
&lt;li&gt;Make it fast and easy to run just the unit tests associated with your current changes.&lt;/li&gt;
&lt;li&gt;Don’t ignore non-engineering bottlenecks.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="measure-what-you-want-to-improve"&gt;Measure what you want to improve&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Use metrics to drive progress.&lt;/li&gt;
&lt;li&gt;Pick the right metric to incentivize the behavior you want.&lt;/li&gt;
&lt;li&gt;Instrument everything to understand what is going on.&lt;/li&gt;
&lt;li&gt;Internalize useful numbers (e.g., number of active users, requests per second, amount of data accessed and written daily, etc.).&lt;/li&gt;
&lt;li&gt;Be skeptical about data integrity.&lt;/li&gt;
&lt;li&gt;Log data liberally, in case it turns out to be useful later on.&lt;/li&gt;
&lt;li&gt;Build tools to iterate on data accuracy sooner.&lt;/li&gt;
&lt;li&gt;Write end-to-end integration tests to validate your entire analytics pipeline.&lt;/li&gt;
&lt;li&gt;Examine collected data sooner.&lt;/li&gt;
&lt;li&gt;Cross-validate data accuracy by computing the same metric in multiple ways.&lt;/li&gt;
&lt;li&gt;When a number does look off, dig into it early.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="validate-your-ideas-early-and-often"&gt;Validate your ideas early and often&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Find low-effort ways to validate your work.&lt;/li&gt;
&lt;li&gt;Approach a problem iteratively to reduce wasted effort.&lt;/li&gt;
&lt;li&gt;Continuously validate product changes with A/B testing.&lt;/li&gt;
&lt;li&gt;Reduce the risk of large implementations by using small validations.&lt;/li&gt;
&lt;li&gt;Beware the one-person team (you need feedback early to make sure you’re working on the right thing!).&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Be open and receptive to feedback&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Commit code early and often&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Request code reviews from thorough critics.&lt;/li&gt;
&lt;li&gt;Ask to bounce ideas off your teammates.&lt;/li&gt;
&lt;li&gt;Design the interface or &lt;span class="caps"&gt;API&lt;/span&gt; of a new system first.&lt;/li&gt;
&lt;li&gt;Send out a design document before devoting your energy to your code.&lt;/li&gt;
&lt;li&gt;If possible, structure ongoing projects so that there is some shared context with your teammates.&lt;/li&gt;
&lt;li&gt;Solicit buy-in for controversial features before investing too much time.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Build feedback loops&lt;/em&gt; for your decisions.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="improve-your-project-estimation-skills"&gt;Improve your project estimation skills&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Project estimation is one of the hardest skills that an effective engineer needs to learn. &lt;em&gt;But it’s crucial to master&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;To produce accurate estimates:&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Decompose the project&lt;/em&gt; into granular tasks.&lt;/li&gt;
&lt;li&gt;Estimate based on how long tasks will take, not on how long you or someone else wants them to take.&lt;/li&gt;
&lt;li&gt;Think of estimates as &lt;em&gt;probability distributions&lt;/em&gt;, not best-case scenarios.&lt;/li&gt;
&lt;li&gt;Let the person doing the actual task make the estimate.&lt;/li&gt;
&lt;li&gt;Beware of anchoring bias (e.g., hearing about a low estimate from someone else may skew our own estimate later to be too low).&lt;/li&gt;
&lt;li&gt;Use multiple approaches to estimate the same task (e.g., estimate from past experiences, decompose a larger task into smaller ones and estimate each one).&lt;/li&gt;
&lt;li&gt;Beware the mythical man-month. Having more people on a project doesn’t necessarily mean it will be completed faster. Communication overhead, context switching, and other factors can slow down the team as much as &lt;span class="math"&gt;\(O(n^2)\)&lt;/span&gt; considering the number of people involved.&lt;/li&gt;
&lt;li&gt;Validate estimates against historical data.&lt;/li&gt;
&lt;li&gt;Use &lt;strong&gt;time-boxing&lt;/strong&gt; to constrain tasks that can grow in scope.&lt;/li&gt;
&lt;li&gt;Allow others to challenge estimates.&lt;/li&gt;
&lt;li&gt;Allow buffer room for the unknown in the schedule.&lt;/li&gt;
&lt;li&gt;Define measurable milestones.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Do the riskiest tasks first&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Know the limits of overtime.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="part-3-build-long-term-value"&gt;Part 3: Build Long-Term Value&lt;/h2&gt;
&lt;h3 id="balance-quality-with-pragmatism"&gt;Balance Quality with Pragmatism&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Establish a culture of reviewing code.&lt;/li&gt;
&lt;li&gt;Catch bugs or design shortcomings early.&lt;/li&gt;
&lt;li&gt;Increase accountability for code changes.&lt;/li&gt;
&lt;li&gt;Provide an avenue for sharing best practices.&lt;/li&gt;
&lt;li&gt;Increase long-term agility.&lt;/li&gt;
&lt;li&gt;Invest in good software abstractions to simplify difficult problems.&lt;/li&gt;
&lt;li&gt;Reduce the complexity of the original problem into easier-to-understand primitives.&lt;/li&gt;
&lt;li&gt;Reduce future application maintenance and make it easier to apply future improvements.&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;DRY&lt;/span&gt; principle: solve the hard problems once and re-use the solutions multiple times.&lt;/li&gt;
&lt;li&gt;Scale code quality with &lt;em&gt;automated testing&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Make large refactors with confidence.&lt;/li&gt;
&lt;li&gt;Offer executable documentation.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Don’t test everything&lt;/em&gt;: focus on the most important parts of the code and make sure everything critical is covered.&lt;/li&gt;
&lt;li&gt;Manage your technical debt.&lt;/li&gt;
&lt;li&gt;Pay it periodically. Incur it when necessary to meet deadlines.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Repay the debts with the highest interest rates first&lt;/em&gt; (i.e., focus on what produces the most leverage).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="minimize-operational-burden"&gt;Minimize Operational Burden&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Embrace operational simplicity.&lt;/li&gt;
&lt;li&gt;Increased complexity introduces more potential single points of failure.&lt;/li&gt;
&lt;li&gt;New engineers face a steeper learning curve when learning and understanding the new systems.&lt;/li&gt;
&lt;li&gt;Effort towards improving abstractions, libraries, and tools gets diluted across the different systems.&lt;/li&gt;
&lt;li&gt;Do the simple thing first.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Build systems to fail fast&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Pinpoint the source of errors.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Make debugging easier&lt;/em&gt; by not masking your errors and by not deferring failures until later.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Relentlessly automate&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Don’t underestimate the future frequency of the task.&lt;/li&gt;
&lt;li&gt;Internalize the time savings over a long time horizon.&lt;/li&gt;
&lt;li&gt;Automate mechanics over decision-making.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Make batch processes idempotent&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;At least, make processes &lt;em&gt;“retryable”&lt;/em&gt; if they cannot be made idempotent.&lt;/li&gt;
&lt;li&gt;Hone your ability to respond and recover quickly.&lt;/li&gt;
&lt;li&gt;Plan and practice failure modes.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="invest-in-your-teams-growth"&gt;Invest in Your Team’s Growth&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Make hiring everyone’s responsibility.&lt;/li&gt;
&lt;li&gt;Identify which qualities you care about the most in your colleagues: &lt;em&gt;keep the bar high&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Make sure the recruiting process is effective.&lt;/li&gt;
&lt;li&gt;Adapt interview problems to different levels of difficulty based on the candidate’s experience.&lt;/li&gt;
&lt;li&gt;Design a good onboarding process.&lt;/li&gt;
&lt;li&gt;Ramp up new engineers as quickly as possible (e.g., with &lt;em&gt;codelabs&lt;/em&gt;).&lt;ul&gt;
&lt;li&gt;Help the people around you be successful.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Impart the team’s culture and values (e.g., have &lt;em&gt;onboarding talks&lt;/em&gt;).&lt;/li&gt;
&lt;li&gt;Expose new engineers to the breadth of fundamentals needed to succeed (e.g., with &lt;em&gt;mentorship&lt;/em&gt;).&lt;/li&gt;
&lt;li&gt;Socially integrate new engineers onto the team (e.g., give them starter tasks to feel they’re part of the team faster).&lt;/li&gt;
&lt;li&gt;Share ownership of code (increase the &lt;em&gt;bus factor&lt;/em&gt;).&lt;/li&gt;
&lt;li&gt;Avoid one-person teams.&lt;/li&gt;
&lt;li&gt;Review each other’s code and software designs.&lt;/li&gt;
&lt;li&gt;Make sure the team is exposed to different types of tasks and responsibilities regularly.&lt;/li&gt;
&lt;li&gt;Focus on readable and high-quality code.&lt;/li&gt;
&lt;li&gt;Share software decisions and architecture clearly.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Make sure code and workflows are documented properly&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Invest in teaching and mentoring&lt;/em&gt;.&lt;ul&gt;
&lt;li&gt;The more effective the team becomes, the more freedom there is to work on new projects.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Build collective wisdom with post-mortems (e.g., at &lt;span class="caps"&gt;NASA&lt;/span&gt;, these become the user manual).&lt;/li&gt;
&lt;li&gt;Build a great engineering culture.&lt;/li&gt;
&lt;li&gt;Optimize for iteration speed.&lt;/li&gt;
&lt;li&gt;Always automate.&lt;/li&gt;
&lt;li&gt;Use the right software abstractions.&lt;/li&gt;
&lt;li&gt;Nurture a respectful working environment.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Allot experimentation time&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Foster a culture of learning&lt;/em&gt; (&lt;span class="caps"&gt;CI&lt;/span&gt;/&lt;span class="caps"&gt;CD&lt;/span&gt;: &lt;em&gt;continuous improvement, continuous delightfulness&lt;/em&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Hire the best&lt;/strong&gt;!&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h1 id="conclusion"&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Edmond opened my eyes to the importance of being an effective engineer, showing what that entails and how to concretely achieve it. His extraordinary technical journey and knowledge of the field are evident throughout the book, and I found myself nodding in agreement with many of his points. He made me think about how I could apply his advice to my own work. Notably, the key concept of &lt;strong&gt;leverage&lt;/strong&gt; resonated deeply with me and ended up being the cornerstone of &lt;a href="https://github.com/sglavoie/cm3070-final-project"&gt;the final project I built for my bachelor’s degree&lt;/a&gt;: &lt;em&gt;ProductiviDo - An efficient task planner focusing on high-leverage activities&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id="resources-and-references"&gt;Resources and references&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://edmondlau.co/"&gt;Edmond Lau&lt;/a&gt; - The author’s personal website.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sglavoie/cm3070-final-project"&gt;ProductiviDo&lt;/a&gt; - A simple and efficient todo-app built with React-Native.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.goodreads.com/book/show/25238425-the-effective-engineer"&gt;The Effective Engineer: How to Leverage Your Efforts In Software Engineering to Make a Disproportionate and Meaningful Impact&lt;/a&gt; - goodreads.com.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.effectiveengineer.com/"&gt;The Effective Engineer&lt;/a&gt; - by Edmond Lau.&lt;/li&gt;
&lt;/ul&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: '#007bff ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="learnings"></category><category term="advice"></category><category term="best practices"></category><category term="books"></category><category term="career"></category></entry><entry><title>Reviewing the process of building a first React Native application</title><link href="https://www.sglavoie.com/posts/2023/03/04/reviewing-the-process-of-building-a-first-React-Native-application/" rel="alternate"></link><published>2023-03-04T12:41:00-06:00</published><updated>2023-03-04T12:41:00-06:00</updated><author><name>Sébastien Lavoie</name></author><id>tag:www.sglavoie.com,2023-03-04:/posts/2023/03/04/reviewing-the-process-of-building-a-first-React-Native-application/</id><summary type="html">&lt;p&gt;Working with new technologies can be exciting and insightful at the same time! At least, this is what I would like to believe after having dedicated a couple of weeks to this&amp;nbsp;project&amp;#8230;&lt;/p&gt;</summary><content type="html">
&lt;hr/&gt;
&lt;h1 id="introduction"&gt;Introduction&lt;/h1&gt;
&lt;p&gt;In the context of an assignment as part of a BSc in computer science, I had to come up with a React Native application. Specifically, I chose to build an app to help make and break habits through the use of a solid system that’s backed by science, which is presented through a large excerpt that accompanied the end result. It helps people to consistently stick to habits until they become an intrinsic part of their routine. Moreover, it helps to maintain an actual routine and to build a sense of accountability and capability in oneself, because big successes come from small steps taken in the right direction time and time again.&lt;/p&gt;
&lt;p&gt;Instead of giving dopaminergic hits like other apps which strive to reward their users in one way or another for completing their tasks and goals or generating anxiety around items not being completed, this app focuses on giving full control to the user with a proven system to turn their habits into automated behaviours with ease. That was the idea, at least.&lt;/p&gt;
&lt;p&gt;&lt;img alt="App icon Routinizator" src="https://www.sglavoie.com/images/posts/0035_building_first_react_native_application/app_icon.png"/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="concept-development"&gt;Concept development&lt;/h1&gt;
&lt;h2 id="the-origin"&gt;The origin&lt;/h2&gt;
&lt;p&gt;The idea for this application came from listening to the Huberman Lab podcast from Dr. Andrew Huberman in an episode entitled &lt;a href="https://hubermanlab.com/the-science-of-making-and-breaking-habits"&gt;The science of making &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; breaking habits&lt;/a&gt;. Starting from this excellent learning resource, further literature was devoured to inform the final concept, most notably &lt;a href="https://www.annualreviews.org/doi/abs/10.1146/annurev-psych-122414-033417"&gt;Psychology of Habit from the Annual Review of Psychology&lt;/a&gt; and &lt;a href="https://journals.sagepub.com/doi/full/10.1177/1539449219876877"&gt;Intervention to Modify Habits: A Scoping Review&lt;/a&gt; published in Sage Journals.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Typography" src="https://www.sglavoie.com/images/posts/0035_building_first_react_native_application/typography.png"/&gt;&lt;/p&gt;
&lt;h2 id="time-restrictions"&gt;Time restrictions&lt;/h2&gt;
&lt;p&gt;It was entirely feasible to come up with a simpler concept that would be doable in roughly 10 weeks. Like many popular applications on the market today, it is expected that new features will be added after the official release date once additional and valuable feedback is received from users. The core idea can and will be implemented in this short time frame. After all, this application can pivot towards a simpler presentation should there be a need to and as the &lt;a href="https://en.wikipedia.org/wiki/Zen_of_Python"&gt;Zen of Python&lt;/a&gt; says: &lt;em&gt;“Simple is better than complex”&lt;/em&gt;.
Niceties could be added to the user interface should time allow: however the initial development will focus on a narrower set of features so that the roadmap can be successfully followed and the final product delivered in a timely manner.&lt;/p&gt;
&lt;p&gt;&lt;img alt="UI elements" src="https://www.sglavoie.com/images/posts/0035_building_first_react_native_application/ui_elements.png"/&gt;&lt;/p&gt;
&lt;h2 id="main-concern-during-development"&gt;Main concern during development&lt;/h2&gt;
&lt;p&gt;A bad implementation of the system could mean that flexibility could be lost at the cost of ease of development. In other words, due to a strict, looming deadline, some shortcuts could be considered to cut corners in the underlying logic of the application to save time without affecting the quality of the product from the user’s perspective. Nonetheless, this could lead to more headache down the road when it becomes necessary to refactor the application in order to satisfy the need for a more modular approach, which would simplify further development.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Screens" src="https://www.sglavoie.com/images/posts/0035_building_first_react_native_application/screens.png"/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="wireframing"&gt;Wireframing&lt;/h1&gt;
&lt;p&gt;Low-fidely as well as high-fidelity wireframes were created using &lt;a href="https://www.figma.com"&gt;Figma&lt;/a&gt;. An exhaustive presentation of the final application was included in an appendix, depicting the logo, the color palette, the typography used, a list of the &lt;span class="caps"&gt;UI&lt;/span&gt; elements and a complete and faithful display of all the screens. Technically, the high-fidelity wireframes were designed using &lt;a href="https://help.figma.com/hc/en-us/articles/360038662654-Guide-to-components-in-Figma"&gt;Figma components&lt;/a&gt; and placed inside “frames” to export a &lt;span class="caps"&gt;PDF&lt;/span&gt;. Most &lt;span class="caps"&gt;UI&lt;/span&gt; elements were hand-drawn, except for a few free icons taken from the &lt;a href="https://material.io/design"&gt;Material Design community&lt;/a&gt;. Numerous user flow diagrams were included to illustrate how the wireframing took shape once the logic to navigate between screens was determined.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Welcome screen" src="https://www.sglavoie.com/images/posts/0035_building_first_react_native_application/welcome.png"/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="user-feedback"&gt;User feedback&lt;/h1&gt;
&lt;p&gt;User feedback was critical to the success of this project. Users helped refine certain visual aspects, such as making sure there was enough padding between the different elements by testing with devices using a smaller screen.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Frequency execution early" src="https://www.sglavoie.com/images/posts/0035_building_first_react_native_application/frequency_execution_early.png"/&gt;&lt;/p&gt;
&lt;h2 id="improvements-to-the-original-design"&gt;Improvements to the original design&lt;/h2&gt;
&lt;p&gt;Other notable improvements included redesigning the user flow when creating a new programme so that it would be easier to follow. Instead of dealing with multiple habits at once, the slightly updated design made it possible to fully complete the cycle when adding a new habit. Similarly, once habits were added, the newer flow to tackle habit stacks made it simpler to navigate back to the main screen to confirm the selection of habits and to review the programme as a whole.&lt;/p&gt;
&lt;p&gt;Without users inquiring about having a satellite view in the map, there wouldn’t have been any option to toggle the style of the map either. This became a needed addition in places where roads are sparse while the terrain remains easily recognizable.&lt;/p&gt;
&lt;p&gt;&lt;img alt="About screen" src="https://www.sglavoie.com/images/posts/0035_building_first_react_native_application/about.png"/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="prototyping"&gt;Prototyping&lt;/h1&gt;
&lt;h2 id="early-iterations"&gt;Early iterations&lt;/h2&gt;
&lt;p&gt;While shaping the initial application alongside both wireframing and concept sketching, a few iterations of the different screens were designed from scratch. General ideas and concepts were discussed and analyzed to fit with the goal of creating a mindful habit tracker while taking into consideration hard requirements such as the time available for the development cycles.&lt;/p&gt;
&lt;p&gt;The application started with a strong focus on accountability. However, it was quickly realized that the technical stack would need to be more ample and would necessarily require a higher budget to fund the use of online services to store a database of &lt;em&gt;“habit contracts”&lt;/em&gt; that users would create and optionally make public on their own. Needless to say, the single developer involved in the creation of this application did not have the resources nor the willingness to deal with legal issues that would arise from managing such personal information.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Iteration 1 flow" src="https://www.sglavoie.com/images/posts/0035_building_first_react_native_application/iteration_1_flow.png"/&gt;&lt;/p&gt;
&lt;h2 id="privacy-concerns"&gt;Privacy concerns&lt;/h2&gt;
&lt;p&gt;Additionally, there would not have been the easy possibility of making accessible all the data from a habit contract since personally identifiable information such as location, accountability partner names and so on would be revealed to the world. For these reasons and many more, the set of features relating to accountability was removed from the application to ensure that user privacy would be dealt with properly at this scale of operation.&lt;/p&gt;
&lt;p&gt;In this regard, to avoid any potential issue with privacy, no data whatsoever is stored remotely. &lt;a href="https://github.com/react-native-async-storage/async-storage"&gt;React Native Async Storage&lt;/a&gt; was used to store data locally on users’ devices, even removing the need for an internet connection (except for the need to find the user location and set an address, which is an optional step when creating a programme).&lt;/p&gt;
&lt;p&gt;To make use of the async storage, &lt;a href="https://redux-toolkit.js.org"&gt;Redux Toolkit&lt;/a&gt; was used to deal with all the state management and is responsible for dispatching actions throughout the application. Importantly, users do not need to leave the application open at all times since &lt;a href="https://github.com/rt2zz/redux-persist"&gt;Redux Persist&lt;/a&gt; was used to store Redux data to the async storage and to rehydrate it when the application is re-opened.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Iteration 4 flow" src="https://www.sglavoie.com/images/posts/0035_building_first_react_native_application/iteration_4_flow.png"/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="development"&gt;Development&lt;/h1&gt;
&lt;p&gt;As we can now attest, a lot happened before developing the actual application, but this fact did not make the development itself less interesting to narrate! In a little over two months, this React Native application started from nothing and grew to a fully-fledged product.&lt;/p&gt;
&lt;p&gt;&lt;img alt="New programme dashboard" src="https://www.sglavoie.com/images/posts/0035_building_first_react_native_application/new_dashboard.png"/&gt;&lt;/p&gt;
&lt;h2 id="initial-setup"&gt;Initial setup&lt;/h2&gt;
&lt;p&gt;The initial steps taken were all about setting up the project correctly with most of its JavaScript dependencies, beginning with a &lt;code&gt;.gitignore&lt;/code&gt; file to prevent adding secrets and other unneeded artifacts to the project, an &lt;code&gt;app.json&lt;/code&gt; to define the metadata required to publish an application with &lt;a href="https://expo.dev"&gt;Expo&lt;/a&gt; and a &lt;code&gt;package.json&lt;/code&gt; listing all the major dependencies to be installed with &lt;a href="https://yarnpkg.com"&gt;Yarn&lt;/a&gt; in this case. Secondly, &lt;a href="https://github.com/infinitered/reactotron"&gt;Reactotron&lt;/a&gt; was set up with Redux to provide access to the application state in real time. Strict mode was then enabled to help avoid bad programming practices and third-party libraries were silenced with React Native’s &lt;code&gt;LogBox&lt;/code&gt; module.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Remove habit screen" src="https://www.sglavoie.com/images/posts/0035_building_first_react_native_application/remove_habit.png"/&gt;&lt;/p&gt;
&lt;h2 id="state-management"&gt;State management&lt;/h2&gt;
&lt;p&gt;Once the basic setup was in place, Redux Persist was added to work with React Native Async Storage. Then, the testing setup was integrated into the project before adding any screen to the application using &lt;a href="https://jestjs.io/"&gt;Jest&lt;/a&gt; configured with mockAsyncStorage to avoid issues with the persistent storage while testing. Despite barebone Redux being useful on its own, &lt;a href="https://redux-toolkit.js.org/tutorials/quick-start"&gt;Redux Toolkit provides some useful utilities and shortcuts&lt;/a&gt; that were taken advantage of, including &lt;code&gt;createSlice&lt;/code&gt; to easily “slice” parts of the state to retrieve and store information in isolation, &lt;code&gt;combineReducers&lt;/code&gt; to list all the slices of state in the same “root reducer”, and &lt;code&gt;configureStore&lt;/code&gt; to connect the persistent storage to the Redux store and set up access to the store itself in the rest of the application.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Cues screen" src="https://www.sglavoie.com/images/posts/0035_building_first_react_native_application/cues.png"/&gt;&lt;/p&gt;
&lt;h2 id="styling-the-app"&gt;Styling the app&lt;/h2&gt;
&lt;p&gt;Before adding logic to the project, &lt;a href="https://github.com/vitalets/react-native-extended-stylesheet"&gt;react-native-extended-stylesheet&lt;/a&gt; was used to add functionality to the way the styling could be done by having the ability to reference variables, do calculations inside &lt;span class="caps"&gt;CSS&lt;/span&gt; fragments, etc. Styles were set globally right from the start to avoid code duplication and where deemed useful, some screens had specific stylings applied exclusively to them from separate files.&lt;/p&gt;
&lt;p&gt;As a next step, the general structure of the app was set up with a status bar and a &lt;code&gt;SafeAreaView&lt;/code&gt; component to make sure that rendering happened within safe limits on the screen. In order to style the application and render different screens, &lt;a href="https://reactnavigation.org/"&gt;React Navigation&lt;/a&gt; was used to make the navigation possible and to initially render a fixed screen at a time while it was being designed based off the high-fidelity wireframes. One by one, the screens were designed with all the buttons in the right place and some dummy content to render all the different &lt;span class="caps"&gt;UI&lt;/span&gt; elements. This led to using a multitude of third-party libraries, including notably &lt;a href="https://github.com/react-native-maps/react-native-maps"&gt;react-native-maps&lt;/a&gt; to work with native maps on both Android and iOS devices.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Location screen" src="https://www.sglavoie.com/images/posts/0035_building_first_react_native_application/location.png"/&gt;&lt;/p&gt;
&lt;h2 id="premature-refactoring"&gt;Premature refactoring&lt;/h2&gt;
&lt;p&gt;With the screens in place, the code was re-arranged to allow for better flexibility while developing. New directories for components were created, and the smallest components of all were extracted from the larger ones to start splitting concerns and have specific destinations to receive parts of the states via Redux selectors.&lt;/p&gt;
&lt;p&gt;Global styles were then cleaned up considerably and local styles were mostly eliminated as they were being re-used elsewhere without notice. At this point, without yet having anything useful to demonstrate, users reviewed where the application was going and suggested possible improvements while it was still easy to move &lt;span class="caps"&gt;UI&lt;/span&gt; elements around without breaking anything.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Frequency execution screen" src="https://www.sglavoie.com/images/posts/0035_building_first_react_native_application/frequency_execution.png"/&gt;&lt;/p&gt;
&lt;h2 id="adding-navigation"&gt;Adding navigation&lt;/h2&gt;
&lt;p&gt;Once all the screens were designed and ready to include programmatic logic, the screens were then linked together so that the user could —without doing anything useful yet— navigate from one page to another. After that, a menu was included in the top-left corner to navigate to specific pages from anywhere within the app. This behaviour was later customized so that some pages would show the “back button” (a chevron icon pointing to the left) to make going back to the previous screen easier than scrolling to the bottom of a longer page. On top of this, some screens received a special treatment where the menu is hidden entirely, such as when deleting a programme from the app. While not strictly required, this made it obvious to the user that they should focus on the content of that particular screen.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Programme specs screen" src="https://www.sglavoie.com/images/posts/0035_building_first_react_native_application/programme_specs.png"/&gt;&lt;/p&gt;
&lt;h2 id="customizing-ui-elements"&gt;Customizing &lt;span class="caps"&gt;UI&lt;/span&gt; elements&lt;/h2&gt;
&lt;p&gt;At this stage, the application was ready to receive its final touch-ups to look as polished as the expected product. This included getting our hands on &lt;a href="https://github.com/WrathChaos/react-native-bouncy-checkbox"&gt;React Native Bouncy Checkbox&lt;/a&gt; to give a more joyful feel to the most boring parts of the application and using &lt;a href="https://github.com/react-native-datetimepicker/datetimepicker"&gt;React Native DateTimePicker&lt;/a&gt; to input the time of the day in a more meaningful and straightforward way.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Habit stacks screen" src="https://www.sglavoie.com/images/posts/0035_building_first_react_native_application/habit_stacks.png"/&gt;&lt;/p&gt;
&lt;h2 id="setting-up-simple-states"&gt;Setting up simple states&lt;/h2&gt;
&lt;p&gt;Using the &lt;code&gt;useState&lt;/code&gt; hook from React and &lt;code&gt;useDispatch&lt;/code&gt; from Redux, basic states were set up to toggle the styles of buttons and to allow basic interactivity, such as expanding and collapsing sections of the user interface. Using some dummy content in the Redux store, other simple events were taken care of, for example removing a habit, creating a new habit and so on. With the basic logic and states in place, more complex flows were added, such as the need to loop through habits to display them as “habit stacks” or looping through the days in a programme to display three phases for each day, each phase containing possibly multiple stacks of habits and each habit being a self-contained source of data with a table displayed with &lt;a href="https://github.com/Purii/react-native-tableview-simple"&gt;react-native-tableview-simple&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Habit review screen" src="https://www.sglavoie.com/images/posts/0035_building_first_react_native_application/habit_review.png"/&gt;&lt;/p&gt;
&lt;h2 id="testing-on-different-platforms"&gt;Testing on different platforms&lt;/h2&gt;
&lt;p&gt;Although admittedly a bit late in the process, the application was then tested fully on Android and in the Expo website. Trading off speed of development for the inconvenience of guaranteeing a pixel-perfect application at each step was most definitely worth it since very few changes were required in the end, this being the main idea behind using something like React Native in the first place so that code can be written once and for all. Despite all these promises, some issues related to dependencies were faced with big, red messages showing an alarmingly large list of errors in the Expo Snack interface. Thankfully, it was only a matter of upgrading locally to match the latest &lt;span class="caps"&gt;SDK&lt;/span&gt; available at the time from Expo (v46.0.0).&lt;/p&gt;
&lt;p&gt;There were some minor issues observed on different platforms which were fixed on the development machine using simulators. For instance, the map view was somewhat laggy on iOS originally, so instead of moving the marker around on the map, it was decided to leave it fix on top of the center of the map with a greater &lt;code&gt;zIndex&lt;/code&gt; to make it visible at all times in order to have only the map view to re-render each time the map was moved. On Android, the time picker was a bit fiddly to work with and so to circumvent the problematic situation, the picker would be shown once automatically to the user when the related screen was opened, removing the need to display a space for the picker on screen and instead having it fill out the screen in the style of a modal.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Habit contract review screen" src="https://www.sglavoie.com/images/posts/0035_building_first_react_native_application/habit_contract.png"/&gt;&lt;/p&gt;
&lt;h2 id="improving-the-developer-experience-with-redux"&gt;Improving the developer experience with Redux&lt;/h2&gt;
&lt;p&gt;Reactotron was useful in the beginning but started to crash very often at this point of the development. After un-starring the project on GitHub and starring &lt;a href="https://github.com/jhen0409/react-native-debugger"&gt;React Native Debugger&lt;/a&gt; instead, things were smooth again. Reactotron required messing a little bit with the testing setup by removing everything related to it first, then React Native Debugger made it all simple again thanks to its seamless integration with Redux which does not need to be injected as middleware when configuring the Redux store.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Programme in progress screen" src="https://www.sglavoie.com/images/posts/0035_building_first_react_native_application/programme_progress.png"/&gt;&lt;/p&gt;
&lt;h2 id="refactoring-again"&gt;Refactoring again&lt;/h2&gt;
&lt;p&gt;Now that most of the logic was implemented, smaller components were created from the monstrous ones created thus far. In most instances, components were already existing on their own but they were all positioned in the same file without being prefixed with the keyword &lt;code&gt;export&lt;/code&gt;. Equally important, all &lt;a href="https://eslint.org/"&gt;ESLint&lt;/a&gt; warnings were cleared up one after the other to avoid re-renders and unused bits of code. Because Expo tends to be picky with missing import statements, &lt;code&gt;import React from ‘react'&lt;/code&gt; was carefully added to almost every file in the project where it was needed.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Delete programme screen" src="https://www.sglavoie.com/images/posts/0035_building_first_react_native_application/delete_programme.png"/&gt;&lt;/p&gt;
&lt;h2 id="last-minute-cleanup"&gt;Last-minute cleanup&lt;/h2&gt;
&lt;p&gt;Finally, once the application was usable and the source code a little more pretty, import statements were grouped by categories, warnings from third-party libraries were silenced with &lt;code&gt;LogBox&lt;/code&gt;, spacing around paragraphs was reviewed and optimized and the app was scrutinized once again to look for the presence of bugs.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Completed programme screen" src="https://www.sglavoie.com/images/posts/0035_building_first_react_native_application/completed_programme.png"/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="unit-testing"&gt;Unit testing&lt;/h1&gt;
&lt;h2 id="navigating"&gt;Navigating&lt;/h2&gt;
&lt;p&gt;While the development took place, testing happened all along. The first couple of tests to be included in the test suite were added while validating that navigation occurred correctly between screens. At once, tests were also added when creating the screens to make sure that they would render consistently in the &lt;span class="caps"&gt;UI&lt;/span&gt; by creating snapshots with Jest.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Iteration 6 flowchart" src="https://www.sglavoie.com/images/posts/0035_building_first_react_native_application/iteration_6_flow.png"/&gt;&lt;/p&gt;
&lt;h2 id="utility-functions"&gt;Utility functions&lt;/h2&gt;
&lt;p&gt;More concrete unit testing happened with the utility functions being called by the actions from the Redux store. Because these functions define what happens when an action is dispatched with Redux, there is a lot of potential for bugs to creep in. To make debugging less painful in these cases, dummy and minimal states were set up as part of the unit tests to check for inconsistencies against the input value and the expected one. While Jest offers a complete range of features, the matchers used most often from this library were &lt;code&gt;toBe&lt;/code&gt; to check for exact values (e.g., Boolean and numbers) and &lt;code&gt;toEqual&lt;/code&gt; to assert a deep equality on objects and arrays. Mock functions were set up with Reactotron, but that need went away when the developer migrated to a more stable piece of software (i.e, React Native Debugger).&lt;/p&gt;
&lt;p&gt;&lt;img alt="Early new programme" src="https://www.sglavoie.com/images/posts/0035_building_first_react_native_application/early_new_programme.png"/&gt;&lt;/p&gt;
&lt;h2 id="database-asynchronous-code"&gt;Database &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; asynchronous code&lt;/h2&gt;
&lt;p&gt;In the future, should this application be deployed to the cloud, there will be a need to use setup and teardown functionality against a database and to add tests for asynchronous calls. This was not required for the present version of the application, which focuses on allowing users to be as independent as possible from the Internet while respecting their privacy.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Later new programme flow" src="https://www.sglavoie.com/images/posts/0035_building_first_react_native_application/later_new_programme_flow.png"/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="evaluation"&gt;Evaluation&lt;/h1&gt;
&lt;h2 id="overview"&gt;Overview&lt;/h2&gt;
&lt;p&gt;All in all, despite a strict deadline and few (more truthfully, close to none) monetary resources, it was possible to deliver a working solution to a tangible problem, namely that of increasing productivity by knowing what is most valued in one’s life circumstances. While the application can be considered feature-complete, it could be the beginning of a long journey towards sharing an application that has real potential to improve people’s lives by solving a problem that is hard to pinpoint without enough awareness.&lt;/p&gt;
&lt;p&gt;&lt;img alt="New programme screen" src="https://www.sglavoie.com/images/posts/0035_building_first_react_native_application/new_programme.png"/&gt;&lt;/p&gt;
&lt;h2 id="technical-aspects"&gt;Technical aspects&lt;/h2&gt;
&lt;p&gt;On the technical side of things, it would have been preferable to split the state in a more logical way right from the beginning. Even though a general idea of the state was drawn inside an &lt;span class="caps"&gt;IDE&lt;/span&gt; by creating a &lt;span class="caps"&gt;JSON&lt;/span&gt; object to represent the schema to be adhered to, the state was allowed to mutate along the way, which caused issues by having to move reducers around and by having to update the selectors to look at a different hierarchy of the state. By contemplating the real meaning of a Redux “slice” in which the state is meant to be entirely independent from other slices of the state, it makes it obvious that some types of object will remain independent while others will eventually require to communicate with their siblings. Thinking this logic through before starting to make things happen in the &lt;span class="caps"&gt;UI&lt;/span&gt; is, in hindsight, a fruitful endeavour.&lt;/p&gt;
&lt;p&gt;&lt;img alt="New programme flow" src="https://www.sglavoie.com/images/posts/0035_building_first_react_native_application/new_programme_flow.png"/&gt;&lt;/p&gt;
&lt;h2 id="communicational-aspects"&gt;Communicational aspects&lt;/h2&gt;
&lt;p&gt;On the soft skills side, a mistake was made by not sharing the original concept with users sooner. Although the final product would likely resemble what it ended up being, interactivity in the application could have been designed better regarding some aspects. For example, the component responsible for displaying the frequency of execution could very well become an actual calendar. Designed in a compact way, a calendar surely would be more familiar to most users instead of having a list that needs to be scrolled into view. Functionally speaking, ticking a box in a calendar-like view would be exactly equivalent to checking off a box next to a row item in a list, but the presentation would be more familiar to most users and, quite understandably, more intuitive too.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Finish flow" src="https://www.sglavoie.com/images/posts/0035_building_first_react_native_application/finish_flow.png"/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="demo-of-the-app"&gt;Demo of the app&lt;/h1&gt;
&lt;div class="youtube youtube-16x9"&gt;
&lt;iframe allowfullscreen="" frameborder="0" seamless="" src="https://www.youtube.com/embed/d9PAO_Ehza4"&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;hr/&gt;
&lt;h1 id="resources-and-references"&gt;Resources and references&lt;/h1&gt;
&lt;p&gt;If you like this type and format of content, you might also enjoy &lt;a href="https://www.sglavoie.com/posts/2023/07/30/building-task-planner-react-native/"&gt;a follow-up story about building a task planner&lt;/a&gt;, also brought to life with the help of React Native!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.annualreviews.org/doi/abs/10.1146/annurev-psych-122414-033417"&gt;Annual Reviews, Psychology of Habit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://eslint.org/"&gt;ESLint, Find and fix problems in your JavaScript code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://expo.dev"&gt;Expo, Make any app. Run it everywhere&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://help.figma.com/hc/en-us/articles/360038662654-Guide-to-components-in-Figma"&gt;Figma, Guide to components in Figma&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.figma.com"&gt;Figma, Nothing great is made alone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hubermanlab.com/the-science-of-making-and-breaking-habits"&gt;Huberman Lab, &lt;span class="caps"&gt;THE&lt;/span&gt; &lt;span class="caps"&gt;SCIENCE&lt;/span&gt; &lt;span class="caps"&gt;OF&lt;/span&gt; &lt;span class="caps"&gt;MAKING&lt;/span&gt; &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; &lt;span class="caps"&gt;BREAKING&lt;/span&gt; &lt;span class="caps"&gt;HABITS&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jestjs.io"&gt;Jest, Delightful JavaScript Testing Framework with a focus on simplicity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://material.io/design"&gt;Material Design, Create intuitive and beautiful products with Material Design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/react-native-async-storage/async-storage"&gt;React Native Async Storage, An asynchronous, persistent, key-value storage system for React Native&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/WrathChaos/react-native-bouncy-checkbox"&gt;React Native Bouncy Checkbox - Fully customizable animated bouncy checkbox for React Native&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/react-native-datetimepicker/datetimepicker"&gt;React Native DateTimePicker - React Native date &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; time picker com- ponent for iOS, Android and Windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jhen0409/react-native-debugger"&gt;React Native Debugger - The standalone app based on official debugger of React Native, and includes React Inspector / Redux DevTools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://reactnavigation.org/"&gt;React Navigation - Routing and navigation for Expo and React Native apps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/vitalets/react-native-extended-stylesheet"&gt;react-native-extended-stylesheet - Extended StyleSheets for React Native&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/react-native-maps/react-native-maps"&gt;react-native-maps - React Native Mapview component for iOS + Android&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Purii/react-native-tableview-simple"&gt;react-native-tableview-simple - Flexible and lightweight React Native component for UITableView made with pure &lt;span class="caps"&gt;CSS&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/infinitered/reactotron"&gt;Reactotron - A desktop app for inspecting your React &lt;span class="caps"&gt;JS&lt;/span&gt; and React Native projects. macOS, Linux, and Windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rt2zz/redux-persist"&gt;Redux Persist, Persist and rehydrate a redux store&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://redux-toolkit.js.org/tutorials/quick-start"&gt;Redux Toolkit, Redux Toolkit Quick Start&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://redux-toolkit.js.org"&gt;Redux Toolkit, The official, opinionated, batteries-included toolset for efficient Redux development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://journals.sagepub.com/doi/full/10.1177/1539449219876877"&gt;Sage Journals, Intervention to Modify Habits: A Scoping Review&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Zen_of_Python"&gt;Wikipedia, Zen of Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://yarnpkg.com"&gt;Yarn, Safe, stable, reproducible projects&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="learnings"></category><category term="bsc"></category><category term="lessons"></category><category term="mobile-dev"></category><category term="react-native"></category></entry><entry><title>Git worktrees for a better parallel workflow</title><link href="https://www.sglavoie.com/posts/2023/01/02/git-worktrees-for-a-better-parallel-workflow/" rel="alternate"></link><published>2023-01-02T09:52:00-06:00</published><updated>2023-01-02T09:52:00-06:00</updated><author><name>Sébastien Lavoie</name></author><id>tag:www.sglavoie.com,2023-01-02:/posts/2023/01/02/git-worktrees-for-a-better-parallel-workflow/</id><summary type="html">&lt;p&gt;Git leads to a wealth of discoveries. Once &lt;a href="https://www.sglavoie.com/posts/2020/10/03/setting-up-ssh-and-git-for-multiple-accounts/"&gt;&lt;span class="caps"&gt;SSH&lt;/span&gt; and &lt;span class="caps"&gt;GPG&lt;/span&gt; are set up&lt;/a&gt;, once &lt;a href="https://www.sglavoie.com/posts/2021/05/30/managing-dotfiles-with-git-bare-repository/"&gt;dotfiles are under control&lt;/a&gt; and a reasonable &lt;a href="https://www.sglavoie.com/posts/2022/04/03/git-the-gist-of-it-common-commands-for-a-working-workflow/"&gt;Git workflow has been adopted&lt;/a&gt;, there&amp;#8217;s still room to be amazed by a feature like Git&amp;nbsp;worktrees!&lt;/p&gt;</summary><content type="html">
&lt;hr/&gt;
&lt;h1 id="introduction"&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Why are Git worktrees needed in the first place? Well, there are certainly a couple of different use cases where they come in handy, but the reason they exist is to allow a developer to check out multiple branches at once without having to do any kind of cleanup when switching branches. Introduced back in &lt;a href="https://github.blog/2015-07-29-git-2-5-including-multiple-worktrees-and-triangular-workflows/"&gt;2015 in Git 2.5&lt;/a&gt;, it’s certainly not a new feature anymore, yet it seems like its adoption really took off more recently. I was an avid user of &lt;a href="https://git-scm.com/docs/git-stash"&gt;&lt;code&gt;git stash&lt;/code&gt;&lt;/a&gt; but I often got myself cornered in some specific situations where it was not as convenient as I thought it was… and &lt;a href="https://git-scm.com/docs/git-worktree"&gt;&lt;code&gt;git worktree&lt;/code&gt;&lt;/a&gt; was for me a pretty good solution without much overhead.&lt;/p&gt;
&lt;h1 id="why-is-git-stash-not-enough"&gt;Why is &lt;code&gt;git stash&lt;/code&gt; not enough?&lt;/h1&gt;
&lt;p&gt;It &lt;em&gt;can&lt;/em&gt; be enough, but there are edge cases where it falls short of its promise of keeping stuff neatly around without too much fuss.&lt;/p&gt;
&lt;h2 id="switching-context"&gt;Switching context&lt;/h2&gt;
&lt;p&gt;One particular use case in favor of &lt;code&gt;git worktree&lt;/code&gt; is when you have to quickly switch context and you have a dirty branch checked out — which is basically the same use case advertised in the &lt;a href="https://git-scm.com/docs/git-worktree#_examples"&gt;Git documentation&lt;/a&gt;. Committing changes away might be a bit risky if those aren’t ready to be pushed to the remote server and stashing files might be annoying because there could be newer files to include with &lt;code&gt;git stash --include-untracked&lt;/code&gt; or some files already staged in the middle of the work where a &lt;code&gt;git stash --keep-index&lt;/code&gt; is also appropriate, or maybe even a case where you have created temporary files that match ignored files where &lt;code&gt;git stash --all&lt;/code&gt; might do. It gets even messier if you want to leave things in a clean state with only the changes you need with &lt;code&gt;git stash --patch&lt;/code&gt; where it would be needed to select interactively all your hunks. And then, you might already have multiple stashes or you might have forgotten to give one or more stash(es) a name, which makes it harder to &lt;code&gt;git stash pop&lt;/code&gt; or &lt;code&gt;git stash apply&lt;/code&gt; your changes later without having to inspect the content of your stashes with something like &lt;code&gt;git stash show -p&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;With &lt;code&gt;git worktree&lt;/code&gt;, this is no longer an issue! If you don’t already have a new worktree you can switch to, creating one with &lt;code&gt;git worktree add&lt;/code&gt; is quick and easy, as shown in the docs:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git&lt;span class="w"&gt; &lt;/span&gt;worktree&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;-b&lt;span class="w"&gt; &lt;/span&gt;emergency-fix&lt;span class="w"&gt; &lt;/span&gt;../temp&lt;span class="w"&gt; &lt;/span&gt;master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will create a branch named &lt;code&gt;emergency-fix&lt;/code&gt;, creating a new worktree at &lt;code&gt;../temp&lt;/code&gt; checking the branch &lt;code&gt;emergency-fix&lt;/code&gt; that will be based off the &lt;code&gt;master&lt;/code&gt; branch. Then, you would switch to that branch which is managed with a new worktree by changing directory into it (or &lt;code&gt;pushd ../temp&lt;/code&gt; to put the directory into a stack so you can come back later to your current branch with &lt;code&gt;popd&lt;/code&gt;). You would add changes and commit them, likely pushing them to a remote, then you could resume your work by going back to the original directory for your &lt;code&gt;master&lt;/code&gt; branch. Now, you could leave behind the &lt;code&gt;emergency-fix&lt;/code&gt; branch but if that was meant as a temporary one, you could just delete the worktree with &lt;code&gt;git worktree remove ../temp&lt;/code&gt;. Besides being removed by path, worktrees can also be removed by the name they are associated with, which is the branch name shown in square brackets when issuing the command &lt;code&gt;git worktree list&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Arguably, it’s not too hard to see that dealing with temporary changes in this way is a lot more straightforward since the current changes can be left intact without having to commit or stash them.&lt;/p&gt;
&lt;h2 id="running-tasks-in-the-background"&gt;Running tasks in the background&lt;/h2&gt;
&lt;p&gt;Whether that be running a test suite that takes a while to execute or leaving the build of a system untouched while it is happening (like building a Docker image), it can be really useful to go work on something else while leaving the original task in the background. More than this, it allows one to go on another branch and make changes to the repository while files from the other branch are being accessed. In the case of building a Docker image for instance, it could cause hard-to-find bugs if the build is stopped or failed and meanwhile files were modified in the repo on the same branch to then be copied back in the next build of the Docker image only to realize that the files being copied have changed prior to being copied.&lt;/p&gt;
&lt;p&gt;More generally though, I find I just like to leave my terminal windows open into a specific path (branch) while having the freedom to go work elsewhere. This way, a virtual environment (for instance, in Python) can be left “activated” and ready to use when context is switched again. Often, different branches in a project might have slightly different requirements and so a distinct virtual environment must be activated. Having them entirely separated by path in separate worktrees makes this kind of workflow a lot simpler to manage.&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="how-i-operate-worktrees"&gt;How I operate worktrees&lt;/h1&gt;
&lt;h2 id="first-other-approaches-in-the-wild"&gt;First, other approaches in the wild&lt;/h2&gt;
&lt;p&gt;I have seen some great programmers use them within a “&lt;a href="https://git-scm.com/docs/git-clone#Documentation/git-clone.txt---bare"&gt;bare repository&lt;/a&gt;“, notably &lt;strong&gt;ThePrimeagen&lt;/strong&gt; in his YouTube video titled &lt;a href="https://www.youtube.com/watch?v=2uEqYw-N8uE"&gt;Git’s Best And Most Unknown Feature&lt;/a&gt;. This works by creating different directories inside the bare repository, effectively having all worktrees at the same level. There is a slight chance of colliding with a reserved directory name by Git, though, since all the metadata is stored there too.&lt;/p&gt;
&lt;p&gt;Another interesting approach I’ve witnessed is the use of a &lt;code&gt;.worktrees&lt;/code&gt; directory inside the directory containing the main branch of the project, which works by adding a match for &lt;code&gt;.worktrees/&lt;/code&gt; in a global &lt;code&gt;.gitignore&lt;/code&gt; file (kudos to &lt;strong&gt;Redhwan Nacef&lt;/strong&gt; in his &lt;a href="https://www.youtube.com/watch?v=4_p1OdLeDLE"&gt;Git Worktree Tutorial&lt;/a&gt;!). I like this approach because it can list all working trees anyways with &lt;code&gt;git worktree list&lt;/code&gt; and there’s nothing really cluttering the directory structure. However, there might be some huge build files or environments and nesting everything that way might require creating a script to find all worktrees as it is not immediately obvious where they would be stored, if at all.&lt;/p&gt;
&lt;h2 id="what-i-actually-do-these-days"&gt;What I actually do these days&lt;/h2&gt;
&lt;p&gt;The approach I have adopted is very simple and requires almost no setup at all.&lt;/p&gt;
&lt;h3 id="starting-with-a-project-with-existing-branches"&gt;Starting with a project with existing branches&lt;/h3&gt;
&lt;p&gt;Assuming a project is already cloned and worked on with no additional worktrees, then it leads to a minor hiccup because the project will need to be renamed. So what I currently do is create a top-level directory for the project, say &lt;code&gt;sglavoie.github.io&lt;/code&gt; for this website. Then, I will literally reuse the branch name to create some hierarchy inside that project. Let’s say that right now, I’m writing multiple articles in different branches and I keep my &lt;code&gt;main&lt;/code&gt; branch as always, then I would first &lt;code&gt;mkdir sglavoie.github.io/main&lt;/code&gt; and put the project’s content in there with its &lt;code&gt;.git&lt;/code&gt; folder. Mind you, this is a one-time thing when not already using worktrees!&lt;/p&gt;
&lt;p&gt;At this stage, the project structure is laid out nicely and ready to accommodate new worktrees. So for instance, if I want to work on a new branch to create a new article without touching the &lt;code&gt;main&lt;/code&gt; branch, I would &lt;code&gt;git worktree add ../articles/article-name-here article-name-here&lt;/code&gt; from the &lt;code&gt;main&lt;/code&gt; branch and voilà, a new worktree will be ready to use. Once a couple of worktrees are created in this way, the directory structure might look as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;~/dev/sglavoie/sglavoie.github.io
├── articles
│   ├── adv-web-dev-social-network-app
│   ├── git-worktree
│   ├── react-native-app
│   └── text-based-diagrams
└── main
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this way, it’s just a matter of changing directory and opening the worktree in your editor of choice (e.g., &lt;code&gt;nvim&lt;/code&gt; for neovim or &lt;code&gt;code .&lt;/code&gt; with &lt;span class="caps"&gt;VS&lt;/span&gt; Code). From now on, it’s easy to switch between branches of a project right from the editor by searching for the “topic” (e.g., &lt;code&gt;main&lt;/code&gt; or &lt;code&gt;articles&lt;/code&gt; in this case, but that could be &lt;code&gt;hotfix&lt;/code&gt; or &lt;code&gt;feat&lt;/code&gt; depending on how your name your branches) or for a project name directory, which would show all the branches that have been opened previously to allow further filtering. This is what &lt;code&gt;git worktree list&lt;/code&gt; would display in this example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;/some/path/sglavoie.github.io/main                                     d67dd8d2 [main]
/some/path/sglavoie.github.io/articles/adv-web-dev-social-network-app  666a0b43 [articles/adv-web-dev-social-network-app]
/some/path/sglavoie.github.io/articles/git-worktree                    d67dd8d2 [git-worktree]
/some/path/sglavoie.github.io/articles/react-native-app                bcfac34e [articles/react-native-app]
/some/path/sglavoie.github.io/articles/text-based-diagrams             4b25371d [articles/text-based-diagrams]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="new-worktrees-from-a-project-already-using-worktrees"&gt;New worktrees from a project already using worktrees&lt;/h3&gt;
&lt;p&gt;If you’ve already embraced this approach, then the next time you want to create a worktree, it will just be a matter of switching to the “base” branch you want to create a worktree from and creating one at whatever location you fancy outside the current directory. For instance, for this article:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git&lt;span class="w"&gt; &lt;/span&gt;worktree&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;../articles/git-worktree&lt;span class="w"&gt; &lt;/span&gt;articles/git-worktree
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This would take care of using the branch name “nesting” convention (e.g., &lt;code&gt;feat/feature-name&lt;/code&gt;, &lt;code&gt;hotfix/bug-name&lt;/code&gt;, etc.) and create sub-directories as needed too. Assuming a worktree has been merged in another branch and/or is no longer necessary, it can be removed with &lt;code&gt;git worktree remove git-worktree&lt;/code&gt; in this example (where &lt;code&gt;git-worktree&lt;/code&gt; is the name given to the worktree… a bit confusing here, you’re right).&lt;/p&gt;
&lt;h3 id="keeping-worktrees-around"&gt;Keeping worktrees around&lt;/h3&gt;
&lt;p&gt;Although the official Git documentation presents a useful case for a temporary fix where the worktree is almost immediately deleted upon the completion of a task, I have found myself in a situation where I’d rather have multiple longstanding worktrees. For example, I regularly need to boot a web application from a different branch, either because the currently checked out branch does not have the necessary requirements installed or because I want to leave a web application running in the background without affecting my current work. In my case, I use it to process some data when it arrives and come back to the work I was doing earlier, doing practically the same thing shown in the Git docs but keeping the worktree around for future use.&lt;/p&gt;
&lt;p&gt;On a large project, I might have a couple of worktrees, but still I would keep branches around without them being part of worktrees when these are meant to be short-lived feature branches that share the same dependencies as other branches as long as they won’t need to be checked out at the same time. Another time I might have separate branches like this could be to avoid having to duplicate gigantic &lt;code&gt;node_modules&lt;/code&gt; or &lt;code&gt;.venv&lt;/code&gt; directories when not needed, because working with different worktrees is pretty much like cloning an entire repository in a separate folder and having to reinstall requirements. There is also a nice Git feature where worktrees are prefixed with a plus sign when issuing &lt;code&gt;git branch&lt;/code&gt;, so that makes them distinctly different from regular branches:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;branch
+&lt;span class="w"&gt; &lt;/span&gt;articles/react-native-app&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="c1"&gt;# worktree&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;gh-pages&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="c1"&gt;# other regular branch&lt;/span&gt;
+&lt;span class="w"&gt; &lt;/span&gt;git-worktree&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="c1"&gt;# worktree&lt;/span&gt;
*&lt;span class="w"&gt; &lt;/span&gt;main&lt;span class="w"&gt;                        &lt;/span&gt;&lt;span class="c1"&gt;# currently checked out&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h1 id="conclusion"&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;I have briefly touched upon a downside of worktrees, which is that it’s almost like cloning over and over a repository, which can take up a lot of disk space with large projects. Nevertheless, this is a tradeoff I am entirely willing to make given the advantages Git worktrees bring with them! If you’re not already using them, maybe this little post might have inspired you to give them a go!&lt;/p&gt;
&lt;h2 id="resources-and-references"&gt;Resources and references&lt;/h2&gt;
&lt;h3 id="external-links"&gt;External links&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.blog/2015-07-29-git-2-5-including-multiple-worktrees-and-triangular-workflows/"&gt;Git 2.5, including multiple worktrees and triangular workflows - github.blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git-scm.com/docs/git-stash"&gt;&lt;code&gt;git-stash&lt;/code&gt; - git-scm.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git-scm.com/docs/git-worktree"&gt;&lt;code&gt;git-worktree&lt;/code&gt; - git-scm.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git-scm.com/docs/git-worktree#_examples"&gt;&lt;code&gt;git-worktree&lt;/code&gt; / Examples - git-scm.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git-scm.com/docs/git-clone#Documentation/git-clone.txt---bare"&gt;&lt;code&gt;git-clone&lt;/code&gt; on &lt;code&gt;--bare&lt;/code&gt; - git-scm.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=2uEqYw-N8uE"&gt;Git’s Best And Most Unknown Feature - ThePrimeagen, YouTube&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=4_p1OdLeDLE"&gt;Git Worktree Tutorial - Redhwan Nacef, YouTube&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="from-this-website"&gt;From this website&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.sglavoie.com/posts/2022/04/03/git-the-gist-of-it-common-commands-for-a-working-workflow/"&gt;Git the gist of it: common commands for a working workflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.sglavoie.com/posts/2021/05/30/managing-dotfiles-with-git-bare-repository/"&gt;Managing dotfiles with a Git bare repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.sglavoie.com/posts/2020/10/03/setting-up-ssh-and-git-for-multiple-accounts/"&gt;Setting up &lt;span class="caps"&gt;SSH&lt;/span&gt; and Git for Multiple Accounts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="tips-and-tricks"></category><category term="git"></category><category term="terminal"></category></entry><entry><title>Uncovering some of the merits of text-based diagrams</title><link href="https://www.sglavoie.com/posts/2022/11/19/uncovering-some-of-the-merits-of-text-based-diagrams/" rel="alternate"></link><published>2022-11-19T21:00:00-06:00</published><updated>2022-11-19T21:00:00-06:00</updated><author><name>Sébastien Lavoie</name></author><id>tag:www.sglavoie.com,2022-11-19:/posts/2022/11/19/uncovering-some-of-the-merits-of-text-based-diagrams/</id><summary type="html">&lt;p&gt;Every once in a short while, new digital technology comes out to iterate on existing products. Software targeting technical design (e.g., flowcharts) is no exception. Yet, there is still room to enjoy older tools that work simply&amp;#8230; and simply&amp;nbsp;work!&lt;/p&gt;</summary><content type="html">
&lt;hr/&gt;
&lt;h1 id="introduction"&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Ever since I was introduced to text-based diagrams through &lt;span class="caps"&gt;UML&lt;/span&gt; and more concretely thanks to some fanatic acquaintance who shall remain nameless (else he will turn &lt;em&gt;rufous&lt;/em&gt;), I was hooked by their simplicity, flexibility, predictability of presentation and usefulness. While they can be customized up to a point to look a bit better, the goal is really about efficiency. I came to peace with the fact that the final product will often look different from what I’d like to achieve. After all, one of the possible applications of text-based diagrams is to quickly share ideas that can be iterated upon without too much fuss and without slowing down to make things pretty. True, the arrows might not be placed precisely where I’d want them to show up, but the time savings gained by not having to re-arrange boxes and accommodate a canvas are hefty compensation prices! Besides, some tools in that space integrate really well on platforms like GitHub and GitLab without requiring any special piece of software to be produced or viewed, which makes them particularly convenient.&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="plantuml-an-old-love-affair"&gt;PlantUML: an old love affair&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://plantuml.com/"&gt;PlantUML&lt;/a&gt; has been around for a while — over &lt;strong&gt;12&lt;/strong&gt; years at this point! It is a bit cumbersome to use as it requires a server running with Java to do its job. There are good integrations for it though, including &lt;a href="https://marketplace.visualstudio.com/items?itemName=jebbs.plantuml"&gt;a &lt;span class="caps"&gt;VS&lt;/span&gt; Code extension&lt;/a&gt; and a &lt;a href="https://hub.docker.com/r/plantuml/plantuml-server"&gt;Docker image&lt;/a&gt;. Its documentation is pretty good and the diagrams are more easily configurable out of the box than with some other similar tools.&lt;/p&gt;
&lt;p&gt;Even when starting with an unremarkable use case diagram such as the following one, ideas can be shared efficiently without having to go to a drawing board.&lt;/p&gt;
&lt;p&gt;&lt;img alt="use_case_simplest" src="https://www.sglavoie.com/images/posts/0033_text_based_diagrams/use_case_simplest.png"/&gt;&lt;/p&gt;
&lt;p&gt;Actually, the code responsible for generating this diagram is as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;@startuml
package Users {
  :End User 1: as EndUser1
  :End User 2: as EndUser2
  :User:
  User &amp;lt;|-- EndUser1
  User &amp;lt;|-- EndUser2
}
package "End User actions" {
  (Escalate a case) as UC1
  (Mark a case solved) as UC2
  (Communicate with fellow citizens) as UC3
}

EndUser1 -- UC3
EndUser2 -- UC3
note bottom of UC1 : Under specific conditions,\ne.g. after X amount of time
@enduml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While this may look like an unfamiliar syntax at first, it is concise, expressive and can be used for many types of &lt;span class="caps"&gt;UML&lt;/span&gt; diagrams. For instance, to take a different use case a notch further, it is not much work:&lt;/p&gt;
&lt;p&gt;&lt;img alt="use_case_simple" src="https://www.sglavoie.com/images/posts/0033_text_based_diagrams/use_case_simple.png"/&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;@startuml
package Users {
  :Admin:
  :End User: as EndUser
  :User:
}
package "Admin actions" {
  (Identify users) as UC1
  (Forward complaints) as UC2
  (Give status update) as UC3
  (Mark case solved) as UC4
  (Notify by email) as UC5
}
package "End User actions" {
  (File a complaint) as UC6
}

User &amp;lt;|-- Admin
User &amp;lt;|-- EndUser
UC1 &amp;lt;-- UC6
UC5 &amp;lt;.. UC2 : &amp;lt;&amp;lt; include &amp;gt;&amp;gt;
UC5 &amp;lt;.. UC3 : &amp;lt;&amp;lt; include &amp;gt;&amp;gt;
UC5 &amp;lt;.. UC4 : &amp;lt;&amp;lt; include &amp;gt;&amp;gt;
EndUser -- UC6
Admin -- UC1
@enduml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Sky is the limit! For example, drawing from scratch the following diagram may start to get messy when done manually:&lt;/p&gt;
&lt;p&gt;&lt;img alt="use_case_more_advanced" src="https://www.sglavoie.com/images/posts/0033_text_based_diagrams/use_case_more_advanced.png"/&gt;&lt;/p&gt;
&lt;p&gt;This is when PlantUML starts to shine as it puts elements in sensible locations without one having to think about it — or endlessly tinker to make them fit on a predefined area. Regardless of the relative visual complexity achieved, the code behind the scenes is still quite understandable and manageable:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;@startuml
package Users {
  :ISP:
  :End User: as EndUser
  :Admin:
  User &amp;lt;|-- EndUser
  User &amp;lt;|-- ISP
  User &amp;lt;|-- Admin
}
package "End User actions" {
  (File a complaint) as UC1
  (Receive update on complaint) as UC9
}
package "Admin actions" {
  (Forward complaint to ISP) as UC2
  (Receive feedback from ISP) as UC5
  (Notify End User of progress on complaint) as UC6
}
package "ISP actions" {
  (Receive End User complaint) as UC8
  (Reply to End User complaint) as UC3
  (Mark complaint solved) as UC4
  (Inform Admin) as UC7
}

UC1 --&amp;gt; UC2
UC2 --&amp;gt; UC8
UC3 ..&amp;gt; UC7 : &amp;lt;&amp;lt; include &amp;gt;&amp;gt;
UC4 ..&amp;gt; UC7 : &amp;lt;&amp;lt; include &amp;gt;&amp;gt;
UC8 &amp;lt;.. UC3 : &amp;lt;&amp;lt; extend &amp;gt;&amp;gt;
UC3 &amp;lt;.. UC4  : &amp;lt;&amp;lt; extend &amp;gt;&amp;gt;
UC7 --&amp;gt; UC5
UC5 ..&amp;gt; UC6 : &amp;lt;&amp;lt; include &amp;gt;&amp;gt;
UC6 --&amp;gt; UC9
Admin -- UC2
EndUser -left- UC1
ISP -- UC8
@enduml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As can be seen, elements can be described on their own (here with a &lt;code&gt;package&lt;/code&gt;) and linked together in a clear way (with custom arrows to specify the connection type, length and direction, e.g. &lt;code&gt;--&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;..&lt;/code&gt; or &lt;code&gt;--&lt;/code&gt;). Of course, as with any programming task, it helps to adopt pertinent naming conventions…&lt;/p&gt;
&lt;p&gt;Beyond use case diagrams, PlantUML is also nice for producing all sorts of outputs, for instance a component diagram (as seen in &lt;a href="https://www.sglavoie.com/posts/2022/09/18/a-retrospective-on-creating-an-impractical-little-tool-just-for-fun/"&gt;A retrospective on creating an impractical little tool just for fun&lt;/a&gt;):&lt;/p&gt;
&lt;p&gt;&lt;img alt="ugc-server" src="https://www.sglavoie.com/images/posts/0030_a_retrospective_on_creating_an_impractical_little_tool_just_for_fun/ugc-server.png"/&gt;&lt;/p&gt;
&lt;p&gt;It can also handle other types of diagrams: sequence; class; activity; state; deployment; network; etc. One other option that I have found useful is its ability to create Gantt charts that are easily programmable! This one, for example, which was used to distribute human resources across a small project done in &lt;a href="https://www.london.ac.uk/courses/computer-science"&gt;a computer science degree at the University of London&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="gantt_chart" src="https://www.sglavoie.com/images/posts/0033_text_based_diagrams/gantt_chart.png"/&gt;&lt;/p&gt;
&lt;p&gt;Its accompanying code was easy to re-use to cut parts of the diagram into sections that could be presented on their own:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;@startuml
' Metadata
hide footbox
title Software Project Proposal — DefineBroadband
footer By Kris, Srijith and Sébastien
printscale weekly

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' Coursework 1
-- Phase 1 --
-- Planning --
Project starts the 2020-11-02

[Discuss project] as [DP] starts 2020-11-02 and ends 2020-11-09
note bottom
  Define team rules, project ideation, setting Git, define set of tools, etc.
end note

[Competitor analysis] as [CA] starts 2020-11-16 and ends 2020-11-28
[User survey and results analysis] starts 2020-11-14 and ends 2020-12-04
[Market research] as [MR] starts 2020-11-09 and ends 2020-12-04
[Requirements modelling (UML)] as [RM] starts 2020-12-14 and ends 2020-12-20
[Requirements/Specifications] as [RS] starts 2020-12-04 and ends 2020-12-20
[Proposal writing: Part 1] as [PW1] ends 2021-01-09
[Review process] starts 2021-01-03 and ends 2021-01-09
[RS] --&amp;gt; [PW1]
[DP] --&amp;gt; [MR]
[MR] --&amp;gt; [RS]

-- Development --
[Prototyping design] as [PD0] ends 2021-01-04
[Investigate frameworks and online services] starts 2020-12-16 and ends 2021-01-06
[RS] --&amp;gt; [Prototyping design]

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' Coursework 2
-- Phase 2 --
-- Planning --
[Proposal writing: Part 2] starts 2021-01-13 and ends 2021-03-13
note bottom
  Includes report and documentation
end note
[Verification and validation] starts 2021-01-25 and ends 2021-03-13
[Reflections on project] starts 2021-03-01 and ends 2021-03-13
[Final preparation] starts 2021-03-08 and ends 2021-03-13

-- Development --
[Writing software - TDD approach] starts 2021-01-11 and ends 2021-03-13
[Functional testing with users] starts 2021-01-25 and ends 2021-03-13

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
-- Development milestones --
[User Database] happens 2021-01-06
[User Registration] happens 2021-01-06
[Landing Site] happens 2021-01-20
[Initial Survey Collection] happens 2021-01-20
[Identifying your location on a map to update the GIS database] happens 2021-01-30
[Message Boards] happens 2021-02-15
[Regulatory Complaint Collection and Forwarding] happens 2021-03-10

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
-- Project milestones --
[Prototypes done] happens at [PD0]'s end
[Proposal delivery] as [PD1] happens 2021-01-11
[Project delivery] as [PD2] happens 2021-03-15
[PD2] displays on same row as [PD1]

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' Closed days: holidays
2020-12-24 to 2020-12-25 is closed
2020-12-31 to 2021-01-01 is closed

' Closed days: margins before delivery
2021-01-11 is closed
2021-03-15 is closed
@enduml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It was in fact relatively frictionless to use this diagram as a template for a version 2:&lt;/p&gt;
&lt;p&gt;&lt;img alt="gantt_chart_updated" src="https://www.sglavoie.com/images/posts/0033_text_based_diagrams/gantt_chart_updated.png"/&gt;&lt;/p&gt;
&lt;p&gt;This tool is incredibly awesome, yet it’s not as versatile as it could be. This is mainly due to the fact that while the output can be scaled as needed to get high quality diagrams, its format isn’t supported yet on GitHub (although &lt;a href="https://gitlab.com/gitlab-com/gl-infra/readiness/blob/master/plantuml/overview.md"&gt;GitLab does work with it without hassle&lt;/a&gt;). For this reason, I’ve looked elsewhere for greener grass and found an alternative for publishing on GitHub.&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="mermaid-the-new-muse"&gt;Mermaid: the new muse&lt;/h1&gt;
&lt;p&gt;Born roughly 4 years after PlantUML, &lt;a href="https://mermaid-js.github.io/mermaid/"&gt;Mermaid&lt;/a&gt; has seen some mesmerizing growth in the open-source world (currently at &lt;a href="https://github.com/mermaid-js/mermaid"&gt;github.com/mermaid-js/mermaid&lt;/a&gt;, it has more than 7 times the number of GitHub stars that &lt;a href="https://github.com/plantuml/plantuml"&gt;PlantUML&lt;/a&gt; has!). While I personally enjoy looking at the old-school output produced by PlantUML and have found that diagrams produced by it come out with better spacing and flows on average compared to Mermaid, I like even more the native GitHub support for Mermaid straight from Markdown files (by the way, GitLab supports both PlantUML and Mermaid)! It makes it a powerful tool to use because the diagram is embedded within the Markdown file itself, perfect to keep it under revision while avoiding commits with heavy binary assets.&lt;/p&gt;
&lt;p&gt;Mermaid does not support as many diagram types as PlantUML, but it certainly works well for the main ones, which would include flowcharts, sequence diagrams, class diagrams, &lt;span class="caps"&gt;ER&lt;/span&gt; diagrams and Gantt diagrams. Its documentation is less dense and complete than that of PlantUML and diagrams are less customizable without messing around with external &lt;span class="caps"&gt;CSS&lt;/span&gt; files (which can’t be easily linked on every platform), but for the sheer convenience of being able to visualize diagrams from Markdown files on GitHub, it made it easier to switch over. Working locally with it is also a breeze as there is no need to point to a Java installation or have a server running from a Docker container when using, for instance, &lt;a href="https://marketplace.visualstudio.com/items?itemName=bierner.markdown-mermaid"&gt;this &lt;span class="caps"&gt;VS&lt;/span&gt; Code extension&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Mermaid is great for flowcharts, although I have found myself in need of workarounds more often than with PlantUML for sure. For example, the following diagram was relatively painless to come up with:&lt;/p&gt;
&lt;p&gt;&lt;img alt="mermaid_flowchart" src="https://www.sglavoie.com/images/posts/0033_text_based_diagrams/mermaid_flowchart.png"/&gt;&lt;/p&gt;
&lt;p&gt;As can be observed in its source code below, I had some issues with content alignment (plus, label positioning isn’t always optimal as can be seen with a particular ‘&lt;code&gt;Yes&lt;/code&gt;&lt;span class="quo"&gt;‘&lt;/span&gt; in this case). That can often be fixed by changing the orientation of the diagram or by modifying the connection length between rectangles, but still.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;flowchart TB

%% Define names
start[Start]
processReport[Process report]
uploadMetadata[Upload metadata]
triggerCloudFunction[Trigger Cloud Function]
convertCSV[Convert CSV to Feather]
lambdaFunctions[Lambda functions]

%% Square ones with single brackets take too much space
newReportQ{{New report?}}
newMetadataQ{{New metadata?}}
reportValidQ{{Is report and is valid?}}
csvFeatherValidQ{{Is metadata and is valid?}}
stop[Stop]

%% Outside subgraphs
start --&amp;gt; lambdaFunctions
uploadMetadata --&amp;gt; start
convertCSV --&amp;gt; start
newReportQ --&amp;gt;|No| stop
newMetadataQ --&amp;gt;|No| stop
reportValidQ --&amp;gt;|No| stop
csvFeatherValidQ --&amp;gt;|No| stop

subgraph AWS
lambdaFunctions --&amp;gt; newReportQ
lambdaFunctions --&amp;gt; newMetadataQ
end

%% Can't align properly without extra spaces...
subgraph &amp;amp;nbsp&amp;amp;nbsp&amp;amp;nbsp&amp;amp;nbsp&amp;amp;nbsp&amp;amp;nbsp&amp;amp;nbsp&amp;amp;nbsp&amp;amp;nbsp&amp;amp;nbsp&amp;amp;nbsp&amp;amp;nbsp&amp;amp;nbsp&amp;amp;nbsp&amp;amp;nbsp&amp;amp;nbsp&amp;amp;nbsp&amp;amp;nbsp&amp;amp;nbsp&amp;amp;nbsp&amp;amp;nbsp&amp;amp;nbsp&amp;amp;nbsp&amp;amp;nbsp&amp;amp;nbsp&amp;amp;nbsp&amp;amp;nbsp&amp;amp;nbsp&amp;amp;nbsp&amp;amp;nbsp&amp;amp;nbsp&amp;amp;nbsp&amp;amp;nbsp&amp;amp;nbsp&amp;amp;nbsp&amp;amp;nbsp&amp;amp;nbsp&amp;amp;nbsp&amp;amp;nbsp&amp;amp;nbsp&amp;amp;nbsp&amp;amp;nbsp&amp;amp;nbsp&amp;amp;nbsp&amp;amp;nbsp&amp;amp;nbsp&amp;amp;nbsp&amp;amp;nbsp&amp;amp;nbsp&amp;amp;nbsp&amp;amp;nbsp&amp;amp;nbsp&amp;amp;nbsp&amp;amp;nbspCloud function
triggerCloudFunction --&amp;gt; csvFeatherValidQ
newReportQ --&amp;gt;|Yes| triggerCloudFunction
newMetadataQ --&amp;gt;|Yes| triggerCloudFunction
triggerCloudFunction --&amp;gt; reportValidQ
end

subgraph VM 1
reportValidQ --&amp;gt;|Yes| processReport
processReport --&amp;gt; uploadMetadata
end

subgraph VM 2
csvFeatherValidQ --&amp;gt;|Yes| convertCSV
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The syntax is straightforward to follow. Some shapes could take less space (the diamond/rhombus ones in particular), which is why I ended up using hexagonal nodes instead in this example. Overall, the experience is satisfying and makes it so easy to keep iterating and commit multiple versions of the work without taking much disk space at all in the Git repository! Admittedly, I’d rather work with PlantUML for other types of diagrams as I don’t personally use most of the ones Mermaid has to offer (e.g., pie charts, requirement diagrams, git graphs or user journeys) and I prefer the output from PlantUML for the other ones.&lt;/p&gt;
&lt;p&gt;One thing I really like about flowcharts in Mermaid is how easy it is to nest graphs, which often increases clarity without making it difficult to create or update:&lt;/p&gt;
&lt;p&gt;&lt;img alt="mermaid_flowchart_nested" src="https://www.sglavoie.com/images/posts/0033_text_based_diagrams/mermaid_flowchart_nested.png"/&gt;&lt;/p&gt;
&lt;p&gt;While this isn’t perfect, it’s good enough to show the architecture of a system at a basic level.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;flowchart TB

%%  Looping over regions to fetch and update
subgraph LoopOverRegionsUpdate[ ]

    %%%%  Looping over days within each region
    subgraph LoopOverDaysUpdate[2.]
    loopDays[Fetch day metadata]
    updateRegion[Update region-level locally]

    loopDays
    --&amp;gt;|then| updateRegion
    --&amp;gt; loopDays
    end  %%%%

fetchRegionMetadata[1. Fetch region metadata]

fetchRegionMetadata
--&amp;gt;|then, loop over days| LoopOverDaysUpdate
--&amp;gt; fetchRegionMetadata
end  %%

%%  Looping over regions to upload
subgraph  loopOverRegionsUpload[ ]
forEachRegion[For each region]
uploadRegion[Upload metadata]

forEachRegion
--&amp;gt; uploadRegion
--&amp;gt; forEachRegion
end  %%

%%  Setting main node values
start[Automation runs]
spawns[Spawns VM to update metadata]
fetchTopLevelMetadata[Fetch top-level metadata]
updateTop[Update top-level metadata locally]
uploadTop[Upload top-level metadata]
resize[Resize instance group to zero to shut down]  %%

%% Fetch and update steps
subgraph fetchAndUpdate[Fetch and update everything locally before uploading back to the bucket]
fetchTopLevelMetadata
--&amp;gt;|then, loop over regions| LoopOverRegionsUpdate
--&amp;gt; updateTop
end

%%  Main flow
start
--&amp;gt; spawns
--&amp;gt; fetchAndUpdate
--&amp;gt;|once all processing is done, upload everything| loopOverRegionsUpload
--&amp;gt; uploadTop
--&amp;gt; resize  %%
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Well, it’s just a matter of taste and in reality, I wouldn’t use either PlantUML or Mermaid for fancier-looking results or for something that would be a real mess to follow textually. For these purposes, I would go with something like &lt;a href="https://app.diagrams.net/"&gt;Draw.io&lt;/a&gt; or &lt;a href="https://www.figma.com/"&gt;Figma&lt;/a&gt;, although with the recent &lt;a href="https://news.adobe.com/news/news-details/2022/Adobe-to-Acquire-Figma/default.aspx"&gt;acquisition of Figma by Adobe&lt;/a&gt;, I might have to switch to another option, like &lt;a href="https://www.framer.com/"&gt;Framer&lt;/a&gt; or the promising open-source project &lt;a href="https://github.com/penpot/penpot"&gt;Penpot&lt;/a&gt;.&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="when-text-based-is-too-clunky"&gt;When text-based is too clunky&lt;/h1&gt;
&lt;p&gt;Even though I love the possibilities offered by tools like PlantUML and Mermaid (we didn’t even touch on their theming capabilities!), there are instances where it’s just not as convenient. While it’s possible to &lt;a href="https://plantuml.com/salt"&gt;do wireframing with PlantUML&lt;/a&gt;, there is no way it can compete with some software like &lt;a href="https://balsamiq.com/"&gt;Balsamiq&lt;/a&gt; on that front. Likewise, it’s going to be difficult to create customized diagrams like the following ones. With &lt;strong&gt;Figma&lt;/strong&gt;, I could create this somewhat original-looking output:&lt;/p&gt;
&lt;p&gt;&lt;img alt="figma_custom_er_diagram" src="https://www.sglavoie.com/images/posts/0033_text_based_diagrams/figma_custom_er_diagram.png"/&gt;&lt;/p&gt;
&lt;p&gt;Similarly, I could customize this &lt;span class="caps"&gt;ER&lt;/span&gt; diagram with &lt;strong&gt;Draw.io&lt;/strong&gt; to get something that would be nearly impossible to do with text-based diagrams in terms of presentation:&lt;/p&gt;
&lt;p&gt;&lt;img alt="drawio_er_diagram" src="https://www.sglavoie.com/images/posts/0033_text_based_diagrams/drawio_er_diagram.png"/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="conclusion"&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Text-based diagrams are clearly not a panacea, but neither are they archaic vestiges with no modern use! When they are used for what they are good for — mainly &lt;em&gt;&lt;span class="caps"&gt;UML&lt;/span&gt;&lt;/em&gt; diagrams — they get the job done quickly, consistently and appropriately based on &lt;span class="caps"&gt;UML&lt;/span&gt; standards that have been around for eons. They remove friction by not having to think about design and rather allow one to go deeper on the actual links to be created. While I’d often sketch early proposals roughly with pen and paper, I would take the next step in formalizing plans digitally with something like PlantUML or Mermaid. I would then jump from there as needed to other tools that are more flexible but also quite likely more time-consuming to create high-fidelity wireframes or mockups, but the key — in my mind at least — is to remember that &lt;em&gt;different tools have different purposes and it’s nearly always a great idea to use the one best suited for the job&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id="resources-and-references"&gt;Resources and references&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://news.adobe.com/news/news-details/2022/Adobe-to-Acquire-Figma/default.aspx"&gt;Adobe to Acquire Figma&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://balsamiq.com/"&gt;Balsamiq&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://app.diagrams.net/"&gt;Draw.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.figma.com/"&gt;Figma&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.framer.com/"&gt;Framer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mermaid-js/mermaid"&gt;github.com/mermaid-js/mermaid&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=bierner.markdown-mermaid"&gt;Markdown Preview Mermaid Support - &lt;span class="caps"&gt;VS&lt;/span&gt; Code extension&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mermaid-js.github.io/mermaid/"&gt;Mermaid&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/penpot/penpot"&gt;Penpot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/plantuml/plantuml"&gt;PlantUML - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=jebbs.plantuml"&gt;PlantUML - &lt;span class="caps"&gt;VS&lt;/span&gt; Code extension&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gitlab.com/gitlab-com/gl-infra/readiness/blob/master/plantuml/overview.md"&gt;PlantUML integration for GitLab.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hub.docker.com/r/plantuml/plantuml-server"&gt;PlantUML server - DockerHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://plantuml.com/"&gt;PlantUML&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.london.ac.uk/courses/computer-science"&gt;University of London’s BSc computer science degree&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://plantuml.com/salt"&gt;Wireframing with PlantUML - Salt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="tools"></category><category term="customization"></category><category term="markdown"></category><category term="uml"></category></entry><entry><title>Building the next Facebook in a couple of weeks (as a humble experiment)</title><link href="https://www.sglavoie.com/posts/2022/10/14/building-the-next-Facebook-in-a-couple-of-weeks-as-a-humble-experiment/" rel="alternate"></link><published>2022-10-14T18:49:00-05:00</published><updated>2022-10-14T18:49:00-05:00</updated><author><name>Sébastien Lavoie</name></author><id>tag:www.sglavoie.com,2022-10-14:/posts/2022/10/14/building-the-next-Facebook-in-a-couple-of-weeks-as-a-humble-experiment/</id><summary type="html">&lt;p&gt;To spice things up, I am posting a reformatted version of the report I wrote for a web development assignment done during the last year of a computer science degree at the undergraduate level. Facebook should remain a dominant social media platform for a little while&amp;nbsp;longer&amp;#8230;&lt;/p&gt;</summary><content type="html">
&lt;hr/&gt;
&lt;h1 id="introduction"&gt;Introduction&lt;/h1&gt;
&lt;p&gt;The following is a report that was part of a project I delivered during my BSc in computer science, reformatted from LaTeX to Markdown. While not being utterly interesting (unfortunately, the source code cannot be freely published due to the nature of the work…), it gives a glimpse of my thought process while building this Django website. I have learnt a few lessons from it and maybe, with some imagination, you might too :). To read a nicely formatted version of this article, you can refer to the &lt;a href="https://www.sglavoie.com/files/posts/0032_building_the_next_Facebook_in_a_couple_of_weeks_as_a_humble_experiment/report.pdf"&gt;original report&lt;/a&gt; instead.&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="meeting-the-requirements"&gt;Meeting the requirements&lt;/h1&gt;
&lt;p&gt;In order to meet all the requirements when building this application, a few different techniques, strategies and concepts were put to good use. Firstly, all &lt;a href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt; views are class-based and rely on &lt;a href="https://www.django-rest-framework.org/"&gt;Django &lt;span class="caps"&gt;REST&lt;/span&gt; Framework&lt;/a&gt; to reduce the boilerplate needed to write the views. One such (simple) view is shown below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Profiles&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;APIView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""Used when listing all profiles at once."""&lt;/span&gt;

    &lt;span class="c1"&gt;# allow everyone to see all basic profiles&lt;/span&gt;
    &lt;span class="n"&gt;permission_classes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;IsOwnerOrReadOnly&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;profiles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UserProfile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;order_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"-id"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;serializer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ProfileSerializer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;profiles&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;many&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;serializer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All views in turn rely on serializers to parse incoming data and to transform it into appropriate structures that can be used internally by Django. Some serializers are obviously more complex than others, but for demonstration purposes and for the sake of brevity, an example of a class-based serializer is reproduced here:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UserPublicSerializer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ModelSerializer&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""Serializer the User model to get back user information that can&lt;/span&gt;
&lt;span class="sd"&gt;    safely be shared around in the application to other users."""&lt;/span&gt;

    &lt;span class="c1"&gt;# We need easy access to the profile image when listing all profiles&lt;/span&gt;
    &lt;span class="c1"&gt;# at once&lt;/span&gt;
    &lt;span class="n"&gt;profile_image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SerializerMethodField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;
        &lt;span class="n"&gt;fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"profile_image"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_profile_image&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;userprofile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The actual implementation details for signals, forms, URLs, other views and components can be explored in the source code submission provided with this report.&lt;/p&gt;
&lt;p&gt;When it comes to version control, Git was used religiously with GitHub to host a private repository. The &lt;a href="https://www.conventionalcommits.org/en/v1.0.0/"&gt;Conventional Commits specification&lt;/a&gt; was followed to help create meaningful commit messages.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Git log extract" src="https://www.sglavoie.com/images/posts/0032_building_the_next_Facebook_in_a_couple_of_weeks_as_a_humble_experiment/commits.png"/&gt;&lt;/p&gt;
&lt;p&gt;Defensive coding strategies were used, both in Python and in JavaScript. In the backend, exceptions were raised directly where no appropriate actions could be taken:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;clean_email&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""Verify that the email is available."""&lt;/span&gt;
    &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cleaned_data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;query_set&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;query_set&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ValidationError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"email is taken"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the views, conditional statements were sprinkled everywhere where necessary to avoid expansive computations (e.g., processing a profile image when the request is invalid) and to return early from functions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;profile&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;"Profile not found!"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HTTP_404_NOT_FOUND&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;profile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;"You do not have the required permissions "&lt;/span&gt;
        &lt;span class="s2"&gt;"to update this profile!"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HTTP_401_UNAUTHORIZED&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;serializer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ProfileUpdateSerializer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;profile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;many&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;serializer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_valid&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;serializer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;serializer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;On the frontend, a kindred approach was used to assemble robust requests:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;REACT_APP_API_URL&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;/auth/jwt/verify/`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"token_not_valid"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;AUTHENTICATED_SUCCESS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;AUTHENTICATED_FAIL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;AUTHENTICATED_FAIL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With security in mind, views were by default protected and accessible only to authenticated users unless a statement such as the following allows all users to read an endpoint:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;permission_classes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;IsOwnerOrReadOnly&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Requirements were also exceeded by using advanced techniques and tools: &lt;a href="https://www.docker.com/"&gt;Docker&lt;/a&gt;, &lt;a href="https://docs.docker.com/compose/"&gt;Docker Compose&lt;/a&gt;, &lt;a href="https://python-poetry.org/"&gt;Poetry&lt;/a&gt;, &lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt;, &lt;a href="https://redux.js.org/"&gt;Redux&lt;/a&gt;, &lt;a href="https://mui.com/"&gt;Material &lt;span class="caps"&gt;UI&lt;/span&gt;&lt;/a&gt; as well as setting up an &lt;span class="caps"&gt;SMTP&lt;/span&gt; backend to send emails to users were some of the additions made to the project to prove this claim — these will be covered in more details in later sections of this report.&lt;/p&gt;
&lt;p&gt;While being a simple application considering time constraints and budget, the solution brings some novelty to the table, making it a valid application that is production-ready while also serving as an excellent prototype for a much bigger project. Some interesting features not commonly found elsewhere include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Being able to chat in real-time with all users of the platform in a time-sensitive context in a way that supports high concurrency with &lt;a href="https://channels.readthedocs.io/en/stable/"&gt;Django Channels&lt;/a&gt; and &lt;a href="https://redis.io/"&gt;Redis&lt;/a&gt;. In other words, messages disappear automatically after a specified delay, making for a special chat room where one lives in the moment.&lt;/li&gt;
&lt;li&gt;The application allows users to easily follow others to then be able to quickly search through their posts by filtering them. The added tweak resides in the fact that all posts are given “total points” without “up” or “down” counts being disclosed directly.&lt;/li&gt;
&lt;li&gt;Posts can be hidden at any time by users yet remain viewable by showing the author as being anonymous.&lt;/li&gt;
&lt;li&gt;The colourful profile list view allows filtering of all the profiles at once by name and shows distinctive information about users, such as the list of people they follow or the list of people who are following them as a non-obstrusive modal (Material &lt;span class="caps"&gt;UI&lt;/span&gt; pop-up).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As will be discussed in the section &lt;a href="#state-of-the-art-in-web-development"&gt;State of the art in web development&lt;/a&gt;, this solution follows best practices and aims to represent the state of the art, both in terms of technical execution and in the contemporary look of the final product, which is brought into the spotlight in the following figures.&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="running-the-application"&gt;Running the application&lt;/h1&gt;
&lt;p&gt;&lt;img alt="demo1" src="https://www.sglavoie.com/images/posts/0032_building_the_next_Facebook_in_a_couple_of_weeks_as_a_humble_experiment/demo1.png"/&gt;&lt;/p&gt;
&lt;h2 id="installing-and-running-the-web-application"&gt;Installing and running the web application&lt;/h2&gt;
&lt;h3 id="accessing-user-accounts"&gt;Accessing user accounts&lt;/h3&gt;
&lt;p&gt;All accounts are registered with the same password: &lt;code&gt;pass1234&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To log in, simply use one of the following email addresses:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;admin      admin@gmail.com       (superuser for Django admin)
Andrea     andrea@gmail.com
Bob        uol.grader@gmail.com
Hider      hider@gmail.com       (hidden profile)
Mia        mamamia@gmail.com
Suliman    suliman@gmail.com
Tuan       tuan@gmail.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you set the &lt;code&gt;SEND_ACTIVATION_EMAIL&lt;/code&gt; setting to &lt;code&gt;True&lt;/code&gt; in the configuration file &lt;code&gt;socialnetwork/settings.py&lt;/code&gt;, emails will be sent from the account &lt;code&gt;uol.grader@gmail.com&lt;/code&gt;, which is a real account created to manage emails for this application.&lt;/p&gt;
&lt;h3 id="running-locally"&gt;Running locally&lt;/h3&gt;
&lt;h4 id="backend"&gt;Backend&lt;/h4&gt;
&lt;p&gt;To avoid a layer of abstraction as setting up Redis on some systems may be more difficult, Django’s backend is used for the channels by default. Should you require to use Redis instead, please follow the instructions in &lt;code&gt;settings.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;CHANNEL_LAYERS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"default"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"BACKEND"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"channels.layers.InMemoryChannelLayer"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;# To use Redis locally, please comment the above line and uncomment the&lt;/span&gt;
&lt;span class="c1"&gt;# following two dicts:&lt;/span&gt;
&lt;span class="c1"&gt;# CHANNEL_LAYERS = {&lt;/span&gt;
&lt;span class="c1"&gt;#     "default": {&lt;/span&gt;
&lt;span class="c1"&gt;#         "BACKEND": "channels_redis.core.RedisChannelLayer",&lt;/span&gt;
&lt;span class="c1"&gt;#         "CONFIG": {"hosts": [("redis", 6379)]},&lt;/span&gt;
&lt;span class="c1"&gt;#     }&lt;/span&gt;
&lt;span class="c1"&gt;# }&lt;/span&gt;

&lt;span class="c1"&gt;# CACHES = {&lt;/span&gt;
&lt;span class="c1"&gt;#     "default": {&lt;/span&gt;
&lt;span class="c1"&gt;#         "BACKEND": "django_redis.cache.RedisCache",&lt;/span&gt;
&lt;span class="c1"&gt;#         "LOCATION": [("redis", 6379)],&lt;/span&gt;
&lt;span class="c1"&gt;#         "OPTIONS": {&lt;/span&gt;
&lt;span class="c1"&gt;#           "CLIENT_CLASS": "django_redis.client.DefaultClient"&lt;/span&gt;
&lt;span class="c1"&gt;#         },&lt;/span&gt;
&lt;span class="c1"&gt;#     }&lt;/span&gt;
&lt;span class="c1"&gt;# }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then, a simple way to get Redis running would be to launch it with Docker:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;docker&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;6379&lt;/span&gt;:6379&lt;span class="w"&gt; &lt;/span&gt;redis
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Moving on to installing Django and the rest of the dependencies for the backend:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;backend

&lt;span class="c1"&gt;# Activate a virtual environment, e.g.:&lt;/span&gt;
python3&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;venv&lt;span class="w"&gt; &lt;/span&gt;.venv&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;source&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;.venv/bin/activate

&lt;span class="c1"&gt;# Install dependencies&lt;/span&gt;
pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;-r&lt;span class="w"&gt; &lt;/span&gt;requirements.txt

&lt;span class="c1"&gt;# Run the server on port 8000 with existing data&lt;/span&gt;
python&lt;span class="w"&gt; &lt;/span&gt;manage.py&lt;span class="w"&gt; &lt;/span&gt;runserver
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Dependencies can also be installed with Poetry thanks to the provided files &lt;code&gt;pyproject.toml&lt;/code&gt; and &lt;code&gt;poetry.lock&lt;/code&gt; with the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;poetry&lt;span class="w"&gt; &lt;/span&gt;install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To keep the Docker image simple, &lt;code&gt;pip&lt;/code&gt; is used to install the requirements, although beware that Poetry’s dependency resolver will be more predictable in a production application.&lt;/p&gt;
&lt;h4 id="frontend"&gt;Frontend&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;frontend

&lt;span class="c1"&gt;# Install dependencies&lt;/span&gt;
npm&lt;span class="w"&gt; &lt;/span&gt;install

&lt;span class="c1"&gt;# Run the server on port 3000&lt;/span&gt;
npm&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Access the application at &lt;a href="http://localhost:3000"&gt;http://localhost:3000&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id="using-docker"&gt;Using Docker&lt;/h4&gt;
&lt;p&gt;A &lt;code&gt;docker-compose.yaml&lt;/code&gt; has been prepared to launch all the required parts at once (Redis, Django and React).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;docker-compose&lt;span class="w"&gt; &lt;/span&gt;build
docker-compose&lt;span class="w"&gt; &lt;/span&gt;up&lt;span class="w"&gt; &lt;/span&gt;-d
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Some other useful commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;docker-compose&lt;span class="w"&gt; &lt;/span&gt;down
docker-compose&lt;span class="w"&gt; &lt;/span&gt;logs
docker-compose&lt;span class="w"&gt; &lt;/span&gt;ps&lt;span class="w"&gt; &lt;/span&gt;-a
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This container could be set up to run in a cloud infrastructure such as Google Cloud Platform inside a virtual machine. This setup goes above and beyond what was taught in this module, though, therefore resources were not allocated to the actual deployment.&lt;/p&gt;
&lt;h3 id="local-deployment"&gt;Local deployment&lt;/h3&gt;
&lt;p&gt;An alternative to the (costly and unfunded) deployment on &lt;span class="caps"&gt;GCP&lt;/span&gt; can be done on a local machine, using Docker to containerize the application and a service like Cloudflare Tunnel to allow traffic from the external world to reach the application, effectively converting the machine into a server.&lt;/p&gt;
&lt;h4 id="summary-of-the-steps-needed-to-deploy-locally"&gt;Summary of the steps needed to deploy locally&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Buy/use a domain name and configure its &lt;span class="caps"&gt;DNS&lt;/span&gt; with Cloudflare.&lt;/li&gt;
&lt;li&gt;Update Django’s &lt;code&gt;settings.py&lt;/code&gt; to allow the domain name to reach the Django application — avoiding &lt;span class="caps"&gt;CORS&lt;/span&gt; issue when localhost:3000 tries to connect to localhost:8000 using that domain — (i.e. &lt;code&gt;ALLOWED_HOSTS&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Install the &lt;span class="caps"&gt;CLI&lt;/span&gt; tool &lt;code&gt;cloudflared&lt;/code&gt;, log in to your Cloudflare account with &lt;code&gt;cloudflared tunnel login&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Create a new tunnel: &lt;code&gt;cloudflared tunnel create test-tunnel&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Route that tunnel: &lt;code&gt;cloudflared tunnel route dns &amp;lt;T&amp;gt; &amp;lt;N&amp;gt;&lt;/code&gt;, where &lt;code&gt;&amp;lt;N&amp;gt;&lt;/code&gt; is the web address to use as a sub-domain and &lt;code&gt;&amp;lt;T&amp;gt;&lt;/code&gt; is the tunnel &lt;span class="caps"&gt;ID&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;Add this sub-domain to the &lt;span class="caps"&gt;DNS&lt;/span&gt; management console in the Cloudflare dashboard.&lt;/li&gt;
&lt;li&gt;Configure Cloudflare to use the web application:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# ~/.cloudflared/config.yml
url: http://localhost:3000
tunnel: SOME_ID_GIVEN_BY_CLOUDFLARE
credentials-file: ~/.cloudflared/SOME_ID_GIVEN_BY_CLOUDFLARE.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, run the tunnel with &lt;code&gt;cloudflared tunnel run&lt;/code&gt; and go to the configured website at its subdomain (e.g., &lt;code&gt;name.domain.com&lt;/code&gt;).&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="functionality-implemented"&gt;Functionality implemented&lt;/h1&gt;
&lt;p&gt;&lt;img alt="demo2" src="https://www.sglavoie.com/images/posts/0032_building_the_next_Facebook_in_a_couple_of_weeks_as_a_humble_experiment/demo2.png"/&gt;&lt;/p&gt;
&lt;p&gt;This application implements all the necessary functionality at the account management level with Djoser. In effect, users can:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sign up for a new account;&lt;/li&gt;
&lt;li&gt;Activate their account via email upon creation (this behaviour is disabled by default for convenience but can be reactivated as mentioned earlier);&lt;/li&gt;
&lt;li&gt;Reset their password via email;&lt;/li&gt;
&lt;li&gt;Log into their account;&lt;/li&gt;
&lt;li&gt;Change their displayed name;&lt;/li&gt;
&lt;li&gt;Make their profile hidden to other users;&lt;/li&gt;
&lt;li&gt;Log out from their account;&lt;/li&gt;
&lt;li&gt;Delete their account permanently by validating their password.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;User profiles provide the following features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Number of followers as well as a complete list of followers shown;&lt;/li&gt;
&lt;li&gt;Number of people that a user is following as well as a complete list of these people;&lt;/li&gt;
&lt;li&gt;Number of points a user has “given” to posts they like;&lt;/li&gt;
&lt;li&gt;Number of points a user has “taken” from posts they dislike;&lt;/li&gt;
&lt;li&gt;Where the user is located;&lt;/li&gt;
&lt;li&gt;Each user can display a biography;&lt;/li&gt;
&lt;li&gt;The date at which a user joined the social network;&lt;/li&gt;
&lt;li&gt;The latest date at which the user updated their profile;&lt;/li&gt;
&lt;li&gt;A “status” field to prominently feature a statement, which is also shown in the profile listing;&lt;/li&gt;
&lt;li&gt;A list of posts written by the user, where the owner can create new posts, delete, edit or hide existing posts so they are no longer displayed publicly in their profile nor in the list of public posts;&lt;/li&gt;
&lt;li&gt;An image gallery the user has uploaded, where the owner can add or remove pictures;&lt;/li&gt;
&lt;li&gt;The ability for each user to delete their account, effectively cascading a delete of their interactions in the application such as their posts, profile image, etc.;&lt;/li&gt;
&lt;li&gt;Users can edit the information they share with others;&lt;/li&gt;
&lt;li&gt;To avoid profile pictures slowing down navigation — most notably in the profile list view — all images are automatically resized to maximum 300 by 300 pixels when a user uploads a new image;&lt;/li&gt;
&lt;li&gt;Finally, users can also hide their profile entirely — doing so will then mark all their posts as being anonymous and they will not be reachable by any other user of the network.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Following the “profile” view, the “profile list” view (linked with the text “&lt;strong&gt;Meet&lt;/strong&gt;” in the navigation bar) shows all public profiles with most of the information users share. To view the details of a profile (such as a birth date and the date of the last edit of a user), it is necessary to be authenticated, otherwise unauthenticated users will be redirected back to the “profile list” view and an error alert will be flashed. Additionally, the number of followers and people users are following are displayed right from the list view and allow to click to retrieve a complete list of people who are followed. The different icons shown on this page really pop out: the more followers a user has, the bigger the number of people shown in the actual icon representation; also, an icon indicating a value of “0” is slightly greyed out for readability and to let users know they won’t be able to interact with these icons.&lt;/p&gt;
&lt;p&gt;As a distinctive mark of interest, everything belonging to a user is marked with a fingerprint icon: when a user views their own profile or posts, they will be able to quickly identify that this information is theirs as long as they are logged in.&lt;/p&gt;
&lt;p&gt;Posts implement a basic editing view and allow their author to hide them. Furthermore, posts receive and lose points based on the opinions of users in the network and will end up with positive or negative scores, similar to what &lt;a href="https://www.reddit.com/"&gt;Reddit&lt;/a&gt; and &lt;a href="https://stackoverflow.com/"&gt;Stack Overflow&lt;/a&gt; have done but without splitting the count in either direction.&lt;/p&gt;
&lt;p&gt;The “&lt;strong&gt;Read&lt;/strong&gt;” page — to be found in the navigation bar — shows posts from people users follow at the top, allowing to filter the content of posts based on their interests. The total number of points is shown next to each post entry. As a section section on that page, users have the ability to see a list of public posts as well as search for keywords of interest, just like in the first section just described.&lt;/p&gt;
&lt;p&gt;On any page that gets longer than 500 pixels when scrolling down, there will be a little arrow icon allowing users to swiftly glide to the top of the page.&lt;/p&gt;
&lt;p&gt;When clicking on the avatar icon displayed in the top-right corner of the application, a “drawer” (in &lt;a href="https://mui.com/"&gt;Material &lt;span class="caps"&gt;UI&lt;/span&gt;&lt;/a&gt;‘s terms) will open to allow users to quickly jump to their profile and to log out of the application.&lt;/p&gt;
&lt;p&gt;Behind the scenes, administrators and superusers can be created with full privileges to modify and delete other accounts. These special accounts will be hidden by default from the public-facing frontend, although their profile can later be made public and used as any other account on the website.&lt;/p&gt;
&lt;p&gt;Last but not least, there is a public chat room where all users of the application can go to have a spontaneous discussion. In fact, the web application is programmed to automatically discard messages that are older than 20 seconds (by default), allowing users to share special moments that are very much unique and time-limited while avoiding being overwhelmed by content. In the event that a constant flow of messages might be entering the chat room at a given time, users will still have the ability to scroll up in the view (assuming they read fast enough). If they do not scroll up, the view will always focus on the latest incoming message so their attention span will be maintained on this very moment. Every time a user reloads the page or goes somewhere else in the application, the content of the chat window will disappear on purpose, because good discussions are meant to happen in real-time on this website. Users will not be distracted by anything else other than a little avatar icon and people’s names so they can know at a glance who is interacting with them… but they will need to have a good memory to remember everything. After all, the idea behind this chat application really is to exchange some good thoughts in the moment. What lives on is only the memory of time well spent with others.&lt;/p&gt;
&lt;p&gt;At the &lt;span class="caps"&gt;API&lt;/span&gt; level, users can interact with the application directly via &lt;span class="caps"&gt;API&lt;/span&gt; endpoints, provided they send their authentication token should a view have a requirement in this regard. These endpoints are listed succinctly below, but a file &lt;code&gt;openapi-schema.yml&lt;/code&gt; has been provided in the &lt;code&gt;backend&lt;/code&gt; directory for a complete reference.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;accounts/ profiles/
accounts/ profiles/&amp;lt;int:user_id&amp;gt;
accounts/ profiles/&amp;lt;int:user_id&amp;gt;/image
accounts/ profiles/&amp;lt;int:pk&amp;gt;/followers
accounts/ profiles/&amp;lt;int:pk&amp;gt;/followers/add
accounts/ profiles/&amp;lt;int:pk&amp;gt;/followers/remove
accounts/ profiles/gallery/add
accounts/ profiles/gallery/remove/&amp;lt;int:gallery_pk&amp;gt;
accounts/ ^media/(?P&amp;lt;path&amp;gt;.*)$
api/ posts/&amp;lt;int:pk&amp;gt;/
api/ posts/author/&amp;lt;int:pk&amp;gt;/
api/ posts/&amp;lt;int:pk&amp;gt;/up/
api/ posts/&amp;lt;int:pk&amp;gt;/down/
api/ posts/&amp;lt;int:pk&amp;gt;/pointsby/
api/ posts/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h1 id="executing-the-unit-tests"&gt;Executing the unit tests&lt;/h1&gt;
&lt;p&gt;To run the unit tests, it is a matter of activating a virtual environment (as described in the section &lt;a href="#running-locally"&gt;Running locally&lt;/a&gt;) and using the built-in &lt;code&gt;test&lt;/code&gt; command provided by Django in the following manner, which must be run from within the &lt;code&gt;backend&lt;/code&gt; directory:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;python&lt;span class="w"&gt; &lt;/span&gt;manage.py&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;test&lt;/span&gt;
Found&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;119&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;test&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;)&lt;/span&gt;.
Creating&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;test&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;database&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'default'&lt;/span&gt;...
System&lt;span class="w"&gt; &lt;/span&gt;check&lt;span class="w"&gt; &lt;/span&gt;identified&lt;span class="w"&gt; &lt;/span&gt;no&lt;span class="w"&gt; &lt;/span&gt;issues&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;silenced&lt;span class="o"&gt;)&lt;/span&gt;.
..............................................................
--------------------------------------------------------------
Ran&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;119&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;tests&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.584s

OK
Destroying&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;test&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;database&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'default'&lt;/span&gt;...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h1 id="logical-approach"&gt;Logical approach&lt;/h1&gt;
&lt;h2 id="frontend-framework-react"&gt;Frontend framework: React&lt;/h2&gt;
&lt;p&gt;The application was designed with the goal in mind of having a modern frontend framework relying on an excellent &lt;span class="caps"&gt;CSS&lt;/span&gt; framework to provide icons and other components. Speaking of components, React was chosen for its strong focus on designing small components that can be reused. Taking advantage of this approach, some components such as the “profile intro” (the box showing the main information regarding a user profile) are literally displayed on different pages, such as when viewing a single profile or when viewing a list of profiles.&lt;/p&gt;
&lt;p&gt;Similarly, a “post” entry represents the exact same React component when viewed in isolation or when browsing for many more posts. When search bars are used, these share the same characteristics and behaviors across the page while managing a different state.&lt;/p&gt;
&lt;p&gt;&lt;img alt="demo3" src="https://www.sglavoie.com/images/posts/0032_building_the_next_Facebook_in_a_couple_of_weeks_as_a_humble_experiment/demo3.png"/&gt;&lt;/p&gt;
&lt;h2 id="react-components-and-icons-material-ui"&gt;React components and icons: Material &lt;span class="caps"&gt;UI&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;On the design side, the presentation of the website was made much more consistent with the help of Material &lt;span class="caps"&gt;UI&lt;/span&gt;, which provides many ready-made React components. The whole application was built around the concept of adding building blocks from Material &lt;span class="caps"&gt;UI&lt;/span&gt; such as a “&lt;code&gt;box&lt;/code&gt;&lt;span class="dquo"&gt;“&lt;/span&gt;, “&lt;code&gt;button&lt;/code&gt;” or “&lt;code&gt;typography&lt;/code&gt;” to guarantee that all aspects of the application look homogeneous and with the same modern style.&lt;/p&gt;
&lt;p&gt;Components such as a “&lt;code&gt;drawer&lt;/code&gt;” and a “&lt;code&gt;navbar&lt;/code&gt;” really sped up development and were expected to be used extensively right from the start.&lt;/p&gt;
&lt;h2 id="api-django-rest-framework"&gt;&lt;span class="caps"&gt;API&lt;/span&gt;: Django Rest Framework&lt;/h2&gt;
&lt;p&gt;Since the use of Django was mandatory for the backend part of this work, Django &lt;span class="caps"&gt;REST&lt;/span&gt; framework was an ideal choice considering the need for an &lt;span class="caps"&gt;API&lt;/span&gt; to be directly accessible to end-users and to benefit from an easy-to-use toolkit to build an &lt;span class="caps"&gt;API&lt;/span&gt; that can be accessed from React without breaking a sweat.&lt;/p&gt;
&lt;p&gt;Django &lt;span class="caps"&gt;REST&lt;/span&gt; Framework simplifies data serialization and even allows dealing with nested serialization in a straightforward way. Because it comes with powerful features for authentication and permission management, it was also a great option for this specific use case which depend easily on these sets of features which would arguably be very complex, error-prone and time consuming to implement manually.&lt;/p&gt;
&lt;h2 id="user-management-djoser"&gt;User management: Djoser&lt;/h2&gt;
&lt;p&gt;Beyond Django’s default user management system, there was a desire to extend the default behaviour, for instance to use an email address instead of a username to authenticate users. Djoser makes these changes and much more a lot more simple, adding easy management of logins, logouts, password confirmation resets, activation emails and so forth.&lt;/p&gt;
&lt;p&gt;By leveraging Django’s built-in features with Djoser, the user model can be extended with ease and flexibility.&lt;/p&gt;
&lt;h2 id="asynchronous-communication"&gt;Asynchronous communication&lt;/h2&gt;
&lt;p&gt;To build the chat application, Channels and &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API"&gt;WebSocket&lt;/a&gt; were considered as one of the best combination of libraries because they are simple to use and allow high concurrency to be possible. Channels makes it easy to create an asynchronous WebSocket consumer to deal with many users connecting to possibly many different groups: it is therefore an ideal option for a growing social network.&lt;/p&gt;
&lt;p&gt;The WebSocket library in JavaScript is then used to communicate with Channels via the WebSockets technology, sending and receiving messages with additional payload to extend the functionality of the chat application.&lt;/p&gt;
&lt;h2 id="deployment-docker-cloudflare-tunnel"&gt;Deployment: Docker, Cloudflare Tunnel&lt;/h2&gt;
&lt;p&gt;To deploy an application to production, Docker Compose is a robust and reliable solution, especially for this use case where different microservices can be pieced together seamlessly, sharing resources across a single network on different ports.&lt;/p&gt;
&lt;p&gt;Docker makes it possible to containerize parts of the application (i.e., the backend, frontend and in-memory cache database) to be run potentially on many virtual machines in the cloud and Docker Compose makes the process of orchestring an application such as this one much more accessible than configure web servers from start to finish.&lt;/p&gt;
&lt;p&gt;Poetry, a package and dependencies management system for Python, allows requirements to be pinned to specific versions and ensures reproducibility is achieved, which is critically important when it comes to deploying to production. Its dependencies resolver is much more reliable when the exactitude of a list of requirements must be met.&lt;/p&gt;
&lt;p&gt;In terms of deploying a real application on a small scale, &lt;a href="https://www.cloudflare.com/products/tunnel/"&gt;Cloudflare Tunnel&lt;/a&gt; was also considered as it is useful to share prototypes during development and to instantly deploy a local server. Furthermore, it can work hand in hand with Docker Compose and Poetry since a container can be run in the background and the application can be exposed on multiple ports locally without having to configure firewalls.&lt;/p&gt;
&lt;p&gt;Because &lt;code&gt;pip&lt;/code&gt; is traditionally used in the Python world to manage requirements, the command &lt;code&gt;pip freeze&lt;/code&gt; was used to generate a standard list of pinned dependencies, although for an actual deployment to production, an open source alternative like Poetry would likely be preferable.&lt;/p&gt;
&lt;h2 id="formatting-prettier-black-vulture-pylint"&gt;Formatting: Prettier, Black, Vulture, Pylint&lt;/h2&gt;
&lt;p&gt;While code formatting is of utmost importance for readability, it is also a tremendous waste of time to try to do it manually. For this reason, multiple tools were used to aid with this gargantuan task. &lt;a href="https://prettier.io/"&gt;Prettier&lt;/a&gt; was used on the frontend side to format everything related to JavaScript and &lt;span class="caps"&gt;CSS&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;On the backend side, &lt;a href="https://black.readthedocs.io/en/stable/"&gt;Black&lt;/a&gt; was the primary formatter used. Its use was complemented with &lt;a href="https://pylint.pycqa.org/en/latest/"&gt;Pylint&lt;/a&gt;, which helps to clean up and refactor the code by finding hard-to-spot warnings, such as unnecessary return statements or the use of more complex expressions when an equivalent such as a list comprehension could be used.&lt;/p&gt;
&lt;p&gt;Finally, to keep the code tidy and alive, &lt;a href="https://github.com/jendrikseipp/vulture"&gt;Vulture&lt;/a&gt; was used to find “dead” code not in used anywhere else. Even if code is well formatted, code that is not needed become a liability. In the source code world, less really is more.&lt;/p&gt;
&lt;h2 id="api-calls-axios"&gt;&lt;span class="caps"&gt;API&lt;/span&gt; calls: Axios&lt;/h2&gt;
&lt;p&gt;The &lt;a href="https://axios-http.com/"&gt;Axios&lt;/a&gt; JavaScript library was used for the attractiveness and flexibility of its &lt;span class="caps"&gt;API&lt;/span&gt;. Because it supports fully the Promise &lt;span class="caps"&gt;API&lt;/span&gt; and allow making asynchronous calls with the async/await syntax, it makes for a good tool to communicate with the backend. It has extensive documentation and excellent support on various web platforms including GitHub, which is an important consideration when thinking about deploying an application in the real world.&lt;/p&gt;
&lt;p&gt;There are new and shiny technological options all the time, but a battle-tested software like Axios remain a competent tool apt for the job.&lt;/p&gt;
&lt;h2 id="state-management-redux-and-immer"&gt;State management: Redux and Immer&lt;/h2&gt;
&lt;p&gt;Despite the Context &lt;span class="caps"&gt;API&lt;/span&gt; from React being powerful and easy to use, Redux and &lt;a href="https://immerjs.github.io/immer/"&gt;Immer&lt;/a&gt; really make dealing with state management a breeze. Redux on its own is one of the best in its category to provide state management at scale: its documentation is also fantastic and detailed and its popularity on Stack Overflow is only a plus in its favour should there be a need to fix issues while using it (because there will inevitably be such a need). The Redux workflow with actions being dispatched with types makes sense and adding new features is very fast without having to change existing pieces of states when combining reducers.&lt;/p&gt;
&lt;p&gt;One possible drawback of using plain Redux to manage the store is that states can be mutated and unexpected consequences may ensue. For this reason, Immer was included so that dealing with a Redux store is stripped down to a direct object assignment, where Immer takes care of updating items and even nested items as needed.&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="design-and-implementation-decisions"&gt;Design and implementation decisions&lt;/h1&gt;
&lt;p&gt;Because deployment with Docker was a primordial concern, the application was built with a backend that is completely decoupled from a frontend. In fact, with just a little bit of ingenuity, Django could be swapped entirely with another web framework as long as the same endpoints are provided to the frontend with the necessary technologies (such as web sockets) being implemented. In a similar way, the frontend, which is built primarily with React, could be upgraded to another popular alternative such as Vue.js. This gives flexibility and should there be a greater need for optimization once the social network takes off for a real spin, there is the possibility to bundle React with Django by building minimized versions of the assets and shipping everything as a Docker container that can be run on powerful machines in the cloud.&lt;/p&gt;
&lt;p&gt;Beyond this original concern, more concrete decisions were taken. For instance, Django signals were used to simplify how user profiles are created. Instead of allowing users to create a profile from their user account, the experience was unified by transparently automating this process whenever a user account is created such that it is attached to a newly created profile associated with it. Leaving the option to the end-user of manually creating a profile could be confusing at best and lead to unexpected results at worst, where user accounts and user profiles IDs become out of sync, which is a nice side-effect of having them created as well as deleted at the same time.&lt;/p&gt;
&lt;p&gt;From the start, Djoser was chosen to override specific built-in functions performed by Django and to facilitate email management. To integrate Djoser with the administrative bits of the application — namely, the Django admin interface — Django forms were used to customize how users are to be registered as well as superusers and staff accounts. By overriding the user creation, it is now possible to update parts of the process with simple configuration variables implemented by Djoser, such as forcing users to retype their passwords or not.&lt;/p&gt;
&lt;p&gt;&lt;img alt="demo4" src="https://www.sglavoie.com/images/posts/0032_building_the_next_Facebook_in_a_couple_of_weeks_as_a_humble_experiment/demo4.png"/&gt;&lt;/p&gt;
&lt;p&gt;With Django models, the base model became a &lt;code&gt;UserAccount&lt;/code&gt;, which allow users to join the network. However, the functionality related to account management is kept separate from other features of the application by interfacing with the accounts using a &lt;code&gt;UserProfile&lt;/code&gt; model on which a &lt;strong&gt;user&lt;/strong&gt; field exist. In turn, this model integrates other parts of the models, such as many-to-many relationships with followers and a gallery image model, which is also linked as a many-to-many relationship. Another part of the application implements a &lt;code&gt;Post&lt;/code&gt; model where the &lt;strong&gt;author&lt;/strong&gt; field corresponds to a &lt;code&gt;UserAccount&lt;/code&gt;, effectively linking a different part of the application to the user accounts. Again, a &lt;code&gt;Post&lt;/code&gt; then interfaces with other models to take points into account, which are also linked to user profiles.&lt;/p&gt;
&lt;p&gt;To manage all kinds of &lt;span class="caps"&gt;POST&lt;/span&gt; requests as well as to guarantee that models communicate as expected between each other, serializers using Django &lt;span class="caps"&gt;REST&lt;/span&gt; framework features were used in the process. These generally use a &lt;code&gt;SerializerMethodField&lt;/code&gt; to define more complex behaviors, such as getting all non-hidden followers for a single profile.&lt;/p&gt;
&lt;p&gt;Views were implemented with &lt;span class="caps"&gt;DRF&lt;/span&gt; &lt;code&gt;APIView&lt;/code&gt;, bridging the gap between a RESTful &lt;span class="caps"&gt;API&lt;/span&gt; and the ability to define simple views using methods like &lt;strong&gt;get&lt;/strong&gt; and &lt;strong&gt;delete&lt;/strong&gt;. Views rely on serializers and specify a &lt;code&gt;permission_classes&lt;/code&gt; list of custom values, which were implemented separately in a &lt;code&gt;permissions.py&lt;/code&gt; file. This allows customizing the default behavior so that by default all views require authentication unless explicitly stated otherwise by these permission classes. This is also more secure, preventing users from inadvertently being able to access what should have been protected resources.&lt;/p&gt;
&lt;p&gt;In terms of &lt;span class="caps"&gt;API&lt;/span&gt; definition, simplicity was key: every endpoint regarding authentication is accessed under &lt;code&gt;/auth&lt;/code&gt; while our specific implementation of user accounts is accessed under &lt;code&gt;/accounts&lt;/code&gt;. Additionally, all endpoints to deal with user posts are to be found with an endpoint starting with &lt;code&gt;/posts&lt;/code&gt;. Finally, there is another set of endpoints to work with profiles, these being accessible under &lt;code&gt;/profiles&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The Django chat application, due to its asynchronous nature, uses different technologies behind the scenes, including notably WebSockets. Channels was chosen to implement this portion because it extends Django’s capabilities beyond &lt;span class="caps"&gt;HTTP&lt;/span&gt; and is ideally suited for chat applications like the one being built as part of this social network.&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="evaluation-of-the-final-product"&gt;Evaluation of the final product&lt;/h1&gt;
&lt;h2 id="what-worked-well"&gt;What worked well&lt;/h2&gt;
&lt;p&gt;&lt;img alt="demo5" src="https://www.sglavoie.com/images/posts/0032_building_the_next_Facebook_in_a_couple_of_weeks_as_a_humble_experiment/demo5.png"/&gt;&lt;/p&gt;
&lt;p&gt;Opting for React made for a flexible framework that behaves extremely well with Django. React has complete documentation and extensive support offered on different medium, making it ideal for a robust and complex web application. Coupled with Material &lt;span class="caps"&gt;UI&lt;/span&gt;, the frontend aspect of the work was taken care of and didn’t need particular attention when developing. For any basic functionality that was not available out of the box in JavaScript, the Lodash library was used to make object comparisons and such much more readable and understandable when multiple conditions were being evaluated in a &lt;span class="caps"&gt;JSX&lt;/span&gt; expression, often with ternary operators.&lt;/p&gt;
&lt;p&gt;The state was managed beautifully with Redux and the Redux Devtools web browser extension, allowing for rapid iterations and feedback where debugging would otherwise become very cumbersome. The &lt;code&gt;useState&lt;/code&gt; hook was used profusely to separate concerns as well.&lt;/p&gt;
&lt;p&gt;Keeping with React, the application was divided into logical sections that made it easy to add new features. Small components were created for different parts of the application, Redux actions and reducers were stored in their respective directories, containers and other higher-order components were given a special place in the frontend hierarchy, utility functions were well organized and accessible, pages and custom hooks also had their own place to reside.&lt;/p&gt;
&lt;p&gt;Deploying with Docker remained a clean process, where a single &lt;code&gt;Dockerfile&lt;/code&gt; was created to power the backend and another &lt;code&gt;Dockerfile&lt;/code&gt; added for the frontend. Finally, all these instructions were put together with a readable &lt;code&gt;docker-compose.yaml&lt;/code&gt; file, which purpose was to join all the different containers in a single place and to allow adding more microservices, such as Redis. Postgres was not used in this version for practical reasons when sharing the source code of the web application with others, but only a few steps would need to be taken to update Django’s settings file as well as pulling from DockerHub a suitable image to run Postgres.&lt;/p&gt;
&lt;p&gt;Testing with Django went particularly well: the documentation had a clear guide about testing and any aspect of the application — serializers, views, models, forms, consumers, signals and so on — were tested according to the Django standards, leading to a whopping total of 119 passing unit tests, which are to be found inside a &lt;code&gt;tests&lt;/code&gt; directory inside each Django application within the project.&lt;/p&gt;
&lt;h2 id="what-could-have-been-improved"&gt;What could have been improved&lt;/h2&gt;
&lt;p&gt;&lt;img alt="demo6" src="https://www.sglavoie.com/images/posts/0032_building_the_next_Facebook_in_a_couple_of_weeks_as_a_humble_experiment/demo6.png"/&gt;&lt;/p&gt;
&lt;p&gt;Planning of the technical stack could have gone much better. During the experimentation phase in the early steps of this project, good portions of functionality were implemented using Django templates without any frontend framework, except for the &lt;span class="caps"&gt;CSS&lt;/span&gt; framework Bootstrap. Features such as user notifications, personal messaging between two users with the ability to use different “inboxes” and “threads” was a very good selling point of the first version of this web application. Alas, due to time constraints, these useful additions were left behind (preserved with a Git history) but did not manage to make it to the final product. It would have been much more productive to take a closer look at the panoply of requirements to be implemented from the very beginning and determining the best fit as early as possible to avoid rewriting code from one framework to another.&lt;/p&gt;
&lt;p&gt;Although Redux was a lifesaver in many circumstances, it was also a hurdle in terms of productivity because of its complexity and different moving parts. Being more careful to not use Redux at all costs everywhere possible, dispatching updates in the application would surely be simplified with the Context &lt;span class="caps"&gt;API&lt;/span&gt; using pure React or even some &lt;code&gt;useEffect&lt;/code&gt; hooks, which were used profusely with good results. Immer was also introduced a bit later in the thought process when dealing with nested &lt;span class="caps"&gt;JSON&lt;/span&gt; objects. Although it made the remaining development easier, it was also probably a red flag meaning that the Redux store could have been simplified into smaller reducers where different selectors could access parts of the store that wouldn’t need to be nested objects. This may also indicate a flaw in the way models were implemented, but most likely there were errors made when dispatching messages in a part of the Redux store that really should belong somewhere else. In concrete terms, dispatching an event regarding users inside the “user” reducer was probably more complicated than simply dealing with all notifications in a different reducer. In actuality, this led to some dispatch actions that did more than one thing, which is not ideal when thinking about the concept of separation of concerns.&lt;/p&gt;
&lt;p&gt;Although this is not perceptible in the final product, Django migrations were at times a pain to work with. This is because the models weren’t thought through very well at the beginning and despite the iterative process being an inherent part of software development, iterating over models in Django definitely counts as an exception to the rule where clearly defined models will not cause migrations to break or need to be modified in any way. It would have been more productive to produce well-designed diagrams, depicting the architecture of the application as well as the complete schema of the database to avoid surprises down the road.&lt;/p&gt;
&lt;h2 id="state-of-the-art-in-web-development"&gt;State of the art in web development&lt;/h2&gt;
&lt;p&gt;&lt;img alt="source_code" src="https://www.sglavoie.com/images/posts/0032_building_the_next_Facebook_in_a_couple_of_weeks_as_a_humble_experiment/source_code.png"/&gt;&lt;/p&gt;
&lt;p&gt;On a technical aspect, many parts of this web application conform to modern web standards. The latest stable release versions of libraries were used whenever convenient and/or possible. This non-exhaustive list would include, at the time of this writing, React 17.0.2, Redux 4.1.2, WebSocket 1.0.34 and Material &lt;span class="caps"&gt;UI&lt;/span&gt; 5.5.0 for the frontend. On the backend, Django 4.0.3, Channels 3.0.4, Djoser 2.1.0 and Redis 4.2.0 were used.&lt;/p&gt;
&lt;p&gt;When dealing with dependencies, Poetry was used with great benefit to make sure that Docker containers could be deployed reliably. Using Docker and Docker Compose was another touch that was added since most contemporary software will ship with a Docker solution for convenience. An excellent example in this regard would be PlantUML, a Java-based application to generate diagrams from textual descriptions that can be deployed in only a few seconds via Docker, launching a local server with the full capabilities offered by the piece of software in question. Nowadays, with Docker containers being more secure and very fitting for a deployment to the cloud at most big technology companies, it really is a best practice adopted by good software teams to work with containerized versions of their products.&lt;/p&gt;
&lt;p&gt;The wider community was consulted in an effort to bring the maximum quality possible to the end result. Concretely, advice was taken from prominent figures in the web development world, including &lt;a href="https://www.dennisivy.com/"&gt;Dennis Ivanov&lt;/a&gt; and &lt;a href="https://laithharb.com/"&gt;Laith Harb&lt;/a&gt;, both Django and React experts and &lt;a href="https://coreyms.com/"&gt;Corey Schafer&lt;/a&gt;, an accomplished software developer from the Python world. &lt;a href="https://nigelpoulton.com/"&gt;Nigel Poulton&lt;/a&gt; — author of Docker Deep Dive — served as a good reference for the deployment part. &lt;a href="https://realpython.com/"&gt;Real Python&lt;/a&gt; was a godsend with its in-depth articles, for instance about debugging code with Pdb. Less well-known yet high-quality content producers inspired work with Djoser and the implementation of user posts, including &lt;a href="https://www.youtube.com/channel/UCf_Y89gbkB1bJGkmqiQIAnQ"&gt;Bryan Dunn&lt;/a&gt; and &lt;a href="https://www.legionscript.com/"&gt;Legion Script&lt;/a&gt;. &lt;a href="https://www.cloudflare.com/"&gt;Cloudflare&lt;/a&gt; was also one of the best resources used to deploy a secure web server locally and to learn about &lt;span class="caps"&gt;JSON&lt;/span&gt; web tokens and their use specifically with Python. Needless to say, the official documentation from each major framework and tool was referenced all way through, many names which are going to sound familiar by now — Django &lt;span class="caps"&gt;REST&lt;/span&gt; Framework, React, Redux, Immer.js, Django, Djoser, Channels, etc.&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="demo-of-the-app"&gt;Demo of the app&lt;/h1&gt;
&lt;div class="youtube youtube-16x9"&gt;
&lt;iframe allowfullscreen="" frameborder="0" seamless="" src="https://www.youtube.com/embed/LFJfL2ejhAU"&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;hr/&gt;
&lt;h2 id="resources-and-references"&gt;Resources and references&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://axios-http.com/"&gt;Axios&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://black.readthedocs.io/en/stable/"&gt;Black&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/channel/UCf_Y89gbkB1bJGkmqiQIAnQ"&gt;Bryan Dunn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.cloudflare.com/products/tunnel/"&gt;Cloudflare Tunnel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.cloudflare.com/"&gt;Cloudflare&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.conventionalcommits.org/en/v1.0.0/"&gt;Conventional Commits specification&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://coreyms.com/"&gt;Corey Schafer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.dennisivy.com/"&gt;Dennis Ivanov&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://channels.readthedocs.io/en/stable/"&gt;Django Channels&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.django-rest-framework.org/"&gt;Django &lt;span class="caps"&gt;REST&lt;/span&gt; Framework&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/compose/"&gt;Docker Compose&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.docker.com/"&gt;Docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://immerjs.github.io/immer/"&gt;Immer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://laithharb.com/"&gt;Laith Harb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.legionscript.com/"&gt;Legion Script&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mui.com/"&gt;Material &lt;span class="caps"&gt;UI&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nigelpoulton.com/"&gt;Nigel Poulton&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://python-poetry.org/"&gt;Poetry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://prettier.io/"&gt;Prettier&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pylint.pycqa.org/en/latest/"&gt;Pylint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://realpython.com/"&gt;Real Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/"&gt;Reddit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://redis.io/"&gt;Redis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://redux.js.org/"&gt;Redux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/"&gt;Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jendrikseipp/vulture"&gt;Vulture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API"&gt;WebSocket&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="learnings"></category><category term="bsc"></category><category term="django"></category><category term="lessons"></category><category term="python"></category></entry><entry><title>A retrospective on creating an impractical little tool just for fun</title><link href="https://www.sglavoie.com/posts/2022/09/18/a-retrospective-on-creating-an-impractical-little-tool-just-for-fun/" rel="alternate"></link><published>2022-09-18T20:06:00-05:00</published><updated>2022-09-18T20:06:00-05:00</updated><author><name>Sébastien Lavoie</name></author><id>tag:www.sglavoie.com,2022-09-18:/posts/2022/09/18/a-retrospective-on-creating-an-impractical-little-tool-just-for-fun/</id><summary type="html">&lt;p&gt;Sometimes, spending hundreds of hours on something that could easily have been achieved in a fraction of the time makes for a rewarding journey! While it&amp;#8217;s important to be selective about where our attention goes in the first place, it matters equally to realize when the end of the rope is in sight so we can jump off the boat with good enough&amp;nbsp;timing&amp;#8230;&lt;/p&gt;</summary><content type="html">
&lt;hr/&gt;
&lt;h1 id="introduction"&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Building little projects to scratch one’s own needs is a great way to practice the craft of software development, or at least this is some consistent advice I have picked up from legendary figures in the field. Whether it be formulated by the famous &lt;a href="https://twitter.com/ID_AA_Carmack"&gt;John Carmack&lt;/a&gt; (&lt;a href="https://www.youtube.com/watch?v=I845O57ZSy4"&gt;an excellent interview with Lex Fridman was recently released&lt;/a&gt;) or a rising star like &lt;a href="https://twitter.com/ThePrimeagen"&gt;The Primeagen&lt;/a&gt; (he has a fantastic &lt;a href="https://www.youtube.com/c/ThePrimeagen"&gt;YouTube channel&lt;/a&gt; too), the core of the message remains the same: &lt;em&gt;deliberate practice is required to make progress&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;While I was in the middle of completing a BSc in computer science, I decided that a simple and reliable spreadsheet was not enough to keep track of my grades and decided to tackle the creation of a &lt;span class="caps"&gt;TUI&lt;/span&gt; — terminal user interface — to come to my rescue by providing, hopefully, correct answers. And so &lt;a href="https://github.com/sglavoie/uol-grades-calculator"&gt;uol-grades-calculator&lt;/a&gt; (&lt;code&gt;ugc&lt;/code&gt; for short) was born out of the desire to learn more about &lt;a href="https://en.wikipedia.org/wiki/Test-driven_development"&gt;&lt;span class="caps"&gt;TDD&lt;/span&gt;&lt;/a&gt; in a practical way, the &lt;a href="https://hypothesis.readthedocs.io/en/latest/"&gt;Hypothesis&lt;/a&gt; testing library written in Python, &lt;a href="https://www.sphinx-doc.org/"&gt;Sphinx&lt;/a&gt; and &lt;a href="https://readthedocs.org/"&gt;Read The Docs&lt;/a&gt; for publishing nice-looking documentation in reStructuredText format (the Markdown format being another option). Even though the goal of this tool has never been to gather a growing user base, it was a good learning experience because alternatives to it spawn up over time and, arguably, some of them were much friendlier and simpler to use (who would have thought that…).&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="setting-up-the-stage"&gt;Setting up the stage&lt;/h1&gt;
&lt;p&gt;To put things in perspective, this tool was never really under active development, but it did receive updates from August 2020 until September 2022, so the project slowly took shape in a time frame of a little over 2 years as can be shown in the following repurposed Gantt chart, where the length associated with each Git commit corresponds to the amount of time elapsed from one commit to the next.&lt;/p&gt;
&lt;div style="max-width:100%; height: 60vh; overflow:auto;"&gt;
&lt;img alt="ugc's development timeline" class="max-size-img-post" src="https://www.sglavoie.com/images/posts/0030_a_retrospective_on_creating_an_impractical_little_tool_just_for_fun/diagram.svg" style="min-width: 1800px"/&gt;
&lt;/div&gt;
&lt;h2 id="vim-magic-behind-the-scenes"&gt;Vim magic behind the scenes&lt;/h2&gt;
&lt;p&gt;While the chart itself is neither the prettiest nor the most interesting, the &lt;em&gt;how&lt;/em&gt; of it has a possibly more entertaining story attached to it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The list of commits was extracted with the command &lt;code&gt;git log --pretty=format:'%s    : %cs' &amp;gt; commits.txt&lt;/code&gt; to get a one-liner for each commit with the description followed by the date, piped/stored in the text file &lt;code&gt;commits.txt&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Some Vim regex magic was done to substitute the first ‘&lt;code&gt;:&lt;/code&gt;&lt;span class="quo"&gt;‘&lt;/span&gt; character on each line so that &lt;a href="https://mermaid-js.github.io/"&gt;Mermaid&lt;/a&gt; wouldn’t struggle to render the graph: ‘&lt;code&gt;%s/^\(\w\+\): /\1 - /&lt;/code&gt;&lt;span class="quo"&gt;‘&lt;/span&gt;. This pattern was actually predictable because the &lt;a href="https://www.conventionalcommits.org/en/v1.0.0/"&gt;Conventional Commits specification&lt;/a&gt; was followed religiously right from the beginning.&lt;/li&gt;
&lt;li&gt;The previous command left some ‘&lt;code&gt;:&lt;/code&gt;&lt;span class="quo"&gt;‘&lt;/span&gt; characters in there that weren’t needed, so they were removed except where a digit was immediately following such that the last part of the line including the date would be left in place (here, &lt;code&gt;\v&lt;/code&gt; is the “very magic” flag used so that we don’t need backslashes around the captured group, i.e. the digit, which looks a bit more readable): ‘&lt;code&gt;%s/\v: (\d)@!/ -&lt;/code&gt;&lt;span class="quo"&gt;‘&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;To show the elapsed time between two commits, a Vim macro was concocted so that the date on the current line would be copied and pasted on the following line in a specific way, which works because the Git history appears in chronological order by default: ‘&lt;code&gt;kf:wv9ly0jA,^[pj0&lt;/code&gt;&lt;span class="quo"&gt;‘&lt;/span&gt;. It’s Ugly but it gets the job done ;).&lt;/li&gt;
&lt;li&gt;In essence, it goes up by one line (&lt;code&gt;k&lt;/code&gt;), searches for the &lt;code&gt;:&lt;/code&gt; character with &lt;code&gt;f&lt;/code&gt; (which precedes the date), moves ahead by one &lt;code&gt;w&lt;/code&gt;ord, highlights the date which is in the format &lt;code&gt;YYYY-MM-DD&lt;/code&gt; with &lt;code&gt;v9l&lt;/code&gt;, yanks/copies the date with &lt;code&gt;y&lt;/code&gt;, goes back to the beginning of the line (&lt;code&gt;0&lt;/code&gt;), goes down one line with &lt;code&gt;j&lt;/code&gt;, &lt;code&gt;A&lt;/code&gt;ppends a &lt;code&gt;,&lt;/code&gt; at the end of the line, goes out of insert mode with a &lt;code&gt;Ctrl - c&lt;/code&gt; shortcut (which visually translates to the escape sequence &lt;code&gt;^[&lt;/code&gt;), &lt;code&gt;p&lt;/code&gt;astes the date, goes down one line again with &lt;code&gt;j&lt;/code&gt; to be ready to process the next date and goes to the beginning of the line again with &lt;code&gt;0&lt;/code&gt; so we don’t miss a match. Vim macros are definitely quite expressive in a terse way!&lt;/li&gt;
&lt;li&gt;Then, it’s just a matter of running the macro for the number of lines below the cursor in the file. We can quickly get a sense of the number of lines in the file with &lt;code&gt;Ctrl - g&lt;/code&gt; and run the macro on the required number of lines with &lt;code&gt;100@a&lt;/code&gt;, replacing &lt;code&gt;100&lt;/code&gt; with the number of lines and &lt;code&gt;a&lt;/code&gt; with the register where the macro was saved (in this case, in the register &lt;code&gt;a&lt;/code&gt; with &lt;code&gt;qa&lt;/code&gt; to start recording the macro there, which is to be stopped by pressing &lt;code&gt;q&lt;/code&gt; once more in normal mode).&lt;/li&gt;
&lt;li&gt;Once the macro is run, the output needs to be reversed so that the initial commit can be displayed where the graph starts in the top-left corner, which can be done with the &lt;a href="https://vim.fandom.com/wiki/Reverse_order_of_lines"&gt;clever command&lt;/a&gt; ‘&lt;code&gt;g/^/m0&lt;/code&gt;&lt;span class="quo"&gt;‘&lt;/span&gt;: it runs on every line of the file, successively putting each line at the very top of the file (line &lt;code&gt;0&lt;/code&gt;) to have the effect of reversing the whole document!&lt;/li&gt;
&lt;li&gt;Finally, the graph is generated literally by copying and pasting that list of commits into a Mermaid textual chart, which shall be the topic of another post!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The whole process is done in a few minutes at most, making it a nice solution to deal with manageable outputs under a few thousand lines. Otherwise, it might be more convenient — albeit a bit more time consuming too — to write a script to do the work since Vim macros, when run at a relatively large scale, can be slow and error-prone.&lt;/p&gt;
&lt;h1 id="what-went-well"&gt;What went well&lt;/h1&gt;
&lt;p&gt;With all that fluffy preamble, we might hope that something went well in the end. Well, there were a couple of noteworthy things indeed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Even though I worked on this project alone, I created a bunch of &lt;a href="https://github.com/sglavoie/uol-grades-calculator/issues?q=is%3Aissue+is%3Aclosed"&gt;GitHub issues&lt;/a&gt; that I assigned to myself, each with its own set of tasks, acceptance criteria, a short analysis section as required, linked pull requests and referenced commits. It is more work and arguably could be done more simply in a notes application, but &lt;em&gt;it feels good to be publicly accountable for one’s work&lt;/em&gt; and that also encouraged (very few) people to submit their own issues. Additionally, managing tasks on a platform like GitHub makes it easy to review the state of a project and to manage a backlog of tasks, which was a nice plus when the project was linked to what was meant to be its successor, &lt;a href="https://github.com/sglavoie/uol-grades-calculator-server"&gt;uol-grades-calculator-server&lt;/a&gt;, a backend using &lt;code&gt;ugc&lt;/code&gt; as its &lt;span class="caps"&gt;API&lt;/span&gt; which was to be hooked to a React frontend to display the data (more on that in the list of things that went poorly).&lt;/li&gt;
&lt;li&gt;&lt;em&gt;The &lt;span class="caps"&gt;TDD&lt;/span&gt; approach was embraced&lt;/em&gt; right from the start and I consider that being one of the highlights of the project in hindsight. With over 250 tests (some of which are randomly generated to do property-based testing with Hypothesis), I felt confident it was giving somewhat sensible answers.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Best practices were adopted&lt;/em&gt;: Pylint, the king of complainers amongst the Python linters, was very verbose but set up to be slightly more quiet after a while. A &lt;code&gt;pyproject.toml&lt;/code&gt; file was included, a clean &lt;code&gt;pytest&lt;/code&gt; config file was used to automate the input of some parameters when running the test suite, the project was developed with the intention of being &lt;a href="https://pypi.org/project/uol-grades-calculator/"&gt;deployed as a package&lt;/a&gt;, only popular and stable libraries were used and just as importantly, only portable formats like &lt;span class="caps"&gt;JSON&lt;/span&gt; made it to the final version of the project.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Sub-modules were created&lt;/em&gt; to make everything a bit more… modular.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;A GitHub workflow was added to automatically deploy new releases&lt;/em&gt; to &lt;a href="https://pypi.org/"&gt;PyPI&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Documentation was generated and hosted on Read The Docs&lt;/em&gt;, with clean outputs and images and an entire section dedicated to developers (i.e., myself :)) so that reproducibility wouldn’t become an issue for any step taken along the way.&lt;/li&gt;
&lt;li&gt;Using &lt;a href="https://pre-commit.com/"&gt;pre-commit&lt;/a&gt; helped with catching some annoyingly formatted code before reaching production by taking advantage of &lt;em&gt;Git pre-commit hooks&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With what seems like a glowing review so far, needless to say, a whole lot went wrong too.&lt;/p&gt;
&lt;figure&gt;
&lt;a href="https://www.sglavoie.com/images/posts/0030_a_retrospective_on_creating_an_impractical_little_tool_just_for_fun/ugc_summarize.png"&gt;&lt;img alt="ugc_summarize" class="max-size-img-post" src="https://www.sglavoie.com/images/posts/0030_a_retrospective_on_creating_an_impractical_little_tool_just_for_fun/ugc_summarize.png"/&gt;&lt;/a&gt;
&lt;figcaption&gt;Illustrating the &lt;code&gt;summarize&lt;/code&gt; command.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;hr/&gt;
&lt;h1 id="what-could-have-been-done-better"&gt;What could have been done better&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Independently of the expectations with regards to the user base, it would have been beneficial to &lt;em&gt;do more research and planning&lt;/em&gt; initially before writing a single line of code. After working on other projects, I’ve found that what works well for me is to follow a specific set of steps, broadly speaking:&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Gather a list of requirements&lt;/em&gt; as precisely as possible to validate assumptions and define the correct scope for the work to be done (&lt;a href="https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it"&gt;&lt;span class="caps"&gt;YAGNI&lt;/span&gt;&lt;/a&gt;!);&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Produce some early flowcharts&lt;/em&gt; to make sense of how the application might be structured and iterate on this until a clear winner emerges;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Produce low-fidelity wireframes&lt;/em&gt; (even for a &lt;span class="caps"&gt;TUI&lt;/span&gt;, that would be informative before committing to doing the wrong thing!) — even if this is just quickly sketched on paper;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Create high-fidely mockups&lt;/em&gt; (or at least reasonable-looking ones for a small project like this one) once things have been thought through carefully;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Design a general plan of work&lt;/em&gt; before writing any code to have a better idea of how the different parts of the system should communicate together;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Research existing tools to be leveraged&lt;/em&gt; so as to not re-invent the wheel all the time and see how they fit in together;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Go with &lt;span class="caps"&gt;TDD&lt;/span&gt;&lt;/em&gt; and stick to it piously for anything of relative importance that should be tested;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Go at it with atomic commits&lt;/em&gt; so that rewinding errors on the path will be a breeze — at least that ought to help significantly.&lt;/li&gt;
&lt;li&gt;Related to the first point, issues could have been more substantial instead of having to often deal with useless refactoring due to not thinking things through fully.&lt;/li&gt;
&lt;li&gt;With more mental processing done upfront, it would have been clear which features should have been part of the tool earlier and which ones could have waited longer. Glancing at the Gantt chart above, one can see that many commits happened at the beginning just to get the structure right, the project was not documented until much later and basic functionality such as being able to plot results (which was really a core feature to be expected) was not integrated until past the mid-life of the project.&lt;/li&gt;
&lt;li&gt;On top of the above, it was clear that using &lt;span class="caps"&gt;YAML&lt;/span&gt; in the presence of the other technologies used for a backend and frontend to the &lt;span class="caps"&gt;CLI&lt;/span&gt; made things more complicated and it wasn’t until one of the latest versions that &lt;span class="caps"&gt;JSON&lt;/span&gt; was used instead.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;The user experience could have been improved drastically at the beginning by relying on well-known libraries&lt;/em&gt; such as &lt;a href="https://github.com/Textualize/rich"&gt;Rich&lt;/a&gt; to make the &lt;span class="caps"&gt;UI&lt;/span&gt; much more appealing and even a bit more interactive.&lt;/li&gt;
&lt;li&gt;Some features were presented in a way that did not make much sense. For instance, the &lt;code&gt;Dockerfile&lt;/code&gt; does allow one to use the tool from a Docker container, but not all functionality works out of the box that way (e.g., saving a plot to the filesystem or loading a configuration file).&lt;/li&gt;
&lt;li&gt;&lt;em&gt;It wasn’t productive at all to start scattering the few resources put into this project&lt;/em&gt; by creating a sister repository &lt;a href="https://github.com/sglavoie/uol-grades-calculator-server"&gt;uol-grades-calculator-server&lt;/a&gt;. The &lt;span class="caps"&gt;CLI&lt;/span&gt; should have been more feature-rich before considering such an endeavor and it should have been made in a way that’s easier for a backend to consume.&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;
&lt;a href="https://www.sglavoie.com/images/posts/0030_a_retrospective_on_creating_an_impractical_little_tool_just_for_fun/plot_output.png"&gt;&lt;img alt="plot_output" class="max-size-img-post" src="https://www.sglavoie.com/images/posts/0030_a_retrospective_on_creating_an_impractical_little_tool_just_for_fun/plot_output.png"/&gt;&lt;/a&gt;
&lt;figcaption&gt;Showing the image generated by running the &lt;code&gt;plot modules&lt;/code&gt; (sub-)command.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;hr/&gt;
&lt;h1 id="key-lessons-learnt-and-where-to-take-it-from-here"&gt;Key lessons learnt and where to take it from here&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Studying better the available libraries&lt;/em&gt; would have avoided some headaches. For instance, the display of what should have been tabular data started out as plain &lt;span class="caps"&gt;JSON&lt;/span&gt; (printing a &lt;code&gt;dict&lt;/code&gt; object), then &lt;code&gt;beautifultable&lt;/code&gt; was used to create some colored output, then &lt;code&gt;pandas&lt;/code&gt; replaced the previous library because some limitations were found with it — reverting to a plain table output in the process — and finally &lt;code&gt;rich&lt;/code&gt; was used to create a more decent-looking output.&lt;/li&gt;
&lt;li&gt;Likewise, &lt;em&gt;spending more time in the planning department&lt;/em&gt; before getting started would probably have resulted in a tool that’s more straightforward to use, focused on the most needed features and possessing a broader feature set by not having invested extra resources on building a backend and a frontend separately. It should have been either a more powerful &lt;span class="caps"&gt;TUI&lt;/span&gt; limited to be used within a terminal or a web application, but not both in the way it was designed.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Work on small, isolated parts of the system&lt;/em&gt;. Some issues were split into large chunks of work (&lt;a href="https://github.com/sglavoie/uol-grades-calculator/issues/29"&gt;this one for instance&lt;/a&gt;, implementing at once the &lt;code&gt;plot&lt;/code&gt; command and its sub-commands). This wasn’t a problem per se given that I worked alone, but it would be harder for someone else to follow and to create a reasonably-sized pull request from such an issue. This feature could have been broken down into different sets of related flags.&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;
&lt;a href="https://www.sglavoie.com/images/posts/0030_a_retrospective_on_creating_an_impractical_little_tool_just_for_fun/ugc-server.png"&gt;&lt;img alt="ugc-server" class="max-size-img-post" src="https://www.sglavoie.com/images/posts/0030_a_retrospective_on_creating_an_impractical_little_tool_just_for_fun/ugc-server.png"/&gt;&lt;/a&gt;
&lt;figcaption&gt;A simple component diagram demonstrating how the &lt;span class="caps"&gt;CLI&lt;/span&gt; was to be used in a greater context.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;hr/&gt;
&lt;h1 id="conclusion"&gt;Conclusion&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span class="dquo"&gt;“&lt;/span&gt;Regardless of what we discover, we understand and truly believe that everyone did the best job they could, given what they knew at the time, their skills and abilities, the resources available, and the situation at hand.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="quote-author"&gt;&lt;a href="https://retrospectivewiki.org/index.php?title=The_Prime_Directive"&gt;—Norm Kerth, Project Retrospectives: A Handbook for Team Review&lt;/a&gt;&lt;/div&gt;
&lt;p&gt;All in all, this has been a fun experiment to bring to fruition. It would have been much quicker to use a spreadsheet given what the final result ended up being, but the experience obtained was worth every drop of developer sweat! Using Python felt appropriate as iterations of the tool could be produced fast and the &lt;span class="caps"&gt;CLI&lt;/span&gt; was responsive enough to be useful and pleasant to interact with thanks to its intuitive commands. In the near future, using a library like &lt;a href="https://github.com/Textualize/textual"&gt;Textual&lt;/a&gt; could be more rewarding as one could expect a much nicer visual experience in the terminal at a fraction of the current implementation efforts.&lt;/p&gt;
&lt;h2 id="resources-and-references"&gt;Resources and references&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.conventionalcommits.org/en/v1.0.0/"&gt;Conventional Commits specification&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://leaddev.com/communication-relationships/how-run-great-retrospective"&gt;How to run a great retrospective - LeadDev&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/ID_AA_Carmack"&gt;John Carmack - Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=I845O57ZSy4"&gt;John Carmack: Doom, Quake, &lt;span class="caps"&gt;VR&lt;/span&gt;, &lt;span class="caps"&gt;AGI&lt;/span&gt;, Programming, Video Games, and Rockets | Lex Fridman Podcast - YouTube&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mermaid-js.github.io/"&gt;Mermaid - Markdownish syntax for generating flowcharts, sequence diagrams, class diagrams, gantt charts and git graphs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/"&gt;PyPI - The Python Package Index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://readthedocs.org/"&gt;Read The Docs - Create, host, and browse documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.atlassian.com/team-playbook/plays/retrospective"&gt;Retrospective - Atlassian&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://retrospectivewiki.org/index.php?title=Retrospective_Plans"&gt;Retrospective Plans - Agile Retrospective Resource Wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vim.fandom.com/wiki/Reverse_order_of_lines"&gt;Reverse order of lines - Vim Tips Wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.sphinx-doc.org/"&gt;Sphinx - Python Documentation Generator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Test-driven_development"&gt;Test-driven development - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Textualize/textual"&gt;Textual - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://retrospectivewiki.org/index.php?title=The_Prime_Directive"&gt;The Prime Directive - Agile Retrospective Resource Wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/ThePrimeagen"&gt;The Primeagen - Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/c/ThePrimeagen"&gt;The Primeagen - YouTube&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it"&gt;You aren’t gonna need it - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="learnings"></category><category term="lessons"></category><category term="open-source"></category><category term="retrospective"></category><category term="terminal"></category></entry><entry><title>What it took to propel a career in tech in five years</title><link href="https://www.sglavoie.com/posts/2022/06/18/what-it-took-to-propel-a-career-in-tech-in-five-years/" rel="alternate"></link><published>2022-06-18T14:22:00-05:00</published><updated>2022-09-19T18:50:00-05:00</updated><author><name>Sébastien Lavoie</name></author><id>tag:www.sglavoie.com,2022-06-18:/posts/2022/06/18/what-it-took-to-propel-a-career-in-tech-in-five-years/</id><summary type="html">&lt;p&gt;Learning is an eternal path. I have been sharing my own adventure primarily for the following practical reasons: to help me remember what I have been working on technology-wise and to help me practice a technique known as &lt;a href="https://en.wikipedia.org/wiki/Spaced_repetition"&gt;spaced repetition&lt;/a&gt;. This has been a summary to motivate myself to keep on track, to practice consistent self-reflection and to be reminded as often as possible to stay a bit more humble. In the process, I hope you may found some inspiration&amp;nbsp;too.&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;After having kept a concise (and incomplete) log of my technical learnings for five years at this point, I can see I’ve come a long way, yet this is only the beginning. From now on, it is time to focus on taking concrete action, build on the foundation that has been laid out over time and start appreciating life from a broader perspective, too, as there are of course many aspects that have contributed to put me at this exact spot on this journey. Theory leads to a deeper understanding in any field, but in the end, the results being produced are what matter most and spending quality time getting good at one’s craft is key to making real progress. I think the most important steps to take in this context are &lt;em&gt;getting into the habit of learning constantly&lt;/em&gt; and &lt;em&gt;working towards generating a profound desire to excel&lt;/em&gt;, just for its own sake.&lt;/p&gt;
&lt;p&gt;To glory and beyond!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr/&gt;
&lt;p&gt;The output below was formatted automatically with a tool that converts the content of a Google Sheet into Markdown. If you’re curious, you might enjoy reading &lt;a href="https://www.sglavoie.com/posts/2021/12/19/using-google-sheets-as-a-database-to-extract-data-converted-to-markdown/"&gt;this article&lt;/a&gt;!&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="2022"&gt;2022&lt;/h1&gt;
&lt;h2 id="april"&gt;April&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Articles&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Google Cloud Platform&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/storage/docs/access-control/lists"&gt;Access control lists (ACLs)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/compute/docs/oslogin/set-up-oslogin"&gt;Set up &lt;span class="caps"&gt;OS&lt;/span&gt; Login&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;React&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://reactjs.org/docs/jsx-in-depth.html"&gt;&lt;span class="caps"&gt;JSX&lt;/span&gt; In Depth&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Technology&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://shift.infinite.red/flutter-is-better-than-react-native-fed10c92a768"&gt;Flutter is better than React Native&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Web development&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://kentcdodds.com/blog/how-i-built-a-modern-website-in-2021"&gt;How I built a modern website in 2021&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;University of London&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;3D Graphics and Animation&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;Computer Graphics: From Pixels to Programmable Graphics Hardware (book)&lt;/li&gt;
&lt;li&gt;Lighting models and shading&lt;/li&gt;
&lt;li&gt;Transforms in 3D&lt;/li&gt;
&lt;li&gt;&lt;a href="https://unityatscale.com/unity-version-control-guide/how-to-setup-unity-project-on-github/"&gt;How to set up a Unity project in GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=pwZpJzpE2lQ"&gt;&lt;span class="caps"&gt;LEARN&lt;/span&gt; &lt;span class="caps"&gt;UNITY&lt;/span&gt; - The Most &lt;span class="caps"&gt;BASIC&lt;/span&gt; &lt;span class="caps"&gt;TUTORIAL&lt;/span&gt; I’ll Ever Make&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://learn.unity.com/tutorial/essential-unity-concepts#"&gt;Unity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Orientation&lt;/li&gt;
&lt;li&gt;Coordinates&lt;/li&gt;
&lt;li&gt;3D models&lt;/li&gt;
&lt;li&gt;Components&lt;/li&gt;
&lt;li&gt;Lights, Prefab&lt;/li&gt;
&lt;li&gt;Essential Unity Concepts&lt;/li&gt;
&lt;li&gt;Basic movement, building a scene&lt;/li&gt;
&lt;li&gt;Types of light&lt;/li&gt;
&lt;li&gt;Script communication&lt;/li&gt;
&lt;li&gt;Physics and collisions&lt;/li&gt;
&lt;li&gt;Movements and forces&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Mobile Development&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.apple.com/design/human-interface-guidelines/ios/visual-design/adaptivity-and-layout/"&gt;Adaptivity and Layout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reactnative.express/app"&gt;App Development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://reactnative.dev/docs/components-and-apis"&gt;Core Components and APIs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Dark patterns&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reactnative.express/core_components"&gt;React Native Express&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;JavaScript&lt;/li&gt;
&lt;li&gt;React&lt;/li&gt;
&lt;li&gt;Core Components&lt;/li&gt;
&lt;li&gt;&lt;a href="https://reactnative.dev/docs/flexbox"&gt;React Native flex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;React Native – Programming &lt;span class="caps"&gt;UI&lt;/span&gt; elements&lt;/li&gt;
&lt;li&gt;&lt;a href="https://reactnavigation.org/docs/getting-started/"&gt;React Navigation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Read documentation&lt;/li&gt;
&lt;li&gt;Skeuomorphism, minimalism and neumorphism&lt;/li&gt;
&lt;li&gt;Universal Access in Human-Computer Interaction (book)&lt;/li&gt;
&lt;li&gt;User Interfaces in Dark Mode During Daytime – Improved Productivity or Just Cool-Looking?&lt;/li&gt;
&lt;li&gt;Impact of Sentence Length on the Readability of Web for Screen Reader Users&lt;/li&gt;
&lt;li&gt;Wireframing&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;YouTube&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Bash&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=VIUoHnFwEH4"&gt;bash quoting is really not that difficult!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Git&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=p0eVyhv2rbk"&gt;Git Annex Is The Coolest Program You’ve Never Heard Of&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Graphic Design&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=2rMbRW2zU7E"&gt;Logo Design Process Overview &lt;span class="caps"&gt;EP&lt;/span&gt; 2 44&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=bDILg149lvE"&gt;Perfecting Colour Palettes For Logo Design &lt;span class="caps"&gt;EP&lt;/span&gt; 29 44&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=oZ9QdBWLgIE"&gt;Project Design Brief - Design For a Music Festival &lt;span class="caps"&gt;EP&lt;/span&gt; 1 44&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;NFTs&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=C7plHMKIFcU"&gt;You’re Wrong About NFTs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;React Native&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=0-S5a0eXPoc"&gt;React Native Tutorial for Beginners - Build a React Native App&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Software design&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=8GONv6jJsG0"&gt;How To Avoid Big Upfront Design&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Software engineering&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=ElMnHDSFaCw"&gt;What Software Architecture Should Look Like&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;span class="caps"&gt;TDD&lt;/span&gt;&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=ln4WnxX-wrw"&gt;How To Perfect Software Design With Test Driven Development&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Unity&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=gB1F9G0JXOo"&gt;Learn Unity - Beginner’s Game Development Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="march"&gt;March&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Articles&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Data science&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://towardsdatascience.com/the-complete-guide-to-time-series-analysis-and-forecasting-70d476bfe775"&gt;The Complete Guide to Time Series Analysis and Forecasting&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Django&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.codingforentrepreneurs.com/blog/how-to-create-a-custom-django-user-model"&gt;How to Create a Custom Django User Model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/4.0/intro/tutorial05/#test-a-view"&gt;Writing your first Django app, part 5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Testing in Django&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Docker&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/network/network-tutorial-standalone/"&gt;Networking with standalone containers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://javascript.plainenglish.io/immer-js-101-making-redux-state-updates-in-react-predictable-62efe93e03dc"&gt;Immer.js 101 — Making Redux state updates in React predictable&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Security&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://auth0.com/docs/get-started/identity-fundamentals/identity-and-access-management"&gt;Introduction to Identity and Access Management (&lt;span class="caps"&gt;IAM&lt;/span&gt;)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developers.cloudflare.com/cloudflare-one/identity/users/validating-json/"&gt;&lt;span class="caps"&gt;JSON&lt;/span&gt; web tokens&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developers.cloudflare.com/cloudflare-one/tutorials/share-new-site/"&gt;Share development environments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://auth0.com/docs/authenticate/single-sign-on"&gt;Single Sign On&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.cloudflare.com/learning/access-management/what-is-saml/"&gt;What is &lt;span class="caps"&gt;SAML&lt;/span&gt;? How &lt;span class="caps"&gt;SAML&lt;/span&gt; authentication works&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.cloudflare.com/learning/access-management/what-is-sso/"&gt;What is &lt;span class="caps"&gt;SSO&lt;/span&gt;? How single sign-on works&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Streamlit&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/artefact-engineering-and-data-science/visual-time-series-forecasting-with-streamlit-prophet-71d86a769928"&gt;Visual time series forecasting with Streamlit Prophet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Documentation&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Django&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/4.0/topics/signals/"&gt;Signals&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;University of London&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Databases and Advanced Data Techniques&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;Review course concepts (see past entries)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;YouTube&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Django&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=F4nwRQPXD8w"&gt;Build an Asynchronous Chatroom with Django and Channels&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=5rh853GTgKo&amp;amp;list=PLJRGQoqpRwdfoa9591BcUS6NmMpZcvFsM&amp;amp;index=9"&gt;Django &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; React Authentication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Password reset&lt;/li&gt;
&lt;li&gt;Sign Up &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; Account Activation&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=oBQxFn1CDno"&gt;Docker - Django, Celery &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; Redis Docker Compose setup&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;React Native&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=1hPgQWbWmEk"&gt;Build an Instagram Clone with React Native, Firebase Firestore, Redux, Expo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="february"&gt;February&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Articles&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Python&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://python-course.eu/oop/count-function-calls-with-help-metaclass.php"&gt;Count Function calls with the help of a Metaclass&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://realpython.com/python-debugging-pdb/#printing-expressions"&gt;Python Debugging With Pdb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://eulertech.wordpress.com/2018/06/10/the-pitfall-of-eval-function-and-its-safe-alternative-in-python/"&gt;The pitfall of eval function and its safe alternative in Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://towardsdatascience.com/using-class-decorators-in-python-2807ef52d273"&gt;Using Class Decorators in Python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Terraform&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://willianantunes.medium.com/the-easiest-way-to-run-a-container-on-gce-with-terraform-139b2ec8f03d"&gt;The easiest way to run a container on &lt;span class="caps"&gt;GCE&lt;/span&gt; with Terraform&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Books&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Terraform&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.manning.com/books/terraform-in-action"&gt;Terraform in Action&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ch. 1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Courses&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Google Cloud Platform&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://app.pluralsight.com/library/courses/google-cloud-platform-fundamentals-core-infrastructure/table-of-contents"&gt;Google Cloud Platform Fundamentals - Core Infrastructure&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Python&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://app.pluralsight.com/library/courses/build-web-apps-python-streamlit/table-of-contents"&gt;Build Web Apps in Python with Streamlit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Terraform&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://app.pluralsight.com/library/courses/terraform-google-cloud-platform-implementing/table-of-contents"&gt;Implementing Terraform with Google Cloud Platform&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://app.pluralsight.com/library/courses/terraform-getting-started-2021/table-of-contents"&gt;Terraform - Getting Started&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Documentation&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Google Cloud Platform&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/functions/docs/running/direct"&gt;Calling Cloud Functions Directly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/compute/docs/disks/add-persistent-disk#format_and_mount_linux"&gt;Creating and attaching a disk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/iam/docs/creating-managing-service-accounts"&gt;Creating and managing service accounts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/storage/docs/resumable-uploads"&gt;Resumable uploads&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/compute/docs/disks#disk-types"&gt;Storage options&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Terraform&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://learn.hashicorp.com/collections/terraform/gcp-get-started"&gt;Get Started - Google Cloud&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;University of London&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Advanced Web Development&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=a2pcXvZG8Pc"&gt;Learn React &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; Django - Chatroom Concept - React Django+Channels Chatroom Heroku Deploy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;YouTube&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Blender&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=OqMLfMXVhhI&amp;amp;list=PLjEaoINr3zgFX8ZsChQVQsuDSjEqdWMAD&amp;amp;index=17"&gt;Blender 3.0 Beginner Donut Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;whole series&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Django&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=j4Yzfh3qIKU&amp;amp;list=PLPSM8rIid1a3TkwEmHyDALNuHhqiUiU5A&amp;amp;index=20"&gt;Building a Social Media App With Python 3 and Django&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Replying to Comments&lt;/li&gt;
&lt;li&gt;User Notifications&lt;/li&gt;
&lt;li&gt;Adding Images to Posts&lt;/li&gt;
&lt;li&gt;Sending DMs&lt;/li&gt;
&lt;li&gt;Finishing DMs&lt;/li&gt;
&lt;li&gt;Sharing Other Posts&lt;/li&gt;
&lt;li&gt;Tags&lt;/li&gt;
&lt;li&gt;Finishing tags&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=sZxxU9zqCGU&amp;amp;list=PLJRGQoqpRwdfoa9591BcUS6NmMpZcvFsM&amp;amp;index=7"&gt;Django &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; React Authentication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Navbar and check authenticated status&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=JD-age0BPVo&amp;amp;list=PLzMcBGfZo4-kCLWnGmK0jUBmGLaJxvi4j&amp;amp;index=2"&gt;Django &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; React Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=tYKRAXIio28"&gt;Django + React Notes App&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=cw8-KFVXpTE"&gt;Django Channels &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; WebSockets Oversimplified&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=U3CGt9jFGOI"&gt;Django &lt;span class="caps"&gt;REST&lt;/span&gt; Framework Tutorial Class Based Views Pt. 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=XpUe0XnK7Gk"&gt;Django &lt;span class="caps"&gt;REST&lt;/span&gt; Framework Tutorial Class Based Views Pt. 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Python&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=rdlQzhP71pQ"&gt;Python lists remember what you did to them&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="january"&gt;January&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Articles&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Docker&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://phoenixnap.com/kb/how-to-ssh-into-docker-container"&gt;How to &lt;span class="caps"&gt;SSH&lt;/span&gt; into a Running Docker Container and Run Commands&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sleeplessbeastie.eu/2021/09/17/how-to-squash-docker-image/"&gt;How to squash Docker image&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Mastering the craft&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://betterprogramming.pub/what-makes-a-senior-developer-senior-bb37f5a861fc"&gt;What Makes a Senior Developer… Senior?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Python&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://realpython.com/python-logging/"&gt;Logging in Python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;span class="caps"&gt;SSH&lt;/span&gt;&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://monovm.com/blog/how-to-access-a-linux-server-using-an-ios-device/"&gt;How to access a Linux Server using an iOS device&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Books&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Docker&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.goodreads.com/en/book/show/36411996-docker-deep-dive"&gt;Docker Deep Dive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ch. 1-6 (&lt;em&gt;Docker engine, images&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;ch. 7 (&lt;em&gt;Containers&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;ch. 8 (&lt;em&gt;Containerizing an app&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;ch. 9 (&lt;em&gt;Deploying apps with Docker Compose&lt;/em&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Documentation&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Cloud&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.aws.amazon.com/ses/latest/dg/send-email-api.html"&gt;Amazon &lt;span class="caps"&gt;SES&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/code/docs/vscode"&gt;Cloud Code for &lt;span class="caps"&gt;VS&lt;/span&gt; Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/compute/docs/reference/rest/v1"&gt;Compute Engine &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/artifact-registry/docs/integrate-compute"&gt;Deploying to Compute Engine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/functions/docs/calling/storage"&gt;Google Cloud Storage Triggers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.min.io/docs/python-client-api-reference.html"&gt;MinIO - Python Client &lt;span class="caps"&gt;API&lt;/span&gt; Reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://googleapis.dev/python/storage/latest/index.html"&gt;Python Client for Google Cloud Storage&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Django &lt;span class="caps"&gt;REST&lt;/span&gt; framework&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.django-rest-framework.org/api-guide/schemas/"&gt;Schemas&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Python&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/library/logging.html"&gt;Logging&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/howto/logging-cookbook.html"&gt;Logging Cookbook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/library/shutil.html"&gt;shutil — High-level file operations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Slack&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://api.slack.com/methods"&gt;Web &lt;span class="caps"&gt;API&lt;/span&gt; methods&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;University of London&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Advanced Web Development&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;Asynchronous Web Services (&lt;em&gt;Celery, Django, Pillow&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;Attacks on websites (&lt;em&gt;&lt;span class="caps"&gt;XSS&lt;/span&gt;, &lt;span class="caps"&gt;CSRF&lt;/span&gt;, &lt;span class="caps"&gt;SQL&lt;/span&gt; injection, clickjacking&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;Consuming WebSockets&lt;/li&gt;
&lt;li&gt;Deployment automation&lt;/li&gt;
&lt;li&gt;Django authentication and administration&lt;/li&gt;
&lt;li&gt;&lt;a href="https://channels.readthedocs.io/en/stable/introduction.html"&gt;Django channels&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Introduction to production deployment&lt;/li&gt;
&lt;li&gt;Introduction to web sockets&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tools.ietf.org/id/draft-loreto-http-bidirectional-07.html"&gt;Known Issues and Best Practices for the Use of Long Polling and Streaming in Bidirectional &lt;span class="caps"&gt;HTTP&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;OpenAPI&lt;/li&gt;
&lt;li&gt;Profiling and performance&lt;/li&gt;
&lt;li&gt;Scaling and load balancing&lt;/li&gt;
&lt;li&gt;Tutorial Pillow (Python)&lt;/li&gt;
&lt;li&gt;Web APIs&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Databases and Advanced Data Techniques&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;Distributed Relational Databases&lt;/li&gt;
&lt;li&gt;Document databases and MongoDB&lt;/li&gt;
&lt;li&gt;Introduction to Linked Data and the Semantic Web&lt;/li&gt;
&lt;li&gt;Introduction to semantic databases&lt;/li&gt;
&lt;li&gt;Linked Data in a Graph Database&lt;/li&gt;
&lt;li&gt;Multimedia databases and Information Retrieval&lt;/li&gt;
&lt;li&gt;Using &lt;span class="caps"&gt;XML&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;XML&lt;/span&gt; Schemata&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;YouTube&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Django&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=L3kgyBERw04"&gt;Building a Social Media App With Python 3 and Django&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Landing Page and User Authentication&lt;/li&gt;
&lt;li&gt;Posts and a Social Feed&lt;/li&gt;
&lt;li&gt;Get a Post and the Comment Model&lt;/li&gt;
&lt;li&gt;Edit Posts, Delete Posts, Add Comments&lt;/li&gt;
&lt;li&gt;Profiles&lt;/li&gt;
&lt;li&gt;Followers&lt;/li&gt;
&lt;li&gt;Likes and dislikes&lt;/li&gt;
&lt;li&gt;User search&lt;/li&gt;
&lt;li&gt;Final improvements Part 1&lt;/li&gt;
&lt;li&gt;Final improvements Part 2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Linux&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=HbgzrKJvDRw"&gt;Linux File System Structure Explained&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;p&gt;&lt;a href="https://www.sglavoie.com/learning-progress-2021.html"&gt;2021&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.sglavoie.com/learning-progress-2020.html"&gt;2020&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.sglavoie.com/learning-progress-2019.html"&gt;2019&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.sglavoie.com/learning-progress-2018-earlier.html"&gt;2018 and earlier&lt;/a&gt;&lt;/p&gt;</content><category term="learnings"></category><category term="career"></category></entry><entry><title>Git the gist of it: common commands for a working workflow</title><link href="https://www.sglavoie.com/posts/2022/04/03/git-the-gist-of-it-common-commands-for-a-working-workflow/" rel="alternate"></link><published>2022-04-03T11:21:00-05:00</published><updated>2022-10-31T08:52:00-06:00</updated><author><name>Sébastien Lavoie</name></author><id>tag:www.sglavoie.com,2022-04-03:/posts/2022/04/03/git-the-gist-of-it-common-commands-for-a-working-workflow/</id><summary type="html">&lt;p&gt;&lt;a href="https://git-scm.com/"&gt;Git&lt;/a&gt; is such a fascinating piece of software. It is not the only &lt;a href="https://en.wikipedia.org/wiki/Distributed_version_control"&gt;distributed version control&lt;/a&gt; system out there, but it is certainly ubiquitous in that category and has become a tool that must be mastered by any software developer in the modern&amp;nbsp;era.&lt;/p&gt;</summary><content type="html">
&lt;hr/&gt;
&lt;h1 id="introduction"&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Git, the friend you wish you had met earlier, when organizing files like &lt;code&gt;report 1.pdf&lt;/code&gt;, &lt;code&gt;report 2.pdf&lt;/code&gt; and &lt;code&gt;report final 1.pdf&lt;/code&gt; still made sense somehow. It’s undoubtedly complicated to wrap one’s head around it at first, although there exist some GUIs to make the journey smoother – the best examples that come to mind would include &lt;a href="https://www.gitkraken.com/"&gt;GitKraken&lt;/a&gt; and &lt;a href="https://www.git-tower.com/"&gt;Tower&lt;/a&gt; at the top of the list. I have been advised to learn to use Git from the terminal and I would, without flinching, recommend anyone to do the same to really grok this tool and get an intuitive feel for what it does.&lt;/p&gt;
&lt;p&gt;Beyond the extraordinary technical prowess that it is, Git can be useful to a broad audience. It’s not good at dealing with large binary files (and &lt;a href="https://git-lfs.github.com/"&gt;Git &lt;span class="caps"&gt;LFS&lt;/span&gt;&lt;/a&gt; is not exactly easy to use just yet to cover that case), but for anything involving text that a human can read, it shines – may it be a programming language, some reports written with &lt;a href="https://www.latex-project.org/"&gt;LaTeX&lt;/a&gt;, some diagrams produced with &lt;a href="http://mermaid-js.github.io/mermaid/#/"&gt;Mermaid&lt;/a&gt; or &lt;a href="https://plantuml.com/"&gt;PlantUML&lt;/a&gt;, personal notes taken in plain text or in Markdown or the fact that synchronizing changes made to a project is a breeze and allows ones to work from multiple locations and machines.&lt;/p&gt;
&lt;p&gt;With platforms like &lt;a href="https://github.com/"&gt;GitHub&lt;/a&gt; and &lt;a href="https://about.gitlab.com/"&gt;GitLab&lt;/a&gt;, it is easy to keep a “backup” of projects, which can be either public or private. And despite Git not being awesome with very large files, any smaller binary files like images and &lt;span class="caps"&gt;PDF&lt;/span&gt; files can easily be added to a Git repository, allowing users to keep different versions of these files very easily without using a cloud service such as Dropbox or Google Drive. So even if the original input is not written in a text-friendly manner, the output can still be saved under multiple versions with great details, backed up to different websites and fetched just as conveniently from anywhere else (assuming access has been set up to continue working on a project, or at least one can log in to the website and download files without issue).&lt;/p&gt;
&lt;p&gt;Sure, it is not for everyone, but the use cases just described can go a long way. I have used it to practice solving programming challenges, to document all my project at the university, to keep track of preferences and configuration files for my different systems (Linux and macOS) which I’ve described in &lt;a href="https://www.sglavoie.com/posts/2021/05/30/managing-dotfiles-with-git-bare-repository/"&gt;Managing dotfiles with a Git bare repository&lt;/a&gt;, to work on pet programming projects and coding experiments that I keep private, to store code snippets into a growing library for reference purposes, to take notes in the form of “tutorials” or “wiki” (platforms like GitHub and GitLab have a nice wiki feature that renders prose nicely!) for different tasks I need to do infrequently and of course to build this very website in the open (the source code is &lt;a href="https://github.com/sglavoie/sglavoie.github.io-source"&gt;available on GitHub&lt;/a&gt;)! And that is just describing some of my personal use cases without touching on the fact that collaboration within a team is a huge reason to use it!&lt;/p&gt;
&lt;p&gt;So with that said, let’s explore some of its functionality, starting with a few tips and tricks, then delving deeper into a real-world workflow and topping it off with more useful commands and configuration settings.&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="global-and-local-gitignore"&gt;Global and local &lt;code&gt;.gitignore&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;There are files we never care about adding to Git repositories, such as a thumbnail cache file &lt;code&gt;Thumbs.db&lt;/code&gt; on Windows or a &lt;code&gt;.DS_Store&lt;/code&gt; file storing custom attributes for folders on macOS. Instead of ignoring these kinds of entries in a per-repository &lt;code&gt;.gitignore&lt;/code&gt; file which might not contain everything we would like to exclude, it can be simpler and more efficient to use a global &lt;code&gt;.gitignore&lt;/code&gt;, which serves the same purpose but for &lt;em&gt;any&lt;/em&gt; Git repository regardless of the presence of a &lt;code&gt;.gitignore&lt;/code&gt; in that specific repository! In other words, this serves as a permanent list of things to ignore so that there is no need to remember about them later.&lt;/p&gt;
&lt;p&gt;The setup is straightforward: create a file &lt;code&gt;~/.gitignore&lt;/code&gt;, fill it as usual with patterns you are sure to want to exclude globally and set a configuration option to use that file – for instance by adding the following to &lt;code&gt;.gitconfig&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[core]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;excludesfile&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;~/.gitignore&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href="https://www.toptal.com/"&gt;Toptal&lt;/a&gt; provides &lt;a href="https://docs.gitignore.io/install/command-line"&gt;a nice tool on the command-line&lt;/a&gt; that can be used to easily exclude patterns. With it, typing &lt;code&gt;gi python &amp;gt;&amp;gt; .gitignore&lt;/code&gt; would append a bunch of common patterns to a &lt;code&gt;.gitignore&lt;/code&gt; file – in this case, for Python.&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="meaningful-commit-messages-with-gitmessage"&gt;Meaningful commit messages with &lt;code&gt;.gitmessage&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;Besides using the excellent &lt;a href="https://www.conventionalcommits.org/en/v1.0.0/"&gt;Conventional Commits&lt;/a&gt; specification to write messages in a format that makes sense to other fellow human beings, using a template for Git commits can help with remembering &lt;em&gt;why&lt;/em&gt; commits are made and how they should be structured. There is a configuration setting, &lt;code&gt;commit.template&lt;/code&gt;, that can be used to set the default text being displayed when a text editor opens after typing &lt;code&gt;git commit&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The following is the current template I use, which can be saved in a file like &lt;code&gt;~/.gitmessage&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# [Add/Fix/Remove/Update/Refactor/Document] [summary]


# Why is it necessary? (Bug fix, feature, improvements?)
#-
# How does the change address the issue?
#-
# What side effects does this change have?
#-
# Include a link to the ticket, if any.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then, this can be added to the config file under the &lt;code&gt;[commit]&lt;/code&gt; section like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[commit]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;~/.gitmessage&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All lines starting with a hash symbol (&lt;code&gt;#&lt;/code&gt;) will be ignored, so there is no need to manually delete all of this verbose content when saving the commit message. Sweet!&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="my-usual-git-workflow"&gt;My usual Git workflow&lt;/h1&gt;
&lt;p&gt;This section depends very much on team standards, if applicable. But in general terms and considering mostly a solo interaction with Git, I like to adhere to the following processes, without taking into account how one would plan, produce diagrams, brainstorm, etc. That shall be the topic of an upcoming post!&lt;/p&gt;
&lt;h2 id="starting-a-new-project"&gt;Starting a new project&lt;/h2&gt;
&lt;p&gt;There are different ways to proceed, although I like the simplicity of just creating a new empty repository on GitHub and cloning it on my machine using the &lt;span class="caps"&gt;SSH&lt;/span&gt; protocol, e.g. &lt;code&gt;git clone git@github.com:some/project.git&lt;/code&gt;. This has the benefit of automatically setting the &lt;code&gt;main&lt;/code&gt; branch and the remote &lt;span class="caps"&gt;URL&lt;/span&gt;, using &lt;code&gt;origin&lt;/code&gt; as the default remote. Cloning an empty repository has the same effect as starting with &lt;code&gt;git init&lt;/code&gt;, so this also becomes unnecessary.&lt;/p&gt;
&lt;p&gt;If I have been experimenting locally first, I would do a &lt;code&gt;git init&lt;/code&gt;, commit any changes and then push the new repository on GitHub, either using the great Git integration provided by &lt;span class="caps"&gt;VS&lt;/span&gt; Code or again creating a new repository on GitHub to set the remote &lt;span class="caps"&gt;URL&lt;/span&gt; in order to be able to push local changes, i.e. by doing &lt;code&gt;git remote add origin git@github.com:some/project.git&lt;/code&gt; and then pushing to that new &lt;span class="caps"&gt;URL&lt;/span&gt;. To make sure that my default branch is always &lt;code&gt;main&lt;/code&gt; (to match the new default on GitHub) and not something like &lt;code&gt;dev&lt;/code&gt; or &lt;code&gt;master&lt;/code&gt;, I have a Git template lying around that ensures that the first branch created when doing &lt;code&gt;git init&lt;/code&gt; will be &lt;code&gt;main&lt;/code&gt;. It is as simple as creating the file &lt;code&gt;~/.git-templates/HEAD&lt;/code&gt; with this content:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ref: refs/heads/main
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then, in &lt;code&gt;~/.gitconfig&lt;/code&gt;, the following section is used to read the templates:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[init]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;defaultBranch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;main&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;templateDir&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;~/.git-templates&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I have this template since before &lt;code&gt;init.defaultBranch&lt;/code&gt; was introduced in Git 2.28.0 back in July 2020: now just having the option &lt;code&gt;defaultBranch&lt;/code&gt; will do the trick. Still, it’s good to have a &lt;code&gt;templateDir&lt;/code&gt; configured for other purposes! Although admittedly, I don’t use them at all and would rather create a custom command to more easily script what I need for each repository: more on this in the section &lt;a href="#custom-git-sub-commands"&gt;Custom Git sub-commands&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="committing-to-an-existing-project"&gt;Committing to an existing project&lt;/h2&gt;
&lt;p&gt;Now that there is some folder set up for Git to track files, it’s time to make changes! I’m a big fan of committing “small and often” because Git is super flexible and updating the history is usually a simple process – unless you have pushed to a remote repository used by other people, in which case being a “force push” type of person won’t make you many friends. May the &lt;code&gt;--force&lt;/code&gt; be with you when you push to a private repository where you’re the only contributor, otherwise, it’s good practice to think twice before sending your final changes away as you should not mess up with public history (and depending on how your access is set up within a team, you might not even be able to use the &lt;code&gt;--force&lt;/code&gt; flag when pushing on certain branches!).&lt;/p&gt;
&lt;p&gt;So what’s the alternative to constantly rewriting history in a harmful way? Well, assuming you have a choice when working alone for instance, there are two main contenders: &lt;em&gt;merge&lt;/em&gt; vs &lt;em&gt;rebase&lt;/em&gt;. I think neither option is better than the other when used right, but it’s good to know that &lt;em&gt;rebase&lt;/em&gt; might create possible headaches because it modifies the Git history while &lt;em&gt;merge&lt;/em&gt; might create undesirable noise when used profusely by adding “merge commits”. I use both techniques, but for different purposes.&lt;/p&gt;
&lt;h3 id="being-committed"&gt;Being committed&lt;/h3&gt;
&lt;p&gt;The basic workflow might look like this, with a couple of different options thrown in to cover more scenarios:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Check the current state of the repo&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;status

&lt;span class="c1"&gt;# Inspect the changes to commit (before staging)&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;diff

&lt;span class="c1"&gt;# Stage a file to be committed&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;SOME_FILE

&lt;span class="c1"&gt;# Stage all new/modified files, (i.e., --all)&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;-A

&lt;span class="c1"&gt;# Stage all modified files (not any new ones, i.e., --update)&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;-u

&lt;span class="c1"&gt;# Get fancy with adding patches only (part of files)&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;-p

&lt;span class="c1"&gt;# Undo changes done to a tracked file&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;restore&lt;span class="w"&gt; &lt;/span&gt;--&lt;span class="w"&gt; &lt;/span&gt;FILE_NAME

&lt;span class="c1"&gt;# Inspect staged changes to commit&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;diff&lt;span class="w"&gt; &lt;/span&gt;--staged

&lt;span class="c1"&gt;# Unstage files&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;reset&lt;span class="w"&gt; &lt;/span&gt;HEAD&lt;span class="w"&gt; &lt;/span&gt;--

&lt;span class="c1"&gt;# or just 'git commit' to open a text editor&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;commit&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"SOME_MESSAGE"&lt;/span&gt;

&lt;span class="c1"&gt;# See the changes done in the latest commit&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;show

&lt;span class="c1"&gt;# or a specific commit hash from earlier&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;show&lt;span class="w"&gt; &lt;/span&gt;COMMIT_HASH&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# or ref like HEAD^&lt;/span&gt;

&lt;span class="c1"&gt;# Forgot to add something?&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;SOME_OTHER_FILE
git&lt;span class="w"&gt; &lt;/span&gt;commit&lt;span class="w"&gt; &lt;/span&gt;--amend&lt;span class="w"&gt; &lt;/span&gt;--no-edit

&lt;span class="c1"&gt;# Want to rephrase the last commit?&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;commit&lt;span class="w"&gt; &lt;/span&gt;--amend

&lt;span class="c1"&gt;# Tag the latest commit&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;tag&lt;span class="w"&gt; &lt;/span&gt;TAG_NAME

&lt;span class="c1"&gt;# Tag earlier commit with annotation&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;tag&lt;span class="w"&gt; &lt;/span&gt;-a&lt;span class="w"&gt; &lt;/span&gt;TAG_NAME&lt;span class="w"&gt; &lt;/span&gt;COMMIT_HASH&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"MESSAGE"&lt;/span&gt;

&lt;span class="c1"&gt;# Undo a commit, keeping changes in the work tree&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;reset&lt;span class="w"&gt; &lt;/span&gt;HEAD^

&lt;span class="c1"&gt;# Undo a commit and DO NOT keep changes&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;reset&lt;span class="w"&gt; &lt;/span&gt;--hard&lt;span class="w"&gt; &lt;/span&gt;HEAD^

&lt;span class="c1"&gt;# Oops, get back a commit that was "lost"&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;reflog&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# find the relevant commit hash&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;cherry-pick&lt;span class="w"&gt; &lt;/span&gt;COMMIT_HASH&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# or git checkout COMMIT_HASH&lt;/span&gt;

&lt;span class="c1"&gt;# Explore the repo at an earlier commit&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;checkout&lt;span class="w"&gt; &lt;/span&gt;COMMIT_HASH

&lt;span class="c1"&gt;# Committed some changes while checking out an old commit?&lt;/span&gt;
&lt;span class="c1"&gt;# Save the changes to a new branch, then potentially merge them back&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;switch&lt;span class="w"&gt; &lt;/span&gt;-c&lt;span class="w"&gt; &lt;/span&gt;NEW_BRANCH_NAME
git&lt;span class="w"&gt; &lt;/span&gt;switch&lt;span class="w"&gt; &lt;/span&gt;OTHER_BRANCH
git&lt;span class="w"&gt; &lt;/span&gt;merge&lt;span class="w"&gt; &lt;/span&gt;NEW_BRANCH_NAME

&lt;span class="c1"&gt;# Undo a merge&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;reflog&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# find the commit hash before the merge&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;reset&lt;span class="w"&gt; &lt;/span&gt;--hard&lt;span class="w"&gt; &lt;/span&gt;COMMIT_HASH

&lt;span class="c1"&gt;# Or undo to a known point from a remote branch&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;reset&lt;span class="w"&gt; &lt;/span&gt;--hard&lt;span class="w"&gt; &lt;/span&gt;origin/main

&lt;span class="c1"&gt;# Stop tracking a file/directory (remove) but keep it on disk&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;rm&lt;span class="w"&gt; &lt;/span&gt;--cached&lt;span class="w"&gt; &lt;/span&gt;FILE_OR_DIRECTORY

&lt;span class="c1"&gt;# Remove stuff that hasn't been committed yet (interactive mode is nice)&lt;/span&gt;
&lt;span class="c1"&gt;# Don't forget about -n for a dry run first!&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;clean&lt;span class="w"&gt; &lt;/span&gt;-i

&lt;span class="c1"&gt;# Want to undo a change that's already pushed?&lt;/span&gt;
&lt;span class="c1"&gt;# Add a new commit without rewriting history&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;revert&lt;span class="w"&gt; &lt;/span&gt;COMMIT_HASH

&lt;span class="c1"&gt;# See who did what to which file and when&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;blame&lt;span class="w"&gt; &lt;/span&gt;FILE_NAME
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Arguably, basic editing doesn’t require stashing, but that can be helpful for a quick modification, like temporarily saving changes to quickly switch to another branch or pull some remote changes without having to commit first.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# git stash --help - "Stash the changes in a dirty working directory away"&lt;/span&gt;

&lt;span class="c1"&gt;# Maybe you want to keep changes around without committing&lt;/span&gt;
&lt;span class="c1"&gt;# --include-untracked and --keep-index might be needed!&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;stash

&lt;span class="c1"&gt;# Stash changes with a clearer name/purpose&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;stash&lt;span class="w"&gt; &lt;/span&gt;save&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"SOME MESSAGE"&lt;/span&gt;

&lt;span class="c1"&gt;# Selectively stash changes (keep specific lines)&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;stash&lt;span class="w"&gt; &lt;/span&gt;save&lt;span class="w"&gt; &lt;/span&gt;-p

&lt;span class="c1"&gt;# List existing stashes&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;stash&lt;span class="w"&gt; &lt;/span&gt;list

&lt;span class="c1"&gt;# See the summary of a stash&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;stash&lt;span class="w"&gt; &lt;/span&gt;show

&lt;span class="c1"&gt;# See all changes made in a stash (patch)&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;stash&lt;span class="w"&gt; &lt;/span&gt;show&lt;span class="w"&gt; &lt;/span&gt;-p

&lt;span class="c1"&gt;# Apply changes from a stash (TAB completion after `apply` is useful)&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;stash&lt;span class="w"&gt; &lt;/span&gt;apply&lt;span class="w"&gt; &lt;/span&gt;stash@&lt;span class="se"&gt;\{&lt;/span&gt;SOME_ID&lt;span class="se"&gt;\}&lt;/span&gt;

&lt;span class="c1"&gt;# Apply and remove the last stash at the same time&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;stash&lt;span class="w"&gt; &lt;/span&gt;pop

&lt;span class="c1"&gt;# Remove a single stash&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;stash&lt;span class="w"&gt; &lt;/span&gt;drop&lt;span class="w"&gt; &lt;/span&gt;stash@&lt;span class="se"&gt;\{&lt;/span&gt;SOME_ID&lt;span class="se"&gt;\}&lt;/span&gt;

&lt;span class="c1"&gt;# Remove all stashes&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;stash&lt;span class="w"&gt; &lt;/span&gt;clear
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="rebase"&gt;&lt;code&gt;rebase&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;When working locally with changes that are not yet part of the “permanent” Git history, I like to &lt;code&gt;git rebase&lt;/code&gt; very much to clean things up before making a &lt;code&gt;git push&lt;/code&gt;, which I like to view as an irrevocable decision. Because I &lt;em&gt;commit small and often&lt;/em&gt;, it’s often the case that I end up with a couple of very simple commits which really belong together and should form a bigger commit. While committing a big chunk of code at once avoids having to do any &lt;code&gt;rebase&lt;/code&gt; in the first place, it’s also inconvenient to undo a substantial amount of work when you’re experimenting and/or working on an unfamiliar codebase. So in the end, my preference goes towards smaller commits because rebasing is actually fun to do and lets you believe that you came up with brilliant solutions on your first attempt :). That makes for a cleaner Git history for sure, although you will lose some context if you never &lt;code&gt;merge&lt;/code&gt;. Meaning, rebasing creates a “linear” history while merging from different branches shows a more complete picture of how a repository really took shape over time. My simple rule of thumb on the matter is this: use &lt;code&gt;rebase&lt;/code&gt; to consistently ship meaningful commits (good descriptions, fewer typos, changes chunked logically and precisely, etc.) and use &lt;code&gt;merge&lt;/code&gt; to incorporate somewhat larger pieces of history, like a new feature coming from a “feature branch”.&lt;/p&gt;
&lt;p&gt;Some common commands I use:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# git rebase --help - "Reapply commits on top of another base tip"&lt;/span&gt;

&lt;span class="c1"&gt;# Include all commits up to COMMIT_HASH, included&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;rebase&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;COMMIT_HASH^

&lt;span class="c1"&gt;# Include most recent commit only&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;rebase&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;HEAD^

&lt;span class="c1"&gt;# Include 2 most recent commits&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;rebase&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;HEAD^^

&lt;span class="c1"&gt;# Include 3 most recent commits&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;rebase&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;HEAD~3

&lt;span class="c1"&gt;# make BRANCH have the history up to COMMIT_OR_BRANCH, included&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;rebase&lt;span class="w"&gt; &lt;/span&gt;COMMIT_OR_BRANCH&lt;span class="w"&gt; &lt;/span&gt;BRANCH

&lt;span class="c1"&gt;# Used after resolving a conflict&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;rebase&lt;span class="w"&gt; &lt;/span&gt;--continue

&lt;span class="c1"&gt;# Reset to where you were before rebasing (move HEAD)&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;rebase&lt;span class="w"&gt; &lt;/span&gt;--abort

&lt;span class="c1"&gt;# To update the next actions to be taken on the remaining commits&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;rebase&lt;span class="w"&gt; &lt;/span&gt;--edit-todo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There are a bunch of obscure options just like almost any other Git command in existence, but for that there is help available for each command (such as &lt;code&gt;git rebase --help&lt;/code&gt;) from the terminal and the trusty Stack Overflow ;).&lt;/p&gt;
&lt;h4 id="sample-workflow"&gt;Sample workflow&lt;/h4&gt;
&lt;p&gt;In the case of &lt;code&gt;rebase&lt;/code&gt;, I enjoy working in this way:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Make small commits, maybe 5 to 10 depending on the complexity of the project – usually as long as a series of commits relates to a single topic whenever possible.&lt;/li&gt;
&lt;li&gt;Have a peak at the recent history with &lt;code&gt;git log&lt;/code&gt; to have a good idea of what just happened.&lt;/li&gt;
&lt;li&gt;Realize that the history can be improved. Find the oldest commit hash (not pushed yet!), take note of it and run &lt;code&gt;git rebase -i COMMIT_HASH^&lt;/code&gt; (with the “hat” &lt;code&gt;^&lt;/code&gt; at the end to reference the parent of that commit).&lt;/li&gt;
&lt;li&gt;This opens up a text editor with some explanations on how to proceed (for more on this, have a look at this great article on &lt;a href="https://www.atlassian.com/git/tutorials/rewriting-history"&gt;Rewriting history&lt;/a&gt;). From there, I usually use &lt;code&gt;r&lt;/code&gt; to reword, &lt;code&gt;s&lt;/code&gt; to squash, &lt;code&gt;e&lt;/code&gt; to edit and sometimes &lt;code&gt;f&lt;/code&gt; to fixup, besides also re-ordering commits and from time to time deleting one by removing the line entirely.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;r&lt;/code&gt; is pretty harmless as it will just show up a new window where the commit message and description can be modified.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s&lt;/code&gt; is more destructive because commits will be “merged” together! No actual change is lost, but if you squash a ton of commits by accident, it will create huge commits and you might want to undo that with &lt;code&gt;reflog&lt;/code&gt; before it’s too late (Atlassian has more to say about this in &lt;a href="https://www.atlassian.com/git/tutorials/rewriting-history/git-reflog"&gt;git reflog&lt;/a&gt;). The &lt;code&gt;s&lt;/code&gt; option is also nice because it keeps all commit messages, so you can edit the final log message as needed without discarding messages.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;e&lt;/code&gt; is used to modify the actual source code being committed, maybe to fix a typo or a minor bug after realizing that the test suite no longer passes (assuming you are not programming blindly without tests :)). This can cause some “conflicts” if you change some lines which are also part of other commits in the selection you made originally, so one has to be careful with that. This can also be used in conjunction with &lt;code&gt;git reset HEAD^&lt;/code&gt; to “cancel” the current commit when doing the rebase in order to split it into multiple smaller commits, which can then be “&lt;code&gt;git add&lt;/code&gt;ed” back, followed by a &lt;code&gt;git rebase --continue&lt;/code&gt; to keep going.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;f&lt;/code&gt; is a quick way of squashing commits together while discarding messages you don’t need. So maybe the last commit has a proper description (“Implemented something…”) and a few commits before that one were just temporary “savepoints” with non-sensical commit messages (things like “testing…” or “new commit”) that were done until you reached a final solution that’s worth committing. So of course in that case the history would be pretty ugly and hard to understand if all commits were kept intact, so these can be added to the latest change which encompasses a working solution as a whole. Just as well, maybe that last commit didn’t have a complete message just yet, so it could also be rewritten with the &lt;code&gt;r&lt;/code&gt; prefix.&lt;/li&gt;
&lt;li&gt;When individual commits make the &lt;code&gt;rebase&lt;/code&gt; stop temporarily (such as when a commit is to be edited with &lt;code&gt;e&lt;/code&gt; and waits for changes to be made), then it’s time to do &lt;code&gt;git rebase --continue&lt;/code&gt; once the necessary changes are made.&lt;/li&gt;
&lt;li&gt;If something goes wrong along the way, there’s always a way back to the place you were right before rebasing with &lt;code&gt;git rebase --abort&lt;/code&gt;. It’s worth noting that Git itself will output some useful messages all along so it’s not necessary to remember all of this: it quickly becomes intuitive.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now, &lt;code&gt;rebase&lt;/code&gt; covers the cases where local changes are done in isolation, but for something more imposing or simply to keep track of what happened in which branch, &lt;code&gt;merge&lt;/code&gt; remains a powerful ally.&lt;/p&gt;
&lt;h3 id="merge"&gt;&lt;code&gt;merge&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;So I don’t use &lt;code&gt;merge&lt;/code&gt; as much, especially when working solo, but it is undeniably useful and could replace the &lt;code&gt;rebase&lt;/code&gt; workflow completely (it might also be demanded by your colleagues anyways!). There’s nothing like a good &lt;code&gt;rebase&lt;/code&gt; session to keep things tidy, but a flat history line won’t look attractive on a huge project with many contributors, so &lt;code&gt;merge&lt;/code&gt; is there to deal with cleanly integrating changes from different places into some &lt;code&gt;main&lt;/code&gt; branch (it could be named differently based on the team workflow of course and there might be more than one “main” branch too). What makes &lt;code&gt;merge&lt;/code&gt; incredibly cool is the fact that branches in Git are “cheap”, meaning they can be created very quickly and efficiently, they don’t take space at all, you could have dozens of branches or more and you can incorporate changes from one branch to another with a simple &lt;code&gt;git merge&lt;/code&gt;, which is nicer than using &lt;code&gt;git cherry-pick&lt;/code&gt; to get multiple commits from one branch into another (for one or two commits though, &lt;code&gt;cherry-pick&lt;/code&gt; is handy).&lt;/p&gt;
&lt;p&gt;I see &lt;code&gt;rebase&lt;/code&gt; more like a cleaning step while &lt;code&gt;merge&lt;/code&gt; really shines when dealing with multiple commits between different branches. Even on a simple project when working alone, it has its uses! For example, let’s say we have a repository full of small programming challenges (maybe from &lt;a href="https://www.hackerrank.com/"&gt;HackerRank&lt;/a&gt; or &lt;a href="https://leetcode.com/"&gt;LeetCode&lt;/a&gt;). We might get stuck on a tricky problem and wouldn’t want to commit an unfinished solution. Also, maybe we would get fed up eventually working on a given challenge and would rather try our luck with a different one. Well, we can always leave changes uncommitted (not very safe as these might be lost!), but that can cause confusion and you might inadvertently end up committing files that have nothing to do with the latest challenge – effectively committing at the same time your unfinished challenge with the one you just completed. There’s always the possibility to &lt;code&gt;git stash&lt;/code&gt; individual files to keep them somewhere, but I find working with stashes to be a bit more cumbersome than branches and you might literally forget that you have changes stashed. If you do that a few times, you might not even know which stash is what if you didn’t give them a good name…&lt;/p&gt;
&lt;p&gt;Some common commands I use:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# git merge --help - "Join two or more development histories together"&lt;/span&gt;

&lt;span class="c1"&gt;# Get commits from BRANCH_NAME into the currently checked one&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;merge&lt;span class="w"&gt; &lt;/span&gt;BRANCH_NAME

&lt;span class="c1"&gt;# Merge one branch into another&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;merge&lt;span class="w"&gt; &lt;/span&gt;SOURCE_BRANCH_NAME&lt;span class="w"&gt; &lt;/span&gt;DESTINATION_BRANCH_NAME

&lt;span class="c1"&gt;# Get out of conflicts...&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;merge&lt;span class="w"&gt; &lt;/span&gt;--abort

&lt;span class="c1"&gt;# Continue after resolving conflicts&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;merge&lt;span class="w"&gt; &lt;/span&gt;--continue

&lt;span class="c1"&gt;# Keep the "merge commit" in the history&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;merge&lt;span class="w"&gt; &lt;/span&gt;--no-ff&lt;span class="w"&gt; &lt;/span&gt;BRANCH_NAME

&lt;span class="c1"&gt;# Set a custom commit message for a "merge commit"&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;merge&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"MESSAGE"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;BRANCH
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;sub&gt;Tip: The command &lt;code&gt;git merge --help&lt;/code&gt; describes some nice examples about the whole process of conflict resolution.&lt;/sub&gt;&lt;/p&gt;
&lt;h4 id="sample-workflow-kinda"&gt;Sample workflow (kinda)&lt;/h4&gt;
&lt;p&gt;So, instead of risking losing changes like this, creating a new branch with &lt;code&gt;git switch -c BRANCH_NAME&lt;/code&gt; and working from there is much easier to confine changes to a specific matter, which we can see like a “feature” that can later be added to the main “trunk”. We can commit unfinished business, switch to a different branch, come back to it later, &lt;code&gt;git reset&lt;/code&gt; any old commit to “revert” the history and keep working from a clean state. In any case, there’s always &lt;code&gt;rebase&lt;/code&gt; to avoid committing useless stuff, so there’s really no reason to avoid branches.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;merge&lt;/code&gt; command will be involved when changes from a “feature branch” (or whatever other purpose you give a branch) are merged into the main branch with &lt;code&gt;git merge BRANCH_NAME&lt;/code&gt;. When there are no “merge conflicts” (such as when you work on a totally new file that won’t clash with prior work), this is a seamless workflow where you can just &lt;code&gt;merge&lt;/code&gt; as if changes were made in the branch you are on in the first place. There are other instances where bigger changes can be merged successfully in the same way, but it’s interesting to keep track of how you worked on a project, so in this scenario you can always use &lt;code&gt;git merge --no-ff BRANCH_NAME&lt;/code&gt; (&lt;code&gt;--no-ff&lt;/code&gt; meaning “&lt;em&gt;no fast-forward&lt;/em&gt;“) to keep a “&lt;em&gt;merge commit&lt;/em&gt;“, which is strictly speaking not needed (because there’s no conflict resolution in the case of a “successful” merge) but can be a helpful reference point when you look back at your Git history two years from now to understand how you worked on something, piecing things together bit by bit.&lt;/p&gt;
&lt;p&gt;There’s also an indisputable advantage conferred by the use of branches, which is: &lt;em&gt;you can have plenty of them&lt;/em&gt;! So while &lt;code&gt;rebase&lt;/code&gt; is nice to use on a given branch, in no way can working on multiple things at once in a single branch and then rebasing all that effort be as straightforward as creating new branches for every new topic that’s being started and then merging it back into a single place of truth. Juggling different concerns in a single branch where you have a few things going on (maybe 2-3 partially implemented features) is far from being a cozy environment and rebasing that kind of work where commits are not even related to each other can become a nightmare in a short amount of time.&lt;/p&gt;
&lt;h2 id="managing-branches"&gt;Managing branches&lt;/h2&gt;
&lt;p&gt;So with all that was written earlier, I believe a point was made in favour of using branches. Because branches are such a wonderful feature of Git, here are some more commands I rely on (surprisingly, there aren’t that many for &lt;code&gt;git branch&lt;/code&gt;!):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# git branch --help - "List, create, or delete branches"&lt;/span&gt;

&lt;span class="c1"&gt;# List local branches&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;branch

&lt;span class="c1"&gt;# List only remote branches&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;branch&lt;span class="w"&gt; &lt;/span&gt;-r

&lt;span class="c1"&gt;# List all branches&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;branch&lt;span class="w"&gt; &lt;/span&gt;-a

&lt;span class="c1"&gt;# Delete a branch&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;branch&lt;span class="w"&gt; &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;BRANCH_NAME

&lt;span class="c1"&gt;# Delete a branch forcefully&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;branch&lt;span class="w"&gt; &lt;/span&gt;-D&lt;span class="w"&gt; &lt;/span&gt;BRANCH_NAME

&lt;span class="c1"&gt;# Delete a remote branch (doesn't matter if the local branch was deleted)&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;push&lt;span class="w"&gt; &lt;/span&gt;origin&lt;span class="w"&gt; &lt;/span&gt;--delete&lt;span class="w"&gt; &lt;/span&gt;REMOTE_NAME/BRANCH_NAME

&lt;span class="c1"&gt;# Rename a branch&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;branch&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;BRANCH_NAME&lt;span class="w"&gt; &lt;/span&gt;NEW_BRANCH_NAME

&lt;span class="c1"&gt;# Track a specific remote branch&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;branch&lt;span class="w"&gt; &lt;/span&gt;BRANCH_NAME&lt;span class="w"&gt; &lt;/span&gt;-u&lt;span class="w"&gt; &lt;/span&gt;UPSTREAM_NAME

&lt;span class="c1"&gt;# See which branches have been merged or not&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;branch&lt;span class="w"&gt; &lt;/span&gt;--merged
git&lt;span class="w"&gt; &lt;/span&gt;branch&lt;span class="w"&gt; &lt;/span&gt;--no-merged

&lt;span class="c1"&gt;# Switch to the branch last checked out&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;checkout&lt;span class="w"&gt; &lt;/span&gt;-

&lt;span class="c1"&gt;# Compare changes between branches&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;diff&lt;span class="w"&gt; &lt;/span&gt;BRANCH_ONE..BRANCH_TWO

&lt;span class="c1"&gt;# Compare a file across branches&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;diff&lt;span class="w"&gt; &lt;/span&gt;BRANCH_ONE:FILE_NAME&lt;span class="w"&gt; &lt;/span&gt;BRANCH_TWO:FILE_NAME

&lt;span class="c1"&gt;# See a file from another branch&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;show&lt;span class="w"&gt; &lt;/span&gt;BRANCH_NAME:FILE_NAME

&lt;span class="c1"&gt;# Get a file from a different branch&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;restore&lt;span class="w"&gt; &lt;/span&gt;--source&lt;span class="w"&gt; &lt;/span&gt;OTHER_BRANCH_NAME&lt;span class="w"&gt; &lt;/span&gt;path/to/file.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h1 id="aliases"&gt;Aliases&lt;/h1&gt;
&lt;p&gt;While I believe it’s good practice to type complete commands to remember them better, I also tend to use Git aliases for two reasons: because some deeply ingrained concepts don’t need as much reinforcement and because some obscure operations can be made so much more accessible with a pertinent mnemonic device.&lt;/p&gt;
&lt;p&gt;Some commands like &lt;code&gt;add&lt;/code&gt; just become unforgettable over time, while others – e.g., &lt;code&gt;unstage&lt;/code&gt; – just don’t exist yet. Without further ado, here is a list of the aliases I currently rely on when using Git, which comes straight from &lt;code&gt;~/.gitconfig&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For instance, instead of typing &lt;code&gt;git add&lt;/code&gt;, by setting the alias &lt;code&gt;a = add&lt;/code&gt; (see below), it is now possible to type &lt;code&gt;git a&lt;/code&gt; to get the same result.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[alias]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;add&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;br&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;branch&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;commit&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;ca&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;commit --amend&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;can&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;commit --amend --no-edit&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;ch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;checkout&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;d&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;diff&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;ds&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;diff --staged&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;po&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;push origin&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;pos&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;push --set-upstream origin main&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;rc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;rebase --continue&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;ri&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;rebase -i&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;rl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;reflog&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;sh&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;show&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;s&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;status --short&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;st&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;status&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;sw&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;switch&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;tag&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;unstage&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;reset HEAD --&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;; show changes since last commit&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;difflast&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;diff --cached HEAD^&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;; show last commit&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;last&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;l -1 HEAD&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;; undo last commit&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;undo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"!f() { git reset --hard $(git rev-parse &lt;/span&gt;\
&lt;span class="s"&gt;--abbrev-ref HEAD)@{${1-1}}; }; f"&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;l&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;log&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;; short log&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;sl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;shortlog&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;; log graph&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;lg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;l --color --graph --pretty=format:'%Cred%h%Creset &lt;/span&gt;\
&lt;span class="s"&gt;-%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&amp;lt;%an&amp;gt;%Creset' --abbrev-commit&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;; log name&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;ln&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;l --name-only&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;; log decorate all&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;logda&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;l --oneline --decorate --graph --all&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;; log stat&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;ls&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;l --stat&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;; log pretty&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;lp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;log --pretty='%C(yellow)%h %C(cyan)%ad %Cblue%aN%C(auto)%d &lt;/span&gt;\
&lt;span class="s"&gt;%Creset%s' --date=relative --date-order --graph&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;At some point, using Git aliases will become second nature, but until then, it can be useful to have a separate terminal alias to list them all (or maybe you forgot the command an alias is using under the hood!). For this, you can set the following alias in a file like &lt;code&gt;~/.bash_aliases&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;gitaliases&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'git config -l | grep alias | sed "s/^alias\.//g"'&lt;/span&gt;

&lt;span class="c1"&gt;# For a fancier version displaying aliases in two columns neatly aligned:&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;gitaliases&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'git config -l | grep alias | sed "s/^alias\.//g" \&lt;/span&gt;
&lt;span class="s1"&gt;  | sed "s/=/Ω/" | column -t -s "Ω"'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That command will look in the Git configuration, extract all the lines containing “alias” and remove the “&lt;code&gt;alias.&lt;/code&gt;” prefix so that you can see all aliases in the form &lt;code&gt;a=add&lt;/code&gt; in the case of &lt;code&gt;git add&lt;/code&gt; being aliased to &lt;code&gt;git a&lt;/code&gt;. If you have a ton of aliases (which is probably a red flag…), finding a specific one is just a matter of doing &lt;code&gt;gitaliases | grep keyword&lt;/code&gt;, of course replacing &lt;code&gt;keyword&lt;/code&gt; with something else ;).&lt;/p&gt;
&lt;p&gt;&lt;sub&gt;Tip: One can go further to shorten Git commands by shortening &lt;code&gt;git&lt;/code&gt; itself! You can put a line such as &lt;code&gt;alias g='git'&lt;/code&gt; in &lt;code&gt;~/.bash_aliases&lt;/code&gt; for instance. Now, &lt;code&gt;git add&lt;/code&gt; can become &lt;code&gt;g a&lt;/code&gt;. Pretty efficient! For more on Bash aliases, you might like to read &lt;a href="https://www.sglavoie.com/posts/2018/12/08/aliases-also-known-as-terminal-users-best-friends/"&gt;Aliases: Also Known as Terminal User’s Best Friends&lt;/a&gt;.&lt;/sub&gt;&lt;/p&gt;
&lt;p&gt;This section is really just meant to give a taste of the possibilities that aliases offer. To learn about actual commands and their usage, there is nothing like the &lt;a href="https://git-scm.com/docs"&gt;official Git docs&lt;/a&gt; (there is a &lt;a href="https://git-scm.com/book/en/v2/Git-Basics-Git-Aliases"&gt;short section on Git aliases&lt;/a&gt; too).&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="custom-git-sub-commands"&gt;Custom Git sub-commands&lt;/h1&gt;
&lt;p&gt;There might be less of a need for custom-made commands to be created when so much can be done with Git alone, but there are cases where these custom additions can shine! As a concrete example, I have been updating this website with what I call my “&lt;a href="https://www.sglavoie.com/posts/2022/06/18/what-it-took-to-propel-a-career-in-tech-in-five-years/"&gt;learning progress&lt;/a&gt;” but committing always the same kind of stuff gets boring, so I have created a simple Bash script to automate the process of publishing and committing (the content of the script is of no importance, it is only there to demonstrate that commands other than Git can be called too):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="c1"&gt;# Act as custom command `git addlearning` and perform all that follows&lt;/span&gt;
&lt;span class="c1"&gt;# Assumes that `pelican` command is available&lt;/span&gt;
&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;~/dev/sglavoie/sglavoie.github.io-source
git&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;.
git&lt;span class="w"&gt; &lt;/span&gt;commit&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Add learning progress"&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;push&lt;span class="w"&gt; &lt;/span&gt;origin&lt;span class="w"&gt; &lt;/span&gt;main
pelican

cp&lt;span class="w"&gt; &lt;/span&gt;-r&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;~/dev/sglavoie/sglavoie.github.io-source/output/*&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;~/dev/sglavoie/sglavoie.github.io/&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;~/dev/sglavoie/sglavoie.github.io&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;.
git&lt;span class="w"&gt; &lt;/span&gt;commit&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Add learning progress"&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;push&lt;span class="w"&gt; &lt;/span&gt;origin&lt;span class="w"&gt; &lt;/span&gt;main
&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;~/dev/sglavoie/sglavoie.github.io-source
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It is noteworthy to know that any kind of executable programs can be used, such as Ruby, Python and so on, as long as they are made available in the &lt;code&gt;$PATH&lt;/code&gt;. This will be somewhat similar on most &lt;span class="caps"&gt;UNIX&lt;/span&gt;-based system where the &lt;code&gt;PATH&lt;/code&gt; variable needs to be exported (usually in a file like &lt;code&gt;.bashrc&lt;/code&gt; or &lt;code&gt;.zshrc&lt;/code&gt;), for instance:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# $HOME refers to a place like /home/user on Linux or /Users/user on macOS&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;&lt;span class="s2"&gt;/dev/git-scripts:&lt;/span&gt;&lt;span class="nv"&gt;$PATH&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;On Windows, there are &lt;a href="https://superuser.com/a/143121/1032549"&gt;separate instructions to be followed&lt;/a&gt;. With that done, there’s also a need to make sure the file is executable, which can be done on the command-line with &lt;code&gt;chmod +x FILENAME_HERE&lt;/code&gt;.&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="some-lesser-known-yet-incredibly-useful-commands"&gt;Some lesser-known yet incredibly useful commands&lt;/h1&gt;
&lt;h2 id="git-bisect"&gt;&lt;code&gt;git bisect&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;I try to commit working code as often as possible, but sometimes there are just bugs that have flown by and took residence in the codebase a long time ago. In this scenario, there is one tool in the Git tool belt for that very specific use case: &lt;code&gt;git bisect&lt;/code&gt;. Working with the &lt;a href="https://en.wikipedia.org/wiki/Binary_search_algorithm"&gt;binary search algorithm&lt;/a&gt;, &lt;code&gt;git bisect&lt;/code&gt; searches in a range of commits and by identifying “good” and “bad” commits, will pinpoint exactly where the issue came from in the minimum number of iterations possible. You’ll need sub-commands like &lt;code&gt;start&lt;/code&gt;, &lt;code&gt;bad&lt;/code&gt;, &lt;code&gt;good&lt;/code&gt; and &lt;code&gt;reset&lt;/code&gt; at the very least and for more advanced use cases where automatically running a script for each commit is needed, &lt;code&gt;run&lt;/code&gt; will do the job. See &lt;a href="https://git-scm.com/docs/git-bisect"&gt;the docs on &lt;code&gt;git bisect&lt;/code&gt;&lt;/a&gt; for more.&lt;/p&gt;
&lt;h2 id="git-rerere"&gt;&lt;code&gt;git rerere&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;I almost never use this in practice, but it &lt;em&gt;can&lt;/em&gt; be very useful when working in a large project where similar merge conflicts are likely to occur over time. Git can be “taught” to automatically solve merge conflicts! There are some &lt;a href="https://git-scm.com/docs/git-rerere"&gt;official docs on this&lt;/a&gt;, but I’ve found this &lt;a href="https://stackoverflow.com/a/49501436/8787680"&gt;Stack Overflow answer&lt;/a&gt; to be a more approachable read.&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="a-word-on-the-configuration-file"&gt;A word on the configuration file&lt;/h1&gt;
&lt;p&gt;At the very minimum, setting a name and email will be necessary to use Git:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git&lt;span class="w"&gt; &lt;/span&gt;config&lt;span class="w"&gt; &lt;/span&gt;--global&lt;span class="w"&gt; &lt;/span&gt;user.name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Your Name"&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;config&lt;span class="w"&gt; &lt;/span&gt;--global&lt;span class="w"&gt; &lt;/span&gt;user.email&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"email@example.com"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Seeing the current configuration can come in handy, too:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git&lt;span class="w"&gt; &lt;/span&gt;config&lt;span class="w"&gt; &lt;/span&gt;--global&lt;span class="w"&gt; &lt;/span&gt;--list
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And in the case of this particular command, &lt;code&gt;git config&lt;/code&gt;, it can’t be emphasized enough how useful searching through the help page in the terminal will be: &lt;code&gt;git config --help&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I’d be remiss if I didn’t include an example of my own configuration at this point, so here it goes! To make it so that it is convenient to commit this configuration file publicly, some private settings can be “included” from other paths inside the &lt;code&gt;[include]&lt;/code&gt; block. For clarity, I’ll show what that file looks like below the main configuration file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# This is the content of ~/.gitconfig&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;include&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;This&lt;span class="w"&gt; &lt;/span&gt;file&lt;span class="w"&gt; &lt;/span&gt;can&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;more&lt;span class="w"&gt; &lt;/span&gt;information&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;extend&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;main&lt;span class="w"&gt; &lt;/span&gt;configuration.
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;For&lt;span class="w"&gt; &lt;/span&gt;example,&lt;span class="w"&gt; &lt;/span&gt;when&lt;span class="w"&gt; &lt;/span&gt;inside&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;directory&lt;span class="w"&gt; &lt;/span&gt;that&lt;span class="w"&gt; &lt;/span&gt;match&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;certain&lt;span class="w"&gt; &lt;/span&gt;pattern,
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;we&lt;span class="w"&gt; &lt;/span&gt;can&lt;span class="w"&gt; &lt;/span&gt;tell&lt;span class="w"&gt; &lt;/span&gt;Git&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;change&lt;span class="w"&gt; &lt;/span&gt;our&lt;span class="w"&gt; &lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;or&lt;span class="w"&gt; &lt;/span&gt;email&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;e.g.,&lt;span class="w"&gt; &lt;/span&gt;when&lt;span class="w"&gt; &lt;/span&gt;committing
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;with&lt;span class="w"&gt; &lt;/span&gt;different&lt;span class="w"&gt; &lt;/span&gt;credentials&lt;span class="w"&gt; &lt;/span&gt;from&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;work&lt;span class="w"&gt; &lt;/span&gt;email&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;path&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;~/Dropbox/.custom/.gitconfig
&lt;span class="o"&gt;[&lt;/span&gt;color&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;branch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;auto
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;diff&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;auto
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;grep&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;auto
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;interactive&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;auto
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;status&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;auto
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;ui&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;alias&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;# cut out for brevity, see the section on Aliases&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;core&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;editor&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;nvim
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;excludesfile&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;~/.gitignore
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;pager&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;diff-so-fancy&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;less&lt;span class="w"&gt; &lt;/span&gt;--tabs&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-RFX
&lt;span class="o"&gt;[&lt;/span&gt;commit&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;gpgsign&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;template&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;~/.gitmessage
&lt;span class="o"&gt;[&lt;/span&gt;mergetool&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"nvim"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;cmd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;nvim&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$MERGED&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;difftool&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"vscode"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;cmd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;code&lt;span class="w"&gt; &lt;/span&gt;--wait&lt;span class="w"&gt; &lt;/span&gt;--diff&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$LOCAL&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$REMOTE&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;mergetool&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nv"&gt;prompt&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;color&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"diff-highlight"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;oldNormal&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;red&lt;span class="w"&gt; &lt;/span&gt;bold
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;oldHighlight&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;red&lt;span class="w"&gt; &lt;/span&gt;bold&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;52&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;newNormal&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;green&lt;span class="w"&gt; &lt;/span&gt;bold
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;newHighlight&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;green&lt;span class="w"&gt; &lt;/span&gt;bold&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;22&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;color&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"diff"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;commit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;yellow&lt;span class="w"&gt; &lt;/span&gt;bold
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;frag&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;magenta&lt;span class="w"&gt; &lt;/span&gt;bold
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;meta&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;11&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;green&lt;span class="w"&gt; &lt;/span&gt;bold
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;old&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;red&lt;span class="w"&gt; &lt;/span&gt;bold
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;whitespace&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;red&lt;span class="w"&gt; &lt;/span&gt;reverse
&lt;span class="o"&gt;[&lt;/span&gt;push&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;recurseSubmodules&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;on-demand
&lt;span class="o"&gt;[&lt;/span&gt;gpg&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;program&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;gpg2
&lt;span class="o"&gt;[&lt;/span&gt;filter&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"lfs"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;clean&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;git-lfs&lt;span class="w"&gt; &lt;/span&gt;clean&lt;span class="w"&gt; &lt;/span&gt;--&lt;span class="w"&gt; &lt;/span&gt;%f
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;smudge&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;git-lfs&lt;span class="w"&gt; &lt;/span&gt;smudge&lt;span class="w"&gt; &lt;/span&gt;--skip&lt;span class="w"&gt; &lt;/span&gt;--&lt;span class="w"&gt; &lt;/span&gt;%f
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;process&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;git-lfs&lt;span class="w"&gt; &lt;/span&gt;filter-process&lt;span class="w"&gt; &lt;/span&gt;--skip
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;required&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;pull&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;rebase&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;credential&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;helper&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;store
&lt;span class="o"&gt;[&lt;/span&gt;init&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;defaultBranch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;main
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;templateDir&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;~/.git-templates
&lt;span class="o"&gt;[&lt;/span&gt;diff&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;tool&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;vscode
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The file being referenced/included here, &lt;code&gt;~/Dropbox/.custom/.gitconfig&lt;/code&gt;, looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;user&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nv"&gt;email&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;email@example.com
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Your&lt;span class="w"&gt; &lt;/span&gt;Name
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nv"&gt;signingkey&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;798034F11B2ADED2
&lt;span class="o"&gt;[&lt;/span&gt;commit&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nv"&gt;gpgsign&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;

&lt;span class="c1"&gt;# The following block could be used to update credentials when committing&lt;/span&gt;
&lt;span class="c1"&gt;# depending on what directory is opened. So, if you work for COMPANY_NAME&lt;/span&gt;
&lt;span class="c1"&gt;# and the pattern 'COMPANY_NAME' appears in the current working directory,&lt;/span&gt;
&lt;span class="c1"&gt;# then Git can be smart and update your configuration by including&lt;/span&gt;
&lt;span class="c1"&gt;# something like the previous block so that the original email, name,&lt;/span&gt;
&lt;span class="c1"&gt;# signingkey and possibly other config options are overwritten.&lt;/span&gt;

&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;when&lt;span class="w"&gt; &lt;/span&gt;working&lt;span class="w"&gt; &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;COMPANY_NAME
&lt;span class="o"&gt;[&lt;/span&gt;includeIf&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"gitdir:**/COMPANY_NAME/**/.git"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nv"&gt;path&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;~/Dropbox/.custom/.gitconfig-COMPANY_NAME
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So this section briefly points out how custom tools like &lt;code&gt;diff-so-fancy&lt;/code&gt; can be used, how diff output colors can be customized, how specific code editors like Neovim and &lt;span class="caps"&gt;VS&lt;/span&gt; Code can be opened when committing or dealing with merge conflicts and generally just how the file is meant to be structured.&lt;/p&gt;
&lt;p&gt;A lot more on configuring Git can be found in &lt;a href="https://git-scm.com/docs/git-config"&gt;the official documentation on &lt;code&gt;git config&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="conclusion"&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Being exhaustive when it comes to using Git is definitely not something this article strived to achieve: Git is such a complex piece of software that has been evolving since 2005, when it became a necessity to deal with incoming patches sent to Linus Torvalds to make Linux the fantastic project it has become! There is much, much more to learn, but hopefully this post gives you a slightly different perspective and points the way to a well-rounded journey with the list of references below. Git good!&lt;/p&gt;
&lt;h2 id="more-resources-and-references"&gt;More resources and references&lt;/h2&gt;
&lt;h3 id="websites"&gt;Websites&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.conventionalcommits.org/"&gt;Conventional Commits&lt;/a&gt; - &lt;em&gt;“A specification for adding human and machine readable meaning to commit messages.”&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ndpsoftware.com/git-cheatsheet.html"&gt;Git Cheatsheet&lt;/a&gt; - &lt;em&gt;“Interactive Git Cheatsheet, categorizing commands based on what they affect.”&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://gitimmersion.com"&gt;Git Immersion&lt;/a&gt; - &lt;em&gt;“A guided tour that walks through the fundamentals of Git, inspired by the premise that to know a thing is to do it.”&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://githowto.com"&gt;GitHowTo&lt;/a&gt; - &lt;em&gt;“Git How To is a guided tour that walks through the fundamentals of Git, inspired by the premise that to know a thing is to do it.”&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lab.github.com/"&gt;GitHub Learning Lab&lt;/a&gt; - &lt;em&gt;“With GitHub Learning Lab, grow your skills by completing fun, realistic projects. Get advice and helpful feedback from our friendly Learning Lab bot.”&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://learngitbranching.js.org"&gt;Learn Git Branching&lt;/a&gt; - &lt;em&gt;“An interactive Git visualization tool to educate and challenge!”&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/learn/browse/?terms=Github"&gt;Microsoft Learn GitHub modules&lt;/a&gt; - &lt;em&gt;“Learn new skills and discover the power of Microsoft products with step-by-step guidance.”&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git-scm.com/book/en/v2"&gt;Pro Git Book&lt;/a&gt; - &lt;em&gt;“The entire Pro Git book, written by Scott Chacon and Ben Straub and published by Apress, is available here. All content is licensed under the Creative Commons Attribution Non Commercial Share Alike 3.0 license. Print versions of the book are available on Amazon.com.”&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://egghead.io/courses/productive-git-for-developers"&gt;Productive Git for Developers&lt;/a&gt; - &lt;em&gt;“You will walk through a series of scenarios which you’ll most commonly encounter in your daily work life as a developer.”&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.dataschool.io/how-to-contribute-on-github/"&gt;Step-by-step guide to contributing on GitHub&lt;/a&gt; - &lt;em&gt;“Have you thought about contributing to an open source project, but you’re too confused (or intimidated) by the process to even try? I’ve been there too!”&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://try.github.io"&gt;Try GitHub&lt;/a&gt; - &lt;em&gt;Resources to learn Git: Handbook, cheat sheets, git commands in the browser, etc.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="youtube"&gt;YouTube&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=eulnSXkhE7I"&gt;&lt;span class="caps"&gt;CS50&lt;/span&gt; Beyond 2019&lt;/a&gt; - &lt;span class="caps"&gt;CS50&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=SWYqp7iY_Tc"&gt;Git &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; GitHub Crash Course For Beginners&lt;/a&gt; - Traversy Media&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=RGOj5yH7evk"&gt;Git and GitHub for Beginners - Crash Course&lt;/a&gt; - freeCodeCamp.org&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=HVsySz-h9r4&amp;amp;list=PL-osiE80TeTuRUfjRe54Eea17-YfnOOAx"&gt;Git Tutorial for Beginners: Command-Line Fundamentals&lt;/a&gt; (playlist) - Corey Schafer&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=x0EYpi38Yp4"&gt;GitHub Basics Tutorial - How to Use GitHub&lt;/a&gt; - freeCodeCamp.org&lt;/li&gt;
&lt;li&gt;&lt;a href="https://missing.csail.mit.edu/2020/version-control"&gt;&lt;span class="caps"&gt;MIT&lt;/span&gt; Missing semester (Version Control) - Git data model&lt;/a&gt; - &lt;span class="caps"&gt;MIT&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=i76ts_0UryI"&gt;The Ultimate Git &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; GitHub Crash Course - Learn to Version Control for Beginners&lt;/a&gt; - Laith Harb&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="online-courses"&gt;Online courses&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/learning/git-essential-training"&gt;Git Essential Training&lt;/a&gt; (&lt;em&gt;free with free trial&lt;/em&gt;) - LinkedIn Learning. &lt;em&gt;“Using a step-by-step approach, author Kevin Skoglund presents the commands that enable efficient code management and reveals the fundamental concepts behind version control systems and the Git architecture. Discover how to track changes to files in a repository, review previous edits, and compare versions of a file; create branches to test new ideas without altering the main project; and merge those changes into the project if they work out.&lt;/em&gt;”&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.udemy.com/git-started-with-github/"&gt;Git Started with GitHub&lt;/a&gt; - Udacity. &lt;em&gt;“This course is designed to jump right into showing how Git and GitHub work together, focusing on the Git basic workflow. Students can expect to learn the minimum needed to start using Git in about 30 minutes.”&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://eu.udacity.com/course/how-to-use-git-and-github--ud775"&gt;How to Use Git and GitHub&lt;/a&gt; - Udacity. &lt;em&gt;“This course, built with input from GitHub, will introduce the basics of using version control by focusing on a particular version control system called Git and a collaboration platform called GitHub.”&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.udemy.com/short-and-sweet-get-started-with-git-and-github-right-now/"&gt;Short and Sweet: Get Started with Git and GitHub Right Now&lt;/a&gt; - Udemy. &lt;em&gt;“In just 30 minutes, this “Short and Sweet” course covers the essential ideas you need to move forward, without a lot of filler. At the end of the course, you’ll be able to set up a GitHub account, install Git, create and configure new Git and GitHub repositories, create a change history for your software projects, and publish your software projects to GitHub.”&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.udemy.com/the-ultimate-git-5-day-challenge/"&gt;The Ultimate &lt;span class="caps"&gt;GIT&lt;/span&gt; 5-day Challenge&lt;/a&gt; - Udacity. &lt;em&gt;“A quick way to determine if working with &lt;span class="caps"&gt;GIT&lt;/span&gt; is something you want to learn more about. This course takes us step-by-step through some basic &lt;span class="caps"&gt;GIT&lt;/span&gt; operations. The course will not dive too deep, and takes small steps on each of five days. As we continue through the course, we learn a basic, single-person workflow that could allow anyone to store files at GitHub or BitBucket.”&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.coursera.org/learn/version-control-with-git"&gt;Version Control with Git&lt;/a&gt; - Coursera. &lt;em&gt;“In this course, you will not learn everything there is to know about Git, but you will build a strong conceptual understanding of the technology, and afterward will be able to confidently dig deeper on any topic that interests you.”&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.coursera.org/learn/introduction-git-github"&gt;Introduction to Git and Github&lt;/a&gt; - Coursera. Offered by Google. &lt;em&gt;“In this course, you’ll learn how to keep track of the different versions of your code and configuration files using a popular version control system (&lt;span class="caps"&gt;VCS&lt;/span&gt;) called Git. We’ll also go through how to setup an account with a service called GitHub so that you can create your very own remote repositories to store your code and configuration.”&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="references-for-this-article"&gt;References for this article&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://git-scm.com/docs/git-rerere"&gt;&lt;code&gt;git rerere&lt;/code&gt;&lt;/a&gt; - git-scm.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.loginradius.com/blog/engineering/git-commands/"&gt;35+ Git Commands List Every Programmer Should Know&lt;/a&gt; - loginradius.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Binary_search_algorithm"&gt;Binary search algorithm&lt;/a&gt; - Wikipedia.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.gitignore.io/install/command-line"&gt;Gitignore&lt;/a&gt; - Toptal.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.hackerrank.com/"&gt;HackerRank&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://leetcode.com/"&gt;LeetCode&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.atlassian.com/git/tutorials/rewriting-history"&gt;Rewriting history&lt;/a&gt; - Atlassian.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://about.gitlab.com/blog/2021/03/10/new-git-default-branch-name"&gt;The new Git default branch name&lt;/a&gt; - GitLab.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/a/49501436/8787680"&gt;What is git-rerere and how does it work?&lt;/a&gt; - Stack Overflow.&lt;/li&gt;
&lt;/ul&gt;</content><category term="workflow"></category><category term="git"></category><category term="productivity"></category><category term="terminal"></category></entry><entry><title>Using Google Sheets as a database to extract data converted to Markdown</title><link href="https://www.sglavoie.com/posts/2021/12/19/using-google-sheets-as-a-database-to-extract-data-converted-to-markdown/" rel="alternate"></link><published>2021-12-19T21:00:00-06:00</published><updated>2021-12-26T13:31:00-06:00</updated><author><name>Sébastien Lavoie</name></author><id>tag:www.sglavoie.com,2021-12-19:/posts/2021/12/19/using-google-sheets-as-a-database-to-extract-data-converted-to-markdown/</id><summary type="html">&lt;p&gt;Using Google Sheets &lt;span class="caps"&gt;API&lt;/span&gt;, this little tool reads a spreadsheet, extract relevant data and converts it into Markdown so it can be repurposed, in the example given in this article to generate an &lt;span class="caps"&gt;HTML&lt;/span&gt; output for this website with &lt;a href="https://docs.getpelican.com/"&gt;Pelican&lt;/a&gt;, a powerful static site&amp;nbsp;generator.&lt;/p&gt;</summary><content type="html">
&lt;hr/&gt;
&lt;h1 id="introduction"&gt;Introduction&lt;/h1&gt;
&lt;p&gt;The purpose of this tool is to parse and convert the content of a Google Sheets spreadsheet to Markdown. In this specific case, I just wanted a simple script to reduce the friction in getting a valid output I could use to maintain a &lt;a href="https://www.sglavoie.com/posts/2022/06/18/what-it-took-to-propel-a-career-in-tech-in-five-years/"&gt;“learning log” on my website&lt;/a&gt;. So that gives me a quick way to input data in a spreadsheet and then I can take the time whenever needed to update the learning progress as desired by reformatting any of the entries and optionally adding notes to them.&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="general-software-requirements"&gt;General software requirements&lt;/h2&gt;
&lt;p&gt;This tool should:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Be able to read a private spreadsheet with a service account configured with the Google Sheets &lt;span class="caps"&gt;API&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;Convert rows from a Google Sheets spreadsheet into Markdown (see &lt;strong&gt;Input&lt;/strong&gt; and &lt;strong&gt;Output&lt;/strong&gt; sections below for details).&lt;/li&gt;
&lt;li&gt;Skip rendering rows that are missing a value for the &lt;code&gt;Title&lt;/code&gt; or &lt;code&gt;Date&lt;/code&gt; columns (it couldn’t be rendered in the correct place properly without this information).&lt;/li&gt;
&lt;li&gt;Other columns are optional and the corresponding level of nesting will be skipped if no value was provided (e.g. a category &lt;code&gt;Articles&lt;/code&gt; may have an item with no sub-category and could be missing any of the other values except for &lt;code&gt;Title&lt;/code&gt; and &lt;code&gt;Date&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Separate entries by month by parsing the &lt;code&gt;Date&lt;/code&gt; column.&lt;/li&gt;
&lt;li&gt;A command-line parameter should exist to specify a year from which the date should be extracted.&lt;/li&gt;
&lt;li&gt;The output should be in reverse chronological order (i.e. for a full year with entries for each month, December will appear at the top and January at the bottom).&lt;/li&gt;
&lt;li&gt;Output a hierarchical format like the following: &lt;code&gt;Category &amp;gt; Sub-category &amp;gt; Title &amp;gt; Activity &amp;amp; notes&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Group entries by category &lt;strong&gt;and&lt;/strong&gt; sub-category (e.g. if a category is named &lt;code&gt;Articles&lt;/code&gt; and there is a sub-category named &lt;code&gt;Python&lt;/code&gt;, then &lt;code&gt;Python&lt;/code&gt; must be nested under &lt;code&gt;Articles&lt;/code&gt; for the corresponding month).&lt;/li&gt;
&lt;li&gt;Sort on the &lt;code&gt;Date&lt;/code&gt; column before doing any parsing on other columns (rows in the spreadsheet &lt;em&gt;can&lt;/em&gt; be in non-chronological order).&lt;/li&gt;
&lt;li&gt;Dates from a single year will be kept (either the year received as a parameter or the most recent year found).&lt;/li&gt;
&lt;li&gt;Sort &lt;code&gt;Category&lt;/code&gt;, &lt;code&gt;Sub-category&lt;/code&gt; and &lt;code&gt;Title&lt;/code&gt; alphabetically (ascending order from top to bottom).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Not&lt;/strong&gt; sort the &lt;code&gt;Activity&lt;/code&gt; column to preserve the order in which rows were added to the spreadsheet.&lt;/li&gt;
&lt;li&gt;Render links only if the &lt;code&gt;Link&lt;/code&gt; column is a valid &lt;span class="caps"&gt;URL&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Not&lt;/strong&gt; validate the content of columns except for &lt;code&gt;Date&lt;/code&gt; and &lt;code&gt;Link&lt;/code&gt; (i.e. render the other columns as is).&lt;/li&gt;
&lt;li&gt;Display items with no category above those having a category. The same logic would be true for sub-categories.&lt;/li&gt;
&lt;li&gt;Format the output:&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Date&lt;/code&gt; should become headers (&lt;code&gt;##&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Category&lt;/code&gt; should be &lt;strong&gt;bolded&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Sub-category&lt;/code&gt; should be &lt;em&gt;emphasized&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Title&lt;/code&gt; should become a &lt;a href="https://example.com"&gt;link&lt;/a&gt; if the &lt;code&gt;Link&lt;/code&gt; column contains a valid &lt;span class="caps"&gt;URL&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Activity&lt;/code&gt; should be nested under &lt;code&gt;Title&lt;/code&gt;, occupying a new line for each activity.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Notes&lt;/code&gt; should appear (&lt;em&gt;italicized and inside parentheses&lt;/em&gt;) next to the activity.&lt;ul&gt;
&lt;li&gt;If there is a value for &lt;code&gt;Notes&lt;/code&gt; but no value for &lt;code&gt;Activity&lt;/code&gt;, the output would be next to the &lt;code&gt;Title&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="input"&gt;Input&lt;/h3&gt;
&lt;p&gt;A spreadsheet with the following columns (starting with &lt;strong&gt;Date&lt;/strong&gt;):&lt;/p&gt;
&lt;div class="table-wrapper"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;[additional info]&lt;/th&gt;
&lt;th&gt;Date&lt;/th&gt;
&lt;th&gt;Category&lt;/th&gt;
&lt;th&gt;Sub-category&lt;/th&gt;
&lt;th&gt;Title&lt;/th&gt;
&lt;th&gt;Activity&lt;/th&gt;
&lt;th&gt;Link&lt;/th&gt;
&lt;th&gt;Notes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;November&lt;/td&gt;
&lt;td&gt;13/11/2021&lt;/td&gt;
&lt;td&gt;Articles&lt;/td&gt;
&lt;td&gt;Python&lt;/td&gt;
&lt;td&gt;Python slots, slots, and object layout&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;https://www.youtube.com/watch?v=Iwf17zsDAnY&lt;/td&gt;
&lt;td&gt;understood that X does Y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;November&lt;/td&gt;
&lt;td&gt;14/11/2021&lt;/td&gt;
&lt;td&gt;Books&lt;/td&gt;
&lt;td&gt;Software engineering&lt;/td&gt;
&lt;td&gt;The Pragmatic Programmer&lt;/td&gt;
&lt;td&gt;ch. 1&lt;/td&gt;
&lt;td&gt;https://pragprog.com/titles/tpp20/the-pragmatic-programmer-20th-anniversary-edition/&lt;/td&gt;
&lt;td&gt;note 1 here&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;November&lt;/td&gt;
&lt;td&gt;15/11/2021&lt;/td&gt;
&lt;td&gt;Books&lt;/td&gt;
&lt;td&gt;Software engineering&lt;/td&gt;
&lt;td&gt;The Pragmatic Programmer&lt;/td&gt;
&lt;td&gt;ch. 2&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;note 2 here too&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;November&lt;/td&gt;
&lt;td&gt;16/11/2021&lt;/td&gt;
&lt;td&gt;Books&lt;/td&gt;
&lt;td&gt;Software engineering&lt;/td&gt;
&lt;td&gt;Clean Code&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;December&lt;/td&gt;
&lt;td&gt;1/12/2021&lt;/td&gt;
&lt;td&gt;Documentation&lt;/td&gt;
&lt;td&gt;Python&lt;/td&gt;
&lt;td&gt;The Python Tutorial&lt;/td&gt;
&lt;td&gt;Sections 1-4&lt;/td&gt;
&lt;td&gt;https://docs.python.org/3/tutorial/index.html&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;December&lt;/td&gt;
&lt;td&gt;2/12/2021&lt;/td&gt;
&lt;td&gt;Books&lt;/td&gt;
&lt;td&gt;Software engineering&lt;/td&gt;
&lt;td&gt;Clean Code&lt;/td&gt;
&lt;td&gt;ch. 2-10&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Render available values&lt;/td&gt;
&lt;td&gt;2/12/2021&lt;/td&gt;
&lt;td&gt;Books&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Clean Coder&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;book note&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Render available values&lt;/td&gt;
&lt;td&gt;2/12/2021&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Python/C &lt;span class="caps"&gt;API&lt;/span&gt; Reference Manual&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;https://docs.python.org/3/c-api/index.html&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Title missing: skip rendering&lt;/td&gt;
&lt;td&gt;3/12/2021&lt;/td&gt;
&lt;td&gt;Articles&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Title missing: skip rendering&lt;/td&gt;
&lt;td&gt;3/12/2021&lt;/td&gt;
&lt;td&gt;Articles&lt;/td&gt;
&lt;td&gt;Software engineering&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;ch. 3&lt;/td&gt;
&lt;td&gt;https://docs.python.org/3/c-api/index.html&lt;/td&gt;
&lt;td&gt;note&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Date missing: skip rendering&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Articles&lt;/td&gt;
&lt;td&gt;Python&lt;/td&gt;
&lt;td&gt;Python slots, slots, and object layout&lt;/td&gt;
&lt;td&gt;Section 2&lt;/td&gt;
&lt;td&gt;https://www.youtube.com/watch?v=Iwf17zsDAnY&lt;/td&gt;
&lt;td&gt;note not rendered&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;h3 id="output"&gt;Output&lt;/h3&gt;
&lt;p&gt;A Markdown output to the terminal in the following format:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gu"&gt;## December&lt;/span&gt;

&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;[&lt;span class="nt"&gt;Python/C API Reference Manual&lt;/span&gt;](&lt;span class="na"&gt;https://docs.python.org/3/c-api/index.html&lt;/span&gt;)
&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="gs"&gt;**Books**&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Clean Coder (&lt;span class="ge"&gt;_book note_&lt;/span&gt;)
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ge"&gt;_Software engineering_&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Clean Code
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;ch. 2-10
&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="gs"&gt;**Documentation**&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ge"&gt;_Python_&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;[&lt;span class="nt"&gt;The Python Tutorial&lt;/span&gt;](&lt;span class="na"&gt;https://docs.python.org/3/tutorial/index.html&lt;/span&gt;)
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Sections 1-4

&lt;span class="gu"&gt;## November&lt;/span&gt;

&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="gs"&gt;**Articles**&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ge"&gt;_Python_&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;[&lt;span class="nt"&gt;Python slots, slots, and object layout&lt;/span&gt;](&lt;span class="na"&gt;https://www.youtube.com/watch?v=Iwf17zsDAnY&lt;/span&gt;) (&lt;span class="ge"&gt;_understood that X does Y_&lt;/span&gt;)
&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="gs"&gt;**Books**&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ge"&gt;_Software engineering_&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Clean Code
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;[&lt;span class="nt"&gt;The Pragmatic Programmer&lt;/span&gt;](&lt;span class="na"&gt;https://pragprog.com/titles/tpp20/the-pragmatic-programmer-20th-anniversary-edition/&lt;/span&gt;)
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;ch. 1 (&lt;span class="ge"&gt;_note 1 here_&lt;/span&gt;)
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;ch. 2 (&lt;span class="ge"&gt;_note 2 here too_&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;figure&gt;
&lt;a href="https://www.sglavoie.com/images/posts/0028_google_sheets_as_database_output_markdown/input_output.png"&gt;&lt;img alt="input_output_example" class="max-size-img-post" src="https://www.sglavoie.com/images/posts/0028_google_sheets_as_database_output_markdown/input_output.png"/&gt;&lt;/a&gt;
&lt;figcaption&gt;Input/Output example when using this tool.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="installing-this-tool"&gt;Installing this tool&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Tested only under Python 3.9.7&lt;/em&gt;, requires at least Python 3.7+.&lt;/p&gt;
&lt;h3 id="using-pip"&gt;Using &lt;code&gt;pip&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[recommended] Activate a virtual environment.&lt;/li&gt;
&lt;li&gt;To install dependencies, run from this directory: &lt;code&gt;pip install -r requirements.txt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Then execute the script to run the tool: &lt;code&gt;python3 get_learning_logs&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="using-pipenv"&gt;Using &lt;code&gt;pipenv&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Run from this directory: &lt;code&gt;pipenv install&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Activate the newly created virtual environment with &lt;code&gt;pipenv shell&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Then execute the script to run the tool: &lt;code&gt;python3 get_learning_logs&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="how-to-use-this-tool"&gt;How to use this tool&lt;/h2&gt;
&lt;p&gt;You will need to create an environment file (default path: &lt;code&gt;~/.learning-logs&lt;/code&gt; or edit the path for &lt;code&gt;LEARNING_LOGS_ENV_PATH&lt;/code&gt; in &lt;code&gt;get_learning_logs.py&lt;/code&gt;). It should look as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;SERVICE_ACCOUNT_FILEPATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"/path/to/service_account_learning_logs.json"&lt;/span&gt;
&lt;span class="n"&gt;SPREADSHEET_ID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;SPREADSHEET_ID&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# Found in the URL of the document&lt;/span&gt;
&lt;span class="n"&gt;WORKSHEET_ID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# First sheet is 0 by default, it comes after the URL parameter `gid`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To set up this project, you will have to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Enable the Google Sheets &lt;span class="caps"&gt;API&lt;/span&gt; for your project (https://support.google.com/googleapi/answer/6158841?hl=en).&lt;/li&gt;
&lt;li&gt;In the project, search for “service account” in the search bar and create new credentials.&lt;/li&gt;
&lt;li&gt;Download the credentials and put them at the path &lt;code&gt;SERVICE_ACCOUNT_FILEPATH&lt;/code&gt; referenced in the environment file.&lt;/li&gt;
&lt;li&gt;Create a spreadsheet with the following columns (not necessarily in that order): &lt;code&gt;Date&lt;/code&gt;, &lt;code&gt;Category&lt;/code&gt;, &lt;code&gt;Sub-category&lt;/code&gt;, &lt;code&gt;Title&lt;/code&gt;, &lt;code&gt;Activity&lt;/code&gt;, &lt;code&gt;Link&lt;/code&gt;, &lt;code&gt;Notes&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The column &lt;code&gt;Date&lt;/code&gt; Should match a date format: select all cells from that column, go to &lt;code&gt;Format &amp;gt; Number &amp;gt; Date&lt;/code&gt; to apply the expected format (&lt;code&gt;mm/dd/yyyy&lt;/code&gt;). You can then input a date (e.g. &lt;code&gt;11/1/2021&lt;/code&gt;) and you will see a calendar pop up when double-clicking on it. Dragging it down to a new cell will create a new date for the next day (in this example, &lt;code&gt;11/2/2021&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Get its &lt;code&gt;SPREADSHEET_ID&lt;/code&gt; (&lt;code&gt;https://docs.google.com/spreadsheets/d/SPREADSHEET_ID_HERE/edit#gid=0&lt;/code&gt;) to put it in the environment file.&lt;/li&gt;
&lt;li&gt;Get the &lt;code&gt;WORKSHEET_ID&lt;/code&gt; (the integer after &lt;code&gt;gid=&lt;/code&gt; in the &lt;span class="caps"&gt;URL&lt;/span&gt; of the document).&lt;/li&gt;
&lt;li&gt;From the spreadsheet document (or from the folder view in Google Drive), share with the email associated with the service account (e.g. &lt;code&gt;learning-logs-something@project-name-12345.iam.gserviceaccount.com&lt;/code&gt;). Read access (“Viewer” permission) is enough.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By now, the script is ready to be called. I just created an alias to execute it more easily by putting the following in &lt;code&gt;~/.bash_aliases&lt;/code&gt; (you will have to adapt the paths of course):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;learning-logs&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'~/.local/share/virtualenvs/learning-logs-to-markdown-XJLvhmzn/bin/python3.9 \&lt;/span&gt;
&lt;span class="s1"&gt;  ~/dev/sglavoie/dev-helpers/learning-logs-to-markdown/get_learning_logs.py'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will output the converted data from the spreadsheet to Markdown &lt;a href="#output"&gt;as shown above&lt;/a&gt;.&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="conclusion"&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;This little tool scratched an itch and will be helpful in making the process of updating the &lt;a href="https://www.sglavoie.com/posts/2022/06/18/what-it-took-to-propel-a-career-in-tech-in-five-years/"&gt;learning progress&lt;/a&gt; of this website more straightforward, more convenient and less hands-on! You can find its source code &lt;a href="https://github.com/sglavoie/dev-helpers/tree/main/learning-logs-to-markdown"&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;</content><category term="automation"></category><category term="google sheets"></category><category term="markdown"></category><category term="python"></category><category term="terminal"></category></entry><entry><title>Book summary: Letters to a New Developer</title><link href="https://www.sglavoie.com/posts/2021/11/08/book-summary-letters-to-a-new-developer/" rel="alternate"></link><published>2021-11-08T10:12:00-06:00</published><updated>2023-04-16T15:04:00-06:00</updated><author><name>Sébastien Lavoie</name></author><id>tag:www.sglavoie.com,2021-11-08:/posts/2021/11/08/book-summary-letters-to-a-new-developer/</id><summary type="html">&lt;p&gt;If you are still early in your career as a software developer (or not so much!), I think you might enjoy reading &lt;em&gt;Letters to a New Developer: What I Wish I Had Known When Starting My Development Career&lt;/em&gt; written by Dan Moore, who also features &lt;a href="https://letterstoanewdeveloper.com/"&gt;a very insightful blog&lt;/a&gt;.&lt;/p&gt;</summary><content type="html">
&lt;hr/&gt;
&lt;h1 id="introduction"&gt;Introduction&lt;/h1&gt;
&lt;p&gt;I’ve taken quite a few notes while devouring that book, which is a quick and easy read. It’s not the typical non-fiction, technically-oriented manual: this book makes you feel like having an older family member taking the time to sit right next to you to openly share all sorts of golden nuggets from a lifetime of rich and varied experiences so you can get prepared to face the challenges that lie ahead in your own career and avoid some of the more common mistakes during the journey. It is the kind of publication you can read literally five minutes at a time thanks to the convenient format it adopts.&lt;/p&gt;
&lt;p&gt;Some of the following notes are verbatim and reading the whole title will be worth it! Nevertheless, you will find below some passages that deeply resonated with me, reflecting the gist of this prose from my perspective. Beware! There are numerous gems to be gleaned from this excellent author.&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="book-summary"&gt;Book summary&lt;/h1&gt;
&lt;h2 id="first-month-at-a-job"&gt;First month at a job&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;See problems as opportunities to contribute.&lt;/li&gt;
&lt;li&gt;During the &lt;strong&gt;onboarding&lt;/strong&gt;, figure out:&lt;/li&gt;
&lt;li&gt;All the &lt;strong&gt;&lt;span class="caps"&gt;HR&lt;/span&gt; stuff&lt;/strong&gt;: benefits, agreements, bonuses, interacting with different departments, meetings, requesting vacation, raises/reviews cycles.&lt;/li&gt;
&lt;li&gt;And the &lt;strong&gt;technical stuff&lt;/strong&gt; too: who to ask questions to, how to ask them (batch them, chat, meeting, etc.), how long to work on a problem before asking for help, how to communicate progress, how to set up a local development environment, &lt;span class="caps"&gt;CI&lt;/span&gt;/&lt;span class="caps"&gt;CD&lt;/span&gt; and branches process, when do you know you’re done working on a task, how are tasks managed (manager, issue tracker, etc.).&lt;/li&gt;
&lt;li&gt;Questions that arise and have no answers → See where to document them (e.g. wiki).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;First impressions&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;Be there early.&lt;/li&gt;
&lt;li&gt;Say what you’ll do, then do it.&lt;/li&gt;
&lt;li&gt;Research before asking questions (and record answers).&lt;/li&gt;
&lt;li&gt;Volunteer to take extra work (don’t become a punching bag, though).&lt;/li&gt;
&lt;li&gt;Own your mistakes but don’t make the same ones twice.&lt;/li&gt;
&lt;li&gt;Be polite and professional, always.&lt;/li&gt;
&lt;li&gt;Make sure with manager we’re on the same page, working on the right stuff, at the right cadence with appropriate updates.&lt;/li&gt;
&lt;li&gt;Write docs to make the next hire easier.&lt;/li&gt;
&lt;li&gt;Have the reputation to be a hard, smart worker: it will follow you.&lt;/li&gt;
&lt;li&gt;Be ready for the trepidations: &lt;strong&gt;celebrate successes&lt;/strong&gt; (“&lt;em&gt;today I [fixed, learnt…]&lt;/em&gt;“).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;To excel&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;Communicate what you’re working on.&lt;/li&gt;
&lt;li&gt;Ask questions.&lt;/li&gt;
&lt;li&gt;Don’t make the same mistake twice: write down what went wrong and plan to avoid repeating them.&lt;/li&gt;
&lt;li&gt;Show up consistently.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Know the team&lt;/strong&gt;: their names, their roles, their behaviours (who posts what, who is in which meetings, who seems funny and approachable on Slack, etc.).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Read code and take notes&lt;/strong&gt;: dig into a section of the system, follow data flow, make diagrams of how things are connected.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="questions"&gt;Questions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Ask prepared questions&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;Research before asking.&lt;/li&gt;
&lt;li&gt;Find where to search (Slack, issue trackers, &lt;span class="caps"&gt;YT&lt;/span&gt;, internal docs or wiki, etc.).&lt;/li&gt;
&lt;li&gt;But also be mindful of how long you should spend time searching (Is there a tight deadline? Are you wasting your time?).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ask good questions&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;Specify the problem in detail, narrow the scope as much as possible.&lt;/li&gt;
&lt;li&gt;Show you’ve done &lt;em&gt;research&lt;/em&gt;. Links, videos, posts, logs (without sensitive info), etc.&lt;/li&gt;
&lt;li&gt;Follow up after a day or so to share additional research.&lt;/li&gt;
&lt;li&gt;Express gratitude.&lt;/li&gt;
&lt;li&gt;If you have the answer, add it.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Don’t be afraid to ask questions&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;If it’s a learning experience, spend more time figuring out the answer.&lt;/li&gt;
&lt;li&gt;The more time you have before the task is due, the more time you should spend looking for an answer.&lt;/li&gt;
&lt;li&gt;How busy is the rest of the team? If they can’t help, you’ll have to do it yourself.&lt;/li&gt;
&lt;li&gt;If there’s a bug that’s really specific to the internal project, asking for help from coworkers is probably best (be careful not to disclose business knowledge!).&lt;/li&gt;
&lt;li&gt;Have you tried working on other aspects of the task? It may unblock you.&lt;/li&gt;
&lt;li&gt;Put in the effort before asking: research, list hypotheses, etc.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ask why&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;It may help prevent mistakes down the line (e.g. wrong choice of tech) and get more perspective, understand better.&lt;/li&gt;
&lt;li&gt;Document findings in wiki or similar (could be in a question/answer format).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;If you don’t know something&lt;/strong&gt;, don’t guess or make an incorrect decision: admit it and say you’ll find out the answer (may have to ask others in the process too).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="writing"&gt;Writing&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Read your texts out aloud&lt;/strong&gt;: spot typos, awkward sentences, etc.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Document the intent behind what you’re doing&lt;/strong&gt; (code, reason for change, who asked what…).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Emails&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;As &lt;em&gt;short&lt;/em&gt; as possible. Otherwise, add &lt;em&gt;executive summary&lt;/em&gt; at the top.&lt;/li&gt;
&lt;li&gt;Is it sensitive? Maybe have face-to-face instead.&lt;/li&gt;
&lt;li&gt;Add &lt;em&gt;links&lt;/em&gt; to supporting documents rather than attaching them. Email chains are hard to follow: may put them in a document instead.&lt;/li&gt;
&lt;li&gt;Don’t use &lt;em&gt;relative time references&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Keep them &lt;em&gt;focused&lt;/em&gt;: go into &lt;em&gt;one topic&lt;/em&gt;. New topic = new email with different subject line.&lt;/li&gt;
&lt;li&gt;Real-time messaging: Default to &lt;em&gt;public&lt;/em&gt; channels to benefit the organization.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Write a technical ebook&lt;/em&gt;: working on a complex project over time and being able to see the high-level and details, all presented in a coherent way for the readers.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Write and update technical documentation&lt;/strong&gt;: you save time in the long run, it’s useful for you and the rest of the organization.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Blog&lt;/strong&gt;: this is the process of clarifying your own thoughts. You’ll be a better writer and thinker for it.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Motivation about writing&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;It crystallizes thoughts, make them clearer;&lt;/li&gt;
&lt;li&gt;Builds credibility;&lt;/li&gt;
&lt;li&gt;Helps others;&lt;/li&gt;
&lt;li&gt;Illustrates an ability to convey technical information and context.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="tools-to-learn"&gt;Tools to learn&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Leverage for increased productivity&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Test suite&lt;/em&gt;: living documentation. Can evolve code base without fear.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Libraries&lt;/em&gt; and &lt;em&gt;frameworks&lt;/em&gt;: saves time.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;IaaS&lt;/em&gt; (infrastructure as a service, e.g. &lt;span class="caps"&gt;AWS&lt;/span&gt; &lt;span class="caps"&gt;EC2&lt;/span&gt;): can use APIs to manage.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Paas&lt;/em&gt; (platform as a service, e.g. Heroku): Allows to focus on business logic.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Saas&lt;/em&gt; (software as a service, e.g. Google Apps): integrate with existing software.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Command-line&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Typing is quicker&lt;/em&gt; than using GUIs for many tasks.&lt;/li&gt;
&lt;li&gt;Can automate &lt;em&gt;recurring tasks&lt;/em&gt; easily.&lt;/li&gt;
&lt;li&gt;Can easily &lt;em&gt;share task scripts&lt;/em&gt; with others.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;jq, awk, sed&lt;/em&gt;: put them to good use.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Version control&lt;/strong&gt;: if in doubt, use it, except for large files and other scenarios that don’t make sense.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Text editor&lt;/strong&gt;: learn one well.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IDEs&lt;/strong&gt;: Use them when it makes sense (programming in Java with a text editor? Probably a bad idea).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Standard library&lt;/strong&gt;: get a good overview of what’s available, leads to transferable skills, more idiomatic code, better tested, etc.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Automated testing&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;Prevents bug regression.&lt;/li&gt;
&lt;li&gt;Serves as live documentation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Network engineering&lt;/strong&gt;: Learn about it, it will pay off. Know:&lt;/li&gt;
&lt;li&gt;Basics of routing;&lt;/li&gt;
&lt;li&gt;Basics of &lt;span class="caps"&gt;DNS&lt;/span&gt;;&lt;/li&gt;
&lt;li&gt;Rundown of the &lt;span class="caps"&gt;OSI&lt;/span&gt; model;&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;TCP&lt;/span&gt;/&lt;span class="caps"&gt;IP&lt;/span&gt;, &lt;span class="caps"&gt;HTTP&lt;/span&gt;, what a proxy is;&lt;/li&gt;
&lt;li&gt;Answer questions like How do CDNs work, what’s the difference between &lt;span class="caps"&gt;HTTP&lt;/span&gt; and WebSockets, how does &lt;span class="caps"&gt;SSL&lt;/span&gt; work, what can nginx be used for…&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;span class="caps"&gt;SQL&lt;/span&gt;&lt;/strong&gt;: this is fundamental knowledge as it’s almost everywhere.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Debuggers&lt;/strong&gt;: learn how to debug in your &lt;span class="caps"&gt;IDE&lt;/span&gt;, on the command-line and in a web browser (your &lt;span class="caps"&gt;IDE&lt;/span&gt; won’t always be available).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Benchmarking&lt;/strong&gt;: do not optimize prematurely and use benchmarking tools when performance matters to see if the code is fast enough.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Search engines&lt;/strong&gt;: learn to be an expert Googler.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="practices"&gt;Practices&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Solve problems, don’t just write code&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;Use library/framework.&lt;/li&gt;
&lt;li&gt;Use third-party SaaS tool.&lt;/li&gt;
&lt;li&gt;Make sure tasks need to be done. (Why are you doing it? Does it provide value?)&lt;/li&gt;
&lt;li&gt;If a task isn’t recurring often enough, manual work may be the best way to go (time to automate vs. actual savings).&lt;/li&gt;
&lt;li&gt;Think ahead, envision all paths (not just the happy one) before taking a decision.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Read code&lt;/strong&gt;: scan it; dive down; use the &lt;em&gt;scientific method&lt;/em&gt; to make changes and debug.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Get good at estimating your work&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Opportunity cost&lt;/em&gt; (can’t do everything: prioritize and do the tasks that &lt;em&gt;bring the most value&lt;/em&gt;).&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Scheduling&lt;/em&gt;: software is not built in a vacuum, hard and soft deadlines will occur.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Discussing requirements&lt;/em&gt; first can save a lot of troubles and money: building the wrong thing quickly is of no use. Use lightweight prototyping tools instead of building the whole software.&lt;/li&gt;
&lt;li&gt;Recommended reading: &lt;a href="https://www.goodreads.com/book/show/93891.Software_Estimation"&gt;Software Estimation: Demystifying the Black Art&lt;/a&gt;, by Steve McConnell.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here’s one way to keep track of your estimates in a spreadsheet:&lt;/p&gt;
&lt;div class="table-wrapper"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Task&lt;/th&gt;
&lt;th&gt;Low estimate&lt;/th&gt;
&lt;th&gt;High estimate&lt;/th&gt;
&lt;th&gt;Notes, questions, research&lt;/th&gt;
&lt;th&gt;Final estimate&lt;/th&gt;
&lt;th&gt;Estimate in days&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Requirements definition, research, development, testing, deployment, estimates on bug fixes…&lt;/td&gt;
&lt;td&gt;Everything going smoothly.&lt;/td&gt;
&lt;td&gt;Facing obstacles, having to rebuild part of the system, etc.&lt;/td&gt;
&lt;td&gt;Answer questions and verify assumptions to complete the estimate.&lt;/td&gt;
&lt;td&gt;(low + high) * 1.2 (add 20%, “fudge factor”)&lt;/td&gt;
&lt;td&gt;Total hours estimated divided by number of ideal hours per day&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Tracking the actual accuracy of tasks&lt;/em&gt; can be insightful too.&lt;/li&gt;
&lt;li&gt;Always tell people who are depending on the completion of a task &lt;em&gt;if it’s going to take longer than expected&lt;/em&gt;. Share alternative solutions if you have any.&lt;/li&gt;
&lt;li&gt;Even for side projects or when working on open source projects, it may be useful to &lt;em&gt;practice estimating&lt;/em&gt; (and users like seeing a roadmap).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Debug systems&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;Make the problem as &lt;em&gt;simple&lt;/em&gt; as possible.&lt;/li&gt;
&lt;li&gt;Begin with an &lt;em&gt;hypothesis&lt;/em&gt; and either prove it or refine it.&lt;/li&gt;
&lt;li&gt;Determine the &lt;em&gt;desired end state&lt;/em&gt;: fix the root problem but if it’s too costly, find a workaround if possible.&lt;/li&gt;
&lt;li&gt;Pay &lt;em&gt;attention&lt;/em&gt; if anything seems amiss.&lt;/li&gt;
&lt;li&gt;Keep &lt;em&gt;notes&lt;/em&gt; about what you’ve tried.&lt;/li&gt;
&lt;li&gt;If there’s a new bug, &lt;em&gt;inspect recent changes&lt;/em&gt; in the log.&lt;/li&gt;
&lt;li&gt;Write an &lt;em&gt;automated test&lt;/em&gt; before fixing the bug so it doesn’t reappear and you’ll be sure when the bug was fixed.&lt;/li&gt;
&lt;li&gt;Follow the &lt;em&gt;flow of data&lt;/em&gt; (e.g. in a three-tier application, start with the browser or with the database).&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Minimize impact&lt;/em&gt; for users if the bug is in the production environment. Ideally, test on the &lt;em&gt;staging&lt;/em&gt; environment.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Test the right thing&lt;/em&gt;. Make sure that what’s being tested mirrors as closely as possible where the bug appears.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Assume positive intent&lt;/strong&gt;: be solution-focused.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;span class="caps"&gt;ROI&lt;/span&gt; on trust&lt;/em&gt;: about 4% of the population are sociopaths; meaning 96% of the population has some working conscience and could be trusted by default to reap great benefits. This may speed decision making, for instance.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Express gratitude&lt;/strong&gt;: it will make you feel better and showing appreciation to others will make working with colleagues a breeze. Thanking people and writing a &lt;em&gt;gratitude journal&lt;/em&gt; will be helpful.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cultivate the skill of undivided attention&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;To produce your best output, you need to &lt;em&gt;commit to deep work&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;To thrive in today’s economy, you need to &lt;em&gt;be able to quickly master hard things&lt;/em&gt; and be able to &lt;em&gt;produce at an elite level&lt;/em&gt; in terms of both &lt;em&gt;quality&lt;/em&gt; and &lt;em&gt;speed&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;To learn hard things quickly, you must &lt;em&gt;focus intensely without distraction&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Add routines and rituals to your working life&lt;/em&gt; to limit the amount of willpower required to get started.&lt;/li&gt;
&lt;li&gt;Book recommendation: &lt;a href="https://www.calnewport.com/books/deep-work/"&gt;Deep Work: Rules for Focused Success in a Distracted World&lt;/a&gt;, by Cal Newport.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Build empathy&lt;/strong&gt;: Remember your own frustrations. Your users are people who can struggle on tasks you’d find simple yourself. They’re trying to make something work, just like you.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Don’t complain about the code&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;It’s not helpful.&lt;/li&gt;
&lt;li&gt;It displays a lack of empathy.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Avoid jargon&lt;/strong&gt;: If you can’t explain it to a non-technical user, you don’t understand it well enough (good framework: try the &lt;a href="https://en.wikipedia.org/wiki/Feynman_Technique"&gt;Feynman Technique&lt;/a&gt;). You gain clarity for yourself, the ability to teach others and you can influence your organization. (Personal additional: get good at critical thinking and use &lt;a href="https://untools.co/"&gt;frameworks for better thinking&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Time is money&lt;/strong&gt;: &lt;em&gt;buying services from others gives you time&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Buying a book or video instead of reading free documentation.&lt;/li&gt;
&lt;li&gt;Buying and using exceptional tools (e.g. JetBrains IDEs).&lt;/li&gt;
&lt;li&gt;Paying for support.&lt;/li&gt;
&lt;li&gt;Buy commercial software.&lt;/li&gt;
&lt;li&gt;Pay for consulting or training.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Say no&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;If there are pending tasks, ensure they are worked in the &lt;em&gt;right order of priority&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Life is short&lt;/em&gt;: if you end up working 90 hours per week, make sure you’re happy doing it and are not sacrificing other important aspects.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Build on your own&lt;/strong&gt;: pick a project you can envision yourself sticking to for more than six month and learn.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Consistency is key&lt;/strong&gt;: learn by showing up every day. Becoming great at something takes time.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="understanding-the-business"&gt;Understanding the business&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Software is about people, not code&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;Software is created for people.&lt;/li&gt;
&lt;li&gt;Users need to be heard to buy in.&lt;/li&gt;
&lt;li&gt;Most people don’t care about the code. &lt;em&gt;Their goal is to get things done&lt;/em&gt;. Beautiful code that doesn’t solve the right problem is useless.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Outcomes over output&lt;/strong&gt;: the end-goal for the business is more &lt;em&gt;revenue&lt;/em&gt;, more &lt;em&gt;profit&lt;/em&gt;, more &lt;em&gt;users&lt;/em&gt;, more &lt;em&gt;product availability&lt;/em&gt;, happier users, etc. Your contributions should be holistic in nature and work towards achieving these goals.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Understanding the big picture&lt;/em&gt; of why money is spent on certain projects or services pays off as you can better contribute to the bottom line of the company by knowing why things are done the way they are.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Business model&lt;/strong&gt;: know how money is being made. Get a good understanding of the domain in which the business operates.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Knowing how software is used at the company&lt;/em&gt; helps you to understand the business.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;The size of a company impacts how it solves problems&lt;/em&gt;: a bigger company will usually move more slowly towards its goals when change is required, attacking possibly bigger problems with powerful tools and teams. A smaller company may pivot more quickly and shift focus, but it may not work on problems of comparative scales.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Starting a company&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;As a new developer, starting one wouldn’t be wise. Learning to become a software developer and learning how to run a business all at once can lead to a huge amount of stress.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;It will take longer than you think&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Know your &lt;em&gt;financial runway&lt;/em&gt; (“burn rate” vs. what you have in the bank). Extend it by lowering the burn rate.&lt;/li&gt;
&lt;li&gt;Consider your &lt;em&gt;emotional runway&lt;/em&gt;: how are things going for you outside of work? Are there any trying events like moving or having a new baby?&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Talk to your customers&lt;/em&gt;: learn from them. Get feedback.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Provide value to customers&lt;/em&gt;: you won’t have time to make everything go as smoothly as you’d like, but the customer must still be served.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Know your market&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Be ready to move away from code and focus more on a position of &lt;em&gt;management&lt;/em&gt; as the company grows.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Learn from your customers&lt;/em&gt;:&lt;/li&gt;
&lt;li&gt;Digging into a ticketing system will be informative to understand how a product is being used and may reveal flaws or bugs.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Focus on the problems mentioned, not on the solutions proposed&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Ask them about their pressing problems, not only those that have been reported so far. This may inform about issues with related systems.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="learning"&gt;Learning&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Never stop learning&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;Be clear about &lt;em&gt;why&lt;/em&gt; you want to be learning.&lt;/li&gt;
&lt;li&gt;Once you have the why, determine the &lt;em&gt;what&lt;/em&gt; that will take you there.&lt;/li&gt;
&lt;li&gt;Once you have both of the above, find the &lt;em&gt;how&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Execute.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Build expert intuition&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;It’s the difference between a junior and a senior developer.&lt;/li&gt;
&lt;li&gt;A regular world + many opportunities to learn + frequent feedback + expert intuition.&lt;/li&gt;
&lt;li&gt;Regular world: gives a chance to find out whether you’d prefer to specialize in a specific branch of the software development tree or remain a generalist.&lt;/li&gt;
&lt;li&gt;Many opportunities to learn: write code, work on technical projects and observe those who are more senior than you.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Frequent feedback&lt;/em&gt;: code reviews and one on ones with the manager. Reflect on your performance with a daily &lt;em&gt;journal&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Know what to learn&lt;/strong&gt; (i.e. general skills vs. specific technology and techniques):&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Domain knowledge&lt;/em&gt;: understand the business you are in, who the major players are, etc. If you stick in a given domain long enough, you become more valuable as this kind of knowledge tends to last a long time. Talk to experts and read books.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Theoretical expertise&lt;/em&gt;: data structures and algorithms, &lt;span class="caps"&gt;HTTP&lt;/span&gt; and best practices fall within this category. It serves for years as a solid foundation for everything else. Books are a fine source to delve deeper.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Practical knowledge&lt;/em&gt;:&lt;ul&gt;
&lt;li&gt;React, Kubernetes, Rails are some examples of specific technologies that belong in this category.&lt;/li&gt;
&lt;li&gt;Have a good understanding of the underlying technology whenever possible (e.g. learn the language in depth, not just the framework).&lt;/li&gt;
&lt;li&gt;This type of knowledge &lt;em&gt;tends to age quickly&lt;/em&gt; and can be learnt through &lt;em&gt;videos&lt;/em&gt;, &lt;em&gt;conference talks&lt;/em&gt; and &lt;em&gt;tutorials&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Leadership knowledge&lt;/em&gt;: This will pay dividends through your career. Books and experience in the real-world are useful here.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Avoid being an expert beginner&lt;/strong&gt; (an authority with nontransferable skills):&lt;/li&gt;
&lt;li&gt;Never believe you have all the answers.&lt;/li&gt;
&lt;li&gt;Don’t bend tools to do something they weren’t meant to do.&lt;/li&gt;
&lt;li&gt;Don’t ignore best practices (but don’t blindly apply them everywhere either!).&lt;/li&gt;
&lt;li&gt;Keep in touch with the larger software community: you may temporarily be at the top somewhere technically speaking, but that won’t remain true in a bigger context.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Pair with people that are more experienced than you&lt;/em&gt;: ask them questions, read the pull requests they submit.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pattern match to be a just-in-time learner&lt;/strong&gt;: explore by pattern and analogy (e.g. compare terminology that’s similar to tools you’ve used before) and learn just enough to get the task done. Learn the nuances as you go.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Learning boring stuff&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;Focus on the big picture. &lt;em&gt;Why&lt;/em&gt; are you learning this?&lt;/li&gt;
&lt;li&gt;Notice the &lt;em&gt;fun&lt;/em&gt; parts.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Take breaks&lt;/em&gt; when needed. If no strict deadline is in sight, you might cross off a different task on your to-do list for now.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Automate&lt;/em&gt; what you can but consider clearly the time savings when doing so.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Learn relevant things&lt;/em&gt;: this applies once you have a base to lean on, but accumulating random concepts that aren’t often applicable after that isn’t useful (unused knowledge rots and gets forgotten).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Your team will teach you&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;They can teach you more than you can learn on your own: tools; languages; frameworks; business domain knowledge; approaches to problem-solving; understanding of the problem; stakeholder empathy.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Observe how senior people work&lt;/em&gt; (face-to-face, read their code and pull requests).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Use an &lt;span class="caps"&gt;RSS&lt;/span&gt; reader&lt;/strong&gt;: for blogs, online community discussions, tags in Stack Overflow, news sites.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Listen to podcasts&lt;/strong&gt;: good to gather ideas about high-level concepts while doing other things (dishes, exercise, watering plants, cooking, etc.).&lt;/li&gt;
&lt;li&gt;Listen to those that are &lt;em&gt;domain specific&lt;/em&gt; to help you at work.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Technology specific&lt;/em&gt;: expose yourself to tools, techniques and libraries.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;General software development&lt;/em&gt;: those are broadly applicable to software engineering and will work across different jobs you have within the industry.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Subscribe to email newsletters&lt;/strong&gt;: great to get curated content on a given topic. These could include software development practices, security, &lt;span class="caps"&gt;AWS&lt;/span&gt; and career skills.&lt;/li&gt;
&lt;li&gt;Find them with searches like &lt;code&gt;&amp;lt;subject area&amp;gt; weekly/email newsletter&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Read the archives&lt;/em&gt; first to get a sense of whether you’ll enjoy the content.&lt;/li&gt;
&lt;li&gt;Like with podcasts, focus on what’s interesting and &lt;em&gt;skim&lt;/em&gt; the rest.&lt;/li&gt;
&lt;li&gt;When sources lead to more articles of interest, those can be captured in your &lt;em&gt;&lt;span class="caps"&gt;RSS&lt;/span&gt; reader&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Good to &lt;em&gt;explore new technologies and frameworks&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;To start your own, &lt;a href="https://tinyletter.com/"&gt;TinyLetter&lt;/a&gt; is a great option.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Read great books about software development&lt;/strong&gt;: don’t look for cutting-edge information but rather for a source of timeless practices.&lt;/li&gt;
&lt;li&gt;Good examples include &lt;a href="https://archive.org/details/mythicalmanmonth00broo"&gt;The Mythical Man-Month&lt;/a&gt;, &lt;a href="https://pragprog.com/titles/tpp20/the-pragmatic-programmer-20th-anniversary-edition/"&gt;The Pragmatic Programmer&lt;/a&gt;, &lt;a href="https://martinfowler.com/books/refactoring.html"&gt;Refactoring&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Ask great engineers&lt;/em&gt; you respect for recommendations.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Listen actively&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Do not multitask&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Take notes of…&lt;/em&gt; salient points; ah-ha moments; terms to review in the future (those concepts you may not understand). Note the date of the conversation as well.&lt;/li&gt;
&lt;li&gt;If it is a video chat, see whether it can be &lt;em&gt;recorded&lt;/em&gt;. Turn on video if possible to get contextual clues.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Learn two programming languages&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;Lets you see the strengths and weaknesses of your first language.&lt;/li&gt;
&lt;li&gt;May support concepts that weren’t there before (e.g. classes in Java vs. their absence in Perl).&lt;/li&gt;
&lt;li&gt;Makes it easier to learn a third language.&lt;/li&gt;
&lt;li&gt;Illustrates &lt;em&gt;different approaches&lt;/em&gt; to common problems.&lt;/li&gt;
&lt;li&gt;Teaches you how languages fit certain problems better than others.&lt;/li&gt;
&lt;li&gt;Makes you less passionate about your first language. &lt;em&gt;Programming languages are only tools&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Makes it clear what you understand about language #1.&lt;/li&gt;
&lt;li&gt;Tutorials are great to get started and &lt;em&gt;side projects&lt;/em&gt; even better to cement the learning.&lt;/li&gt;
&lt;li&gt;Generally, &lt;em&gt;learn at least two of “everything”&lt;/em&gt; (e.g. databases, frameworks, development methodologies, etc.).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="mistakes"&gt;Mistakes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Get used to failure&lt;/strong&gt;: learning something new is difficult. &lt;em&gt;Document internal knowledge&lt;/em&gt; as best as you can so the same mistakes do not repeat themselves. Look around (online, colleagues…) to make sure the problem you are trying to solve hasn’t been worked on already and take any new information into account.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Making mistakes is okay&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;Find out what the &lt;em&gt;oversight&lt;/em&gt; was so you don’t repeat the same mistake.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Acknowledge&lt;/em&gt; you made an error.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Clean up&lt;/em&gt; the mess, with or without help.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Avoid making the same mistake again&lt;/em&gt;. You might keep notes around, write a blog post, etc. Document it or create a script to solve the issue from now on if applicable and share your new knowledge with the rest of the team.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mistakes are forgiven, hiding them is not&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;Make sure you did a mistake to start with.&lt;/li&gt;
&lt;li&gt;The people who need to know about your errors should be told. &lt;em&gt;Transparency and honesty are important&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Think of a plan to fix the mistake (both short-term and long-term).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Don’t make the same mistake twice&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;Make sure you understand what the mistake was.&lt;/li&gt;
&lt;li&gt;Dive deeper when it makes sense. For instance, it is worth mastering a version control system as this is a tool that’s going to be used all the time and is critical to understand when working with other software engineers.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Don’t be afraid to “fail”&lt;/strong&gt;: the only true failure is to quit working towards success.&lt;/li&gt;
&lt;li&gt;Failures don’t stop happening when you become a “better” developer.&lt;/li&gt;
&lt;li&gt;The more you fail, the more you learn.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;You don’t know what you don’t know&lt;/strong&gt;. Doing pattern matching and recognizing concepts at a high level will help when there’s a need to dig deeper.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;When you see someone else making a mistake&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Make sure you have all the necessary context&lt;/em&gt; (you usually don’t have it) before jumping in to shine a light on how you think things could be done or fixed.&lt;/li&gt;
&lt;li&gt;Make sure you &lt;em&gt;fully understand the issue at hand&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Think about the ramifications of a poor decision&lt;/em&gt;: the higher the stakes are, the more likely it is that you should/could intervene.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Contemplate your role&lt;/em&gt;: depending on the relationship you have with that person, tolerance levels will change (personal note: ask questions early as needed, but make sure you show progress as stagnation won’t lead to joyful relationships with your colleagues and may get you fired).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;It’s &lt;span class="caps"&gt;OK&lt;/span&gt; to fail and it’s &lt;span class="caps"&gt;OK&lt;/span&gt; to feel bummed about it&lt;/strong&gt;. See how core/important the task is for the company, whether somebody else would be better positioned to do it, how long it would take you to become good at it, whether you enjoy it, whether there’s another way to solve the problem, if there’s someone else at the company who could teach you. Don’t beat yourself up with despair: be strategic about the way you spend you efforts.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Admit your weaknesses… and own them&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Is it something innate, like bluntness, or is it something you can learn, like Python?&lt;/li&gt;
&lt;li&gt;If a weakness is related to a core competency needed for your job, be proactive in overcoming the obstacle or find another job that’s better suited to your skills.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="your-career"&gt;Your career&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Favor learning over earning&lt;/strong&gt;: take the job with the highest learning potential.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Beware of stunting your growth by working alone&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;You will become more valuable to your future employers and have a better idea of what you like.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;You will never be in a better position to leave a bad job than before you start&lt;/strong&gt;: interviewing is a two-way street.&lt;/li&gt;
&lt;li&gt;Do your research before accepting a job offer.&lt;/li&gt;
&lt;li&gt;Investigate through your network, e.g. LinkedIn, if you have a connection that worked at that company and ask about the good and bad of this organization.&lt;/li&gt;
&lt;li&gt;Ask good questions about the company during the interview.&lt;/li&gt;
&lt;li&gt;As an exception, you might want to consider getting your feet wet in the industry with your first job by being less picky, especially if the job market is bad. Experience will prove useful.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pick a flaw&lt;/strong&gt;: no company is perfect.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;You don’t want an indifferent team&lt;/em&gt; just punching the clock and waiting for the week to be done.&lt;/li&gt;
&lt;li&gt;Avoid nonsense: ask how a typical day goes, who makes decisions about priorities, in what kinds of projects does the company shine and what the best and worst parts of a job are.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Preparing for a recruiting event&lt;/strong&gt;. Have: a resume; a good intro to yourself; a good conversation you can have; be well presented.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Resume&lt;/em&gt;: make sure you have the address, phone, email, &lt;span class="caps"&gt;GPA&lt;/span&gt; and graduation date (for students) at the top. It should show you’re motivated, skilled, passionate, adaptable, collaborative and articulate. When you have less experience, projects should be the centerpiece of your resume. Project descriptions should be brief and focus on the &lt;em&gt;what&lt;/em&gt;, &lt;em&gt;why&lt;/em&gt; and the outcome, avoiding mentions of tech stack unless it adds to the narrative. These can be side hustles, open source, personal interest or hackathons. Have more than one resume for different audiences.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Practice programming&lt;/strong&gt;: &lt;em&gt;you learn by doing&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Start at a consulting company if you’re looking to gain experience across technologies, domains and businesses. Work for a small one if you want to have an impact. This will provide contacts and set you up for future work. Seek out mentorship, request conference attendance and pursue assistance as formal education programs tend to be lacking in those environments.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Potential vs. delivery&lt;/strong&gt;: Ask smart questions, show you’ve learned stuff. Say what you’re going to do, then do it.&lt;/li&gt;
&lt;li&gt;The more experienced you become, the more you are assessed on your &lt;em&gt;ability to deliver&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Expect to demonstrate your experience during interviews.&lt;/li&gt;
&lt;li&gt;Periodically, or when you complete a project, take a few minutes to &lt;em&gt;write some lessons you’ve learned&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Take risks early&lt;/em&gt; as pivoting later on in your career becomes more difficult.&lt;/li&gt;
&lt;li&gt;Book recommendation for more senior developers when switching domains, tech stacks or employers: &lt;a href="https://www.parachutebook.com/"&gt;What Color Is Your Parachute&lt;/a&gt;, by Richard N. Bolles, with Katherine Brooks.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Maintain work-life balance&lt;/strong&gt;: preserve a firm boundary. &lt;em&gt;Work is a marathon, not a sprint&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Get clear on how the employer expects you to handle unplanned work with conflicting priorities.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Listen to the voices when they help and ignore them when they don’t&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Be willing to do things you didn’t think you wanted to do&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Connect with non-tech people outside of work to take a break and experience life from their point of view too.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Manage your career&lt;/strong&gt;: &lt;em&gt;know your goals&lt;/em&gt;; &lt;em&gt;communicate your goals&lt;/em&gt;; &lt;em&gt;progress towards them&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Knowledge: pick an interest and follow it. Plan for a decade or more, with some milestones in between.&lt;/li&gt;
&lt;li&gt;Communication: communicate your desires and ambitions. Good companies want to see their employees grow.&lt;/li&gt;
&lt;li&gt;Progress: study for a certification, read a book, go to a meetup. Be active.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Know your runway&lt;/strong&gt;: this is the time you have at your current spending until you have no money. Calculate it once a month and know how long it would take to get a new job (guess).&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Get a job before you need to&lt;/em&gt; to avoid accepting an ill-fitting job due to desperation.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Cutting expenses&lt;/em&gt; is hard but it’s where you usually have the most control.&lt;/li&gt;
&lt;li&gt;Spending savings for a career transition is an &lt;em&gt;investment&lt;/em&gt; in yourself.&lt;/li&gt;
&lt;li&gt;Activities that draw down your savings should lead to new opportunities and valuable personal knowledge.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Managing one on ones&lt;/strong&gt;: for remote ones, it’s best to have a &lt;em&gt;great Internet connection&lt;/em&gt;, a &lt;em&gt;quiet space&lt;/em&gt; and &lt;em&gt;video turned on&lt;/em&gt; (personal note: you do lose visual clues without video, but you can connect deeply without anyone being too self-aware with voice-only communication).&lt;/li&gt;
&lt;li&gt;Regular ones (weekly or bi-weekly) are preferred so you don’t dread feedback only when you ask for a raise or do something wrong. Knowing your manager beyond these scenarios will help.&lt;/li&gt;
&lt;li&gt;Reasons to schedule them: understand where we are headed so I know what to learn; know how I can best help the manager and the company; understand your priorities better.&lt;/li&gt;
&lt;li&gt;The direction of the one on one should be &lt;em&gt;determined by the employee&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Shoot for &lt;em&gt;regular&lt;/em&gt; ones that &lt;em&gt;do not get re-scheduled&lt;/em&gt;. Otherwise, propose having them less frequently if needed.&lt;/li&gt;
&lt;li&gt;If one-on-one meetings aren’t desirable, go for an asynchronous &lt;em&gt;weekly status report&lt;/em&gt; and get feedback from your manager this way: &lt;em&gt;it is critical for your career growth early on in your career&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Come with a &lt;em&gt;prepared agenda&lt;/em&gt; to make the most of them. A shared document in reverse chronological order works well. Example questions to add:&lt;ul&gt;
&lt;li&gt;How should I have handled situation &lt;code&gt;X&lt;/code&gt;?&lt;/li&gt;
&lt;li&gt;I would like to learn more about &lt;code&gt;Y&lt;/code&gt;; what are the opportunities?&lt;/li&gt;
&lt;li&gt;I’m struggling with &lt;code&gt;&amp;lt;problem&amp;gt;&lt;/code&gt;, do you have any suggestions?&lt;/li&gt;
&lt;li&gt;What are the challenges you see facing our team during project &lt;code&gt;Z&lt;/code&gt;?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;You should be able to &lt;em&gt;trust and rely on your manager/boss&lt;/em&gt;. If not, improve the relationship or go elsewhere: being constantly under threat and not knowing what to expect is mentally draining.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Write a brag document&lt;/strong&gt;: show everything you’re proud of so they know you’re a great team member. It should be thorough yet easy to read. Along with the agendas from your one-on-one meetings, it will serve to highlight your accomplishments for your next performance review.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Be adaptable and authentic&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Working remotely&lt;/strong&gt;: you need a &lt;em&gt;fast Internet connection&lt;/em&gt;; &lt;em&gt;iron discipline&lt;/em&gt;; be okay with &lt;em&gt;solitude&lt;/em&gt; and have the &lt;em&gt;ability to work through communication obstacles&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;If you are comfortable asking a dumb question, remote work can work well for you&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;You will need to &lt;em&gt;get used to asking questions and interrupting others&lt;/em&gt; as you more often than not won’t have enough context to infer whether it’s a good time to ask or not. It’s better than the alternative of wasting your time.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;How to go through a layoff&lt;/strong&gt;: &lt;em&gt;this isn’t personal and you will get through it&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Ask questions:&lt;ul&gt;
&lt;li&gt;Know the deadline to sign the necessary documents;&lt;/li&gt;
&lt;li&gt;Find out if there’s a severance and how much is it;&lt;/li&gt;
&lt;li&gt;What about funds like 401k, &lt;span class="caps"&gt;FSA&lt;/span&gt; or &lt;span class="caps"&gt;HSA&lt;/span&gt;;&lt;/li&gt;
&lt;li&gt;How can I say goodbye to teammates (emails and LinkedIn are good options);&lt;/li&gt;
&lt;li&gt;What about company’s property, e.g. laptop, books and equipments;&lt;/li&gt;
&lt;li&gt;Who can I contact if have I more questions;&lt;/li&gt;
&lt;li&gt;Make sure they have your personal email;&lt;/li&gt;
&lt;li&gt;Take notes of what happened;&lt;/li&gt;
&lt;li&gt;Get involved with a lawyer before signing anything (e.g. non-compete agreements).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Use LinkedIn&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;Send a note when you connect and keep in touch with past colleagues.&lt;/li&gt;
&lt;li&gt;Ask recruiters about the job market, salary ranges for people with your experience and good skills to learn.&lt;/li&gt;
&lt;li&gt;Review your connections’ companies, review posted jobs and ask for introductions from your connections (let them know why the company is awesome, why you’re awesome and why you want to work there).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Contracting&lt;/strong&gt;: try it during the first decade of your career.&lt;/li&gt;
&lt;li&gt;It’s easier than applying for a full-time job given you’re easier to let go.&lt;/li&gt;
&lt;li&gt;It will keep your skills sharp if you want to find clients.&lt;/li&gt;
&lt;li&gt;If/when you’re an employee again, job hunting won’t feel as scary.&lt;/li&gt;
&lt;li&gt;You will &lt;em&gt;strengthen your network&lt;/em&gt; by being able to refer former colleagues.&lt;/li&gt;
&lt;li&gt;Contracting can be more lucrative on a per-hour basis.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Contracting via an agency&lt;/em&gt; is easier (you avoid sales and accounting) but it pays less.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Direct contracting&lt;/em&gt; is harder but you’ll learn beyond software development (sales, customer support, marketing, invoicing and chasing payments). It leads to more control over the clients you work with and more income. You may spend as much as 50% of your time on non-billable work such as seeking new opportunities: your rate needs to reflect this.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Engineering management&lt;/strong&gt;: if you move to a management position, &lt;em&gt;be prepared to be a novice again&lt;/em&gt; as the skill set involved is not the same.&lt;/li&gt;
&lt;li&gt;You should understand the code but &lt;em&gt;keep out of the critical path&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;You shouldn’t make technical decisions&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;You are here to &lt;em&gt;enable teams to do great work&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;The fun, technical stuff should only be done during hackathons.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Be clear about what you want&lt;/em&gt; and &lt;em&gt;maintain the right set of skills&lt;/em&gt; so you can keep doing what you enjoy the most.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Someday, you won’t want to code for a living&lt;/strong&gt;: becoming a manager gives you leverage to have more impact in the world.&lt;/li&gt;
&lt;li&gt;Impact can be achieved through writing, project management, product management, speaking, starting a business, mentoring, leading a team, managing, teaching, architecting and consulting. Notice that coding is not the primary output.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="community"&gt;Community&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Building a community/network puts you in a situation where &lt;strong&gt;you can help people help others&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Meetups&lt;/strong&gt;: find one on &lt;a href="https://www.meetup.com/"&gt;meetup.com&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;It will expose you to &lt;em&gt;new ideas&lt;/em&gt; you can bring to your job.&lt;/li&gt;
&lt;li&gt;You can have &lt;em&gt;professional conversations with low stakes&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;It gives you a way to &lt;em&gt;practice talking&lt;/em&gt; to new people and &lt;em&gt;make friends&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;It provides a network outside of your coworkers should you need to &lt;em&gt;find a new job&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Conversational hooks&lt;/strong&gt;: give some details about where you work and what projects you have been working on to give the chance to the other person to steer the conversation in the direction they want. Flip the question to ask people to talk about themselves (most people like to do that).&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Don’t make transactional conversations&lt;/em&gt;: find something interesting to talk about.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Online tech communities&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Sign up for an email list&lt;/em&gt; related to the technologies you are interested in. &lt;em&gt;Sign up for notifications on projects&lt;/em&gt;. You can &lt;em&gt;follow project contributors on Twitter&lt;/em&gt; or other social media places.&lt;/li&gt;
&lt;li&gt;For something more general, have a look on &lt;em&gt;Slack&lt;/em&gt;, &lt;em&gt;forums&lt;/em&gt;, &lt;em&gt;&lt;span class="caps"&gt;IRC&lt;/span&gt; channels&lt;/em&gt;, &lt;em&gt;Facebook groups&lt;/em&gt; and so on. &lt;em&gt;Slashdot&lt;/em&gt;, &lt;em&gt;Hacker News&lt;/em&gt;, &lt;em&gt;Reddit&lt;/em&gt;, &lt;em&gt;Stack Overflow&lt;/em&gt; are other good options.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;You get what you give&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;Offering to help &lt;em&gt;makes you more empathetic&lt;/em&gt; and &lt;em&gt;aware of other people’s needs&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;It feels good to help&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;You become less arrogant&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;You help &lt;em&gt;build the positivity of the community&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;People will be quicker to &lt;em&gt;recommend you for a job&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;It improves your &lt;em&gt;sense of self-worth&lt;/em&gt; and &lt;em&gt;confidence&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Build your work community&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;Use &lt;em&gt;LinkedIn&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Never leave a job on bad terms&lt;/em&gt;. Give the requisite notice, document your work and prepare for a hand off.&lt;/li&gt;
&lt;li&gt;Keep in touch with past coworkers, even if it’s just to leave a note on their work anniversary.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Three daily mantras&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Surround yourself with people smarter than you&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Build community and give without expecting anything in return&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Listen to your gut, without exception&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Build a personal board of advisors&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Some issues you can discuss with them that aren’t topics for current coworkers:&lt;ul&gt;
&lt;li&gt;Someone under your supervision is not succeeding;&lt;/li&gt;
&lt;li&gt;You have an issue with your manager that you’re not sure how to solve;&lt;/li&gt;
&lt;li&gt;You are evaluating job offers.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Make sure to keep these relationships fresh and &lt;em&gt;offer to help too&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;This circle shifts over time&lt;/em&gt;: a new developer doesn’t have the same questions that a team lead would have.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h1 id="conclusion"&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;That’s it: we went through a short overview of a book I’ve enjoyed and recommend heartily. You can find more on &lt;a href="https://letterstoanewdeveloper.com/"&gt;the author’s website&lt;/a&gt;. You might also enjoy a follow-up book summary about &lt;a href="https://www.sglavoie.com/posts/2023/04/16/book-summary-the-effective-engineer/"&gt;The Effective Engineer&lt;/a&gt;. May you live this knowledge!&lt;/p&gt;</content><category term="learnings"></category><category term="advice"></category><category term="best practices"></category><category term="books"></category><category term="career"></category></entry><entry><title>Managing multiple tmux sessions at once</title><link href="https://www.sglavoie.com/posts/2021/09/19/managing-multiple-tmux-sessions-at-once/" rel="alternate"></link><published>2021-09-19T18:13:00-05:00</published><updated>2021-09-19T18:13:00-05:00</updated><author><name>Sébastien Lavoie</name></author><id>tag:www.sglavoie.com,2021-09-19:/posts/2021/09/19/managing-multiple-tmux-sessions-at-once/</id><summary type="html">&lt;p&gt;Open and close projects with tmux sessions in a breeze via two keyboard&amp;nbsp;shortcuts.&lt;/p&gt;</summary><content type="html">
&lt;hr/&gt;
&lt;h1 id="introduction"&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Released back in 2007, &lt;a href="https://github.com/tmux/tmux/wiki"&gt;tmux&lt;/a&gt; keeps being amazing! Because I have never bothered automating anything to make its use simpler, it took some time for it to become a working environment I enjoy for everyday use. This is a thing of the past: thanks to Oleksandr Kocherhin from &lt;a href="https://monsterlessons-academy.com/"&gt;Monsterlessons Academy&lt;/a&gt;, who shared his tmux workflow in his YouTube video titled &lt;a href="https://www.youtube.com/watch?v=GuH7pw9LejY"&gt;Best Terminal Application for Web Development&lt;/a&gt;, I saw a few automation opportunities I thought were worth tackling.&lt;/p&gt;
&lt;p&gt;In this post, I’m sharing a little tip about managing tmux sessions that was inspired from the mentioned video. I am using &lt;a href="https://i3wm.org/"&gt;i3wm&lt;/a&gt; on Linux, but you can adapt this with any desktop environment as long as you can trigger the execution of programs with a keyboard shortcut in one way or another. I will be using Rofi and the &lt;code&gt;find&lt;/code&gt; command, which you can find on Unix systems. If you would rather use dmenu instead of Rofi with this script, &lt;a href="https://www.sglavoie.com/posts/2019/11/10/using-dmenu-to-optimize-common-tasks/"&gt;this article can serve as a reference&lt;/a&gt;. Enough said, let’s get to it.&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="what-is-this-all-about"&gt;What is this all about?&lt;/h1&gt;
&lt;p&gt;The idea is simple: have a few keyboard shortcuts to manage tmux sessions. That means being able to open new sessions and being able to kill them too. I kept this setup very simple on purpose but of course some improvements could be made. For instance, it could be nice to know which projects have already been opened so that the script doesn’t prompt you with a list of projects that include projects that you have already launched, but I haven’t found the need so far to deal with this potential issue as I tend to only work on a couple of projects during the course of a given day.&lt;/p&gt;
&lt;p&gt;In summary, here is what we want to achieve in this post:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Configure projects so that when we want to open them, they will be set up in the right directory with servers running, etc.;&lt;/li&gt;
&lt;li&gt;Open a tmux session with a keyboard shortcut, listing all projects that were configured in the previous step;&lt;/li&gt;
&lt;li&gt;Kill any opened tmux session with another keyboard shortcut.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That’s it!&lt;/p&gt;
&lt;h1 id="1-configuring-projects-to-launch-tmux-sessions"&gt;1. Configuring projects to launch tmux sessions&lt;/h1&gt;
&lt;p&gt;Firstly, we need to create new files to open our projects in the way we want. Basically, we need to create a file, let’s call it &lt;code&gt;.tmux&lt;/code&gt;, and put it at the root of the project we’re interested in working with tmux. Then, we need to put some instructions that will be run with the shell (e.g. Bash or Zsh) so that tmux commands will be run automatically for us and let us “attach” to the session once all the necessary actions are performed. That means we need to make that file executable. In the terminal, this would be done as follows, assuming the project’s folder is the current working directory:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;chmod&lt;span class="w"&gt; &lt;/span&gt;+x&lt;span class="w"&gt; &lt;/span&gt;.tmux
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;At last, we want to give some orders to tmux so that when we execute that file, it will open our project in a pre-configured state so we’re ready to go. This will need to be customized depending on your needs, but here is a simple example to illustrate what could happen. So, we could put the following inside the &lt;code&gt;.tmux&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/sh&lt;/span&gt;

&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-e

&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;tmux&lt;span class="w"&gt; &lt;/span&gt;has-session&lt;span class="w"&gt; &lt;/span&gt;-t&lt;span class="o"&gt;=&lt;/span&gt;my-project&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;/dev/null&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;then&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;tmux&lt;span class="w"&gt; &lt;/span&gt;attach&lt;span class="w"&gt; &lt;/span&gt;-t&lt;span class="w"&gt; &lt;/span&gt;my-project
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;exit&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;

tmux&lt;span class="w"&gt; &lt;/span&gt;new-session&lt;span class="w"&gt; &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;-s&lt;span class="w"&gt; &lt;/span&gt;my-project&lt;span class="w"&gt; &lt;/span&gt;-n&lt;span class="w"&gt; &lt;/span&gt;nvim&lt;span class="w"&gt; &lt;/span&gt;-x&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;tput&lt;span class="w"&gt; &lt;/span&gt;cols&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-y&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;tput&lt;span class="w"&gt; &lt;/span&gt;lines&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Neovim&lt;/span&gt;
tmux&lt;span class="w"&gt; &lt;/span&gt;send-keys&lt;span class="w"&gt; &lt;/span&gt;-t&lt;span class="w"&gt; &lt;/span&gt;my-project:nvim&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"n"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Enter

&lt;span class="c1"&gt;# Servers&lt;/span&gt;
tmux&lt;span class="w"&gt; &lt;/span&gt;new-window&lt;span class="w"&gt; &lt;/span&gt;-t&lt;span class="w"&gt; &lt;/span&gt;my-project&lt;span class="w"&gt; &lt;/span&gt;-n&lt;span class="w"&gt; &lt;/span&gt;servers
tmux&lt;span class="w"&gt; &lt;/span&gt;send-keys&lt;span class="w"&gt; &lt;/span&gt;-t&lt;span class="w"&gt; &lt;/span&gt;my-project:servers&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"cd frontend &amp;amp;&amp;amp; yarn start"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Enter

tmux&lt;span class="w"&gt; &lt;/span&gt;split-window&lt;span class="w"&gt; &lt;/span&gt;-t&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-v&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;50&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# split it into two halves&lt;/span&gt;
tmux&lt;span class="w"&gt; &lt;/span&gt;send-keys&lt;span class="w"&gt; &lt;/span&gt;-t&lt;span class="w"&gt; &lt;/span&gt;my-project:servers&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"cd backend &amp;amp;&amp;amp; ap &amp;amp;&amp;amp; uvicorn main:app --reload"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Enter

tmux&lt;span class="w"&gt; &lt;/span&gt;attach&lt;span class="w"&gt; &lt;/span&gt;-t&lt;span class="w"&gt; &lt;/span&gt;my-project:nvim
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here is what is happening:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If our project, named &lt;code&gt;my-project&lt;/code&gt;, has a tmux session already running, then we “attach” to it and nothing more is done.&lt;/li&gt;
&lt;li&gt;Otherwise, the session is created in “detached” mode so we can run a few commands smoothly and later attach to the created session.&lt;/li&gt;
&lt;li&gt;With the &lt;code&gt;-n&lt;/code&gt; flag, we name the window to be created (here, the first window is &lt;code&gt;nvim&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Then, we “send” keys to the session, to that newly created &lt;code&gt;nvim&lt;/code&gt; window. In this case, we send a single keystroke &lt;code&gt;n&lt;/code&gt;, which is just an alias for executing Neovim.&lt;/li&gt;
&lt;li&gt;In a new window named &lt;code&gt;servers&lt;/code&gt;, we send keys to execute the frontend server.&lt;/li&gt;
&lt;li&gt;Then, we split the second window we just created vertically and we run the commands needed to launch the backend server, again making use of Bash aliases for convenience.&lt;/li&gt;
&lt;li&gt;Finally, we attach to the session and we open the first window &lt;code&gt;nvim&lt;/code&gt;, ready to work.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And just like this, what takes quite a few steps to do manually can be automated in one go when setting up the environment at the beginning of a working bout. Now, it could be convenient to create a generic template for the above script to use when creating new projects, especially if those tend to be short-lived and share some properties (e.g. maybe they all need to launch some kind of server in the background).&lt;/p&gt;
&lt;h1 id="2-script-to-open-projects"&gt;2. Script to open projects&lt;/h1&gt;
&lt;p&gt;Firstly, we need a way to list and open all “known” projects. This is achieved in this example very simply with the &lt;code&gt;find&lt;/code&gt; command as well as with the help of &lt;code&gt;rofi&lt;/code&gt;. The script in question is as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="c1"&gt;# Get the path to the `.tmux` file to execute using `find` and `rofi`&lt;/span&gt;
&lt;span class="nv"&gt;PROJECT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;find&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;/dev&lt;span class="w"&gt; &lt;/span&gt;-type&lt;span class="w"&gt; &lt;/span&gt;d&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-name&lt;span class="w"&gt; &lt;/span&gt;node_modules&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;-name&lt;span class="w"&gt; &lt;/span&gt;.venv&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;-path&lt;span class="w"&gt; &lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-prune&lt;span class="w"&gt; &lt;/span&gt;-false&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;-name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'.tmux'&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;rofi&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;-dmenu&lt;span class="w"&gt; &lt;/span&gt;-theme&lt;span class="w"&gt; &lt;/span&gt;purple&lt;span class="w"&gt; &lt;/span&gt;-font&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'JetBrainsMono 14'&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;-width&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;90&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-show&lt;span class="w"&gt; &lt;/span&gt;window&lt;span class="sb"&gt;`&lt;/span&gt;

&lt;span class="c1"&gt;# Get the full directory path to the `.tmux` file, excluding the filename&lt;/span&gt;
&lt;span class="nv"&gt;PROJECT_DIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$PROJECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;xargs&lt;span class="w"&gt; &lt;/span&gt;-I&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;dirname&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"{}"&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;

&lt;span class="c1"&gt;# If $PROJECT is empty (e.g. pressing Esc at the prompt), don't do anything&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;!&lt;span class="w"&gt; &lt;/span&gt;-z&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$PROJECT&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;then&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;kitty&lt;span class="w"&gt; &lt;/span&gt;--directory&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$PROJECT_DIR&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-e&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$PROJECT&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So, what this does is this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It finds all the directories where a &lt;code&gt;.tmux&lt;/code&gt; file exists, excluding non-useful folders like &lt;code&gt;node_modules&lt;/code&gt;. The &lt;code&gt;-prune&lt;/code&gt; flag is passed to avoid recursion further inside a directory once a &lt;code&gt;.tmux&lt;/code&gt; file is found. The results of &lt;code&gt;find&lt;/code&gt; are “piped” into &lt;code&gt;rofi&lt;/code&gt;, which displays the results. User selection is then stored in the &lt;code&gt;PROJECT&lt;/code&gt; variable.&lt;/li&gt;
&lt;li&gt;Once a file is selected, the full path without the filename is extracted and stored in the &lt;code&gt;PROJECT_DIR&lt;/code&gt; variable.&lt;/li&gt;
&lt;li&gt;Finally, all that is left to do is check if the user selected a project and if so, run it with the desired terminal from the correct directory. This will be different for most terminal emulators: here, an example is shown with the &lt;a href="https://sw.kovidgoyal.net/kitty/"&gt;kitty terminal&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h1 id="3-script-to-close-projects"&gt;3. Script to close projects&lt;/h1&gt;
&lt;p&gt;Here, we are concerned with the sessions that are now opened and that we might want to close. In a similar fashion as what we did to open projects, we want to kill them with a script that will run Rofi and do the job silently in the background. One such script that will get us there is shown below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="c1"&gt;# Get the name of all running sessions&lt;/span&gt;
&lt;span class="nv"&gt;TMUX_SESSIONS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;tmux&lt;span class="w"&gt; &lt;/span&gt;ls&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;cut&lt;span class="w"&gt; &lt;/span&gt;-f1&lt;span class="w"&gt; &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;":"&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;

&lt;span class="c1"&gt;# No listed session, then notify about it&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-z&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$TMUX_SESSIONS&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;then&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;notify-send&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"No active tmux session found"&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="c1"&gt;# Show all running sessions with Rofi and store the selection in a variable&lt;/span&gt;
&lt;span class="nv"&gt;SESSION&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$TMUX_SESSIONS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;rofi&lt;span class="w"&gt; &lt;/span&gt;-sep&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;' '&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;-dmenu&lt;span class="w"&gt; &lt;/span&gt;-theme&lt;span class="w"&gt; &lt;/span&gt;purple&lt;span class="w"&gt; &lt;/span&gt;-font&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'JetBrainsMono 14'&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;-width&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;90&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-show&lt;span class="w"&gt; &lt;/span&gt;window&lt;span class="sb"&gt;`&lt;/span&gt;

&lt;span class="c1"&gt;# Kill the selected session&lt;/span&gt;
tmux&lt;span class="w"&gt; &lt;/span&gt;kill-session&lt;span class="w"&gt; &lt;/span&gt;-t&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$SESSION&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this case, the usage is quite straightforward: only running sessions are shown, so it’s just a matter of choosing the one we want to kill or pressing the &lt;code&gt;Escape&lt;/code&gt; key to abort the Rofi pop-up.&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="example-workflow"&gt;Example workflow&lt;/h1&gt;
&lt;p&gt;It’s a matter of setting up keyboard shortcuts to run the scripts to open and kill projects. For instance, one such configuration for the &lt;code&gt;i3&lt;/code&gt; window manager would be as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+Mod1+p&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;$exec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;~/path/to/projects-start.sh
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+Mod1+k&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;$exec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;~/path/to/projects-kill.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;A simple shortcut lets us choose sessions to open.&lt;/li&gt;
&lt;li&gt;Next, if we decide to kill a session at some point, we have another shortcut to do that.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h1 id="conclusion"&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Far from being a perfect solution (although it already feels comfortable as a main driver), this workflow initiates what I think can lead to substantial optimizations when it comes to using tmux. There’s room for improvement when a user selects an already opened session: ideally, we would just switch to that session automatically. These details need to be implemented based on the window manager that’s being used, but suffice to say, it can be done! In any case, I hope this may give you a semblance of inspiration to take this idea to the next level. There are tools to help with session persistence, such as &lt;a href="https://github.com/tmux-plugins/tmux-resurrect"&gt;tmux-resurrect&lt;/a&gt;, but that’s a topic for another time.&lt;/p&gt;
&lt;h2 id="more-resources-and-references"&gt;More resources and references&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=GuH7pw9LejY"&gt;Best Terminal Application for Web Development&lt;/a&gt;, original inspiration for this workflow. — Monsterlessons Academy, YouTube.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tmux/tmux/wiki"&gt;The tmux wiki&lt;/a&gt;, GitHub.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tmux-plugins/tmux-resurrect"&gt;tmux-resurrect&lt;/a&gt;, GitHub.&lt;/li&gt;
&lt;/ul&gt;</content><category term="workflow"></category><category term="bash"></category><category term="i3"></category><category term="rofi"></category><category term="script"></category><category term="tmux"></category></entry><entry><title>Convenient and lightning fast backups with rsync</title><link href="https://www.sglavoie.com/posts/2021/07/31/convenient-and-lightning-fast-backups-with-rsync/" rel="alternate"></link><published>2021-07-31T09:01:00-05:00</published><updated>2021-07-31T09:01:00-05:00</updated><author><name>Sébastien Lavoie</name></author><id>tag:www.sglavoie.com,2021-07-31:/posts/2021/07/31/convenient-and-lightning-fast-backups-with-rsync/</id><summary type="html">&lt;p&gt;Cloud storage became affordable a long time ago while internet connection speeds have increased dramatically over the years. Yet, there is still a strong case to be made for daily backups of a whole system and for this purpose, there are few options to contend with &lt;code&gt;rsync&lt;/code&gt;.&lt;/p&gt;</summary><content type="html">
&lt;hr/&gt;
&lt;h1 id="introduction"&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Coming into its fourth year of existence and usage in production environments, this simple script has proven to be a fantastic ally. Despite the plethora of great options out there that have more bells and whistles, I have yet to find a single complaint about this solution as it hinges on the minimalist side, requiring only a working Python 3 installation along with the powerful &lt;code&gt;rsync&lt;/code&gt; command-line tool.&lt;/p&gt;
&lt;p&gt;It’s one of those pieces of code that perform some really basic tasks that can be scheduled with &lt;a href="https://opensource.com/article/17/11/how-use-cron-linux"&gt;&lt;code&gt;cron&lt;/code&gt;&lt;/a&gt; in the background, that one forgets about until a real need to access a backup comes up. This script is barely a Python wrapper calling &lt;code&gt;rsync&lt;/code&gt; but still, I felt like sharing it for those who like uncomplicated setups. I’ve literally left this script alone for years some time after the release of Python 3.6 which was released back in December 2016 and it has been going strong since then mostly due to the fact it does not do much more than backing files up and leveraging &lt;code&gt;rsync&lt;/code&gt;.&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="prerequisites"&gt;Prerequisites&lt;/h1&gt;
&lt;p&gt;As briefly mentioned above, this tool uses &lt;a href="https://www.python.org/"&gt;Python 3.6+&lt;/a&gt; and &lt;a href="https://rsync.samba.org/"&gt;&lt;code&gt;rsync&lt;/code&gt;&lt;/a&gt;. That’s it, really.&lt;/p&gt;
&lt;h1 id="setting-up-the-script"&gt;Setting up the script&lt;/h1&gt;
&lt;p&gt;This script is being made &lt;a href="https://github.com/sglavoie/dev-helpers/tree/main/rsync_backup"&gt;available on GitHub&lt;/a&gt; within a set of other small tools. To get the source code for this particular tool, you can either &lt;a href="https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/cloning-a-repository-from-github/cloning-a-repository"&gt;clone the whole repository&lt;/a&gt;, get the content of the files separately or simply copy and paste &lt;a href="#the-script"&gt;the current version from below&lt;/a&gt;. You will need a &lt;code&gt;settings.json&lt;/code&gt; file as well as the Python script that will run the necessary commands.&lt;/p&gt;
&lt;h2 id="the-configuration-file"&gt;The configuration file&lt;/h2&gt;
&lt;p&gt;Right off the bat, you will most probably want to update the array of strings for the &lt;code&gt;data_sources&lt;/code&gt; key as well as the string for the key &lt;code&gt;data_destination&lt;/code&gt; in the following &lt;span class="caps"&gt;JSON&lt;/span&gt; file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;"data_sources"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s2"&gt;"/home/sglavoie"&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;"data_destination"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"/media/sglavoie/Elements"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;"terminal_width"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;"sep"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"=-"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;"log_name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;".backup_log_"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;"log_format"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"%y%m%d_%H_%M_%S"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;"rsync_options"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s2"&gt;"-vaAHh"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s2"&gt;"--delete"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s2"&gt;"--ignore-errors"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s2"&gt;"--force"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s2"&gt;"--prune-empty-dirs"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s2"&gt;"--delete-excluded"&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;"backup_exclude"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;".backup_exclude"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By default, the following options are passed to &lt;code&gt;rsync&lt;/code&gt;:&lt;/p&gt;
&lt;div class="table-wrapper"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Option&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-vaAH&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;verbose, archive, ACLs, hard-links (preserve)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--delete&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;“delete extraneous files from destination dirs”&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--ignore-errors&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;“delete even if there are I/O errors”&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--force&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;“force deletion of directories even if not empty”&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--prune-empty-dirs&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;“prune empty directory chains from the file-list”&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--delete-excluded&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;“also delete excluded files from destination dirs”&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;h3 id="description-of-available-settings"&gt;Description of available settings&lt;/h3&gt;
&lt;div class="table-wrapper"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name of setting&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;data_sources&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Directories to backup, supplied as a list of strings (no slash at the end).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;data_destination&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Single destination of the files to backup, supplied as a string. This can be overridden when passing option &lt;code&gt;-d&lt;/code&gt; or &lt;code&gt;--dest&lt;/code&gt; to the script&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;terminal_width&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Line length in the terminal, used for printing separators.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;sep&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Separator to use along with &lt;code&gt;terminal_width&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;log_name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Sets the prefix of the log filename.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;log_format&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;This goes right after &lt;code&gt;log_name&lt;/code&gt; as a suffix.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;rsync_options&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Options to use with rsync as a list of strings.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;backup_exclude&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Default file in each source in &lt;code&gt;data_sources&lt;/code&gt; where files/directories will be ignored.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;h2 id="the-script"&gt;The script&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;Script that uses `rsync` to make a simple and convenient backup.&lt;/span&gt;
&lt;span class="sd"&gt;Note: requires Python 3.6+. No other Python third-party libraries required.&lt;/span&gt;
&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;argparse&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;glob&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pathlib&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run_backup&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""This is where all the action happens!"""&lt;/span&gt;
    &lt;span class="n"&gt;settings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_settings&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;# initiate the parser&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;argparse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ArgumentParser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"backup"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;"-c"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"--clear"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Delete all log files for current source in DATA_SOURCES."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"store_true"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;"-s"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"--src"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"source"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Specify an alternative source to backup as a string."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"store"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;"-d"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"--dest"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"destination"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Specify an alternative destination for backup as a string."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"store"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# read arguments from the command line&lt;/span&gt;
    &lt;span class="n"&gt;arguments&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;# check for --source or -s&lt;/span&gt;
    &lt;span class="c1"&gt;# Replace potential list of sources to backup with this one&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;arguments&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arguments&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"data_sources"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;arguments&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Please enter a valid source to backup."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# check for --clear or -c&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;arguments&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;clear_logs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;data_sources&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"data_sources"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="n"&gt;log_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"log_name"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# check for --dest or -d&lt;/span&gt;
    &lt;span class="c1"&gt;# Replace destination to backup with this one&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;arguments&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;destination&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arguments&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;destination&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"data_destination"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arguments&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;destination&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Please enter a valid destination."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# don't run the script if the destination doesn't exist&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"data_destination"&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"The destination doesn't exist.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;(&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'data_destination'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;)"&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;backup_all_sources&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;backup_all_sources&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""Iterate over all sources to backup."""&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"data_sources"&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
        &lt;span class="n"&gt;date_now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;log_format&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;date_now&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"log_format"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;log_filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'log_name'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}{&lt;/span&gt;&lt;span class="n"&gt;log_format&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
        &lt;span class="n"&gt;log_option&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"--log-file=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;log_filename&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

        &lt;span class="n"&gt;backup_source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"backup_cmd"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;backup_source&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;log_option&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

        &lt;span class="c1"&gt;# files to ignore in backup&lt;/span&gt;
        &lt;span class="n"&gt;exclude_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'backup_exclude'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exclude_file&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;exclude_option&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"--exclude-from=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;exclude_file&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
            &lt;span class="n"&gt;backup_source&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;exclude_option&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"data_destination"&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;# skips '--exclude-from' option if no file is found&lt;/span&gt;
            &lt;span class="n"&gt;backup_source&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"data_destination"&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;

        &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"source"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt;
        &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"backup_source"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;backup_source&lt;/span&gt;
        &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"log_filename"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;log_filename&lt;/span&gt;

        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;backing_source&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;KeyboardInterrupt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;KeyboardInterrupt: Exiting operations."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;backing_source&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""Print information to STDOUT and to `log_filename` and executes the&lt;/span&gt;
&lt;span class="sd"&gt;    rsync command."""&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"sep"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"terminal_width"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="n"&gt;cmd_executed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;" "&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"backup_source"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;msg_executed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"Command executed:&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;cmd_executed&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg_executed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"log_filename"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"w"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;log_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;log_file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;msg_executed&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;child&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"backup_source"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;communicate&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c1"&gt;# call communicate to get the return code&lt;/span&gt;
        &lt;span class="n"&gt;rc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;returncode&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;FileNotFoundError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"FileNotFoundError: Is the `rsync` tool installed?"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;Backup completed for: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'source'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; (return code: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;rc&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;)"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"sep"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"terminal_width"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;clear_logs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data_sources&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;log_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""Clears log files for each source specified in SETTINGS."""&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;data_sources&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# Retrieve a list of all matching log files in `source`&lt;/span&gt;
        &lt;span class="n"&gt;log_files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;glob&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;glob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;log_name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;*"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;log_files&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;[]:&lt;/span&gt;
            &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;There is no log file to delete in &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"Log files in &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;:"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;log_file&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;log_files&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;log_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;user_says_yes&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;log_file&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;log_files&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;log_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Log files deleted."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Exiting script..."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;user_says_yes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;Do you want to delete log files for this source? (y/n) "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""Asks the user to enter either "y" or "n" to confirm. Returns boolean."""&lt;/span&gt;
    &lt;span class="n"&gt;choice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;choice&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;user_input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;user_input&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"y"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;choice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;user_input&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"n"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;choice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Please enter either "y" or "n".'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;choice&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_settings&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Get the settings from `settings.json`.&lt;/span&gt;

&lt;span class="sd"&gt;    Returns:&lt;/span&gt;
&lt;span class="sd"&gt;        dict: Containing all settings used by the tool.&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;directory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pathlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;directory&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="s2"&gt;"settings.json"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;settings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;backup_cmd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"rsync"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;backup_cmd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"rsync_options"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"backup_cmd"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;backup_cmd&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;run_backup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h1 id="how-to-use"&gt;How to use&lt;/h1&gt;
&lt;h2 id="one-time-setup"&gt;One-time setup&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Set all values in &lt;code&gt;settings.json&lt;/code&gt; to suit your needs.&lt;/li&gt;
&lt;li&gt;Make sure that the backup destination is available/mounted. A simple warning will be echoed if the destination can’t be found.&lt;/li&gt;
&lt;li&gt;Call the Python script. As an example, if it’s located at &lt;code&gt;/home/user/backup/rsync_backup.py&lt;/code&gt;, then you could put the following alias in &lt;code&gt;~/.bash_aliases&lt;/code&gt; (or equivalent)*:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;backup&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'python3 /home/user/backup/rsync_backup.py'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;* Python may be called differently on your system, e.g. simply &lt;code&gt;python&lt;/code&gt; instead of &lt;code&gt;python3&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In this instance, the script can now be executed in a terminal with the keyword &lt;code&gt;backup&lt;/code&gt; along with optional arguments.&lt;/p&gt;
&lt;h2 id="using-as-a-daily-driver"&gt;Using as a daily driver&lt;/h2&gt;
&lt;p&gt;Make sure the destination to back files up is available/mounted and simply call the script (e.g. &lt;code&gt;backup&lt;/code&gt; in this example).&lt;/p&gt;
&lt;p&gt;The output will look something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;backup&lt;/span&gt;
&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-
Command&lt;span class="w"&gt; &lt;/span&gt;executed:
rsync&lt;span class="w"&gt; &lt;/span&gt;-vaAHh&lt;span class="w"&gt; &lt;/span&gt;--delete&lt;span class="w"&gt; &lt;/span&gt;--ignore-errors&lt;span class="w"&gt; &lt;/span&gt;--force&lt;span class="w"&gt; &lt;/span&gt;--prune-empty-dirs&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;--delete-excluded&lt;span class="w"&gt; &lt;/span&gt;--log-file&lt;span class="o"&gt;=&lt;/span&gt;/home/sglavoie/.backup_log_210731_09_28_09&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;--exclude-from&lt;span class="o"&gt;=&lt;/span&gt;/home/sglavoie/.backup_exclude&lt;span class="w"&gt; &lt;/span&gt;/home/sglavoie&lt;span class="w"&gt; &lt;/span&gt;/tmp

building&lt;span class="w"&gt; &lt;/span&gt;file&lt;span class="w"&gt; &lt;/span&gt;list&lt;span class="w"&gt; &lt;/span&gt;...&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;done&lt;/span&gt;
deleting&lt;span class="w"&gt; &lt;/span&gt;sglavoie/.backup_log_210731_08_47_24
sglavoie/
sglavoie/.bash_aliases
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="avoid-deleting-files-at-the-destination"&gt;Avoid deleting files at the destination&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;rsync&lt;/code&gt; command first builds a list of the files that are part of the backup and will go on adding new files, updating existing files as well as removing files that are found in the destination but not in the source anymore according to the default list of flags passed to it in this implementation. It is therefore important to note that &lt;strong&gt;if you would like to back up files in the destination that no longer exist in the source&lt;/strong&gt;, a convenient solution is simply to create a new folder at the root level inside the destination directory and manage those files separately.&lt;/p&gt;
&lt;p&gt;For instance, I sometimes want to back up large video files but there is rarely a need to update them. In this case, it would be possible to add the directories to exclude in the file &lt;code&gt;.backup_exclude&lt;/code&gt; (default configuration option) like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Videos/
Dropbox/other/folder/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then, these directories will be ignored when backing up the source (if they are nested inside the source directory to start with!). If the destination is set to &lt;code&gt;/media/user/backup&lt;/code&gt; and the source set to &lt;code&gt;/home/user/my_folder&lt;/code&gt;, then the script would recreate the “root” directory of the source if it doesn’t exist on the destination:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;ls&lt;span class="w"&gt; &lt;/span&gt;/media/user/backup
my_folder
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You could keep track of those heavy files that do not need to be backed up frequently by putting them manually next to &lt;code&gt;my_folder&lt;/code&gt; in &lt;code&gt;/media/user/backup&lt;/code&gt;. This will lead to huge speed ups when running the script if you track many files in this way!&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="conclusion"&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;This was a quick overview of what &lt;code&gt;rsync&lt;/code&gt; can offer: I neither touched upon its remote syncing capabilities nor the vast majority of its options, for which you can find a lot more information about by typing &lt;code&gt;man rsync&lt;/code&gt; to display the manual page in the terminal.&lt;/p&gt;
&lt;p&gt;Without making use of any fancy features of recent versions of Python or &lt;code&gt;rsync&lt;/code&gt;, I have found this simple backup procedure to have worked flawlessly for a long time. Hardware inevitably fails at some point and after having heard about countless examples of people losing some or all of their most precious files (including my own story…), I have come to enjoy backing my system with this little script.&lt;/p&gt;
&lt;p&gt;I wouldn’t trust my external drive to last forever either, hence I also rely on Dropbox and Google Drive for documents I find are a good fit. But overall, I just do not tend to back up every single system file in the cloud, so there is still a convincing use case where daily and complete backups become a possibility when using a fast approach like &lt;code&gt;rsync&lt;/code&gt; to incrementally save snapshots.&lt;/p&gt;
&lt;h2 id="more-resources-and-references"&gt;More resources and references&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rsync.samba.org/"&gt;rsync official website&lt;/a&gt; – samba.org.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.redhat.com/sysadmin/sync-rsync"&gt;Keeping Linux files and directories in sync with rsync&lt;/a&gt; – RedHat, going through the main options offered by the tool.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.digitalocean.com/community/tutorials/how-to-use-rsync-to-sync-local-and-remote-directories"&gt;How To Use Rsync to Sync Local and Remote Directories&lt;/a&gt; – DigitalOcean, demoing how to use the tool and covering the case of remote file access.&lt;/li&gt;
&lt;/ul&gt;</content><category term="automation"></category><category term="backup"></category><category term="python"></category><category term="rsync"></category><category term="script"></category><category term="terminal"></category></entry><entry><title>Managing dotfiles with a Git bare repository</title><link href="https://www.sglavoie.com/posts/2021/05/30/managing-dotfiles-with-git-bare-repository/" rel="alternate"></link><published>2021-05-30T13:13:00-05:00</published><updated>2022-04-03T11:49:00-05:00</updated><author><name>Sébastien Lavoie</name></author><id>tag:www.sglavoie.com,2021-05-30:/posts/2021/05/30/managing-dotfiles-with-git-bare-repository/</id><summary type="html">&lt;p&gt;Keeping configuration files under version control with a Git bare repository is a fast, elegant and convenient&amp;nbsp;solution!&lt;/p&gt;</summary><content type="html">
&lt;hr/&gt;
&lt;h1 id="introduction"&gt;Introduction&lt;/h1&gt;
&lt;p&gt;I have been managing my configuration files for the past year using a technique I originally came across in &lt;a href="https://www.youtube.com/watch?v=tBoLDpTWVOM"&gt;this YouTube video from DistroTube&lt;/a&gt;. This uses a Git bare repository instead of the “usual” way, which consists of using a normal Git repository where one would store the actual configuration files and create symbolic links to all those files to the expected path on the system.&lt;/p&gt;
&lt;p&gt;Needless to say, symlinks are a pain to manage when potentially hundreds of files need to be tracked in this way. Fortunately, working with a bare repository is much simpler: there’s neither a need to move files around nor store any of them in the dotfiles bare repository either. Let’s dive in to see how this works! I’ll keep the instructions to the point: for more details, please refer to the article &lt;a href="https://www.atlassian.com/git/tutorials/dotfiles"&gt;The best way to store your dotfiles: A bare Git repository&lt;/a&gt; from Atlassian, the source of knowledge behind this post.&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="1-set-up-the-system"&gt;1. Set up the system&lt;/h1&gt;
&lt;p&gt;Open a terminal and brace yourself to type a few commands. This will need to be done only once on any machine you use.&lt;/p&gt;
&lt;p&gt;Set the following variable to the name of the directory where you want to store your dotfiles (e.g. &lt;code&gt;.dotfiles&lt;/code&gt;, &lt;code&gt;dotfiles&lt;/code&gt;, &lt;code&gt;cfg&lt;/code&gt;, etc.):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;DOTFILES&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;dotfiles
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then type the following commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git&lt;span class="w"&gt; &lt;/span&gt;init&lt;span class="w"&gt; &lt;/span&gt;--bare&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;/&lt;span class="nv"&gt;$DOTFILES&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;config&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'/usr/bin/git --git-dir=$HOME/$DOTFILES/ --work-tree=$HOME'&lt;/span&gt;
config&lt;span class="w"&gt; &lt;/span&gt;config&lt;span class="w"&gt; &lt;/span&gt;--local&lt;span class="w"&gt; &lt;/span&gt;status.showUntrackedFiles&lt;span class="w"&gt; &lt;/span&gt;no
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Depending on where you store your terminal aliases (e.g. &lt;code&gt;.bashrc&lt;/code&gt;, &lt;code&gt;.zshrc&lt;/code&gt;, &lt;code&gt;.bash_aliases&lt;/code&gt;, etc.), set the following variable according to your needs:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;ALIASES&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;.bash_aliases
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once that is done, type the following command (or open the file containing your aliases with a text editor to manually put the alias wherever you want):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"alias config='/usr/bin/git --git-dir=&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;$DOTFILES&lt;/span&gt;&lt;span class="s2"&gt;/ --work-tree=&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;&lt;span class="s2"&gt;'"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;/&lt;span class="nv"&gt;$ALIASES&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can of course change the &lt;code&gt;config&lt;/code&gt; alias to something else. I like to simply use &lt;code&gt;c&lt;/code&gt; instead.&lt;/p&gt;
&lt;h2 id="11-create-a-repository-to-host-your-dotfiles"&gt;1.1 Create a repository to host your dotfiles&lt;/h2&gt;
&lt;p&gt;At this point, you will want to make sure you have created an empty Git repository on a website such as &lt;a href="https://github.com/"&gt;GitHub&lt;/a&gt;, &lt;a href="https://gitlab.com/"&gt;GitLab&lt;/a&gt; or &lt;a href="https://bitbucket.org/"&gt;BitBucket&lt;/a&gt;. In the interface of that website, you should find a place that allows you to copy the link to that Git repository, which might look like something like this: &lt;code&gt;git@github.com:username/dotfiles.git&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="12-set-the-remote-to-track-your-dotfiles"&gt;1.2 Set the remote to track your dotfiles&lt;/h2&gt;
&lt;p&gt;With your new Git repository created in the previous step, you will now want to add tracking information to be able to connect to the remote Git repository. You can do so as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;config&lt;span class="w"&gt; &lt;/span&gt;remote&lt;span class="w"&gt; &lt;/span&gt;set-url&lt;span class="w"&gt; &lt;/span&gt;origin&lt;span class="w"&gt; &lt;/span&gt;git@github.com:username/dotfiles.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For more information about this, you can read the article &lt;a href="https://www.sglavoie.com/posts/2020/10/03/setting-up-ssh-and-git-for-multiple-accounts/"&gt;Setting up &lt;span class="caps"&gt;SSH&lt;/span&gt; and Git for Multiple Accounts&lt;/a&gt; if you’ll be using an &lt;span class="caps"&gt;SSH&lt;/span&gt; key to connect and more specifically &lt;a href="https://git-scm.com/docs/git-remote"&gt;the official documentation on the &lt;code&gt;git remote&lt;/code&gt; command&lt;/a&gt;.&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="2-use-the-new-system"&gt;2. Use the new system&lt;/h1&gt;
&lt;h2 id="21-on-your-current-machine"&gt;2.1 On your current machine&lt;/h2&gt;
&lt;p&gt;Tracking changes will now be a breeze! All we have to do is to add files with our new alias (assuming &lt;code&gt;config&lt;/code&gt; was chosen) to Git, commit and push to a remote repository to keep everything neatly backed up.&lt;/p&gt;
&lt;p&gt;A typical workflow will look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;config&lt;span class="w"&gt; &lt;/span&gt;status
config&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;.gitconfig
config&lt;span class="w"&gt; &lt;/span&gt;commit&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Add .gitconfig"&lt;/span&gt;
config&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;.zshrc
config&lt;span class="w"&gt; &lt;/span&gt;commit&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Add .zshrc"&lt;/span&gt;
config&lt;span class="w"&gt; &lt;/span&gt;push
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="22-on-a-different-machine"&gt;2.2 On a different machine&lt;/h2&gt;
&lt;p&gt;Once yet have set up the system once with a remote repository, then the process becomes simpler as you can clone that repository and save a few steps. Here’s what you’d be expected to do to set up the same dotfiles management system on another machine:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# set to different values as desired&lt;/span&gt;
&lt;span class="nv"&gt;DOTFILES&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;dotfiles
&lt;span class="nv"&gt;REMOTE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;git@github.com:username/dotfiles.git

&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;config&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'/usr/bin/git --git-dir=$HOME/$DOTFILES/ --work-tree=$HOME'&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$DOTFILES&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;/.gitignore
git&lt;span class="w"&gt; &lt;/span&gt;clone&lt;span class="w"&gt; &lt;/span&gt;--bare&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$REMOTE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;/&lt;span class="nv"&gt;$DOTFILES&lt;/span&gt;
config&lt;span class="w"&gt; &lt;/span&gt;checkout
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;At this point, you might see an error message if you have existing configuration files on your machine in locations that are already tracked by Git in your dotfiles on the remote repository. If that’s the case, you can move them to a secure place like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;mkdir&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;.config-backup&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
config&lt;span class="w"&gt; &lt;/span&gt;checkout&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;egrep&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"\s+\."&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;awk&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'print $1'&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
xargs&lt;span class="w"&gt; &lt;/span&gt;-I&lt;span class="o"&gt;{}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;mv&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;.config-backup/&lt;span class="o"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let’s make sure we don’t show all untracked files again:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;config&lt;span class="w"&gt; &lt;/span&gt;config&lt;span class="w"&gt; &lt;/span&gt;--local&lt;span class="w"&gt; &lt;/span&gt;status.showUntrackedFiles&lt;span class="w"&gt; &lt;/span&gt;no
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;From here, this will be the same workflow as described in the section &lt;a href="#21-on-your-current-machine"&gt;2.1 On your current machine&lt;/a&gt;.&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="conclusion"&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;No more symlinks: this is definitely a nicer approach! You will need to be a bit more familiar with Git if you need to edit your Git history such as with the &lt;code&gt;rebase&lt;/code&gt; sub-command or when adding changes selectively such as with the sub-command &lt;code&gt;add -p&lt;/code&gt; to add files interactively — which might be the case if you want to commit only part of the changes made to one file — but that’s a great tool to master anyways, and there’s an article to get the ball rolling: &lt;a href="https://www.sglavoie.com/posts/2022/04/03/git-the-gist-of-it-common-commands-for-a-working-workflow/"&gt;Git the gist of it: common commands for a working workflow&lt;/a&gt; ;).&lt;/p&gt;
&lt;h2 id="more-resources-and-references"&gt;More resources and references&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=tBoLDpTWVOM"&gt;Git Bare Repository - A Better Way To Manage Dotfiles&lt;/a&gt; — DistroTube, YouTube&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.atlassian.com/git/tutorials/dotfiles"&gt;The best way to store your dotfiles: A bare Git repository&lt;/a&gt;, the source of the idea for this post. — Atlassian&lt;/li&gt;
&lt;/ul&gt;</content><category term="workflow"></category><category term="dotfiles"></category><category term="git"></category><category term="terminal"></category></entry><entry><title>Setting up SSH and Git for Multiple Accounts</title><link href="https://www.sglavoie.com/posts/2020/10/03/setting-up-ssh-and-git-for-multiple-accounts/" rel="alternate"></link><published>2020-10-03T15:25:00-05:00</published><updated>2022-04-03T11:49:00-05:00</updated><author><name>Sébastien Lavoie</name></author><id>tag:www.sglavoie.com,2020-10-03:/posts/2020/10/03/setting-up-ssh-and-git-for-multiple-accounts/</id><summary type="html">&lt;p&gt;Simple workflow with &lt;span class="caps"&gt;SSH&lt;/span&gt;, &lt;span class="caps"&gt;GPG&lt;/span&gt; and Git to work remotely with multiple accounts in a convenient&amp;nbsp;way.&lt;/p&gt;</summary><content type="html">
&lt;hr/&gt;
&lt;h1 id="introduction"&gt;Introduction&lt;/h1&gt;
&lt;p&gt;To work effectively with services such as GitHub and GitLab, it is useful to set up a workflow that doesn’t get in the way, especially when multiple accounts are involved. &lt;span class="caps"&gt;SSH&lt;/span&gt; will be set up to avoid entering the username/password combination every time we interact with remote repositories and Git will be set up to work differently for each account while signing the commits potentially with different &lt;span class="caps"&gt;GPG&lt;/span&gt; keys.&lt;/p&gt;
&lt;p&gt;In short, we need to do the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Set up &lt;span class="caps"&gt;SSH&lt;/span&gt; locally (in &lt;code&gt;~/.ssh/&lt;/code&gt;);&lt;/li&gt;
&lt;li&gt;Set up &lt;span class="caps"&gt;SSH&lt;/span&gt; keys remotely (GitLab, GitHub, Bitbucket, etc.);&lt;/li&gt;
&lt;li&gt;Set up Git locally (in &lt;code&gt;~/.gitconfig&lt;/code&gt;);&lt;/li&gt;
&lt;li&gt;Set up &lt;span class="caps"&gt;GPG&lt;/span&gt; keys remotely (add our keys(s) to GitLab, GitHub, etc.);&lt;/li&gt;
&lt;li&gt;Start interacting with remote repositories.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h1 id="setting-ssh-locally"&gt;Setting &lt;span class="caps"&gt;SSH&lt;/span&gt; locally&lt;/h1&gt;
&lt;p&gt;First, let’s make sure we have some &lt;span class="caps"&gt;SSH&lt;/span&gt; keys to work with. The default location is &lt;code&gt;~/.ssh/id_rsa&lt;/code&gt; (you can just press &lt;code&gt;Enter&lt;/code&gt; when asked to save to a path):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;ssh-keygen&lt;span class="w"&gt; &lt;/span&gt;-t&lt;span class="w"&gt; &lt;/span&gt;rsa&lt;span class="w"&gt; &lt;/span&gt;-C&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"email@personal.com"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The next key should have a different path:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;ssh-keygen&lt;span class="w"&gt; &lt;/span&gt;-t&lt;span class="w"&gt; &lt;/span&gt;rsa&lt;span class="w"&gt; &lt;/span&gt;-C&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"email@work.com"&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;Enter&lt;span class="w"&gt; &lt;/span&gt;file&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;which&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;save&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;key
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;/home/sglavoie/.ssh/id_rsa&lt;span class="o"&gt;)&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;/home/sglavoie/.ssh/id_rsa_work
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Add the keys to the authentication agent like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;ssh-add&lt;span class="w"&gt; &lt;/span&gt;/.ssh/id_rsa
$&lt;span class="w"&gt; &lt;/span&gt;ssh-add&lt;span class="w"&gt; &lt;/span&gt;/.ssh/id_rsa_work
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;See which keys were added:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;ssh-add&lt;span class="w"&gt; &lt;/span&gt;-l&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# list the keys&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you need to delete any keys that were cached prior to that:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;ssh-add&lt;span class="w"&gt; &lt;/span&gt;-D
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, we need a configuration file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;touch&lt;span class="w"&gt; &lt;/span&gt;~/.ssh/config
$&lt;span class="w"&gt; &lt;/span&gt;chmod&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;600&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;~/.ssh/config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let’s add some content in there, assuming we deal with GitHub and GitLab, both with a personal account and a work account:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;AddKeysToAgent&lt;span class="w"&gt; &lt;/span&gt;yes
Host&lt;span class="w"&gt; &lt;/span&gt;github
&lt;span class="w"&gt;   &lt;/span&gt;HostName&lt;span class="w"&gt; &lt;/span&gt;github.com
&lt;span class="w"&gt;   &lt;/span&gt;User&lt;span class="w"&gt; &lt;/span&gt;git
&lt;span class="w"&gt;   &lt;/span&gt;IdentityFile&lt;span class="w"&gt; &lt;/span&gt;~/.ssh/id_rsa
Host&lt;span class="w"&gt; &lt;/span&gt;github-work
&lt;span class="w"&gt;   &lt;/span&gt;HostName&lt;span class="w"&gt; &lt;/span&gt;github.com
&lt;span class="w"&gt;   &lt;/span&gt;User&lt;span class="w"&gt; &lt;/span&gt;git
&lt;span class="w"&gt;   &lt;/span&gt;IdentityFile&lt;span class="w"&gt; &lt;/span&gt;~/.ssh/id_rsa_work
Host&lt;span class="w"&gt; &lt;/span&gt;gitlab
&lt;span class="w"&gt;   &lt;/span&gt;HostName&lt;span class="w"&gt; &lt;/span&gt;gitlab.com
&lt;span class="w"&gt;   &lt;/span&gt;User&lt;span class="w"&gt; &lt;/span&gt;git
&lt;span class="w"&gt;   &lt;/span&gt;IdentityFile&lt;span class="w"&gt; &lt;/span&gt;~/.ssh/id_rsa
Host&lt;span class="w"&gt; &lt;/span&gt;gitlab-work
&lt;span class="w"&gt;   &lt;/span&gt;HostName&lt;span class="w"&gt; &lt;/span&gt;gitlab.com
&lt;span class="w"&gt;   &lt;/span&gt;User&lt;span class="w"&gt; &lt;/span&gt;git
&lt;span class="w"&gt;   &lt;/span&gt;IdentityFile&lt;span class="w"&gt; &lt;/span&gt;~/.ssh/id_rsa_work
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;The directive &lt;code&gt;AddKeysToAgent yes&lt;/code&gt; is useful to avoid typing &lt;code&gt;ssh-add path_to_key&lt;/code&gt; every time &lt;span class="caps"&gt;SSH&lt;/span&gt; is needed.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;Host&lt;/code&gt; can have any name we want, it doesn’t need to match the &lt;code&gt;HostName&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;HostName&lt;/code&gt; is the address we need to access. This should be the same thing for all accounts using a particular service (here, GitHub or GitLab).&lt;/li&gt;
&lt;li&gt;We can set the user to be &lt;code&gt;git&lt;/code&gt; by default.&lt;/li&gt;
&lt;li&gt;For each &lt;code&gt;Host&lt;/code&gt;, we indicate which &lt;code&gt;IdentityFile&lt;/code&gt; to use when trying to work with a remote repository.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="automatically-load-the-keys-from-the-shell"&gt;Automatically load the keys from the Shell&lt;/h2&gt;
&lt;p&gt;For Zsh, the following can be added near the top of &lt;code&gt;~/.zshrc&lt;/code&gt; when using the &lt;code&gt;ssh-agent&lt;/code&gt; plugin:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Load multiple SSH keys&lt;/span&gt;
zstyle&lt;span class="w"&gt; &lt;/span&gt;:omz:plugins:ssh-agent&lt;span class="w"&gt; &lt;/span&gt;identities&lt;span class="w"&gt; &lt;/span&gt;id_rsa&lt;span class="w"&gt; &lt;/span&gt;id_rsa_work
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With &lt;a href="https://ohmyz.sh/"&gt;Oh-My-Zsh&lt;/a&gt;, the &lt;code&gt;ssh-agent&lt;/code&gt; plugin should be contained in &lt;code&gt;plugins&lt;/code&gt; like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;plugins&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;ssh-agent&lt;span class="w"&gt; &lt;/span&gt;fzf&lt;span class="w"&gt; &lt;/span&gt;gitignore&lt;span class="w"&gt; &lt;/span&gt;zsh-autosuggestions&lt;span class="w"&gt; &lt;/span&gt;history-substring-search&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Somewhere below&lt;/span&gt;
&lt;span class="nb"&gt;source&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$ZSH&lt;/span&gt;/oh-my-zsh.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With this setup, the &lt;span class="caps"&gt;SSH&lt;/span&gt; keys will be loaded when opening a terminal after booting up and those will be available for any subsequent terminal sessions until the user session is exited.&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="setting-ssh-keys-remotely"&gt;Setting &lt;span class="caps"&gt;SSH&lt;/span&gt; keys remotely&lt;/h1&gt;
&lt;p&gt;The process will be slightly different on each platform on which we want to authenticate, but the gist of it is to paste the content of the public &lt;span class="caps"&gt;SSH&lt;/span&gt; key in the field when asked to do so.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gitlab.com/help/ssh/README"&gt;Instructions for GitLab&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/connecting-to-github-with-ssh"&gt;Instructions for GitHub&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://support.atlassian.com/bitbucket-cloud/docs/set-up-an-ssh-key/"&gt;Instructions for Bitbucket&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h1 id="setting-git-locally"&gt;Setting Git locally&lt;/h1&gt;
&lt;p&gt;The idea is to have a &lt;code&gt;~/.gitconfig&lt;/code&gt; file from which we load the main Git configuration by default (let’s say, our personal account) and then we load another account – overwriting the Git settings of the personal account with the settings defined for that other account – whenever we navigate to a directory that relates to that other account. Let’s see this in action.&lt;/p&gt;
&lt;h2 id="minimal-gitconfig"&gt;Minimal &lt;code&gt;~/.gitconfig&lt;/code&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# default configuration settings to load&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;include&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nv"&gt;path&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;~/.gitconfig-personal

&lt;span class="c1"&gt;# when working with company-x&lt;/span&gt;
&lt;span class="c1"&gt;# those settings are loaded only when the&lt;/span&gt;
&lt;span class="c1"&gt;# directory matches the pattern defined&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;includeIf&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"gitdir:**/company-x/**/.git"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nv"&gt;path&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;~/.gitconfig-company-x
&lt;span class="o"&gt;[&lt;/span&gt;gpg&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;program&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;gpg
&lt;span class="o"&gt;[&lt;/span&gt;credential&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;helper&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;store
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;[credential]&lt;/code&gt; section with the setting &lt;code&gt;helper = store&lt;/code&gt; will store your username/password combination when using &lt;span class="caps"&gt;HTTPS&lt;/span&gt; so you don’t have to type it over and over again. You could also set this to &lt;code&gt;helper = cache&lt;/code&gt; if you don’t want to permanently store credentials.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;includeIf&lt;/code&gt; directive will be triggered whenever you are in a directory containing &lt;code&gt;company-x&lt;/code&gt; in this case so that your correct &lt;span class="caps"&gt;GPG&lt;/span&gt; key and Git settings will be used instead of the default settings for your personal account.&lt;/li&gt;
&lt;li&gt;In the block &lt;code&gt;[gpg]&lt;/code&gt;, your system may be using the program &lt;code&gt;gpg2&lt;/code&gt; instead of &lt;code&gt;gpg&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="minimal-gitconfig-personal-and-gitconfig-company-x"&gt;Minimal &lt;code&gt;~/.gitconfig-personal&lt;/code&gt; and &lt;code&gt;~/.gitconfig-company-x&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Example for one of those:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;user&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nv"&gt;email&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;email@work.com
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Sébastien&lt;span class="w"&gt; &lt;/span&gt;Lavoie
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nv"&gt;signingkey&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;A343702EBE11E0C2
&lt;span class="o"&gt;[&lt;/span&gt;commit&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nv"&gt;gpgsign&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you don’t have a &lt;span class="caps"&gt;GPG&lt;/span&gt; key already, you can generate one with this command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;gpg&lt;span class="w"&gt; &lt;/span&gt;--gen-key
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To list existing &lt;span class="caps"&gt;GPG&lt;/span&gt; keys to determine the &lt;code&gt;signinkey&lt;/code&gt; value to use in those files, you can type:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;gpg&lt;span class="w"&gt; &lt;/span&gt;--list-secret-keys&lt;span class="w"&gt; &lt;/span&gt;--keyid-format&lt;span class="w"&gt; &lt;/span&gt;LONG
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You might get an output similar to the following (this one is showing only one key):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sec&lt;span class="w"&gt;   &lt;/span&gt;rsa3072/A343702EBE11E0C2&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2020&lt;/span&gt;-10-03&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;SC&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;expires:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2022&lt;/span&gt;-10-03&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;EF731EFC008D47D176C05910A343702EBE11E0C2
uid&lt;span class="w"&gt;                 &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;ultimate&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Sébastien&lt;span class="w"&gt; &lt;/span&gt;Lavoie&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;email@work.com&amp;gt;
ssb&lt;span class="w"&gt;   &lt;/span&gt;rsa3072/718726CCFED43B47&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2020&lt;/span&gt;-10-03&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;E&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;expires:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2022&lt;/span&gt;-10-03&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The bit you need to retrieve for the &lt;code&gt;signingkey&lt;/code&gt; value comes after the type of encryption, here it’s &lt;code&gt;rsa3072&lt;/code&gt; and the bit we want is &lt;code&gt;A343702EBE11E0C2&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you need to edit a key, there are plenty of options described with &lt;code&gt;man gpg&lt;/code&gt; or &lt;code&gt;man gpg2&lt;/code&gt;. For instance, to remove the expiration date for the above key:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;gpg2&lt;span class="w"&gt; &lt;/span&gt;--edit-key&lt;span class="w"&gt; &lt;/span&gt;EF731EFC008D47D176C05910A343702EBE11E0C2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;At the &lt;code&gt;gpg&amp;gt;&lt;/code&gt; prompt, type &lt;code&gt;expire&lt;/code&gt; and follow the instructions.&lt;/p&gt;
&lt;p&gt;To delete a key, you can do so by referring to the email address like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;gpg&lt;span class="w"&gt; &lt;/span&gt;--delete-secret-and-public-key&lt;span class="w"&gt; &lt;/span&gt;email@work.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Just follow the instructions from there. You may need to repeat the process multiple times if your email address is associated with more than one key.&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="setting-gpg-keys-remotely"&gt;Setting &lt;span class="caps"&gt;GPG&lt;/span&gt; keys remotely&lt;/h1&gt;
&lt;p&gt;Just like with the &lt;span class="caps"&gt;SSH&lt;/span&gt; keys, the process differs from one platform to the other.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.gitlab.com/ee/user/project/repository/gpg_signed_commits/"&gt;Instructions for GitLab&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/adding-a-new-gpg-key-to-your-github-account"&gt;Instructions for GitHub&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://confluence.atlassian.com/bitbucketserver/using-gpg-keys-913477014.html"&gt;Instructions for Bitbucket&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h1 id="interacting-with-remote-repositories"&gt;Interacting with remote repositories&lt;/h1&gt;
&lt;p&gt;Now that the Git configuration is set up and we have &lt;span class="caps"&gt;SSH&lt;/span&gt; and &lt;span class="caps"&gt;GPG&lt;/span&gt; keys to authenticate ourselves and verify our identity when committing, respectively, we can start interacting with remote repositories. From the example we have been following, the file &lt;code&gt;~/.gitconfig-personal&lt;/code&gt; will be used by default (and by consequence, our personal account).&lt;/p&gt;
&lt;h2 id="the-ssh-part"&gt;The &lt;span class="caps"&gt;SSH&lt;/span&gt; part&lt;/h2&gt;
&lt;p&gt;When first cloning, change the host so that it reflects what you have in &lt;code&gt;~/.ssh/id_rsa_correct_key_file&lt;/code&gt;. For your personal account, no change would be required:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git&lt;span class="w"&gt; &lt;/span&gt;clone&lt;span class="w"&gt; &lt;/span&gt;git@github.com:organization/repo.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For a repository at work requiring the &lt;span class="caps"&gt;SSH&lt;/span&gt; key set up for the work account, you would need to change to the appropriate host like so (we still use the &lt;code&gt;git&lt;/code&gt; user for convenience):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git&lt;span class="w"&gt; &lt;/span&gt;clone&lt;span class="w"&gt; &lt;/span&gt;git@github-work:organization/repo.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For a refresher, the following are the hosts we have set in &lt;code&gt;~/.ssh/config&lt;/code&gt;: &lt;code&gt;github&lt;/code&gt;, &lt;code&gt;github-work&lt;/code&gt;, &lt;code&gt;gitlab&lt;/code&gt;, &lt;code&gt;gitlab-work&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The difference will be noticed when pushing/pulling as seen with &lt;code&gt;git remote -v&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;remote&lt;span class="w"&gt; &lt;/span&gt;-v
origin&lt;span class="w"&gt;  &lt;/span&gt;git@github-work:organization/repo.git&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;fetch&lt;span class="o"&gt;)&lt;/span&gt;
origin&lt;span class="w"&gt;  &lt;/span&gt;git@github-work:organization/repo.git&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;push&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Whereas the personal account will have the same host as usual, for instance &lt;code&gt;git@github.com:organization/repo.git&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="the-gpg-part"&gt;The &lt;span class="caps"&gt;GPG&lt;/span&gt; part&lt;/h2&gt;
&lt;p&gt;If we want to keep our personal and work Git configurations separate (and we probably want that! ;)), it’s only a matter of ensuring that the &lt;code&gt;includeIf&lt;/code&gt; pattern contains, in this example, &lt;code&gt;company-x&lt;/code&gt; somewhere in the path. When this is the case, we will see with &lt;code&gt;git config --list&lt;/code&gt; in the cloned repository that our personal account details are loaded first, but if the &lt;code&gt;includeIf&lt;/code&gt; directive matches, the settings for that other account will be applied on top and used when committing.&lt;/p&gt;
&lt;p&gt;If you type &lt;code&gt;git config --list&lt;/code&gt; and search for the word “email” in the output, it will appear only once when the default &lt;code&gt;~/.ssh/id_rsa&lt;/code&gt; key is used (or whatever is read for the &lt;code&gt;IdentityFile&lt;/code&gt; from the &lt;span class="caps"&gt;SSH&lt;/span&gt; configuration file) while you will see that same personal email showing up first in a work repository, but then later in the output you will find the work email, work &lt;span class="caps"&gt;GPG&lt;/span&gt; key and so on.&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="conclusion"&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;This is one possible kind of setup we can use to work with &lt;span class="caps"&gt;SSH&lt;/span&gt; and &lt;span class="caps"&gt;GPG&lt;/span&gt; comfortably. This is pretty much a “set it and forget it” approach as long as you remember the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;span class="caps"&gt;SSH&lt;/span&gt;&lt;/strong&gt;: Change the &lt;span class="caps"&gt;SSH&lt;/span&gt; host when cloning. If the repository is not publicly available, it would fail anyways (or you may realize you can clone it if it’s a public repo but have no &lt;code&gt;push&lt;/code&gt; access).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Git&lt;/strong&gt;: Make sure you are in a directory where the &lt;code&gt;includeIf&lt;/code&gt; directive will kick in to set up the email, &lt;span class="caps"&gt;GPG&lt;/span&gt; key and so on.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One nice tip to help with the latter bullet point could be to define an alias, say in &lt;code&gt;~/.bash_aliases&lt;/code&gt;, something like what follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;cdwork&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'cd /path/to/work/dir/with/appropriate/pattern'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then, you simply &lt;code&gt;cdwork&lt;/code&gt; and store all your Git repositories for work under that root repository, which would always match the desired pattern by default. That’s it. Anything else related to the personal account can be cloned anywhere on the file system since this is the default configuration file used. For more Git-related content, you might enjoy reading &lt;a href="https://www.sglavoie.com/posts/2022/04/03/git-the-gist-of-it-common-commands-for-a-working-workflow/"&gt;Git the gist of it: common commands for a working workflow&lt;/a&gt;.&lt;/p&gt;</content><category term="workflow"></category><category term="ssh"></category><category term="git"></category><category term="gpg"></category></entry><entry><title>A Guided Tour of an i3 Configuration</title><link href="https://www.sglavoie.com/posts/2020/08/15/a-guided-tour-of-an-i3-configuration/" rel="alternate"></link><published>2020-08-15T10:51:00-05:00</published><updated>2021-05-30T18:48:00-05:00</updated><author><name>Sébastien Lavoie</name></author><id>tag:www.sglavoie.com,2020-08-15:/posts/2020/08/15/a-guided-tour-of-an-i3-configuration/</id><summary type="html">&lt;p&gt;This article will go over my dear i3 configuration file, which contains quite a few sections I hope I had stumbled upon right from the start when I got introduced to the tiling window manager world. It would probably have been less scary and intimidating. May you find the shortcut you&amp;nbsp;needed!&lt;/p&gt;</summary><content type="html">
&lt;hr/&gt;
&lt;h1 id="introduction"&gt;Introduction&lt;/h1&gt;
&lt;p&gt;In &lt;a href="https://www.sglavoie.com/posts/2020/08/15/a-guided-tour-of-an-i3-configuration/"&gt;Using i3 as a Window Manager for Increased Productivity&lt;/a&gt;, a number of reasons were given to get going with this fantastic tiling window manager. Now, it’s time to jump in and explore how to actually use i3! If you’re looking for an in-depth guide, the &lt;a href="https://i3wm.org/docs/userguide.html"&gt;official i3 documentation&lt;/a&gt; or the &lt;a href="https://wiki.archlinux.org/index.php/i3"&gt;i3 page on the Arch Wiki&lt;/a&gt; are awesome resources to dive deeper. Here, we’ll focus on day-to-day usage based on my current configuration file which I have used and refined over the past three years or so. I hope that you’ll be able to glean useful tips and tricks to apply to your own use case.&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="the-configuration-file"&gt;The Configuration File&lt;/h1&gt;
&lt;p&gt;To set keybindings, it &lt;em&gt;may&lt;/em&gt; be handy to know the keycodes and their respective names. To get a full list, you can use &lt;code&gt;xmodmap -pk&lt;/code&gt; in the terminal. If you’re not sure of the name of the key you want to press (is it “PageDown”, “PageDwn” or “Next”?), you can retrieve it by executing the &lt;code&gt;xev&lt;/code&gt; command, which will open two windows: one for capturing the actual key press and the other one to display the relevant details for that key. For example, if you press the backspace key, the output will contain something like &lt;code&gt;keycode 22 (keysym 0xff08, BackSpace)&lt;/code&gt;. From there, you will know that a mapping would be of the form &lt;code&gt;mod+BackSpace&lt;/code&gt;, where &lt;code&gt;mod&lt;/code&gt; is the modifier of your choice that is usually specified at the top of the configuration file. Now we can start!&lt;/p&gt;
&lt;h2 id="i3-config-shortcuts"&gt;i3 config shortcuts&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Paths and names&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$brightness&lt;/span&gt;-laptop-down&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;"light -U 1"&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$brightness&lt;/span&gt;-laptop-up&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s2"&gt;"light -A 1"&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$brightness&lt;/span&gt;-monitor-default&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s2"&gt;"python3 ~/.local/bin/monitor_brightness default"&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$brightness&lt;/span&gt;-monitor-down&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="s2"&gt;"python3 ~/.local/bin/monitor_brightness down"&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$brightness&lt;/span&gt;-monitor-up&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="s2"&gt;"python3 ~/.local/bin/monitor_brightness up"&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$brightness&lt;/span&gt;-toggle-laptop&lt;span class="w"&gt;    &lt;/span&gt;~/.local/bin/toggle_laptop_brightness
&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$default&lt;/span&gt;-web-browser&lt;span class="w"&gt;         &lt;/span&gt;brave-browser-stable
&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$launcher&lt;/span&gt;-python-term&lt;span class="w"&gt;        &lt;/span&gt;~/.config/ipython_launch.sh
&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$launcher&lt;/span&gt;-temp-notes&lt;span class="w"&gt;         &lt;/span&gt;~/.config/tmpnotes_launch.sh
&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$launcher&lt;/span&gt;-todoist&lt;span class="w"&gt;            &lt;/span&gt;~/.config/todoist_launch.sh
&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$path&lt;/span&gt;-xrandr-both&lt;span class="w"&gt;            &lt;/span&gt;~/.config/i3/run_xrandr.sh
&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$path&lt;/span&gt;-xrandr-laptop&lt;span class="w"&gt;          &lt;/span&gt;~/.config/i3/run_xrandr_laptop.sh
&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$path&lt;/span&gt;-xrandr-monitor&lt;span class="w"&gt;         &lt;/span&gt;~/.config/i3/run_xrandr_monitor.sh
&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$screenshots&lt;/span&gt;-folder&lt;span class="w"&gt;          &lt;/span&gt;~/Pictures/screenshots/
&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$todoist&lt;/span&gt;-app-name&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="s2"&gt;"crx_elldfnmogicegdcphgljaoaklkpcnbnn"&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$toggle&lt;/span&gt;-mic-on-off&lt;span class="w"&gt;           &lt;/span&gt;~/.local/bin/toggle_mic_source

&lt;span class="c1"&gt;# i3 specific&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$center&lt;/span&gt;-mouse&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;exec&lt;/span&gt;&lt;span class="w"&gt;           &lt;/span&gt;~/.config/i3/center-mouse
&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$default&lt;/span&gt;-web-browser-class&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s2"&gt;"(?i)brave-browser"&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$exec&lt;/span&gt;&lt;span class="w"&gt;                        &lt;/span&gt;&lt;span class="nb"&gt;exec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;--no-startup-id
&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$output&lt;/span&gt;-primary&lt;span class="w"&gt;              &lt;/span&gt;output&lt;span class="w"&gt; &lt;/span&gt;eDP
&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$output&lt;/span&gt;-secondary&lt;span class="w"&gt;            &lt;/span&gt;output&lt;span class="w"&gt; &lt;/span&gt;HDMI-A-0
&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$python&lt;/span&gt;-term&lt;span class="w"&gt;                 &lt;/span&gt;&lt;span class="s2"&gt;"ipythonterm"&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$scratchpad&lt;/span&gt;-size&lt;span class="w"&gt;             &lt;/span&gt;&lt;span class="m"&gt;1920&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1060&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$temp&lt;/span&gt;-notes&lt;span class="w"&gt;                  &lt;/span&gt;&lt;span class="s2"&gt;"tmpnotes"&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$volumepath&lt;/span&gt;&lt;span class="w"&gt;                  &lt;/span&gt;~/.config/i3-volume/volume

&lt;span class="c1"&gt;# set mod key (Mod1=Alt, Mod4=Super)&lt;/span&gt;
&lt;span class="c1"&gt;# ⇒ the main modifier used to trigger shortcuts&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Mod4

&lt;span class="c1"&gt;# Workspaces&lt;/span&gt;
&lt;span class="c1"&gt;#######################################&lt;/span&gt;
&lt;span class="c1"&gt;# Workspace names — can be customized with emojis and names&lt;/span&gt;
&lt;span class="c1"&gt;# ⇒ I find I like minimalism best and just mentally associate&lt;/span&gt;
&lt;span class="c1"&gt;#   one workspace number with a specific type of task&lt;/span&gt;
&lt;span class="c1"&gt;# ⇒ those are set across all monitors&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$ws1&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s2"&gt;"1"&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$ws2&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s2"&gt;"2"&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$ws3&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s2"&gt;"3"&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$ws4&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s2"&gt;"4"&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$ws5&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s2"&gt;"5"&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$ws6&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s2"&gt;"6"&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$ws7&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s2"&gt;"7"&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$ws8&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s2"&gt;"8"&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$ws9&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s2"&gt;"9"&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$ws10&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"10"&lt;/span&gt;

&lt;span class="c1"&gt;# Modes&lt;/span&gt;
&lt;span class="c1"&gt;#######################################&lt;/span&gt;
&lt;span class="c1"&gt;# set shut down, restart and locking features&lt;/span&gt;
&lt;span class="c1"&gt;# ⇒ type `$mod+Shift+Delete` then either `e`, `r` or `s`&lt;/span&gt;
mode&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$mode_system&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;bindsym&lt;span class="w"&gt; &lt;/span&gt;e&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nb"&gt;exec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;--no-startup-id&lt;span class="w"&gt; &lt;/span&gt;i3-msg&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;exit&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;bindsym&lt;span class="w"&gt; &lt;/span&gt;r&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nb"&gt;exec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;--no-startup-id&lt;span class="w"&gt; &lt;/span&gt;systemctl&lt;span class="w"&gt; &lt;/span&gt;reboot
&lt;span class="w"&gt;    &lt;/span&gt;bindsym&lt;span class="w"&gt; &lt;/span&gt;s&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nb"&gt;exec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;--no-startup-id&lt;span class="w"&gt; &lt;/span&gt;systemctl&lt;span class="w"&gt; &lt;/span&gt;poweroff

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;# exit system mode with "Enter" or "Escape"&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;bindsym&lt;span class="w"&gt; &lt;/span&gt;Return&lt;span class="w"&gt; &lt;/span&gt;mode&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"default"&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;bindsym&lt;span class="w"&gt; &lt;/span&gt;Escape&lt;span class="w"&gt; &lt;/span&gt;mode&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"default"&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mode_system&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;e&lt;span class="o"&gt;)&lt;/span&gt;xit,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;r&lt;span class="o"&gt;)&lt;/span&gt;eboot,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;)&lt;/span&gt;hutdown
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+Shift+Delete&lt;span class="w"&gt;   &lt;/span&gt;mode&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$mode_system&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

&lt;span class="c1"&gt;# resize with smaller steps to get more control&lt;/span&gt;
mode&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"resize"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;bindsym&lt;span class="w"&gt; &lt;/span&gt;h&lt;span class="w"&gt; &lt;/span&gt;resize&lt;span class="w"&gt; &lt;/span&gt;shrink&lt;span class="w"&gt; &lt;/span&gt;width&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;px&lt;span class="w"&gt; &lt;/span&gt;or&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;ppt
&lt;span class="w"&gt;        &lt;/span&gt;bindsym&lt;span class="w"&gt; &lt;/span&gt;j&lt;span class="w"&gt; &lt;/span&gt;resize&lt;span class="w"&gt; &lt;/span&gt;grow&lt;span class="w"&gt; &lt;/span&gt;height&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;px&lt;span class="w"&gt; &lt;/span&gt;or&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;ppt
&lt;span class="w"&gt;        &lt;/span&gt;bindsym&lt;span class="w"&gt; &lt;/span&gt;k&lt;span class="w"&gt; &lt;/span&gt;resize&lt;span class="w"&gt; &lt;/span&gt;shrink&lt;span class="w"&gt; &lt;/span&gt;height&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;px&lt;span class="w"&gt; &lt;/span&gt;or&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;ppt
&lt;span class="w"&gt;        &lt;/span&gt;bindsym&lt;span class="w"&gt; &lt;/span&gt;l&lt;span class="w"&gt; &lt;/span&gt;resize&lt;span class="w"&gt; &lt;/span&gt;grow&lt;span class="w"&gt; &lt;/span&gt;width&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;px&lt;span class="w"&gt; &lt;/span&gt;or&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;ppt

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;# exit resize mode: Enter or Escape&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;bindsym&lt;span class="w"&gt; &lt;/span&gt;Return&lt;span class="w"&gt; &lt;/span&gt;mode&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"default"&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;bindsym&lt;span class="w"&gt; &lt;/span&gt;Escape&lt;span class="w"&gt; &lt;/span&gt;mode&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"default"&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+r&lt;span class="w"&gt; &lt;/span&gt;mode&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"resize"&lt;/span&gt;

&lt;span class="c1"&gt;# Show the next scratchpad window or hide the focused scratchpad window.&lt;/span&gt;
&lt;span class="c1"&gt;# If there are multiple scratchpad windows, this command cycles through them.&lt;/span&gt;
&lt;span class="c1"&gt;# There is an additional keybinding to allow a floating window to be toggled&lt;/span&gt;
&lt;span class="c1"&gt;# (recovered as a normal window).&lt;/span&gt;
&lt;span class="c1"&gt;# keycode 179 = F10 button&lt;/span&gt;
&lt;span class="c1"&gt;# (not the actual F10 key, but same button on my laptop with default function!)&lt;/span&gt;
mode&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Scratchpad"&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;bindcode&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;179&lt;/span&gt;&lt;span class="w"&gt;              &lt;/span&gt;scratchpad&lt;span class="w"&gt; &lt;/span&gt;show,&lt;span class="w"&gt; &lt;/span&gt;resize&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1920&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1060&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;move&lt;span class="w"&gt; &lt;/span&gt;position&lt;span class="w"&gt; &lt;/span&gt;center&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;                            &lt;/span&gt;scratchpad&lt;span class="w"&gt; &lt;/span&gt;show,&lt;span class="w"&gt; &lt;/span&gt;resize&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1920&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1060&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;move&lt;span class="w"&gt; &lt;/span&gt;position&lt;span class="w"&gt; &lt;/span&gt;center
&lt;span class="w"&gt;  &lt;/span&gt;bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+Shift+space&lt;span class="w"&gt;  &lt;/span&gt;floating&lt;span class="w"&gt; &lt;/span&gt;toggle&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;mode&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"default"&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+Escape&lt;span class="w"&gt;       &lt;/span&gt;kill&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;mode&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"default"&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;bindsym&lt;span class="w"&gt; &lt;/span&gt;Escape&lt;span class="w"&gt;            &lt;/span&gt;scratchpad&lt;span class="w"&gt; &lt;/span&gt;show&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;mode&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"default"&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
bindcode&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;179&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;mode&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Scratchpad"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;scratchpad&lt;span class="w"&gt; &lt;/span&gt;show,&lt;span class="w"&gt; &lt;/span&gt;resize&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1920&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1060&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;move&lt;span class="w"&gt; &lt;/span&gt;position&lt;span class="w"&gt; &lt;/span&gt;center

&lt;span class="c1"&gt;# Caps Lock indicator, seen at&lt;/span&gt;
&lt;span class="c1"&gt;# https://www.reddit.com/r/i3wm/comments/k8m4k4/share_your_i3_tips_and_tricks_that_you_have/gf2lppd&lt;/span&gt;
mode&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"-------------------- CAPSLOCK --------------------"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;bindsym&lt;span class="w"&gt; &lt;/span&gt;Caps_Lock&lt;span class="w"&gt; &lt;/span&gt;mode&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"default"&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
bindsym&lt;span class="w"&gt; &lt;/span&gt;Caps_Lock&lt;span class="w"&gt; &lt;/span&gt;mode&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"-------------------- CAPSLOCK --------------------"&lt;/span&gt;

&lt;span class="c1"&gt;# Sound&lt;/span&gt;
&lt;span class="c1"&gt;#######################################&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$statuscmd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;i3status

&lt;span class="c1"&gt;# Signal used to update the status line&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$statussig&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;SIGUSR1

&lt;span class="c1"&gt;# Amount to increase/decrease volume as a percentage&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$volumestep&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;

&lt;span class="c1"&gt;# Font&lt;/span&gt;
&lt;span class="c1"&gt;#######################################&lt;/span&gt;
&lt;span class="c1"&gt;# font for window titles&lt;/span&gt;
&lt;span class="c1"&gt;# ⇒ this is what you see in your i3bar&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$font&lt;/span&gt;-small&lt;span class="w"&gt; &lt;/span&gt;font&lt;span class="w"&gt; &lt;/span&gt;xft:Lato&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;12&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$font&lt;/span&gt;-medium&lt;span class="w"&gt; &lt;/span&gt;font&lt;span class="w"&gt; &lt;/span&gt;xft:Lato&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;14&lt;/span&gt;

&lt;span class="c1"&gt;# Set default font&lt;/span&gt;
&lt;span class="nv"&gt;$font&lt;/span&gt;-small

&lt;span class="c1"&gt;# Font used with Rofi (dmenu alternative)&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$rofi&lt;/span&gt;-font&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'JetBrainsMono 16'&lt;/span&gt;

&lt;span class="c1"&gt;# Keyboard&lt;/span&gt;
&lt;span class="c1"&gt;#######################################&lt;/span&gt;
&lt;span class="c1"&gt;# Set the compose key to right Control&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$compose&lt;/span&gt;-key&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"compose:rctrl"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A few notes on the &lt;strong&gt;i3 config shortcuts&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This section appears at the top because it will affect how i3 works in general.&lt;/li&gt;
&lt;li&gt;It makes extensive use of the &lt;code&gt;set&lt;/code&gt; command so that all important shortcuts and paths to programs that could “break” if they are missing are easy to configure globally.&lt;/li&gt;
&lt;li&gt;It sets all the different modes that i3 can use so it can be extended in one single place.&lt;/li&gt;
&lt;li&gt;I use &lt;code&gt;Alt&lt;/code&gt; in a few applications and reserve &lt;code&gt;Super&lt;/code&gt; for the window manager only.&lt;/li&gt;
&lt;li&gt;Find the font name you need with &lt;code&gt;fc-list&lt;/code&gt;. For instance, to use JetBrains’ font: &lt;code&gt;fc-list | grep Jet&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="general-settings"&gt;General settings&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# launch a terminal&lt;/span&gt;
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+Return&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nb"&gt;exec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;kitty

&lt;span class="c1"&gt;# launch a terminal in the same directory currently used&lt;/span&gt;
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+Shift+Return&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;exec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;xcwd&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;exec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;kitty

&lt;span class="c1"&gt;# kill focused window&lt;/span&gt;
&lt;span class="c1"&gt;# ⇒ usual way to close applications&lt;/span&gt;
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+Escape&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nb"&gt;kill&lt;/span&gt;
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+mod1+Escape&lt;span class="w"&gt; &lt;/span&gt;--release&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nv"&gt;$exec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;xkill

&lt;span class="c1"&gt;# reload the configuration file&lt;/span&gt;
&lt;span class="c1"&gt;# ⇒ apply changes from this file on the fly&lt;/span&gt;
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+Shift+c&lt;span class="w"&gt;  &lt;/span&gt;reload

&lt;span class="c1"&gt;# restart i3 inplace&lt;/span&gt;
&lt;span class="c1"&gt;# ⇒ preserves your layout/session, can be used when upgrading i3&lt;/span&gt;
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+Shift+r&lt;span class="w"&gt;  &lt;/span&gt;restart

&lt;span class="c1"&gt;# exit i3&lt;/span&gt;
&lt;span class="c1"&gt;# ⇒ logs you out of your X session&lt;/span&gt;
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+Shift+e&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nv"&gt;$exec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;i3-msg&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;exit&lt;/span&gt;

&lt;span class="c1"&gt;# resize windows&lt;/span&gt;
&lt;span class="c1"&gt;# you can also use the mouse for that:&lt;/span&gt;
&lt;span class="c1"&gt;# for tiled windows ⇒&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# drag the border with LeftClick or RightClick&lt;/span&gt;
&lt;span class="c1"&gt;# for floating windows ⇒&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# `mod + RightClick`, then drag&lt;/span&gt;

&lt;span class="c1"&gt;# resize without entering "resize mode"&lt;/span&gt;
&lt;span class="c1"&gt;# ⇒ I find this more convenient. I usually don't care about&lt;/span&gt;
&lt;span class="c1"&gt;# precise window sizes, so here the steps are far greater.&lt;/span&gt;
&lt;span class="c1"&gt;# If I want more control, then entering resize mode will do.&lt;/span&gt;
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+Control+l&lt;span class="w"&gt; &lt;/span&gt;resize&lt;span class="w"&gt; &lt;/span&gt;shrink&lt;span class="w"&gt; &lt;/span&gt;width&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;px&lt;span class="w"&gt; &lt;/span&gt;or&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;ppt
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+Control+k&lt;span class="w"&gt; &lt;/span&gt;resize&lt;span class="w"&gt; &lt;/span&gt;grow&lt;span class="w"&gt; &lt;/span&gt;height&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;px&lt;span class="w"&gt; &lt;/span&gt;or&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;ppt
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+Control+j&lt;span class="w"&gt; &lt;/span&gt;resize&lt;span class="w"&gt; &lt;/span&gt;shrink&lt;span class="w"&gt; &lt;/span&gt;height&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;px&lt;span class="w"&gt; &lt;/span&gt;or&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;ppt
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+Control+h&lt;span class="w"&gt; &lt;/span&gt;resize&lt;span class="w"&gt; &lt;/span&gt;grow&lt;span class="w"&gt; &lt;/span&gt;width&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;px&lt;span class="w"&gt; &lt;/span&gt;or&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;ppt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A few notes on the &lt;strong&gt;General settings&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Resizing and moving floating windows with the mouse also works great: &lt;code&gt;mod+LeftClick&lt;/code&gt; to move around and &lt;code&gt;mod+RightClick&lt;/code&gt; to resize. This way, it’s also possible to move windows to other screens.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="screens-and-monitors"&gt;Screens and monitors&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# lock the screens with a black color background&lt;/span&gt;
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+Delete&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;$exec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;i3lock&lt;span class="w"&gt; &lt;/span&gt;-c&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;000000&lt;/span&gt;

&lt;span class="c1"&gt;# hide/unhide i3status bar (laptop)&lt;/span&gt;
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+m&lt;span class="w"&gt;         &lt;/span&gt;bar&lt;span class="w"&gt; &lt;/span&gt;mode&lt;span class="w"&gt; &lt;/span&gt;invisible&lt;span class="w"&gt; &lt;/span&gt;bar-0
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+Shift+m&lt;span class="w"&gt;   &lt;/span&gt;bar&lt;span class="w"&gt; &lt;/span&gt;mode&lt;span class="w"&gt; &lt;/span&gt;dock&lt;span class="w"&gt; &lt;/span&gt;bar-0

&lt;span class="c1"&gt;# hide/unhide i3status bar (monitor)&lt;/span&gt;
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+b&lt;span class="w"&gt;         &lt;/span&gt;bar&lt;span class="w"&gt; &lt;/span&gt;mode&lt;span class="w"&gt; &lt;/span&gt;invisible&lt;span class="w"&gt; &lt;/span&gt;bar-1
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+Shift+b&lt;span class="w"&gt;   &lt;/span&gt;bar&lt;span class="w"&gt; &lt;/span&gt;mode&lt;span class="w"&gt; &lt;/span&gt;dock&lt;span class="w"&gt; &lt;/span&gt;bar-1

&lt;span class="c1"&gt;# set up displays&lt;/span&gt;
&lt;span class="nb"&gt;exec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$path&lt;/span&gt;-xrandr-both

&lt;span class="c1"&gt;# use laptop display only (turn off monitor)&lt;/span&gt;
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+o&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="nb"&gt;exec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$path&lt;/span&gt;-xrandr-laptop

&lt;span class="c1"&gt;# use monitor display only (turn off laptop screen)&lt;/span&gt;
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+mod1+o&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;exec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$path&lt;/span&gt;-xrandr-monitor

&lt;span class="c1"&gt;# use laptop + monitor displays&lt;/span&gt;
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+shift+o&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nb"&gt;exec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$path&lt;/span&gt;-xrandr-both

&lt;span class="c1"&gt;# disable screen saver&lt;/span&gt;
&lt;span class="nv"&gt;$exec&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;xset&lt;span class="w"&gt; &lt;/span&gt;s&lt;span class="w"&gt; &lt;/span&gt;off

&lt;span class="c1"&gt;# disable power saving&lt;/span&gt;
&lt;span class="nv"&gt;$exec&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;xset&lt;span class="w"&gt; &lt;/span&gt;-dpms
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A few notes on the &lt;strong&gt;Screens and monitors&lt;/strong&gt; section:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It sets keybindings to hide/unhide bars on separate screens, which can be particularly useful when screen sharing without having to enter in fullscreen mode.&lt;/li&gt;
&lt;li&gt;It has additional keybindings to turn on/off the displays independently.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="navigation"&gt;Navigation&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: I rely on Vim keybindings to move between containers and workspaces as I find the position of those keys on the home row really comfortable to apply to the main window actions one would want to execute.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# container focuses where the mouse is (yes/no)&lt;/span&gt;
focus_follows_mouse&lt;span class="w"&gt;    &lt;/span&gt;no

&lt;span class="c1"&gt;# go to last urgent workspace&lt;/span&gt;
&lt;span class="c1"&gt;# ⇒ this is the worspace that turns "red" by default when something happens&lt;/span&gt;
&lt;span class="c1"&gt;#   in an unfocused workspace, like an application pop-up&lt;/span&gt;
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+u&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;urgent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;latest&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;focus&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$center&lt;/span&gt;-mouse

&lt;span class="c1"&gt;# change focus&lt;/span&gt;
&lt;span class="c1"&gt;# ⇒ works in all modes: tabbed, stacked, etc.&lt;/span&gt;
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+h&lt;span class="w"&gt;    &lt;/span&gt;focus&lt;span class="w"&gt; &lt;/span&gt;left&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$center&lt;/span&gt;-mouse
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+j&lt;span class="w"&gt;    &lt;/span&gt;focus&lt;span class="w"&gt; &lt;/span&gt;down&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$center&lt;/span&gt;-mouse
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+k&lt;span class="w"&gt;    &lt;/span&gt;focus&lt;span class="w"&gt; &lt;/span&gt;up&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$center&lt;/span&gt;-mouse
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+Down&lt;span class="w"&gt; &lt;/span&gt;focus&lt;span class="w"&gt; &lt;/span&gt;down&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$center&lt;/span&gt;-mouse
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+Up&lt;span class="w"&gt;   &lt;/span&gt;focus&lt;span class="w"&gt; &lt;/span&gt;up&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$center&lt;/span&gt;-mouse
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+l&lt;span class="w"&gt;    &lt;/span&gt;focus&lt;span class="w"&gt; &lt;/span&gt;right&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$center&lt;/span&gt;-mouse

&lt;span class="c1"&gt;# move focused window (works in all modes)&lt;/span&gt;
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+Shift+h&lt;span class="w"&gt;   &lt;/span&gt;move&lt;span class="w"&gt; &lt;/span&gt;left&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$center&lt;/span&gt;-mouse
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+Shift+j&lt;span class="w"&gt;   &lt;/span&gt;move&lt;span class="w"&gt; &lt;/span&gt;down&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$center&lt;/span&gt;-mouse
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+Shift+k&lt;span class="w"&gt;   &lt;/span&gt;move&lt;span class="w"&gt; &lt;/span&gt;up&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$center&lt;/span&gt;-mouse
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+Shift+l&lt;span class="w"&gt;   &lt;/span&gt;move&lt;span class="w"&gt; &lt;/span&gt;right&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$center&lt;/span&gt;-mouse

&lt;span class="c1"&gt;# for example, switching from workspace 1 to workspace 2 (e.g. mod+2) then&lt;/span&gt;
&lt;span class="c1"&gt;# typing again mod+2 would bring you back to workspace 1 without having to&lt;/span&gt;
&lt;span class="c1"&gt;# remember that you came from workspace 1 in the first place.&lt;/span&gt;
workspace_auto_back_and_forth&lt;span class="w"&gt;    &lt;/span&gt;no

&lt;span class="c1"&gt;# alternate between the last two workspaces that have been used&lt;/span&gt;
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+Tab&lt;span class="w"&gt;    &lt;/span&gt;workspace&lt;span class="w"&gt; &lt;/span&gt;back_and_forth

&lt;span class="c1"&gt;# move a container (window or group of windows if you grouped them) to the&lt;/span&gt;
&lt;span class="c1"&gt;# "alternate" workspace you visited last&lt;/span&gt;
&lt;span class="c1"&gt;# (the one brought with $mod+Tab in this case)&lt;/span&gt;
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+mod1+Tab&lt;span class="w"&gt;    &lt;/span&gt;move&lt;span class="w"&gt; &lt;/span&gt;container&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;workspace&lt;span class="w"&gt; &lt;/span&gt;back_and_forth&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;                           &lt;/span&gt;workspace&lt;span class="w"&gt; &lt;/span&gt;back_and_forth

&lt;span class="c1"&gt;# switch to any window with Rofi&lt;/span&gt;
&lt;span class="c1"&gt;# ⇒ this simulates the familiar behavior of Alt+Tab on Windows and allows you&lt;/span&gt;
&lt;span class="c1"&gt;#   to find windows by typing, but uses a better operating system to do it ;).&lt;/span&gt;
bindsym&lt;span class="w"&gt; &lt;/span&gt;Mod1+Tab&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;exec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"rofi -theme lb -font &lt;/span&gt;&lt;span class="nv"&gt;$rofi&lt;/span&gt;&lt;span class="s2"&gt;-font \&lt;/span&gt;
&lt;span class="s2"&gt;                      -show-icons -width 95 -show window"&lt;/span&gt;

&lt;span class="c1"&gt;# toggle fullscreen mode for the focused container&lt;/span&gt;
&lt;span class="c1"&gt;# ⇒ this hides the i3bar for the current monitor&lt;/span&gt;
&lt;span class="c1"&gt;# ⇒ you can still leave the i3bar hidden and switch to other workspaces&lt;/span&gt;
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+f&lt;span class="w"&gt;    &lt;/span&gt;fullscreen&lt;span class="w"&gt; &lt;/span&gt;toggle

&lt;span class="c1"&gt;# navigate workspaces next / previous&lt;/span&gt;
&lt;span class="c1"&gt;# ⇒ works for all monitors and will go in increasing order&lt;/span&gt;
&lt;span class="c1"&gt;#   if workspaces 1 to 6 are on monitorX and workspaces&lt;/span&gt;
&lt;span class="c1"&gt;#   7 to 10 are on monitorY as in this config, this will switch&lt;/span&gt;
&lt;span class="c1"&gt;#   to any workspace where there is at least one container&lt;/span&gt;
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+Mod1+l&lt;span class="w"&gt;         &lt;/span&gt;workspace&lt;span class="w"&gt; &lt;/span&gt;next
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+Mod1+h&lt;span class="w"&gt;         &lt;/span&gt;workspace&lt;span class="w"&gt; &lt;/span&gt;prev
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+Shift+Right&lt;span class="w"&gt;    &lt;/span&gt;workspace&lt;span class="w"&gt; &lt;/span&gt;next
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+Shift+Left&lt;span class="w"&gt;     &lt;/span&gt;workspace&lt;span class="w"&gt; &lt;/span&gt;prev

&lt;span class="c1"&gt;# the difference with the above is that it limits movements to the&lt;/span&gt;
&lt;span class="c1"&gt;# the current monitor only&lt;/span&gt;
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+Right&lt;span class="w"&gt;            &lt;/span&gt;workspace&lt;span class="w"&gt; &lt;/span&gt;next_on_output
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+BackSpace&lt;span class="w"&gt;        &lt;/span&gt;workspace&lt;span class="w"&gt; &lt;/span&gt;next_on_output
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+Shift+BackSpace&lt;span class="w"&gt;  &lt;/span&gt;workspace&lt;span class="w"&gt; &lt;/span&gt;prev_on_output
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+Left&lt;span class="w"&gt;             &lt;/span&gt;workspace&lt;span class="w"&gt; &lt;/span&gt;prev_on_output

&lt;span class="c1"&gt;# Bindings to "mark" and "goto" mark specified with 1 character&lt;/span&gt;
&lt;span class="c1"&gt;# ⇒ rarely used, but can still be useful if you have many containers open&lt;/span&gt;
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+z&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;exec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;i3-input&lt;span class="w"&gt; &lt;/span&gt;-F&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'mark %s'&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-l&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-P&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'Mark: '&lt;/span&gt;
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+g&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;exec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;i3-input&lt;span class="w"&gt; &lt;/span&gt;-F&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'[con_mark="%s"] focus'&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-l&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-P&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'Goto: '&lt;/span&gt;

&lt;span class="c1"&gt;# switch to workspace (no matter which monitor it is set to)&lt;/span&gt;
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+1&lt;span class="w"&gt;    &lt;/span&gt;workspace&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$ws1&lt;/span&gt;
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+2&lt;span class="w"&gt;    &lt;/span&gt;workspace&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$ws2&lt;/span&gt;
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+3&lt;span class="w"&gt;    &lt;/span&gt;workspace&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$ws3&lt;/span&gt;
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+4&lt;span class="w"&gt;    &lt;/span&gt;workspace&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$ws4&lt;/span&gt;
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+5&lt;span class="w"&gt;    &lt;/span&gt;workspace&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$ws5&lt;/span&gt;
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+6&lt;span class="w"&gt;    &lt;/span&gt;workspace&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$ws6&lt;/span&gt;
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+7&lt;span class="w"&gt;    &lt;/span&gt;workspace&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$ws7&lt;/span&gt;
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+8&lt;span class="w"&gt;    &lt;/span&gt;workspace&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$ws8&lt;/span&gt;
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+9&lt;span class="w"&gt;    &lt;/span&gt;workspace&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$ws9&lt;/span&gt;
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+0&lt;span class="w"&gt;    &lt;/span&gt;workspace&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$ws10&lt;/span&gt;

&lt;span class="c1"&gt;# determine which workspace appears on which screen&lt;/span&gt;
&lt;span class="c1"&gt;# ⇒ with a single output screen, this is not necessary&lt;/span&gt;
workspace&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nv"&gt;$output&lt;/span&gt;-secondary
workspace&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nv"&gt;$output&lt;/span&gt;-secondary
workspace&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nv"&gt;$output&lt;/span&gt;-secondary
workspace&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nv"&gt;$output&lt;/span&gt;-secondary
workspace&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nv"&gt;$output&lt;/span&gt;-secondary
workspace&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nv"&gt;$output&lt;/span&gt;-secondary
workspace&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nv"&gt;$output&lt;/span&gt;-primary
workspace&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nv"&gt;$output&lt;/span&gt;-primary
workspace&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;9&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nv"&gt;$output&lt;/span&gt;-primary
workspace&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$output&lt;/span&gt;-primary

&lt;span class="c1"&gt;# move focused container to workspace and switch to workspace&lt;/span&gt;
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+Shift+1&lt;span class="w"&gt;    &lt;/span&gt;move&lt;span class="w"&gt; &lt;/span&gt;container&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;workspace&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$ws1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;workspace&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$ws1&lt;/span&gt;
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+Shift+2&lt;span class="w"&gt;    &lt;/span&gt;move&lt;span class="w"&gt; &lt;/span&gt;container&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;workspace&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$ws2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;workspace&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$ws2&lt;/span&gt;
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+Shift+3&lt;span class="w"&gt;    &lt;/span&gt;move&lt;span class="w"&gt; &lt;/span&gt;container&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;workspace&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$ws3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;workspace&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$ws3&lt;/span&gt;
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+Shift+4&lt;span class="w"&gt;    &lt;/span&gt;move&lt;span class="w"&gt; &lt;/span&gt;container&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;workspace&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$ws4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;workspace&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$ws4&lt;/span&gt;
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+Shift+5&lt;span class="w"&gt;    &lt;/span&gt;move&lt;span class="w"&gt; &lt;/span&gt;container&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;workspace&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$ws5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;workspace&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$ws5&lt;/span&gt;
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+Shift+6&lt;span class="w"&gt;    &lt;/span&gt;move&lt;span class="w"&gt; &lt;/span&gt;container&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;workspace&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$ws6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;workspace&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$ws6&lt;/span&gt;
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+Shift+7&lt;span class="w"&gt;    &lt;/span&gt;move&lt;span class="w"&gt; &lt;/span&gt;container&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;workspace&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$ws7&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;workspace&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$ws7&lt;/span&gt;
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+Shift+8&lt;span class="w"&gt;    &lt;/span&gt;move&lt;span class="w"&gt; &lt;/span&gt;container&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;workspace&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$ws8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;workspace&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$ws8&lt;/span&gt;
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+Shift+9&lt;span class="w"&gt;    &lt;/span&gt;move&lt;span class="w"&gt; &lt;/span&gt;container&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;workspace&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$ws9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;workspace&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$ws9&lt;/span&gt;
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+Shift+0&lt;span class="w"&gt;    &lt;/span&gt;move&lt;span class="w"&gt; &lt;/span&gt;container&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;workspace&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$ws10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;workspace&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$ws10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A few notes on the &lt;strong&gt;Navigation&lt;/strong&gt; section:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I like to keep the number of workspaces to 10 because the number row is easily accessible and there’s less context switching involved.&lt;/li&gt;
&lt;li&gt;I also like to keep a higher number of workspaces on the main screen I work on as I can use &lt;code&gt;mod+Left&lt;/code&gt; and &lt;code&gt;mod+Right&lt;/code&gt; to switch focus on that screen only. This is usually to keep a reference opened on the other screen, like server logs.&lt;/li&gt;
&lt;li&gt;Those keybindings make it really easy to navigate between workspaces on one particular screen. Even though I like to work with a monitor being higher than the laptop located in front of it to avoid working in a twisted position at all times, this would work fantastically well in the horizontal direction too.&lt;/li&gt;
&lt;li&gt;If for whatever reason the main screen is disconnected (power outage or unplugged), I can still use the laptop screen without needing to modify the config file, although with a slightly more limited amount of workspaces. &lt;em&gt;Tip&lt;/em&gt;: if a monitor has been disconnected (such as in the power outage scenario), using the keybinding to turn it off will move all the workspaces to the other display(s), so everything will be visible again.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="nice-addition-to-make-the-mouse-follow-any-focused-container"&gt;Nice addition to make the mouse follow any focused container&lt;/h3&gt;
&lt;p&gt;By default, the focus of the mouse in i3 will go to the active screen, but it won’t follow the focus if switching to different containers on the &lt;em&gt;same&lt;/em&gt; screen. I found this little hack using the &lt;code&gt;center-mouse&lt;/code&gt; script after running commands like &lt;code&gt;move&lt;/code&gt; and &lt;code&gt;focus&lt;/code&gt; to force the mouse to move to any focused container. For convenience, &lt;a href="https://github.com/sglavoie/dotfiles/blob/main/.config/i3/center-mouse"&gt;here is the content of that script&lt;/a&gt;. You will need the program &lt;code&gt;xdotool&lt;/code&gt; to use it.&lt;/p&gt;
&lt;h2 id="layout"&gt;Layout&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# set default desktop layout (default is tiling), &amp;lt;stacking|tabbed&amp;gt;&lt;/span&gt;
workspace_layout&lt;span class="w"&gt;    &lt;/span&gt;tabbed

&lt;span class="c1"&gt;# change container layout (stacked, tabbed, toggle split)&lt;/span&gt;
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+s&lt;span class="w"&gt;    &lt;/span&gt;layout&lt;span class="w"&gt; &lt;/span&gt;stacking
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+w&lt;span class="w"&gt;    &lt;/span&gt;layout&lt;span class="w"&gt; &lt;/span&gt;tabbed
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+e&lt;span class="w"&gt;    &lt;/span&gt;layout&lt;span class="w"&gt; &lt;/span&gt;toggle&lt;span class="w"&gt; &lt;/span&gt;split

&lt;span class="c1"&gt;# start in opposite orientation from your monitor&lt;/span&gt;
default_orientation&lt;span class="w"&gt;    &lt;/span&gt;vertical

&lt;span class="c1"&gt;# toggle split at each new window (Fibonnaci layout)&lt;/span&gt;
&lt;span class="c1"&gt;# note: only useful if the layout is set to `default`&lt;/span&gt;
&lt;span class="c1"&gt;# for_window [class=".*"]    split toggle&lt;/span&gt;

&lt;span class="c1"&gt;# toggle the way a split happens in the focused window&lt;/span&gt;
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+t&lt;span class="w"&gt;    &lt;/span&gt;split&lt;span class="w"&gt; &lt;/span&gt;toggle

&lt;span class="c1"&gt;# toggle tiling / floating&lt;/span&gt;
&lt;span class="c1"&gt;# ⇒ this works on a container with any number of windows!&lt;/span&gt;
&lt;span class="c1"&gt;#   if you select multiple windows with `$mod+a` (see below)&lt;/span&gt;
&lt;span class="c1"&gt;#   to group them and then toggle them, the whole group will&lt;/span&gt;
&lt;span class="c1"&gt;#   either tile or float&lt;/span&gt;
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+Shift+space&lt;span class="w"&gt;    &lt;/span&gt;floating&lt;span class="w"&gt; &lt;/span&gt;toggle

&lt;span class="c1"&gt;# change focus between tiling / floating windows&lt;/span&gt;
&lt;span class="c1"&gt;# ⇒ If you leave a floating window on top of other tiled windows,&lt;/span&gt;
&lt;span class="c1"&gt;#   you can switch the focus from the one on top to the one(s) in&lt;/span&gt;
&lt;span class="c1"&gt;#   the background (useful with apps like Zoom or Google Meet that&lt;/span&gt;
&lt;span class="c1"&gt;#   you want to keep in the foreground)&lt;/span&gt;
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+space&lt;span class="w"&gt;    &lt;/span&gt;focus&lt;span class="w"&gt; &lt;/span&gt;mode_toggle

&lt;span class="c1"&gt;# Use Mouse+$mod to drag floating windows&lt;/span&gt;
floating_modifier&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;

&lt;span class="c1"&gt;# toggle sticky for floating windows&lt;/span&gt;
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+Shift+s&lt;span class="w"&gt;    &lt;/span&gt;sticky&lt;span class="w"&gt; &lt;/span&gt;toggle

&lt;span class="c1"&gt;# focus the surrounding containers&lt;/span&gt;
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+a&lt;span class="w"&gt;    &lt;/span&gt;focus&lt;span class="w"&gt; &lt;/span&gt;parent&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$center&lt;/span&gt;-mouse
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+c&lt;span class="w"&gt;    &lt;/span&gt;focus&lt;span class="w"&gt; &lt;/span&gt;child&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$center&lt;/span&gt;-mouse
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A few notes on the &lt;strong&gt;Layout&lt;/strong&gt; section:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To maximize the size of applications, I prefer using the “tabbed” mode, which is more compact than the stacking mode. If I quickly want to split windows side-by-side, I just type &lt;code&gt;mod+e&lt;/code&gt; to toggle split vertically by default and if I need a horizontal split, I just toggle again with &lt;code&gt;mod+e&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;I don’t use the “grouping” feature with &lt;code&gt;mod+a&lt;/code&gt; and &lt;code&gt;mod+c&lt;/code&gt; very often, but when I need to move a few windows to another workspace for instance, that’s quite handy!&lt;/li&gt;
&lt;li&gt;A floating window in “sticky mode” will follow you on all your workspaces and remember that this mode is enabled even if you put in back in a tiling window and then to a floating window again.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="scratchpad"&gt;Scratchpad&lt;/h2&gt;
&lt;p&gt;The scratchpad is sometimes so useful that it deserves its own section! When you send a window to the “scratchpad”, it disappears. Then, with a keybinding, you can bring in back in floating mode on top of any other window on any active workspace you happen to be in. The same keybinding will toggle on/off the display of that scratchpad and if you happen to have sent multiple windows to the scratchpad, activating the same keybinding again will cycle through all the scratchpads as we set a custom mode called &lt;code&gt;Scratchpad&lt;/code&gt; in this example.&lt;/p&gt;
&lt;p&gt;I often use that for an audio player I leave running in the background and instead of using a whole workspace to leave that window opened, I send it to the scratchpad, which means it doesn’t take any space and I can quickly bring it back in focus whenever I want, in any workspace. I find that having more than three windows in the list of scratchpads becomes cumbersome as you cycle through them, so I keep the scratchpad for specific, infrequent uses for applications that require less attention.&lt;/p&gt;
&lt;p&gt;If you want to convert a scratchpad back to a regular tiled container, it’s as easy as triggering “toggle tiling / floating” (in this config file, it happens with &lt;code&gt;mod+Shift+space&lt;/code&gt;).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Move the currently focused window to the scratchpad.&lt;/span&gt;
&lt;span class="c1"&gt;# First, we toggle floating mode and we resize and position the window to make sure&lt;/span&gt;
&lt;span class="c1"&gt;# it will appear correctly when showing it for the first time.&lt;/span&gt;
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+minus&lt;span class="w"&gt;    &lt;/span&gt;floating&lt;span class="w"&gt; &lt;/span&gt;toggle&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;resize&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$scratchpad&lt;/span&gt;-size,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;                        &lt;/span&gt;move&lt;span class="w"&gt; &lt;/span&gt;position&lt;span class="w"&gt; &lt;/span&gt;center&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;move&lt;span class="w"&gt; &lt;/span&gt;scratchpad

&lt;span class="c1"&gt;# Set up scratchpad applications&lt;/span&gt;
for_window&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Audacious"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;           &lt;/span&gt;floating&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;enable&lt;/span&gt;
for_window&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Audacious"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;           &lt;/span&gt;move&lt;span class="w"&gt; &lt;/span&gt;scratchpad
for_window&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Audacious"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;           &lt;/span&gt;resize&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$scratchpad&lt;/span&gt;-size
for_window&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$temp&lt;/span&gt;-notes&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;floating&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;enable&lt;/span&gt;
for_window&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$temp&lt;/span&gt;-notes&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;move&lt;span class="w"&gt; &lt;/span&gt;scratchpad
for_window&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$temp&lt;/span&gt;-notes&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;resize&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$scratchpad&lt;/span&gt;-size
for_window&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$python&lt;/span&gt;-term&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;floating&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;enable&lt;/span&gt;
for_window&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$python&lt;/span&gt;-term&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;move&lt;span class="w"&gt; &lt;/span&gt;scratchpad
for_window&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$python&lt;/span&gt;-term&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;resize&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$scratchpad&lt;/span&gt;-size
for_window&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$todoist&lt;/span&gt;-app-name&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;floating&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;enable&lt;/span&gt;
for_window&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$todoist&lt;/span&gt;-app-name&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;move&lt;span class="w"&gt; &lt;/span&gt;scratchpad
for_window&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$todoist&lt;/span&gt;-app-name&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;resize&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$scratchpad&lt;/span&gt;-size
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A note on the &lt;strong&gt;Scratchpad&lt;/strong&gt; section:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In my setup, I have two screens with the same resolution of 1920x1080, so the same “resize” command works on both screens. You might want to use two different keybindings if you want to bring a scratchpad back to a screen with a different resolution.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="borders"&gt;Borders&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Configure border style &amp;lt;normal|1pixel|pixel xx|none|pixel&amp;gt;&lt;/span&gt;
new_window&lt;span class="w"&gt; &lt;/span&gt;pixel&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;
new_float&lt;span class="w"&gt; &lt;/span&gt;normal
default_floating_border&lt;span class="w"&gt; &lt;/span&gt;pixel&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;

&lt;span class="c1"&gt;# Hide borders&lt;/span&gt;
hide_edge_borders&lt;span class="w"&gt; &lt;/span&gt;smart

&lt;span class="c1"&gt;# change borders&lt;/span&gt;
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+Shift+n&lt;span class="w"&gt;   &lt;/span&gt;border&lt;span class="w"&gt; &lt;/span&gt;none
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+n&lt;span class="w"&gt;         &lt;/span&gt;border&lt;span class="w"&gt; &lt;/span&gt;pixel&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+y&lt;span class="w"&gt;         &lt;/span&gt;border&lt;span class="w"&gt; &lt;/span&gt;normal&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A few notes on the &lt;strong&gt;Borders&lt;/strong&gt; section:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I just &lt;strong&gt;love&lt;/strong&gt; knowing which container is active, so I set thick, bright borders with a nice kind of “electric blue” color that’s easy to spot on a light or dark background (colors are set below in the section &lt;strong&gt;Colors &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; theming&lt;/strong&gt;).&lt;/li&gt;
&lt;li&gt;I also &lt;strong&gt;love&lt;/strong&gt; saving space whenever possible to see more stuff on the screen, so I avoid gaps altogether (if you like them, have a look at &lt;a href="https://github.com/Airblader/i3"&gt;i3-gaps&lt;/a&gt;). In that spirit, I also set the option &lt;code&gt;hide_edge_borders smart&lt;/code&gt; so that borders don’t show up when I have only one tiled container covering the whole space.&lt;/li&gt;
&lt;li&gt;This also shows that you can have a different border size for floating windows if you find the thickness distracting. Personally, I just find it helps me know which container is active when I toggle from foreground to background window with &lt;code&gt;mod+space&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;
&lt;a href="https://www.sglavoie.com/images/posts/0022_guided-tour-i3/demo_dark_light_background_thick_border.png"&gt;&lt;img alt="demo_dark_light_background_thick_border_i3" class="max-size-img-post" src="https://www.sglavoie.com/images/posts/0022_guided-tour-i3/demo_dark_light_background_thick_border.png"/&gt;&lt;/a&gt;
&lt;figcaption&gt;Bashtop on the left with a dark background, LibreOffice on the right with a light background, Neofetch floating window on top featuring a thick, blue border.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="dmenu"&gt;dmenu&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;dmenu&lt;/code&gt; is so useful that it also got its own section. By default, you usually launch applications with &lt;code&gt;mod+d&lt;/code&gt;: I kept the same behavior here. I added a few custom launchers that I use all the time to open files based on a topic, using mnemonics that work (for me, at least). If you want to know more about setting these kinds of shortcuts, you may be interested in reading &lt;a href="https://www.sglavoie.com/posts/2019/11/10/using-dmenu-to-optimize-common-tasks/"&gt;Using dmenu to Optimize Common Tasks&lt;/a&gt; ;).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+Mod1+b&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;$exec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;~/Dropbox/.custom/dmenu/books.sh
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+Mod1+c&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;$exec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;~/Dropbox/.custom/dmenu/cheatsheets.sh
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+Mod1+d&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;$exec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;~/Dropbox/.custom/dmenu/documents.sh
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+Mod1+e&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;$exec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;~/Dropbox/.custom/dmenu/edit_scripts.sh
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+Mod1+f&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;$exec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;~/Dropbox/.custom/dmenu/filepaths.sh
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+Mod1+q&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;$exec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;~/Dropbox/.custom/dmenu/quotes.sh
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+Mod1+r&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;$exec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;~/Dropbox/.custom/dmenu/reading.sh
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+Mod1+s&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;$exec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;~/Dropbox/.custom/dmenu/scripts.sh
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+Mod1+u&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;$exec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;~/Dropbox/.custom/dmenu/university.sh
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+Mod1+w&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;$exec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;~/Dropbox/.custom/dmenu/work.sh
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+Shift+f&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nv"&gt;$exec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;~/Dropbox/.custom/dmenu/thunar_launcher.sh
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+Shift+u&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nv"&gt;$exec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;~/Dropbox/.custom/dmenu/university_launchers.sh
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+d&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="nv"&gt;$exec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;~/Dropbox/.custom/dmenu/software.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="shortcuts"&gt;Shortcuts&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+control+r&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nv"&gt;$exec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;thunar&lt;span class="w"&gt; &lt;/span&gt;~/Desktop

&lt;span class="c1"&gt;# Display multiple time zones around the world&lt;/span&gt;
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+Mod1+t&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nv"&gt;$exec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;~/Dropbox/.custom/dmenu/times.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A few notes on the &lt;strong&gt;Shortcuts&lt;/strong&gt; mini-section:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In i3, you don’t really make use of icons on the desktop. I like the absence of visual clutter it provides, but I sometimes like to access a specific folder in which I drop a few shortcuts/symlinks to access other files from there.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;An idea for customization&lt;/em&gt;: working remotely with many teammates from around the world is sometimes confusing timewise, so I have a simple script that outputs the current time in the places I’m interested in monitoring.&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;
&lt;a href="https://www.sglavoie.com/images/posts/0022_guided-tour-i3/timezones.png"&gt;&lt;img alt="timezones_dmenu" class="max-size-img-post" src="https://www.sglavoie.com/images/posts/0022_guided-tour-i3/timezones.png"/&gt;&lt;/a&gt;
&lt;figcaption&gt;Simple pop-up with a list of timezones.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="sound"&gt;Sound&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# `pkill` is useful to quickly update the block in i3blocks&lt;/span&gt;
bindsym&lt;span class="w"&gt; &lt;/span&gt;XF86AudioRaiseVolume&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;exec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$volumepath&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-np&lt;span class="w"&gt; &lt;/span&gt;up&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$volumestep&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-t&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$statuscmd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;                                    &lt;/span&gt;-u&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$statussig&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;pkill&lt;span class="w"&gt; &lt;/span&gt;-RTMIN+1&lt;span class="w"&gt; &lt;/span&gt;i3blocks
bindsym&lt;span class="w"&gt; &lt;/span&gt;XF86AudioLowerVolume&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;exec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$volumepath&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-np&lt;span class="w"&gt; &lt;/span&gt;down&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$volumestep&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-t&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$statuscmd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;                                    &lt;/span&gt;-u&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$statussig&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;pkill&lt;span class="w"&gt; &lt;/span&gt;-RTMIN+1&lt;span class="w"&gt; &lt;/span&gt;i3blocks
bindsym&lt;span class="w"&gt; &lt;/span&gt;XF86AudioMute&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="nb"&gt;exec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$volumepath&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;mute&lt;span class="w"&gt; &lt;/span&gt;-n&lt;span class="w"&gt; &lt;/span&gt;-t&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$statuscmd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;                                    &lt;/span&gt;-u&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$statussig&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;pkill&lt;span class="w"&gt; &lt;/span&gt;-RTMIN+1&lt;span class="w"&gt; &lt;/span&gt;i3blocks
bindsym&lt;span class="w"&gt; &lt;/span&gt;XF86AudioMicMute&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nv"&gt;$exec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$toggle&lt;/span&gt;-mic-on-off
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+exclamdown&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="nv"&gt;$exec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$toggle&lt;/span&gt;-mic-on-off

&lt;span class="c1"&gt;# Automatically set the volume to a given value when (re)launching i3&lt;/span&gt;
exec_always&lt;span class="w"&gt; &lt;/span&gt;--no-startup-id&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"amixer -D pulse set Master 50%"&lt;/span&gt;

&lt;span class="c1"&gt;# Always mute the microphone source when (re)launching i3&lt;/span&gt;
exec_always&lt;span class="w"&gt; &lt;/span&gt;--no-startup-id&lt;span class="w"&gt; &lt;/span&gt;pactl&lt;span class="w"&gt; &lt;/span&gt;set-source-mute&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="s2"&gt;"alsa_input.pci-0000_03_00.6.analog-stereo"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;pkill&lt;span class="w"&gt; &lt;/span&gt;-RTMIN+10&lt;span class="w"&gt; &lt;/span&gt;i3blocks
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This section will depend on the hardware being used, but it gives an idea of how to do things. I use &lt;a href="https://github.com/hastinbe/i3-volume"&gt;&lt;code&gt;i3-volume&lt;/code&gt;&lt;/a&gt; to get nice notifications when changing the volume and all the options being set here use &lt;code&gt;i3-volume&lt;/code&gt;. Toggling the mic output was not super obvious at first, but it’s obviously doable and it’s good to know there’s an &lt;code&gt;XF86Audio&lt;/code&gt; property for that purpose!&lt;/p&gt;
&lt;h2 id="brightness"&gt;Brightness&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Control brightness more precisely through software `light`&lt;/span&gt;
bindsym&lt;span class="w"&gt; &lt;/span&gt;XF86MonBrightnessDown&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;exec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$brightness&lt;/span&gt;-laptop-down
bindsym&lt;span class="w"&gt; &lt;/span&gt;XF86MonBrightnessUp&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nb"&gt;exec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$brightness&lt;/span&gt;-laptop-up

&lt;span class="c1"&gt;# Adjust external monitor brightness&lt;/span&gt;
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+F2&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nv"&gt;$exec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$brightness&lt;/span&gt;-monitor-down
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+F1&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nv"&gt;$exec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$brightness&lt;/span&gt;-monitor-up
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+F3&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nv"&gt;$exec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$brightness&lt;/span&gt;-monitor-default

&lt;span class="c1"&gt;# Toggle laptop screen&lt;/span&gt;
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+Control+b&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;$exec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$brightness&lt;/span&gt;-toggle-laptop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To control the screen brightness, I use &lt;a href="https://github.com/haikarainen/light"&gt;&lt;code&gt;light&lt;/code&gt;&lt;/a&gt;. I also like to just toggle the brightness of my laptop at night when I read something on my external monitor, so I use a &lt;a href="https://github.com/sglavoie/dotfiles/blob/main/.local/bin/toggle_laptop_brightness"&gt;&lt;code&gt;toggle_laptop_brightness&lt;/code&gt;&lt;/a&gt; script that I found somewhere online and adapted slightly.&lt;/p&gt;
&lt;h2 id="applications"&gt;Applications&lt;/h2&gt;
&lt;p&gt;This section will heavily depend on the software you use of course, but there’s the gist of it. I like to have a shortcut for &lt;a href="https://github.com/aristocratos/bashtop"&gt;bashtop&lt;/a&gt; to quickly monitor system resources (&lt;a href="https://github.com/nicolargo/glances"&gt;glances&lt;/a&gt; is also quite nice). Besides that, I like to have applications automatically appear on specific workspaces and be switched to in some instances.&lt;/p&gt;
&lt;p&gt;Controlling which application opens in floating mode is also useful as some just don’t play that well with tiling. To find information about an application, you can open a new terminal window and launch &lt;code&gt;xprop&lt;/code&gt;, click on the window you need information about and &lt;em&gt;voilà&lt;/em&gt;, a couple of strings will be displayed like so (output truncated a bit):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    Icon (16 x 16):
         ▒▓▓▓▓▒
       ▒▓██████▓▒
      ▒█▓▒░  ░▒▓█▒
     ▒█▓░      ░▓█▒
     ▓▓░  ░░░   ░▓▓
    ▒█▒  ░███▓░  ▒█▒
    ▓█░   ░░▓█▓  ░█▓
    ▓█   ░▓▓██▓   █▓
    ▓█   ▓█▒▓█▓   █▓
    ▓█░  ▓█▓▓█▓  ░█▓
    ▒█▒  ░▓▓▒▓▒  ▒█▒
     ▓▓░        ░▓▓
     ▒█▓░      ░▓█▒
      ▒█▓▒░  ░▒▓█▒
       ▒▓██████▓▒
         ▒▓▓▓▓▒
WM_NORMAL_HINTS(WM_SIZE_HINTS):
        program specified location: 0, 0
        program specified minimum size: 627 by 279
        window gravity: NorthWest
WM_CLASS(STRING) = "audacious", "Audacious"
WM_ICON_NAME(STRING) = "47. David Bowie - Best Of Bowie - Heroes (3:36) - Audacious"
WM_NAME(STRING) = "47. David Bowie - Best Of Bowie - Heroes (3:36) - Audacious"
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You may need to switch to tiling windows or make the terminal window that launches &lt;code&gt;xprop&lt;/code&gt; a floating window to be able to click on the desired window. Here, we get an output for the Audacious music player. You usually need the second string from &lt;code&gt;WM_CLASS(STRING)&lt;/code&gt; but if you don’t want to mess with letter casing being upper vs lowercase, you can prefix with &lt;code&gt;(?i)&lt;/code&gt; for “insensitive” as shown below and that will match any window containing that pattern. Sometimes, you’re just after matching a “title” (like it’s done with LibreOffice in the snippet of code below) and you can get that one by showing the container’s border. With this config file, the &lt;code&gt;mod+n&lt;/code&gt; keybinding will show the border you want at the top and &lt;code&gt;mod+y&lt;/code&gt; will make it disappear again.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Autostart applications&lt;/span&gt;
&lt;span class="nv"&gt;$exec&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nv"&gt;$brightness&lt;/span&gt;-monitor-default
&lt;span class="nv"&gt;$exec&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nv"&gt;$default&lt;/span&gt;-web-browser
&lt;span class="nv"&gt;$exec&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nv"&gt;$launcher&lt;/span&gt;-todoist
&lt;span class="nv"&gt;$exec&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;brightnessctl&lt;span class="w"&gt; &lt;/span&gt;s&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;20&lt;/span&gt;%
&lt;span class="nv"&gt;$exec&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;compton&lt;span class="w"&gt; &lt;/span&gt;-CG&lt;span class="w"&gt; &lt;/span&gt;--config&lt;span class="w"&gt; &lt;/span&gt;/dev/null
&lt;span class="nv"&gt;$exec&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;nitrogen&lt;span class="w"&gt; &lt;/span&gt;--restore
&lt;span class="nv"&gt;$exec&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;nm-applet
&lt;span class="nv"&gt;$exec&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;pasystray
&lt;span class="nv"&gt;$exec&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;xfce4-clipman

&lt;span class="c1"&gt;# First kill it as it doesn't always respect the `--timeout` option otherwise&lt;/span&gt;
exec_always&lt;span class="w"&gt; &lt;/span&gt;--no-startup-id&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s2"&gt;"killall unclutter; unclutter --jitter 40 --ignore-scrolling --timeout 5 &amp;amp;"&lt;/span&gt;

&lt;span class="c1"&gt;# Start&lt;/span&gt;
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+Shift+d&lt;span class="w"&gt; &lt;/span&gt;--release&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nb"&gt;exec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"killall dunst; exec notify-send 'restart dunst'"&lt;/span&gt;
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+Shift+t&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="nb"&gt;exec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;thunar
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+Shift+w&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="nv"&gt;$exec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$default&lt;/span&gt;-web-browser
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+masculine&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$python&lt;/span&gt;-term&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;scratchpad&lt;span class="w"&gt; &lt;/span&gt;show&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;move&lt;span class="w"&gt; &lt;/span&gt;position&lt;span class="w"&gt; &lt;/span&gt;center
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+Shift+masculine&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nv"&gt;$exec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;kitty&lt;span class="w"&gt; &lt;/span&gt;--name&lt;span class="w"&gt; &lt;/span&gt;ipythonterm&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;font_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;22&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-e&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;                                        &lt;/span&gt;&lt;span class="nv"&gt;$launcher&lt;/span&gt;-python-term&lt;span class="w"&gt; &lt;/span&gt;-q
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+plus&lt;span class="w"&gt;                   &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$temp&lt;/span&gt;-notes&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;scratchpad&lt;span class="w"&gt; &lt;/span&gt;show&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;move&lt;span class="w"&gt; &lt;/span&gt;position&lt;span class="w"&gt; &lt;/span&gt;center
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+Shift+plus&lt;span class="w"&gt;             &lt;/span&gt;&lt;span class="nv"&gt;$exec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;kitty&lt;span class="w"&gt; &lt;/span&gt;--name&lt;span class="w"&gt; &lt;/span&gt;tmpnotes&lt;span class="w"&gt; &lt;/span&gt;-e&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$launcher&lt;/span&gt;-temp-notes
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+p&lt;span class="w"&gt;                      &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Audacious"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;scratchpad&lt;span class="w"&gt; &lt;/span&gt;show&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;move&lt;span class="w"&gt; &lt;/span&gt;position&lt;span class="w"&gt; &lt;/span&gt;center
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+Shift+p&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="nv"&gt;$exec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;audacious
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+q&lt;span class="w"&gt;                      &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$todoist&lt;/span&gt;-app-name&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;scratchpad&lt;span class="w"&gt; &lt;/span&gt;show&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;move&lt;span class="w"&gt; &lt;/span&gt;position&lt;span class="w"&gt; &lt;/span&gt;center
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+Shift+q&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="nv"&gt;$exec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$launcher&lt;/span&gt;-todoist
bindsym&lt;span class="w"&gt; &lt;/span&gt;Print&lt;span class="w"&gt; &lt;/span&gt;--release&lt;span class="w"&gt;             &lt;/span&gt;&lt;span class="nv"&gt;$exec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;flameshot&lt;span class="w"&gt; &lt;/span&gt;gui&lt;span class="w"&gt; &lt;/span&gt;--path&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$screenshots&lt;/span&gt;-folder
bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+Print&lt;span class="w"&gt; &lt;/span&gt;--release&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nv"&gt;$exec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;flameshot&lt;span class="w"&gt; &lt;/span&gt;screen&lt;span class="w"&gt; &lt;/span&gt;--path&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$screenshots&lt;/span&gt;-folder
bindsym&lt;span class="w"&gt; &lt;/span&gt;mod1+F3&lt;span class="w"&gt;                     &lt;/span&gt;&lt;span class="nv"&gt;$exec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;kitty&lt;span class="w"&gt; &lt;/span&gt;-e&lt;span class="w"&gt; &lt;/span&gt;htop

&lt;span class="c1"&gt;# Open applications on specific workspaces&lt;/span&gt;
assign&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"(?i)code"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;                  &lt;/span&gt;&lt;span class="nv"&gt;$ws1&lt;/span&gt;
assign&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$default&lt;/span&gt;-web-browser&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nv"&gt;$ws3&lt;/span&gt;
assign&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"(?i)firefox"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;               &lt;/span&gt;&lt;span class="nv"&gt;$ws3&lt;/span&gt;
assign&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$default&lt;/span&gt;-web-browser-class&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nv"&gt;$ws3&lt;/span&gt;
assign&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Audacity"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;                  &lt;/span&gt;&lt;span class="nv"&gt;$ws4&lt;/span&gt;
assign&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Gimp"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;                      &lt;/span&gt;&lt;span class="nv"&gt;$ws4&lt;/span&gt;
assign&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Inkscape"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;                  &lt;/span&gt;&lt;span class="nv"&gt;$ws4&lt;/span&gt;
assign&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"vlc"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;                       &lt;/span&gt;&lt;span class="nv"&gt;$ws4&lt;/span&gt;
assign&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"(?i)atril"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;                 &lt;/span&gt;&lt;span class="nv"&gt;$ws6&lt;/span&gt;
assign&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"(?i)zathura"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;               &lt;/span&gt;&lt;span class="nv"&gt;$ws6&lt;/span&gt;
assign&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"(?i)libreoffice"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="nv"&gt;$ws4&lt;/span&gt;
assign&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Transmission"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="nv"&gt;$ws8&lt;/span&gt;
assign&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"keepassxc"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;                 &lt;/span&gt;&lt;span class="nv"&gt;$ws8&lt;/span&gt;
assign&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"obs"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;                       &lt;/span&gt;&lt;span class="nv"&gt;$ws8&lt;/span&gt;

&lt;span class="c1"&gt;# Automatically switch to workspace when opening those&lt;/span&gt;
for_window&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"(?i)code"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;                   &lt;/span&gt;workspace&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$ws1&lt;/span&gt;
for_window&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$default&lt;/span&gt;-web-browser&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;workspace&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$ws3&lt;/span&gt;
for_window&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$default&lt;/span&gt;-web-browser-class&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;workspace&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$ws3&lt;/span&gt;
for_window&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"(?i)firefox"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;                &lt;/span&gt;workspace&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$ws3&lt;/span&gt;
for_window&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Gimp"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;                       &lt;/span&gt;workspace&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$ws4&lt;/span&gt;
for_window&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Inkscape"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;                   &lt;/span&gt;workspace&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$ws4&lt;/span&gt;
for_window&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"audacity"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;                   &lt;/span&gt;workspace&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$ws4&lt;/span&gt;
for_window&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"vlc"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;                        &lt;/span&gt;workspace&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$ws4&lt;/span&gt;
for_window&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"(?i)zathura"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;                &lt;/span&gt;workspace&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$ws6&lt;/span&gt;
for_window&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"(?i)atril"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;                  &lt;/span&gt;workspace&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$ws6&lt;/span&gt;
for_window&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"(?i)libreoffice"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;workspace&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$ws4&lt;/span&gt;
for_window&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Transmission"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;               &lt;/span&gt;workspace&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$ws8&lt;/span&gt;
for_window&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"keepassxc"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;                  &lt;/span&gt;workspace&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$ws8&lt;/span&gt;
for_window&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"obs"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;                        &lt;/span&gt;workspace&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$ws8&lt;/span&gt;

&lt;span class="c1"&gt;# Open specific applications in floating mode&lt;/span&gt;
for_window&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"(?i)virtualbox"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;floating&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;enable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;border&lt;span class="w"&gt; &lt;/span&gt;pixel&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;
for_window&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"GParted"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;          &lt;/span&gt;floating&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;enable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;border&lt;span class="w"&gt; &lt;/span&gt;pixel&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;
for_window&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Lightdm-settings"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;floating&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;enable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;pixel&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;
for_window&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Lxappearance"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;floating&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;enable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;sticky&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;enable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;border&lt;span class="w"&gt; &lt;/span&gt;pixel&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;
for_window&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Nitrogen"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;floating&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;enable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;sticky&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;enable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;border&lt;span class="w"&gt; &lt;/span&gt;pixel&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;
for_window&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"File Transfer*"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;floating&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;enable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;border&lt;span class="w"&gt; &lt;/span&gt;pixel&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;
for_window&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"alsamixer"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;floating&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;enable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;border&lt;span class="w"&gt; &lt;/span&gt;pixel&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;
for_window&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"(?i)zoom"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;floating&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;enable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;border&lt;span class="w"&gt; &lt;/span&gt;pixel&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The section &lt;strong&gt;Autostart applications&lt;/strong&gt; is the list of applications that launch when you open your X session with i3.&lt;/p&gt;
&lt;h2 id="keyboard-mouse"&gt;Keyboard &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; mouse&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Set compose key to Right Ctrl&lt;/span&gt;
exec_always&lt;span class="w"&gt; &lt;/span&gt;--no-startup-id&lt;span class="w"&gt;    &lt;/span&gt;setxkbmap&lt;span class="w"&gt; &lt;/span&gt;-option&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$compose&lt;/span&gt;-key

&lt;span class="c1"&gt;# Delay, interval&lt;/span&gt;
exec_always&lt;span class="w"&gt; &lt;/span&gt;--no-startup-id&lt;span class="w"&gt;    &lt;/span&gt;xset&lt;span class="w"&gt; &lt;/span&gt;r&lt;span class="w"&gt; &lt;/span&gt;rate&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;250&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;60&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I like to set those options in my config file as they can be modified on the fly if you reload i3. This is thanks to the &lt;code&gt;exec_always --no-startup-id&lt;/code&gt; directive which will always run the invoked command when relaunching, not just when logging in to a session.&lt;/p&gt;
&lt;h2 id="colors-theming"&gt;Colors &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; theming&lt;/h2&gt;
&lt;p&gt;Of interest in this section, apart from the actual colors, is where you will set your i3bar on the screen (top vs bottom) and on which monitor your tray (the space with little icons to show the volume, WiFi connectivity and so on) will be displayed if you have more than one monitor. In this case, the bar displays at the top of the screen &lt;em&gt;à la Mac&lt;/em&gt; or &lt;em&gt;à la &lt;span class="caps"&gt;GNOME&lt;/span&gt;&lt;/em&gt; with &lt;code&gt;position top&lt;/code&gt; and reveals information about system resources with &lt;code&gt;i3blocks&lt;/code&gt; (you can find how it can be configured in &lt;a href="https://github.com/sglavoie/dotfiles/tree/main/.config/i3blocks"&gt;my dotfiles&lt;/a&gt; or in the &lt;a href="https://github.com/vivien/i3blocks/"&gt;i3blocks GitHub repo&lt;/a&gt;).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Start i3bar to display a workspace bar (plus the system information i3status if available)&lt;/span&gt;
bar&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;id&lt;span class="w"&gt; &lt;/span&gt;bar-1
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;$font&lt;/span&gt;-small
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;$output&lt;/span&gt;-secondary
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;# mode invisible&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;tray_output&lt;span class="w"&gt; &lt;/span&gt;none
&lt;span class="w"&gt;    &lt;/span&gt;status_command&lt;span class="w"&gt; &lt;/span&gt;i3blocks
&lt;span class="w"&gt;    &lt;/span&gt;position&lt;span class="w"&gt; &lt;/span&gt;top

&lt;span class="w"&gt;    &lt;/span&gt;colors&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;background&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;#000000&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;statusline&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;#ffffff&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;separator&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;#666666&lt;/span&gt;
&lt;span class="c1"&gt;#                          border  backgr. text&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;focused_workspace&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;#4c7899 #285577 #ffffff #ffffff&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;active_workspace&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="c1"&gt;#333333 #5f676a #ffffff #3c3b37&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;inactive_workspace&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;#333333 #222222 #888888 #aea79f&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;urgent_workspace&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="c1"&gt;#2f343a #900000 #ffffff #ffffff&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

bar&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;id&lt;span class="w"&gt; &lt;/span&gt;bar-0
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;$font&lt;/span&gt;-medium
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;$output&lt;/span&gt;-primary
&lt;span class="w"&gt;    &lt;/span&gt;tray_output&lt;span class="w"&gt; &lt;/span&gt;primary
&lt;span class="w"&gt;    &lt;/span&gt;status_command&lt;span class="w"&gt; &lt;/span&gt;i3blocks
&lt;span class="w"&gt;    &lt;/span&gt;position&lt;span class="w"&gt; &lt;/span&gt;top
&lt;span class="w"&gt;    &lt;/span&gt;bindsym&lt;span class="w"&gt; &lt;/span&gt;button4&lt;span class="w"&gt; &lt;/span&gt;nop
&lt;span class="w"&gt;    &lt;/span&gt;bindsym&lt;span class="w"&gt; &lt;/span&gt;button5&lt;span class="w"&gt; &lt;/span&gt;nop

&lt;span class="w"&gt;    &lt;/span&gt;colors&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;background&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;#000000&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;statusline&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;#ffffff&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;separator&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;#666666&lt;/span&gt;
&lt;span class="c1"&gt;#                          border  backgr. text&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;focused_workspace&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;#4c7899 #285577 #ffffff #ffffff&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;active_workspace&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="c1"&gt;#333333 #5f676a #ffffff #3c3b37&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;inactive_workspace&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;#333333 #222222 #888888 #aea79f&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;urgent_workspace&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="c1"&gt;#2f343a #900000 #ffffff #ffffff&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# Theme colors&lt;/span&gt;
&lt;span class="c1"&gt;# class                   border  backgr. text    indic.  child_border&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;client.focused&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="c1"&gt;#ffffff #ff0054 #ffffff #2e9ef4&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;client.focused_inactive&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;#333333 #8338ec #ffffff #484e50&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;client.unfocused&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;#333333 #000000 #bbbbbb #292d2e&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;client.urgent&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="c1"&gt;#2f343a #900000 #ffffff #900000&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;client.placeholder&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;#F9FAF9 #061229 #FFFFFF #061229&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;client.background&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="c1"&gt;#000000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What I’ve found particularly useful here is the fact you can have a different “i3 bar” for each screen. I’ve set keybindings in the section &lt;a href="#screens-and-monitors"&gt;Screens and monitors&lt;/a&gt; so I can toggle them on/off separately too.&lt;/p&gt;
&lt;p&gt;I’ve also switched away from the default &lt;a href="https://github.com/i3/i3status"&gt;i3status&lt;/a&gt; program to display the status bar(s) to &lt;a href="https://github.com/vivien/i3blocks/"&gt;i3blocks&lt;/a&gt;, which I’ve found a lot nicer to look at and easier to configure too.&lt;/p&gt;
&lt;p&gt;Theming i3 can be tedious, but thankfully there are tools to automate the process! One such tool is &lt;a href="https://github.com/altdesktop/i3-style"&gt;i3-style&lt;/a&gt;, which allows you to quickly switch in place your theme without having to log out or modify manually your i3 &lt;code&gt;config&lt;/code&gt; file. To go the manual route or to tweak an existing theme, you can always use a website like &lt;a href="https://htmlcolorcodes.com"&gt;&lt;span class="caps"&gt;HTML&lt;/span&gt; Color Codes&lt;/a&gt; to find an exact hexadecimal value. You can also use &lt;a href="https://terminal.sexy"&gt;terminal.sexy&lt;/a&gt; to come up with nice looking themes, which can be exported for other applications you may be using.&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="conclusion"&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;You can find the &lt;a href="https://github.com/sglavoie/dotfiles/blob/main/.config/i3/config"&gt;complete &lt;code&gt;config&lt;/code&gt; file in my dotfiles on GitHub&lt;/a&gt;. If you liked this article, you may also enjoy reading the following ones:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.sglavoie.com/posts/2019/05/12/suckless-minimalist-tools-that-work-great/"&gt;Suckless: Minimalist Tools That Work Great&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.sglavoie.com/posts/2019/11/10/using-dmenu-to-optimize-common-tasks/"&gt;Using dmenu to Optimize Common Tasks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.sglavoie.com/posts/2019/01/08/using-i3-as-a-window-manager-for-increased-productivity/"&gt;Using i3 as a Window Manager for Increased Productivity&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="more-resources-and-references"&gt;More resources and references&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://fedoramagazine.org/getting-started-i3-window-manager/"&gt;Getting started with the i3 tiling window manager&lt;/a&gt; — Fedora Magazine&lt;/li&gt;
&lt;li&gt;&lt;a href="https://i3wm.org/docs/userguide.html"&gt;Official i3 documentation&lt;/a&gt; — i3wm.org&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/index.php/i3"&gt;i3 page on the Arch Wiki&lt;/a&gt; — Arch Wiki&lt;/li&gt;
&lt;/ul&gt;</content><category term="tools"></category><category term="i3"></category><category term="window-manager"></category></entry><entry><title>My Current Set of Tools and Customizations</title><link href="https://www.sglavoie.com/posts/2020/06/06/my-current-set-of-tools-and-customizations/" rel="alternate"></link><published>2020-06-06T10:41:00-05:00</published><updated>2021-06-17T18:09:00-05:00</updated><author><name>Sébastien Lavoie</name></author><id>tag:www.sglavoie.com,2020-06-06:/posts/2020/06/06/my-current-set-of-tools-and-customizations/</id><summary type="html">&lt;p&gt;I like to keep track of the tools I use and see the shifts that occur over time — may it be switching from a graphical interface to a command-line one or finding a totally new workflow for an existing need. Without further ado, here&amp;#8217;s the&amp;nbsp;list!&lt;/p&gt;</summary><content type="html">&lt;div class="table-wrapper"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Category&lt;/th&gt;
&lt;th&gt;#1 tool&lt;/th&gt;
&lt;th&gt;Alternatives&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;3d animation&lt;/td&gt;
&lt;td&gt;blender&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;audio editing&lt;/td&gt;
&lt;td&gt;audacity&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;backup (script)&lt;/td&gt;
&lt;td&gt;rsync&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;clipboard manager&lt;/td&gt;
&lt;td&gt;copyq&lt;/td&gt;
&lt;td&gt;clipman&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cloud&lt;/td&gt;
&lt;td&gt;dropbox-cli&lt;/td&gt;
&lt;td&gt;google drive&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;code completion&lt;/td&gt;
&lt;td&gt;coc.nvim&lt;/td&gt;
&lt;td&gt;ale&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;code snippets&lt;/td&gt;
&lt;td&gt;github gists&lt;/td&gt;
&lt;td&gt;gitlab snippets&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cursor hider&lt;/td&gt;
&lt;td&gt;unclutter&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;desktop environment&lt;/td&gt;
&lt;td&gt;xfce&lt;/td&gt;
&lt;td&gt;gnome&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;diagram generation&lt;/td&gt;
&lt;td&gt;plantuml&lt;/td&gt;
&lt;td&gt;mermaid-js&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dotfiles management&lt;/td&gt;
&lt;td&gt;git bare repo&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dynamic menu&lt;/td&gt;
&lt;td&gt;dmenu&lt;/td&gt;
&lt;td&gt;rofi&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ebook manager&lt;/td&gt;
&lt;td&gt;calibre&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;encrypted paste bin&lt;/td&gt;
&lt;td&gt;paste.sh&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;file manager&lt;/td&gt;
&lt;td&gt;thunar&lt;/td&gt;
&lt;td&gt;pcmanfm, nautilus&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;file renamer&lt;/td&gt;
&lt;td&gt;pyrenamer&lt;/td&gt;
&lt;td&gt;thunar bulk rename&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;flowchart design&lt;/td&gt;
&lt;td&gt;draw.io&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fonts monospace&lt;/td&gt;
&lt;td&gt;jetbrains mono&lt;/td&gt;
&lt;td&gt;iosevka&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fonts monospace&lt;/td&gt;
&lt;td&gt;source code pro&lt;/td&gt;
&lt;td&gt;inconsolata&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fonts sansserif&lt;/td&gt;
&lt;td&gt;lato&lt;/td&gt;
&lt;td&gt;dejavu&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;gif screen recorder&lt;/td&gt;
&lt;td&gt;peek&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;image editing (raster)&lt;/td&gt;
&lt;td&gt;gimp&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;image editing (vector)&lt;/td&gt;
&lt;td&gt;inkscape&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;interface design&lt;/td&gt;
&lt;td&gt;figma&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;irc chat&lt;/td&gt;
&lt;td&gt;hexchat&lt;/td&gt;
&lt;td&gt;pidgin&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;latex typesetting&lt;/td&gt;
&lt;td&gt;latex workshop&lt;/td&gt;
&lt;td&gt;vimtex&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;linux distribution&lt;/td&gt;
&lt;td&gt;xubuntu&lt;/td&gt;
&lt;td&gt;debian, manjaro&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;memorizing&lt;/td&gt;
&lt;td&gt;anki&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mind mapping&lt;/td&gt;
&lt;td&gt;freeplane&lt;/td&gt;
&lt;td&gt;draw.io&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;music player&lt;/td&gt;
&lt;td&gt;audacious&lt;/td&gt;
&lt;td&gt;clementine&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;note-taking&lt;/td&gt;
&lt;td&gt;vimwiki&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;notifications&lt;/td&gt;
&lt;td&gt;xfce&lt;/td&gt;
&lt;td&gt;dunst&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;office suite&lt;/td&gt;
&lt;td&gt;libreoffice&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;operating system&lt;/td&gt;
&lt;td&gt;gnu/linux&lt;/td&gt;
&lt;td&gt;macOS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;paragraph formatter&lt;/td&gt;
&lt;td&gt;par&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;partition manager&lt;/td&gt;
&lt;td&gt;gparted&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;password manager&lt;/td&gt;
&lt;td&gt;keepassxc&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pdf editing (minimal)&lt;/td&gt;
&lt;td&gt;pdfarranger&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pdf viewer&lt;/td&gt;
&lt;td&gt;atril&lt;/td&gt;
&lt;td&gt;evince, zathura&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;publishing&lt;/td&gt;
&lt;td&gt;scribus&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;python documentation&lt;/td&gt;
&lt;td&gt;sphinx&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;python formatter&lt;/td&gt;
&lt;td&gt;black&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;python ide&lt;/td&gt;
&lt;td&gt;pycharm&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;python linter&lt;/td&gt;
&lt;td&gt;pylint&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;python refactoring&lt;/td&gt;
&lt;td&gt;rope&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;python test suite&lt;/td&gt;
&lt;td&gt;pytest&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;python virtualenv manager&lt;/td&gt;
&lt;td&gt;venv module&lt;/td&gt;
&lt;td&gt;virtualenvwrapper.sh&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;screen locker&lt;/td&gt;
&lt;td&gt;slock&lt;/td&gt;
&lt;td&gt;xflock4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;screen recorder&lt;/td&gt;
&lt;td&gt;obs studio&lt;/td&gt;
&lt;td&gt;simplescreenrecorder&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;screenshot software&lt;/td&gt;
&lt;td&gt;flameshot&lt;/td&gt;
&lt;td&gt;xfce4-screenshooter&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;security&lt;/td&gt;
&lt;td&gt;gnupg2&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sound system&lt;/td&gt;
&lt;td&gt;pulseaudio&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;source code explorer&lt;/td&gt;
&lt;td&gt;sourcetrail&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sql client&lt;/td&gt;
&lt;td&gt;dbeaver&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sql database&lt;/td&gt;
&lt;td&gt;postgres&lt;/td&gt;
&lt;td&gt;mysql, sqlite&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sql viewer&lt;/td&gt;
&lt;td&gt;sqlitebrowser&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;static website generator&lt;/td&gt;
&lt;td&gt;pelican&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;task management&lt;/td&gt;
&lt;td&gt;todoist&lt;/td&gt;
&lt;td&gt;google keep&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;terminal calculator&lt;/td&gt;
&lt;td&gt;ipython&lt;/td&gt;
&lt;td&gt;bc&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;terminal clipboard&lt;/td&gt;
&lt;td&gt;xclip&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;terminal coursera downloader&lt;/td&gt;
&lt;td&gt;coursera-dl&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;terminal disk usage&lt;/td&gt;
&lt;td&gt;ncdu&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;terminal emulator&lt;/td&gt;
&lt;td&gt;kitty&lt;/td&gt;
&lt;td&gt;st, xfce4-terminal&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;terminal file archiver&lt;/td&gt;
&lt;td&gt;p7zip&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;terminal file lister&lt;/td&gt;
&lt;td&gt;exa&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;terminal file lister tree-style&lt;/td&gt;
&lt;td&gt;tree&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;terminal file manager&lt;/td&gt;
&lt;td&gt;vifm&lt;/td&gt;
&lt;td&gt;nnn&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;terminal file manager (minimal)&lt;/td&gt;
&lt;td&gt;lf&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;terminal file viewer&lt;/td&gt;
&lt;td&gt;bat&lt;/td&gt;
&lt;td&gt;cat&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;terminal fuzzy finder&lt;/td&gt;
&lt;td&gt;fzf&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;terminal markup converter&lt;/td&gt;
&lt;td&gt;pandoc&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;terminal network downloader&lt;/td&gt;
&lt;td&gt;wget&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;terminal network tool&lt;/td&gt;
&lt;td&gt;curl&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;terminal partition manager&lt;/td&gt;
&lt;td&gt;parted&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;terminal search tool&lt;/td&gt;
&lt;td&gt;the silver searcher&lt;/td&gt;
&lt;td&gt;locate&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;terminal session recorder&lt;/td&gt;
&lt;td&gt;asciinema&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;terminal shell&lt;/td&gt;
&lt;td&gt;zsh&lt;/td&gt;
&lt;td&gt;bash&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;terminal system monitor&lt;/td&gt;
&lt;td&gt;bashtop&lt;/td&gt;
&lt;td&gt;glances, htop&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;terminal youtube downloader&lt;/td&gt;
&lt;td&gt;youtube-dl&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;text editor&lt;/td&gt;
&lt;td&gt;neovim&lt;/td&gt;
&lt;td&gt;vim, vs code&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;torrent&lt;/td&gt;
&lt;td&gt;transmission&lt;/td&gt;
&lt;td&gt;deluge&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;version control stats&lt;/td&gt;
&lt;td&gt;gitstats&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;version control system&lt;/td&gt;
&lt;td&gt;git&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;video player&lt;/td&gt;
&lt;td&gt;smplayer&lt;/td&gt;
&lt;td&gt;vlc&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;visual plotting&lt;/td&gt;
&lt;td&gt;geogebra&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;wallpaper browser/setter&lt;/td&gt;
&lt;td&gt;nitrogen&lt;/td&gt;
&lt;td&gt;feh&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;web browser&lt;/td&gt;
&lt;td&gt;google-chrome&lt;/td&gt;
&lt;td&gt;firefox, brave&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;window manager&lt;/td&gt;
&lt;td&gt;i3&lt;/td&gt;
&lt;td&gt;dwm&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;window manager status bar&lt;/td&gt;
&lt;td&gt;i3blocks&lt;/td&gt;
&lt;td&gt;i3status&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;p&gt;For a more granular selection of open source projects I’ve used and like (Vim plugins, color schemes, command-line tools, etc.), you can also have a look at &lt;a href="https://github.com/sglavoie?tab=stars"&gt;the GitHub repositories I’ve starred&lt;/a&gt; over time.&lt;/p&gt;</content><category term="tools"></category><category term="customization"></category><category term="software"></category></entry><entry><title>Tip the Scales in Times of Instability With the Rock-Solid Debian</title><link href="https://www.sglavoie.com/posts/2020/04/05/tip-the-scales-in-times-of-instability-with-the-rock-solid-debian/" rel="alternate"></link><published>2020-04-05T12:14:00-05:00</published><updated>2020-04-09T11:41:00-05:00</updated><author><name>Sébastien Lavoie</name></author><id>tag:www.sglavoie.com,2020-04-05:/posts/2020/04/05/tip-the-scales-in-times-of-instability-with-the-rock-solid-debian/</id><summary type="html">&lt;p&gt;Desperate times call for the best Linux experience possible&amp;#8230; And in my experience so far, the &lt;a href="https://www.debian.org/"&gt;Debian&lt;/a&gt; distribution with the &lt;a href="https://www.xfce.org/"&gt;Xfce desktop environment&lt;/a&gt; or with the even lighter alternative &lt;a href="https://i3wm.org/"&gt;i3 tiling window manager&lt;/a&gt; makes for a very smooth&amp;nbsp;ride.&lt;/p&gt;</summary><content type="html">
&lt;hr/&gt;
&lt;h1 id="introduction"&gt;Introduction&lt;/h1&gt;
&lt;p&gt;I’m familiar with Linux distribution hopping, having tried out many options over the years, starting around the time Mandrake 9.2 was popular back in 2003, then switching to a few others including Ubuntu, &lt;span class="caps"&gt;KNOPPIX&lt;/span&gt;, Fedora, Xubuntu, openSUSE, Kubuntu, Mint, Manjaro, Mandriva… And of course Debian along the way, which undoubtedly used to be relatively harder to get started with.&lt;/p&gt;
&lt;p&gt;My heart has also been stirred by different desktop environments and window managers, from more user-friendly/feature-rich solutions such as &lt;span class="caps"&gt;KDE&lt;/span&gt;, &lt;span class="caps"&gt;GNOME&lt;/span&gt; (along with Unity when it was still a thing), Xfce and Cinnamon to an arguably more obscure selection comprising Openbox, Fluxbox, Enlightenment, Awesome &lt;span class="caps"&gt;WM&lt;/span&gt;, dwm, i3 and bspwm.&lt;/p&gt;
&lt;p&gt;I haven’t tried everything that’s out there (XMonad being one such &lt;em&gt;esoteric&lt;/em&gt; possibility), but I’ve come to realize that what matters most to me is a great balance of stability and usability, allowing to be more focused on any given task at end and therefore leading to increased productivity. For this reason, I recently turned back to a fantastic combo: Debian with an Xfce base and the i3 tiling window manager.&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="why-debian"&gt;Why Debian?&lt;/h1&gt;
&lt;h2 id="stability-and-reliability"&gt;Stability and Reliability&lt;/h2&gt;
&lt;p&gt;Debian has always been to me the father figure of stability in the Linux world. Countless servers have run on Debian and continue to do so for good reason: it just works once it is properly set up. I have had some bad luck with other Debian-based distributions like Ubuntu and Linux Mint which strive to be easier to use but remain easier to break, being a bit more bleeding edge and sometimes bloated too with tons of software I don’t really need. Fedora, although I like its philosophy and style very much, has always lead to hardware issues on my apparently less-than-ideal machines. Manjaro has been pleasant and easy to use, but Arch feels like the &lt;em&gt;right&lt;/em&gt; choice if one is to build a custom system from scratch. It does take a good amount of time to get things going on such a distribution and usually a good dose of maintenance too, which brought me to seek less time-consuming options. For stability and reliability, Debian is hard to beat in my experience.&lt;/p&gt;
&lt;h2 id="marvelous-package-manager"&gt;Marvelous Package Manager&lt;/h2&gt;
&lt;p&gt;I have always found the package manager on Debian (and derivatives) to be easier to use than alternatives like &lt;code&gt;yum&lt;/code&gt;, &lt;code&gt;DNF&lt;/code&gt; or &lt;code&gt;urpmi&lt;/code&gt; for &lt;span class="caps"&gt;RPM&lt;/span&gt; packages. The &lt;code&gt;pacman&lt;/code&gt; package manager available on Arch-based systems is truly excellent and powerful, but I simply find &lt;code&gt;apt&lt;/code&gt; to be more intuitive after using it for a lot longer.&lt;/p&gt;
&lt;h2 id="it-just-wont-break"&gt;It Just Won’t Break&lt;/h2&gt;
&lt;p&gt;Sitting on the bleeding edge is fun and sometimes even rewarding when things finally work as expected, but I have seen that it doesn’t stay that way forever. Big updates, sometimes relatively frequent ones, can leave the system in an unusable state. It’s often a minor annoyance to fix, but that just doesn’t happen on Debian, where packages are vetted mainly for their legendary stability before releasing them. They are indeed quite a bit older than what can be found on other distributions. It’s the price to pay, but I came to the conclusion that it’s worth it if you’re looking to get things done in the long run.&lt;/p&gt;
&lt;figure&gt;
&lt;a href="https://www.sglavoie.com/images/posts/0020_stable_system_debian/debian_xfce.png"&gt;&lt;img alt="debian_xfce" class="max-size-img-post" src="https://www.sglavoie.com/images/posts/0020_stable_system_debian/debian_xfce.png"/&gt;&lt;/a&gt;
&lt;figcaption&gt;Debian Xfce in its glorious simplicity.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="xfce-is-minimalist-enough-and-hassle-free"&gt;Xfce Is Minimalist Enough and Hassle-Free&lt;/h2&gt;
&lt;p&gt;It’s also about the combination of &lt;strong&gt;Debian + Xfce&lt;/strong&gt;: while Debian makes sure the system remains functional as a whole, Xfce is the solution for interacting with applications and windows without glitches in a “&lt;em&gt;floating mode&lt;/em&gt;” where all windows can be grabbed and moved around easily. Debian itself keeps old packages around by choice and Xfce has a &lt;em&gt;very&lt;/em&gt; slow release cycle yet also provides stability out of the box. This means that installing Xfce on Debian &lt;strong&gt;has&lt;/strong&gt; to work because bugs have been evened out over &lt;strong&gt;years&lt;/strong&gt; of effort from both teams. This is an easy yet very satisfying solution.&lt;/p&gt;
&lt;h3 id="xfce-vs-kde"&gt;Xfce vs &lt;span class="caps"&gt;KDE&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;One of the main appeals of desktop environments like &lt;span class="caps"&gt;KDE&lt;/span&gt; and &lt;span class="caps"&gt;GNOME&lt;/span&gt; is that they have more features and add them more often. They do use more resources and even though they have gone through substantial optimizations over the years, they still feel less snappy on older systems compared to simpler window managers or even Xfce. Recently, &lt;span class="caps"&gt;KDE&lt;/span&gt; caught up with Xfce in terms of resources utilization, but there’s one major reason I just can’t rely on it on a production machine: in every single release I have tried (from &lt;span class="caps"&gt;KDE&lt;/span&gt; 2.x in the early 2000s to Plasma 5.x), I was confronted with numerous bugs within minutes of delving into it. I have always been faced with some minor troubles on &lt;span class="caps"&gt;GNOME&lt;/span&gt; too (versions 2 and 3), but it’s never been as severe as with &lt;span class="caps"&gt;KDE&lt;/span&gt;. &lt;span class="caps"&gt;KDE&lt;/span&gt; has plenty of cool ideas and is fully customizable, but that’s to a fault in my view.&lt;/p&gt;
&lt;h3 id="xfce-vs-gnome"&gt;Xfce vs &lt;span class="caps"&gt;GNOME&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;On the other hand, &lt;span class="caps"&gt;GNOME&lt;/span&gt; does consume at least twice as much &lt;span class="caps"&gt;RAM&lt;/span&gt; and &lt;span class="caps"&gt;CPU&lt;/span&gt; compared with Xfce even with no extensions enabled on &lt;span class="caps"&gt;GNOME&lt;/span&gt; and a couple of plugins activated on Xfce. I enjoy how &lt;span class="caps"&gt;GNOME&lt;/span&gt; deals with virtual desktops and think this can be a great productivity enhancement, but once I’ve configured Xfce to be mainly keyboard-driven, I prefer keeping it simpler with less transition effects and other nice visual additions. On the graphical side of things, &lt;span class="caps"&gt;GNOME&lt;/span&gt; with Wayland has never worked as well for me as with Xorg, so that’s something else to watch for.&lt;/p&gt;
&lt;h3 id="xfce-vs-i3"&gt;Xfce vs i3&lt;/h3&gt;
&lt;p&gt;Well, &lt;code&gt;i3&lt;/code&gt; is a different beast in its own right and has taken a special place in my heart. It uses less memory and &lt;span class="caps"&gt;CPU&lt;/span&gt; than any desktop environment out there and can be used with minimalistic software, like the &lt;code&gt;st&lt;/code&gt; terminal and the dynamic menu &lt;code&gt;dmenu&lt;/code&gt; (read the article about &lt;a href="https://www.sglavoie.com/posts/2020/04/05/tip-the-scales-in-times-of-instability-with-the-rock-solid-debian/"&gt;suckless tools&lt;/a&gt; if that resonates with your style!). There are still a few things that I didn’t like very much about it, such as the way windows are managed in fullscreen mode, the default lack of a convenient master/slave tiling layout (similar to &lt;code&gt;dwm&lt;/code&gt; and &lt;code&gt;bspwm&lt;/code&gt;) and the way one interacts with external monitor(s), where workspaces use the same numbering across multiple screens. But i3 with Debian feels more mature and is (again) a bit older than what you might find elsewhere. There is &lt;a href="https://i3wm.org/docs/userguide.html#multi_monitor"&gt;a comprehensive section in the i3 User’s Guide&lt;/a&gt; that explains how to work around some issues.&lt;/p&gt;
&lt;p&gt;I find that maximizing windows works like what you would expect in Xfce, covering everything but the menu bar. There’s also the fact that Xfce makes it very convenient to add and remove virtual desktops on the fly instead of having a bunch of those at all time. With minimal Bash scripting, windows in Xfce can be moved around from one monitor to the other, replicating a useful feature available in i3. Xfce, having only &lt;em&gt;floating&lt;/em&gt; windows, behaves better with applications like VirtualBox and &lt;span class="caps"&gt;GIMP&lt;/span&gt; by default. And there’s also some common ground with the “pseudo tiling” available in Xfce which makes i3 much less unique, although i3 makes it a lot easier to maximize the screen estate being used.&lt;/p&gt;
&lt;figure&gt;
&lt;a href="https://www.sglavoie.com/images/posts/0020_stable_system_debian/debian_i3.png"&gt;&lt;img alt="debian_i3" class="max-size-img-post" src="https://www.sglavoie.com/images/posts/0020_stable_system_debian/debian_i3.png"/&gt;&lt;/a&gt;
&lt;figcaption&gt;Debian i3 using up to the last available pixel.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;In the department of customization, i3 is very good, but having to edit a configuration file manually each time a little change is desired can become tiresome. Xfce has a wonderful settings manager which makes it easy to adjust many system settings as well as those related only to the window manager. i3 requires initially quite a bit more effort to work and will incur a few additional dependencies if one wants to make it look better. Xfce strikes a very good balance: it’s highly customizable; pretty much bug-free in my experience and is usable right away without any surprise. Once both are fully configured to match one’s need, I tend to rely on i3 to be more productive and keep Xfce as a functional backup if someone else is going to try to use the mouse on my system to accomplish any kind of useful action with the windows ;).&lt;/p&gt;
&lt;p&gt;I find that installing Debian with an Xfce base leads to having enough useful software pre-installed compared to a barebone installation and installing i3 afterwards only makes the transition easier.&lt;/p&gt;
&lt;h3 id="xfce-vs-other-window-managers"&gt;Xfce vs Other Window Managers&lt;/h3&gt;
&lt;p&gt;Now, there is an endless stream of other options to explore and I don’t know enough about many of those to dare to comment. But from those I tried, I can certainly say that I preferred the ease of use of Xfce over other more minimalistic approaches like Openbox, Enlightenment and Fluxbox. Xfce offers all you need out of the box, but not much more, which is what I’m looking for at this moment. On the other hand, making &lt;code&gt;dwm&lt;/code&gt; work in one precise way can be tricky and requires many tweaks before the configuration can remain untouched for a while. I do not like the necessity of recompiling the source code every single time a tiny change is made which led me to discard it as a convenient option in the long run. I like making small visual adjustments to my system from time to time and I want this to be as frictionless as possible.&lt;/p&gt;
&lt;p&gt;Otherwise, &lt;code&gt;dwm&lt;/code&gt; and &lt;code&gt;bspwm&lt;/code&gt; might be some very decent options if one is inclined to be tweaking everything from scratch (it’s not really a facultative step anyways!), but Xfce integrates everything one might need under very few different packages and has been extremely reliable for me from the beginning. On any kind of modern machine, the extra system resources used up by Xfce compared to those lighter alternatives really don’t mean much in the end because it is compensated with the presence of useful applets and tools which definitely make one’s life easier.&lt;/p&gt;
&lt;h2 id="its-ideal-for-developers"&gt;It’s Ideal for Developers&lt;/h2&gt;
&lt;h3 id="resources-efficiency-effectiveness"&gt;Resources Efficiency &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; Effectiveness&lt;/h3&gt;
&lt;p&gt;Debian with a light working environment is resource-efficient and comes with much less software out of the box compared to the &lt;span class="caps"&gt;KDE&lt;/span&gt; or &lt;span class="caps"&gt;GNOME&lt;/span&gt; editions: instead, more resources are available for hungry applications like heavy IDEs. Installing applications specific to those desktop environments work flawlessly too. Not only does Debian consume less resources (especially while running Xfce/i3 on top), it does so extremely well and offers great performance.&lt;/p&gt;
&lt;figure&gt;
&lt;a href="https://www.sglavoie.com/images/posts/0020_stable_system_debian/resources_utilization.png"&gt;&lt;img alt="resources_utilization" class="max-size-img-post" src="https://www.sglavoie.com/images/posts/0020_stable_system_debian/resources_utilization.png"/&gt;&lt;/a&gt;
&lt;figcaption&gt;Debian Xfce mostly at rest.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id="rock-solid-stability-again-big-selling-point"&gt;Rock-Solid Stability (Again, Big Selling Point!)&lt;/h3&gt;
&lt;p&gt;Since it’s so stable, any release of Debian is currently supported for at least 3 years and up to 5 years for &lt;span class="caps"&gt;LTS&lt;/span&gt; (Long Term Support) releases, which means one doesn’t have to worry about constantly upgrading the system. For a start, upgrading packages on the stable branch of Debian very rarely leads to a broken system, unlike on more bleeding edge distros like Fedora or Manjaro where downloading a few months old release almost guarantees some unexpected challenges.&lt;/p&gt;
&lt;h3 id="packages-availability"&gt;Packages Availability&lt;/h3&gt;
&lt;p&gt;With currently close to 58,000 packages offered on Debian, there’s a very good chance that anything one might need will be available. Working with up-to-date, proprietary applications like Google Chrome, Zoom or Slack is also pain-free: most companies, when they do consider Linux, opt for sharing a classic &lt;code&gt;deb&lt;/code&gt; package, the format used on Debian and Debian-based systems. Some of those packages can also be found or added directly to the sources managed by the package manager, allowing for easy, automatic updates.&lt;/p&gt;
&lt;figure&gt;
&lt;a href="https://www.sglavoie.com/images/posts/0020_stable_system_debian/debian_packages.png"&gt;&lt;img alt="debian_packages" class="max-size-img-post" src="https://www.sglavoie.com/images/posts/0020_stable_system_debian/debian_packages.png"/&gt;&lt;/a&gt;
&lt;figcaption&gt;Synaptic, the legendary package manager.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id="large-community-with-freedom-in-mind"&gt;Large Community with Freedom in Mind&lt;/h3&gt;
&lt;p&gt;Because no company backs Debian directly, it relies on a community effort to keep going and it has done so for a long time, having now hundreds of distributions being based on it. This means that it’s easy to find a ton of documentation and tutorials giving solutions taking into account Debian-based systems. One will be able to fix any issue cropping up thanks to the &lt;a href="http://forums.debian.net/"&gt;Debian User Forums&lt;/a&gt; and of course thanks to the immense popularity of Ubuntu, which contributes tremendously to making answers available in &lt;a href="https://ubuntuforums.org/"&gt;its forums&lt;/a&gt; and in the &lt;a href="https://askubuntu.com/"&gt;Stack Exchange&lt;/a&gt; network.&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="resources-to-get-started"&gt;Resources to Get Started&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.debian.org/doc/"&gt;Debian Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://forums.debian.net/"&gt;Debian User Forums&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.debian.org/"&gt;Debian Wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Developer-oriented: &lt;a href="https://www.debian.org/doc/manuals/developers-reference/resources.html"&gt;resources for contributing to Debian&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Cloud-oriented: &lt;a href="https://www.digitalocean.com/community/tags/debian"&gt;tutorials for Debian on Digital Ocean&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://i3wm.org/"&gt;i3 tiling window manager&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.xfce.org/"&gt;Xfce Desktop Environment&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h1 id="conclusion"&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;After trying many different Linux distributions and desktop environments, I keep coming back to what satisfies me best in the end: stability and usability. Debian feels a bit old, but at the same time one knows it delivers on what it promises. The same can be said for Xfce and i3. This is also what makes them such a good combo: despite not being cutting edge in the realm of features, there’s no way it could break as easily as &lt;span class="caps"&gt;KDE&lt;/span&gt; or &lt;span class="caps"&gt;GNOME&lt;/span&gt;, particularly on less stable distributions. There are still a few rough edges when it comes to customizing both Xfce and i3 in my opinion, but when looking for something that just works and will keep doing so, Debian is hard to beat.&lt;/p&gt;</content><category term="tools"></category><category term="debian"></category><category term="i3"></category><category term="linux"></category><category term="stability"></category><category term="xfce"></category></entry><entry><title>Ignoring Sync of Local Files to Dropbox on Linux</title><link href="https://www.sglavoie.com/posts/2019/11/30/ignoring-sync-of-local-files-to-dropbox-on-linux/" rel="alternate"></link><published>2019-11-30T13:22:00-06:00</published><updated>2019-11-30T13:22:00-06:00</updated><author><name>Sébastien Lavoie</name></author><id>tag:www.sglavoie.com,2019-11-30:/posts/2019/11/30/ignoring-sync-of-local-files-to-dropbox-on-linux/</id><summary type="html">&lt;p&gt;To make the most of Dropbox, it can make sense to backup the files you care the most about and skip the ones that simply take too long to upload and eat up all your space. Such candidates could be hidden &lt;code&gt;.git/&lt;/code&gt; folders and &lt;code&gt;node_modules/&lt;/code&gt;, but how do you exclude them locally? Let&amp;#8217;s find&amp;nbsp;out.&lt;/p&gt;</summary><content type="html">
&lt;hr/&gt;
&lt;h1 id="introduction"&gt;Introduction&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://www.dropbox.com"&gt;Dropbox&lt;/a&gt; is an awesome company which has been until recently the working home of none other than &lt;a href="https://gvanrossum.github.io"&gt;Guido van Rossum&lt;/a&gt;, the creator of the &lt;a href="https://www.python.org"&gt;Python&lt;/a&gt; programming language. It works like a charm out of the box on Linux and can be installed easily enough through the package manager that comes with your chosen distribution.&lt;/p&gt;
&lt;h2 id="why-dropbox"&gt;Why Dropbox?&lt;/h2&gt;
&lt;p&gt;In my experience, it has been working flawlessly and syncs consistently faster than Google Drive. It’s also worth mentioning that there is still no official Google Drive Linux client to this day: some users of the &lt;a href="https://www.gnome.org"&gt;&lt;span class="caps"&gt;GNOME&lt;/span&gt;&lt;/a&gt; desktop environment will connect to their Google account and mount Google Drive within the file manager &lt;a href="https://wiki.gnome.org/Apps/Files"&gt;Nautilus/Files&lt;/a&gt;; other users will use the paid software &lt;a href="https://www.insynchq.com"&gt;Insync&lt;/a&gt; or the free software alternative &lt;a href="https://liberodark.github.io/ODrive/"&gt;ODrive&lt;/a&gt;. No thanks.&lt;/p&gt;
&lt;p&gt;On the other hand, Dropbox is easy to use with any flavor of Linux and also syncs seamlessly with mobile devices. I use Dropbox for its convenience, but other solutions exist like &lt;a href="https://syncthing.net"&gt;Syncthing&lt;/a&gt; that do not depend on proprietary software and third-party cloud services. I store mostly insensitive information in my Dropbox account and for the few files that happen to be a bit more sensitive (such as the password database I synchronize on both desktop and mobile with &lt;a href="https://keepassxc.org"&gt;KeePassXC&lt;/a&gt; and &lt;a href="https://github.com/PhilippC/keepass2android"&gt;Keepass2Android&lt;/a&gt;, respectively), they are of course encrypted (hopefully in a secure way).&lt;/p&gt;
&lt;p&gt;Because I like to keep things simple and light on system resources, I do not let Dropbox run in the background (it only syncs once a day in the evening). Since all one needs to do in order to use it is to create and modify files inside a specific folder (such as &lt;code&gt;~/Dropbox&lt;/code&gt; by default), it can just synchronize at any moment and conflicts will be handled automatically if you make changes in more than one place that’s being synced.&lt;/p&gt;
&lt;h2 id="so-whats-wrong-with-dropbox"&gt;So, what’s wrong with Dropbox?&lt;/h2&gt;
&lt;p&gt;With all that said, there’s one little feature that I find missing with Dropbox when using the official Linux client and that’s the &lt;strong&gt;ability to selectively sync local files&lt;/strong&gt;. Yes, there is a &lt;a href="https://help.dropbox.com/installs-integrations/sync-uploads/selective-sync-overview"&gt;selective sync&lt;/a&gt; feature available, but that will delete the local copy of your files and store them in the cloud only, &lt;em&gt;not the other way around by keeping your local files intact and prevent uploading them to the cloud&lt;/em&gt;. There are some hacks you can do to avoid this, but this isn’t a particularly enticing work flow, because we can do better.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.sglavoie.com/images/posts/0019_ignoring-local-files-to-sync-with-dropbox-on-linux/dropbox_selective_sync.png"&gt;&lt;img alt="dropbox_selective_sync" class="max-size-img-post" src="https://www.sglavoie.com/images/posts/0019_ignoring-local-files-to-sync-with-dropbox-on-linux/dropbox_selective_sync.png"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You may have heard of other alternatives like &lt;a href="https://www.goodsync.com"&gt;GoodSync&lt;/a&gt; that allow, through yet another third-party proprietary software, to ignore specific files at your request. That’s not what we are after here: instead, there’s something you can do from the terminal that works quite well, too. At the time of this writing, it is still a &lt;em&gt;beta feature&lt;/em&gt; &lt;a href="https://help.dropbox.com/files-folders/restore-delete/ignored-files"&gt;according to this page&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This feature is currently in beta and not available to all Dropbox users. It will be rolled out to more users in the future.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Yet, because you can work with this feature programmatically to ignore and &lt;em&gt;un-ignore&lt;/em&gt; files from your Dropbox directory, I thought it was worth giving it a try. Here is how I’m using it to give you a few ideas.&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="any-simple-example"&gt;Any simple example?&lt;/h1&gt;
&lt;p&gt;Getting started is quick and painless. To ignore a file within your Dropbox folder, you only need to use the &lt;code&gt;attr&lt;/code&gt; command to &lt;strong&gt;set&lt;/strong&gt; (&lt;code&gt;-s&lt;/code&gt;) the special attribute &lt;code&gt;com.dropbox.ignored&lt;/code&gt; to give it a &lt;strong&gt;value&lt;/strong&gt; of &lt;code&gt;1&lt;/code&gt; (&lt;code&gt;-V 1&lt;/code&gt;) so it ignores a file (&lt;code&gt;file.txt&lt;/code&gt; in this example) as follow:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;/path/to/file/in/Dropbox/folder

attr&lt;span class="w"&gt; &lt;/span&gt;-s&lt;span class="w"&gt; &lt;/span&gt;com.dropbox.ignored&lt;span class="w"&gt; &lt;/span&gt;-V&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;file.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="ignore-all-git-and-node_modules-folders"&gt;Ignore all .git and node_modules folders&lt;/h2&gt;
&lt;p&gt;Things get &lt;strong&gt;really&lt;/strong&gt; interesting when we can do that automatically by matching a specific pattern (it depends who you ask, anyways). How about exploring recursively the whole directory tree to exclude only hidden &lt;code&gt;.git&lt;/code&gt; folders? Suppose you store your Git projects in &lt;code&gt;~/Dropbox/git/&lt;/code&gt;. You would then do something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;~/Dropbox/git/

find&lt;span class="w"&gt; &lt;/span&gt;.&lt;span class="w"&gt; &lt;/span&gt;-type&lt;span class="w"&gt; &lt;/span&gt;d&lt;span class="w"&gt; &lt;/span&gt;-name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;".git"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;xargs&lt;span class="w"&gt; &lt;/span&gt;-I&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;attr&lt;span class="w"&gt; &lt;/span&gt;-s&lt;span class="w"&gt; &lt;/span&gt;com.dropbox.ignored&lt;span class="w"&gt; &lt;/span&gt;-V&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"{}"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In an instant, you will start getting some feedback printed to the terminal for each &lt;code&gt;.git&lt;/code&gt; folder that is being found:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Attribute "com.dropbox.ignored" set to a 1 byte value for ./path/to/.git:
1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Dealing with &lt;code&gt;node_modules&lt;/code&gt; folders is equally easy. Because a message will be printed to the console every time a file attribute is changed, you could want to delete the output (preferably once you are sure you are modifying only the targeted files!) by redirecting it to &lt;code&gt;/dev/null&lt;/code&gt;, a &lt;em&gt;null device&lt;/em&gt; that discards all data it receives. We can always split a long command onto multiple lines with a backslash character &lt;code&gt;\&lt;/code&gt; like so (it’s not required right after the pipe &lt;code&gt;|&lt;/code&gt; symbol):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;find&lt;span class="w"&gt; &lt;/span&gt;.&lt;span class="w"&gt; &lt;/span&gt;-type&lt;span class="w"&gt; &lt;/span&gt;d&lt;span class="w"&gt; &lt;/span&gt;-name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"node_modules"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;xargs&lt;span class="w"&gt; &lt;/span&gt;-I&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;attr&lt;span class="w"&gt; &lt;/span&gt;-s&lt;span class="w"&gt; &lt;/span&gt;com.dropbox.ignored&lt;span class="w"&gt; &lt;/span&gt;-V&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s2"&gt;"{}"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;/dev/null
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h1 id="can-we-make-this-simpler"&gt;Can we make this simpler?&lt;/h1&gt;
&lt;p&gt;Yes we can! An &lt;code&gt;alias&lt;/code&gt; might be a bit hard to manage, but we can definitely create a set of functions that will be accessible from anywhere in the terminal. It suffices to add them to your shell configuration file, which could be located in &lt;code&gt;~/.profile&lt;/code&gt;, &lt;code&gt;~/.bash_profile&lt;/code&gt;, &lt;code&gt;~/.zshrc&lt;/code&gt; or something else depending on your shell.&lt;/p&gt;
&lt;p&gt;One solution that I see fit for this purpose is to have two distinct functions that have antagonistic effects so that we can revert our changes in a pinch. Basically, setting a value of &lt;code&gt;1&lt;/code&gt; for the attribute &lt;code&gt;com.dropbox.ignored&lt;/code&gt; ignores a file while setting it back to &lt;code&gt;0&lt;/code&gt; tells Dropbox to sync it again. Our functions could be conveniently called &lt;code&gt;dropbox-ignore&lt;/code&gt; and &lt;code&gt;dropbox-sync&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now, the following functions could become quite a bit more complicated to take into account various scenarios and custom behaviors, but let’s keep things simple and assume that the user knows what is going to happen. We could have our two functions as follow:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Ignore specific files/directories in Dropbox&lt;/span&gt;
dropbox-ignore&lt;span class="o"&gt;(){&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nv"&gt;arg1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nv"&gt;arg2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$2&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;find&lt;span class="w"&gt; &lt;/span&gt;.&lt;span class="w"&gt; &lt;/span&gt;-type&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$arg1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$arg2&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;xargs&lt;span class="w"&gt; &lt;/span&gt;-I&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;attr&lt;span class="w"&gt; &lt;/span&gt;-s&lt;span class="w"&gt; &lt;/span&gt;com.dropbox.ignored&lt;span class="w"&gt; &lt;/span&gt;-V&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"{}"&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# Sync specific files/directories in Dropbox&lt;/span&gt;
&lt;span class="c1"&gt;# that were previously ignored (or not)&lt;/span&gt;
dropbox-sync&lt;span class="o"&gt;(){&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nv"&gt;arg1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nv"&gt;arg2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$2&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;find&lt;span class="w"&gt; &lt;/span&gt;.&lt;span class="w"&gt; &lt;/span&gt;-type&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$arg1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$arg2&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;xargs&lt;span class="w"&gt; &lt;/span&gt;-I&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;attr&lt;span class="w"&gt; &lt;/span&gt;-s&lt;span class="w"&gt; &lt;/span&gt;com.dropbox.ignored&lt;span class="w"&gt; &lt;/span&gt;-V&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"{}"&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="how-do-you-use-those-functions"&gt;How do you use those functions?&lt;/h2&gt;
&lt;p&gt;Our commands will be accessible by typing &lt;code&gt;dropbox-ignore&lt;/code&gt; and &lt;code&gt;dropbox-sync&lt;/code&gt; the next time we open a terminal window. Both functions do exactly the same thing, but &lt;code&gt;dropbox-ignore&lt;/code&gt; sets the attribute value to &lt;code&gt;1&lt;/code&gt; to ignore files and &lt;code&gt;dropbox-sync&lt;/code&gt; sets the attribute to &lt;code&gt;0&lt;/code&gt; to allow syncing to happen.&lt;/p&gt;
&lt;p&gt;&lt;sub&gt;Note: For simplicity and practicality, keep in mind that those commands will search &lt;strong&gt;recursively from the current working directory&lt;/strong&gt;. It’s also good to know that if you set an attribute value to &lt;code&gt;1&lt;/code&gt; then back to &lt;code&gt;0&lt;/code&gt; again, Dropbox will need to re-sync the affected files and directories.&lt;/sub&gt;&lt;/p&gt;
&lt;p&gt;We need to pass them two arguments: the first is the type of search to perform (pass &lt;code&gt;f&lt;/code&gt; for &lt;strong&gt;files&lt;/strong&gt; and &lt;code&gt;d&lt;/code&gt; for &lt;strong&gt;directories&lt;/strong&gt;) and the second is the pattern to match in the name (&lt;code&gt;node_modules&lt;/code&gt; or &lt;code&gt;.git&lt;/code&gt; would fit here, no need to use quotes). Concretely, that will look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# To ignore a file matching the pattern `myfile`&lt;/span&gt;
dropbox-ignore&lt;span class="w"&gt; &lt;/span&gt;f&lt;span class="w"&gt; &lt;/span&gt;myfile

&lt;span class="c1"&gt;# To avoid syncing node_modules/ directory&lt;/span&gt;
dropbox-ignore&lt;span class="w"&gt; &lt;/span&gt;d&lt;span class="w"&gt; &lt;/span&gt;node_modules

&lt;span class="c1"&gt;# Te re-add a .git/ folder to Dropbox&lt;/span&gt;
dropbox-sync&lt;span class="w"&gt; &lt;/span&gt;d&lt;span class="w"&gt; &lt;/span&gt;.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h1 id="conclusion"&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;This tip may certainly not be the best approach to solving this particular issue with Dropbox on Linux, but I hope you find it useful nevertheless as it worked out very nicely on my end! One could store files and directories elsewhere, working with symbolic links or hard links as necessary to reference files or simply give up on making a backup with Dropbox in some circumstances. But I like to keep an extra copy of projects I’m working on in Dropbox and that can include potentially large files that don’t need to be backed up, so ignoring what’s not indispensable can speed up the syncing process tremendously while keeping disk usage in the cloud possibly much lower.&lt;/p&gt;
&lt;p&gt;Dropbox only calculates the size of the files being synced in the cloud, so you can end up needing a lot more space locally if you ignore a number of big files or, conversely, selectively syncing many files will result in a cloud storage larger than what’s needed locally.&lt;/p&gt;</content><category term="tips-and-tricks"></category><category term="aliases"></category><category term="linux"></category><category term="shell"></category><category term="terminal"></category></entry><entry><title>Using dmenu to Optimize Common Tasks</title><link href="https://www.sglavoie.com/posts/2019/11/10/using-dmenu-to-optimize-common-tasks/" rel="alternate"></link><published>2019-11-10T09:02:00-06:00</published><updated>2021-06-27T09:54:00-05:00</updated><author><name>Sébastien Lavoie</name></author><id>tag:www.sglavoie.com,2019-11-10:/posts/2019/11/10/using-dmenu-to-optimize-common-tasks/</id><summary type="html">&lt;p&gt;If remembering dozens of keyboard shortcuts isn&amp;#8217;t your forte, let &lt;a href="https://tools.suckless.org/dmenu"&gt;dmenu&lt;/a&gt; come to the rescue! With this awesome tool, you will be able to create menus from plain text files swiftly and effortlessly&amp;nbsp;(almost).&lt;/p&gt;</summary><content type="html">
&lt;hr/&gt;
&lt;h1 id="introduction"&gt;Introduction&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://tools.suckless.org/dmenu"&gt;dmenu&lt;/a&gt; is one of those tools that look a little unimpressive at first but can accomplish so much! It’s a program that you can use to receive any output redirected from other programs (through pipes in the terminal, the symbol &lt;code&gt;|&lt;/code&gt;) and treat that output so that it can pop up within a simple menu to make it available for execution. If you want to know more about other fantastic tools from &lt;a href="https://suckless.org"&gt;suckless.org&lt;/a&gt;, I &lt;a href="https://www.sglavoie.com/posts/2019/11/10/using-dmenu-to-optimize-common-tasks/"&gt;went over some of them before&lt;/a&gt;, such as the &lt;code&gt;st&lt;/code&gt; terminal and &lt;code&gt;slock&lt;/code&gt;, a dead simple screen locker.&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="any-simple-example"&gt;Any Simple Example?&lt;/h1&gt;
&lt;p&gt;You bet! Before diving in with how to install it and some more concrete examples, you could give &lt;code&gt;dmenu&lt;/code&gt; a go with a simple command such as the following (assuming the program is installed on your machine).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ls&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;dmenu
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will effectively “pipe” the output of &lt;code&gt;ls&lt;/code&gt; into &lt;code&gt;dmenu&lt;/code&gt; and a menu like the following would appear (by default, it shows as a thin stripe at the top covering the width of the screen):&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.sglavoie.com/images/posts/0018_using-dmenu-to-optimize-common-tasks/dmenu_ls_command.png"&gt;&lt;img alt="dmenu_ls_command" class="max-size-img-post" src="https://www.sglavoie.com/images/posts/0018_using-dmenu-to-optimize-common-tasks/dmenu_ls_command.png"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you start typing, the displayed list will be filtered down like so:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.sglavoie.com/images/posts/0018_using-dmenu-to-optimize-common-tasks/dmenu_ls_command_typing.png"&gt;&lt;img alt="dmenu_ls_command_typing" class="max-size-img-post" src="https://www.sglavoie.com/images/posts/0018_using-dmenu-to-optimize-common-tasks/dmenu_ls_command_typing.png"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can also switch to the next item to be highlighted by typing &lt;code&gt;Ctrl + n&lt;/code&gt;, to the previous item by typing &lt;code&gt;Ctrl + p&lt;/code&gt; and exit by reaching for the &lt;code&gt;Escape&lt;/code&gt; key. For now, if you type &lt;code&gt;Enter&lt;/code&gt; once your desired selection is highlighted, the selection will be outputted to the terminal and that will be the end of it. Let’s convert this into a practical thing, then.&lt;/p&gt;
&lt;p&gt;Keeping the same output as before which only contained directories, we could open a file manager (here, I’m going with &lt;code&gt;pcmanfm&lt;/code&gt;) and do something like this (bear with me, the explanation follows!):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ls&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;dmenu&lt;span class="w"&gt; &lt;/span&gt;-l&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;xargs&lt;span class="w"&gt; &lt;/span&gt;-I&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;pcmanfm&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"{}"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is now a fully functional example, albeit its practicality is debatable. What will happen, exactly?&lt;/p&gt;
&lt;p&gt;First, &lt;code&gt;ls&lt;/code&gt; will output a list of directories in the current working directory. That is, the following would be printed in the terminal without any piping:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Desktop    Downloads  Learning  Pictures     Public   Templates  virtualbox_vms
Documents  Dropbox    Music     Programming  SortOut  Videos
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When we &lt;em&gt;pipe&lt;/em&gt; this into &lt;code&gt;dmenu&lt;/code&gt;, we will get a menu with all that output nicely formatted vertically, which is what the &lt;code&gt;-l 5&lt;/code&gt; options does (here, we want only &lt;strong&gt;5&lt;/strong&gt; lines to show). We will see a maximum of &lt;strong&gt;5&lt;/strong&gt; items as this is the value we passed to the &lt;code&gt;-l&lt;/code&gt; option:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.sglavoie.com/images/posts/0018_using-dmenu-to-optimize-common-tasks/dmenu_ls_command_vertical_5_items.png"&gt;&lt;img alt="dmenu_ls_command_vertical_5_items" class="max-size-img-post" src="https://www.sglavoie.com/images/posts/0018_using-dmenu-to-optimize-common-tasks/dmenu_ls_command_vertical_5_items.png"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We can still start typing a word that doesn’t show up in this list like &lt;code&gt;Mu&lt;/code&gt; and we will see that this list is filtered to only include the matching directory &lt;code&gt;Music&lt;/code&gt; even though we couldn’t see it before since we limited our results to &lt;strong&gt;5&lt;/strong&gt; items. We could also use the same technique with &lt;code&gt;Ctrl + n&lt;/code&gt; and &lt;code&gt;Ctrl + p&lt;/code&gt; to cycle between the elements.&lt;/p&gt;
&lt;p&gt;Up to this point, we are getting our selection outputted to the terminal. Next, we pipe it into &lt;code&gt;xargs&lt;/code&gt;, which will allow us to specify a command to which we will pass our result (what is printed to the terminal) as an argument (we could make use of more arguments depending on the output we get, but let’s start simple). The &lt;code&gt;-I {}&lt;/code&gt; option will make it possible to “quote” our result so it is read as a single argument and properly &lt;em&gt;escaped&lt;/em&gt;. This means that without this option, if we have spaces or other special characters in the argument (such as a folder called &lt;code&gt;My Music&lt;/code&gt;), it would try to pass each word as a new argument to &lt;code&gt;pcmanfm&lt;/code&gt;, trying to open both &lt;code&gt;My&lt;/code&gt; and &lt;code&gt;Music&lt;/code&gt; directories at once.&lt;/p&gt;
&lt;p&gt;We are representing our output as &lt;code&gt;{}&lt;/code&gt; and when we quote it with &lt;code&gt;pcmanfm "{}"&lt;/code&gt;, spaces are interpreted without any trouble. If we wanted to use various arguments instead, we could try something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"file1.txt file2.txt\nfile3.txt file4.txt"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;dmenu&lt;span class="w"&gt; &lt;/span&gt;-l&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;xargs&lt;span class="w"&gt; &lt;/span&gt;cat
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The part before the first pipe character will print to the terminal those two lines:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;file1.txt file2.txt
file3.txt file4.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When we pipe this into &lt;code&gt;dmenu -l 2&lt;/code&gt;, we will get this menu:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.sglavoie.com/images/posts/0018_using-dmenu-to-optimize-common-tasks/dmenu_echo_command_filenames.png"&gt;&lt;img alt="dmenu_echo_command_filenames" class="max-size-img-post" src="https://www.sglavoie.com/images/posts/0018_using-dmenu-to-optimize-common-tasks/dmenu_echo_command_filenames.png"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Typing &lt;code&gt;Enter&lt;/code&gt; on one of the highlighted items would then trigger &lt;code&gt;xargs&lt;/code&gt; to pass the content literally to &lt;code&gt;cat&lt;/code&gt; as arguments, which would then print to the terminal the content of both &lt;code&gt;file1.txt&lt;/code&gt; and &lt;code&gt;file2.txt&lt;/code&gt; (the first line containing two arguments for &lt;code&gt;cat&lt;/code&gt;) or the content of both &lt;code&gt;file3.txt&lt;/code&gt; and &lt;code&gt;file4.txt&lt;/code&gt; (the second line also containing two arguments for &lt;code&gt;cat&lt;/code&gt;) in succession.&lt;/p&gt;
&lt;p&gt;Now that we got our feet wet with what &lt;code&gt;dmenu&lt;/code&gt; does (&lt;em&gt;displays a menu&lt;/em&gt;), we might want to install it.&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="how-do-you-install-it"&gt;How do You Install It?&lt;/h1&gt;
&lt;p&gt;In Manjaro Linux, it comes with &lt;code&gt;i3&lt;/code&gt; if you use that flavor of the distribution and can be opened by pressing the modifier key (either &lt;code&gt;Super/Windows&lt;/code&gt; key or &lt;code&gt;Alt&lt;/code&gt; key) along with the letter &lt;code&gt;d&lt;/code&gt;, as in the shortcut &lt;code&gt;mod + d&lt;/code&gt;, or by typing &lt;code&gt;dmenu_run&lt;/code&gt; in a terminal, which will present a list of installed applications to launch. Otherwise:&lt;/p&gt;
&lt;h2 id="debian-based-such-as-ubuntu"&gt;Debian-based (such as Ubuntu)&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;apt&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;dmenu
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="arch-based-such-as-manjaro"&gt;Arch-based (such as Manjaro)&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pacman&lt;span class="w"&gt; &lt;/span&gt;-Syu&lt;span class="w"&gt; &lt;/span&gt;dmenu
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can also install it from your distribution’s package manager if available or &lt;a href="https://tools.suckless.org/dmenu"&gt;from source&lt;/a&gt;.&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="useful-real-world-examples"&gt;Useful Real-World Examples&lt;/h1&gt;
&lt;p&gt;Here are a couple of ways I like to use &lt;code&gt;dmenu&lt;/code&gt; to open a menu with a list of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cheat sheets;&lt;/li&gt;
&lt;li&gt;filesystem paths;&lt;/li&gt;
&lt;li&gt;most used documents;&lt;/li&gt;
&lt;li&gt;documents &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; books I read at the university;&lt;/li&gt;
&lt;li&gt;custom scripts I want to run in the background.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here are a few screenshots of how it currently looks like in my daily usage so you get a better idea.&lt;/p&gt;
&lt;h2 id="cheat-sheets"&gt;Cheat sheets&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.sglavoie.com/images/posts/0018_using-dmenu-to-optimize-common-tasks/dmenu_cheat_sheets.png"&gt;&lt;img alt="dmenu_cheat_sheets" class="max-size-img-post" src="https://www.sglavoie.com/images/posts/0018_using-dmenu-to-optimize-common-tasks/dmenu_cheat_sheets.png"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="university-shortcuts"&gt;University shortcuts&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.sglavoie.com/images/posts/0018_using-dmenu-to-optimize-common-tasks/dmenu_university_shortcuts.png"&gt;&lt;img alt="dmenu_university_shortcuts" class="max-size-img-post" src="https://www.sglavoie.com/images/posts/0018_using-dmenu-to-optimize-common-tasks/dmenu_university_shortcuts.png"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="file-manager-shortcuts"&gt;File manager shortcuts&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.sglavoie.com/images/posts/0018_using-dmenu-to-optimize-common-tasks/dmenu_file_manager_shortcuts.png"&gt;&lt;img alt="dmenu_file_manager_shortcuts" class="max-size-img-post" src="https://www.sglavoie.com/images/posts/0018_using-dmenu-to-optimize-common-tasks/dmenu_file_manager_shortcuts.png"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So, how does that all work? As a starting point, all of those menus are launched through a specific keyboard shortcut that uses a mnemonic for each one (&lt;code&gt;mod&lt;/code&gt; being the “modifier” key on &lt;strong&gt;i3&lt;/strong&gt;, which is set to &lt;code&gt;Super/Windows&lt;/code&gt;):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mod + Alt + c&lt;/code&gt;: &lt;strong&gt;c&lt;/strong&gt;heat sheets;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mod + Alt + d&lt;/code&gt;: &lt;strong&gt;d&lt;/strong&gt;ocuments;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mod + Alt + f&lt;/code&gt;: &lt;strong&gt;f&lt;/strong&gt;ile manager;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mod + Alt + s&lt;/code&gt;: &lt;strong&gt;s&lt;/strong&gt;cripts;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mod + Alt + u&lt;/code&gt;: &lt;strong&gt;u&lt;/strong&gt;niversity.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let’s take the cheat sheets example, which is a bit more interesting since it launches different applications.&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="setting-up-a-custom-command"&gt;Setting Up a Custom Command&lt;/h2&gt;
&lt;h3 id="configuration-for-i3-bind-a-keyboard-shortcut"&gt;Configuration for i3 (bind a keyboard shortcut)&lt;/h3&gt;
&lt;p&gt;Here, I’m using &lt;a href="https://i3wm.org"&gt;i3&lt;/a&gt; to set a keyboard shortcut to run a specific command, but this will be a similar experience on other window managers and desktop environments.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# i3config file&lt;/span&gt;
&lt;span class="c1"&gt;# The backslash at the end of the line allows us&lt;/span&gt;
&lt;span class="c1"&gt;# to split the line to increase readability&lt;/span&gt;

&lt;span class="c1"&gt;## Cheatsheets&lt;/span&gt;

bindsym&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$mod&lt;/span&gt;+Mod1+c&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;exec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;--no-startup-id&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
cat&lt;span class="w"&gt; &lt;/span&gt;path/to/cheatsheets.conf&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;dmenu&lt;span class="w"&gt; &lt;/span&gt;-l&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;30&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;sed&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'s/.*    \+//'&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You would usually be able to launch a custom command from your environment through a keyboard shortcut. If passing a direct command such as the above one isn’t an option, you can always store it in a Bash script and run that Bash script instead as the designated custom command. The script would then contain the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="c1"&gt;## Cheatsheets&lt;/span&gt;
cat&lt;span class="w"&gt; &lt;/span&gt;path/to/cheatsheets.conf&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;dmenu&lt;span class="w"&gt; &lt;/span&gt;-l&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;30&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;sed&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'s/.*    \+//'&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As far as &lt;strong&gt;i3&lt;/strong&gt; is concerned, that’s all you need to do. You would need to reload the configuration file (by default: &lt;em&gt;i3config&lt;/em&gt;) where the previous &lt;code&gt;bindsym&lt;/code&gt; command has been set up to apply the changes (default shortcut to reload: &lt;code&gt;mod + Shift + c&lt;/code&gt;).&lt;/p&gt;
&lt;h3 id="configuration-for-cheatsheetsconf"&gt;Configuration for cheatsheets.conf&lt;/h3&gt;
&lt;p&gt;The content of this file is literally what will be shown when &lt;strong&gt;dmenu&lt;/strong&gt; opens it. An excerpt:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;#---------- Cheat Sheets -------------------------------------------------------
bash         st -e nvim path/to/bash.sh
git          zathura path/to/github.pdf
vimwiki      firefox path/to/vimwiki.html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here, we have set a maximum of &lt;strong&gt;30&lt;/strong&gt; lines to be displayed (&lt;code&gt;-l 30&lt;/code&gt;). What follows after an element has been selected with &lt;strong&gt;dmenu&lt;/strong&gt; allows us to parse the content of the line and retrieve only the command we are interested in with &lt;code&gt;sed&lt;/code&gt; before passing that filtered content around to &lt;code&gt;sh&lt;/code&gt; to execute it as a shell command. With more complex commands requiring multiples arguments to be received, we could add one more pipe between &lt;code&gt;sed&lt;/code&gt; and &lt;code&gt;sh&lt;/code&gt; like this (or with &lt;code&gt;xargs -I {}&lt;/code&gt; to avoid problems with spaces):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;cat&lt;span class="w"&gt; &lt;/span&gt;path/to/cheatsheets.conf&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;dmenu&lt;span class="w"&gt; &lt;/span&gt;-l&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;30&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;sed&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'s/.*    \+//'&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;xargs&lt;span class="w"&gt; &lt;/span&gt;-r&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If the line we want to run only includes a path to a file as in:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;myshortcut      path/to/file.pdf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We could instead pipe it into an external command of choice if the same program applies to all items presented in the menu, say Firefox:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;cat&lt;span class="w"&gt; &lt;/span&gt;path/to/file.conf&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;dmenu&lt;span class="w"&gt; &lt;/span&gt;-l&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;30&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;sed&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'s/.*    \+//'&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;xargs&lt;span class="w"&gt; &lt;/span&gt;-I&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;firefox&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"{}"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What’s nice with the way pipes work in a Unix-like system is that we can chain harmless commands until the very end so they will simply be printed to the terminal. In this example, if we want to see how to filter our lines before running a command, we can do so as follow.&lt;/p&gt;
&lt;h4 id="pipe-1"&gt;Pipe 1&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;cat&lt;span class="w"&gt; &lt;/span&gt;path/to/cheatsheets.conf&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;dmenu&lt;span class="w"&gt; &lt;/span&gt;-l&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;30&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you remember from the menu we saw earlier, there’s a shortcut to open a cheat sheet for Git. Let’s say we selected that one with &lt;strong&gt;dmenu&lt;/strong&gt;. Because our command isn’t doing anything with the result, it will be outputted to the terminal like so (just like in the excerpt of &lt;code&gt;cheatsheets.conf&lt;/code&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git&lt;span class="w"&gt;      &lt;/span&gt;zathura&lt;span class="w"&gt; &lt;/span&gt;path/to/github.pdf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What &lt;code&gt;sed&lt;/code&gt; does here is to cut everything from the beginning of the line up to where the command starts (that’s where we find &lt;a href="https://pwmt.org/projects/zathura/"&gt;zathura&lt;/a&gt;, which is a powerful document viewer), because we need to isolate that part of the line so it looks like a shell command we could run on its own. Let’s add a new pipe to our command and see what &lt;code&gt;sed&lt;/code&gt; does with it*.&lt;/p&gt;
&lt;p&gt;* &lt;sub&gt;We could have used other tools to parse the string like &lt;code&gt;awk&lt;/code&gt;, &lt;code&gt;grep&lt;/code&gt;, &lt;code&gt;cut&lt;/code&gt;, etc.&lt;/sub&gt;&lt;/p&gt;
&lt;h4 id="pipe-2"&gt;Pipe 2&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;cat&lt;span class="w"&gt; &lt;/span&gt;path/to/cheatsheets.conf&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;dmenu&lt;span class="w"&gt; &lt;/span&gt;-l&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;30&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;sed&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'s/.*    \+//'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we select the same item as before with &lt;strong&gt;dmenu&lt;/strong&gt; to illustrate more clearly what this new addition does, we will get this output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;zathura&lt;span class="w"&gt; &lt;/span&gt;path/to/github.pdf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we were to type this in the terminal (assuming the file exists and &lt;strong&gt;zathura&lt;/strong&gt; is installed!), that would do the trick and it would open with the specified document viewer. &lt;strong&gt;Pipe 2&lt;/strong&gt; and subsequent pipes before we execute something is where the filtering magic happen. In short:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Everything &lt;strong&gt;before&lt;/strong&gt; &lt;code&gt;| dmenu&lt;/code&gt; is how our input will look like when we run &lt;code&gt;dmenu&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;Everything &lt;strong&gt;after&lt;/strong&gt; &lt;code&gt;| dmenu [options here] |&lt;/code&gt; is what we need to do to our input so that it is converted into a working shell command;&lt;/li&gt;
&lt;li&gt;Finally, what comes &lt;strong&gt;after the last pipe&lt;/strong&gt; (either &lt;code&gt;xargs&lt;/code&gt;, &lt;code&gt;sh&lt;/code&gt; or a combination of both) is our way to redirect our string to the shell so it can be executed.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once we are visually satisfied with how our command is supposed to look like (it has to be something that works when typed directly in the terminal), the next step is to pipe it again so it can be executed.&lt;/p&gt;
&lt;h4 id="pipe-3"&gt;Pipe 3&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;cat&lt;span class="w"&gt; &lt;/span&gt;path/to/cheatsheets.conf&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;dmenu&lt;span class="w"&gt; &lt;/span&gt;-l&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;30&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;sed&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'s/.*    \+//'&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There we go, the command is launched. If we keep the same simple syntax in all of our &lt;code&gt;.conf&lt;/code&gt; files —or whatever extension we choose— where the content of our menus is stored in plain text, we can quickly and painlessly create keyboard shortcuts to run custom lists of commands that can be edited on the fly. Once our shortcuts are active, it’s only a matter of editing one of those &lt;code&gt;.conf&lt;/code&gt; files and automatically our lists will be up-to-date when we trigger the shortcut again.&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="running-a-custom-script"&gt;Running a Custom Script&lt;/h2&gt;
&lt;p&gt;If we want to run custom scripts, we need to indicate a command that would work in the terminal, such as &lt;code&gt;python myscrypt.py&lt;/code&gt; or &lt;code&gt;./myscript.sh&lt;/code&gt;. When it comes to shell scripts, we have to make sure they are executable. We can do so through a file manager or within the terminal like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;chmod&lt;span class="w"&gt; &lt;/span&gt;+x&lt;span class="w"&gt; &lt;/span&gt;path/to/script.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will add the necessary permissions for the user to execute the script. As we already know, we would then need to add a keyboard shortcut to launch our custom menu and store our command in a file like &lt;code&gt;scripts.conf&lt;/code&gt; that would contain the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;#---------- scripts.conf -------------------------------------------------------
myscript      script.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And that’s all there is to know to get piping with &lt;code&gt;dmenu&lt;/code&gt;! You may also find &lt;a href="https://www.youtube.com/watch?v=8E8sUNHdzG8"&gt;this video from Luke Smith&lt;/a&gt; on YouTube to be quite helpful as well, which is where the inspiration for this post came from. He also &lt;a href="https://www.youtube.com/watch?v=R9m723tAurA"&gt;posted a complementary video&lt;/a&gt; about adding prompts to your commands which is a nice way to add interactivity to your scripts!&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="chaining-dmenu-prompts"&gt;Chaining dmenu prompts&lt;/h2&gt;
&lt;p&gt;Another useful scenario is when you want to take a specific action based on the output of a previous command. For instance, let’s say you want to read a book but when you choose a &lt;code&gt;pdf&lt;/code&gt; with &lt;code&gt;dmenu&lt;/code&gt;, you want to be prompted for which reader to use while you want to let the system choose the default application for other types of files (e.g. &lt;code&gt;epub&lt;/code&gt; or &lt;code&gt;mobi&lt;/code&gt;). This could be achieved with a script similar to the following one:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="nv"&gt;FILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;find&lt;span class="w"&gt; &lt;/span&gt;~/Documents/calibre_library&lt;span class="w"&gt; &lt;/span&gt;-type&lt;span class="w"&gt; &lt;/span&gt;f&lt;span class="w"&gt; &lt;/span&gt;-iname&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"*.pdf"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;-iname&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"*.epub"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;-iname&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"*.mobi"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;dmenu&lt;span class="w"&gt; &lt;/span&gt;-l&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;30&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$FILE&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;*.pdf&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;]]&lt;/span&gt;
&lt;span class="k"&gt;then&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;READER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-e&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"zathura\natril"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;dmenu&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Which reader?"&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;$READER&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$FILE&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;xdg-open&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$FILE&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here’s what’s happening:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We &lt;code&gt;find&lt;/code&gt; all the files (&lt;code&gt;-type f&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;in the directory &lt;code&gt;~/Documents/calibre_library&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;that match a pattern that’s case-insensitive with &lt;code&gt;-iname&lt;/code&gt; (here, ending in either &lt;code&gt;pdf&lt;/code&gt;, &lt;code&gt;mobi&lt;/code&gt; or &lt;code&gt;epub&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;matching one file at a time (&lt;code&gt;-o&lt;/code&gt; can be interpreted to mean “only” and will keep searching if the previous file extension was not matched)&lt;/li&gt;
&lt;li&gt;then presenting 30 lines (&lt;code&gt;-l 30&lt;/code&gt;) of results at a time with &lt;code&gt;dmenu&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;then, if the file is a &lt;span class="caps"&gt;PDF&lt;/span&gt;, prompts whether to use &lt;code&gt;atril&lt;/code&gt; or &lt;code&gt;zathura&lt;/code&gt; as the file reader and open with the chosen program&lt;/li&gt;
&lt;li&gt;otherwise, open the file with the default application.&lt;/li&gt;
&lt;/ol&gt;
&lt;hr/&gt;
&lt;h1 id="customize-the-look-of-dmenu"&gt;Customize the Look of dmenu&lt;/h1&gt;
&lt;p&gt;As they say, &lt;em&gt;“beauty is in the eye of the beholder”&lt;/em&gt;. If you would rather make some changes to how dmenu look, you can. &lt;strong&gt;dmenu&lt;/strong&gt; will be searching for the configuration file located at &lt;code&gt;~/.dmenurc&lt;/code&gt;, which could contain something as put below (with this configuration, it will look like the screenshots shown previously):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# ~/.dmenurc&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;

&lt;span class="c1"&gt;# define the font for dmenu to be used&lt;/span&gt;
&lt;span class="nv"&gt;DMENU_FN&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"NotoSans-10.5"&lt;/span&gt;

&lt;span class="c1"&gt;# background colour for unselected menu-items&lt;/span&gt;
&lt;span class="nv"&gt;DMENU_NB&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"#161925"&lt;/span&gt;

&lt;span class="c1"&gt;# textcolour for unselected menu-items&lt;/span&gt;
&lt;span class="nv"&gt;DMENU_NF&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"#fdfffc"&lt;/span&gt;

&lt;span class="c1"&gt;# background colour for selected menu-items&lt;/span&gt;
&lt;span class="nv"&gt;DMENU_SB&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"#235789"&lt;/span&gt;

&lt;span class="c1"&gt;# textcolour for selected menu-items&lt;/span&gt;
&lt;span class="nv"&gt;DMENU_SF&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"#fdfffc"&lt;/span&gt;

&lt;span class="c1"&gt;# command for the terminal application to be used:&lt;/span&gt;
&lt;span class="nv"&gt;TERMINAL_CMD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"st -e"&lt;/span&gt;

&lt;span class="c1"&gt;# export our variables&lt;/span&gt;
&lt;span class="nv"&gt;DMENU_OPTIONS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"-fn &lt;/span&gt;&lt;span class="nv"&gt;$DMENU_FN&lt;/span&gt;&lt;span class="s2"&gt; -nb &lt;/span&gt;&lt;span class="nv"&gt;$DMENU_NB&lt;/span&gt;&lt;span class="s2"&gt; -nf &lt;/span&gt;&lt;span class="nv"&gt;$DMENU_NF&lt;/span&gt;&lt;span class="s2"&gt; -sf &lt;/span&gt;&lt;span class="nv"&gt;$DMENU_SF&lt;/span&gt;&lt;span class="s2"&gt; -sb &lt;/span&gt;&lt;span class="nv"&gt;$DMENU_SB&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h1 id="conclusion"&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Hopefully this introduction to what &lt;strong&gt;dmenu&lt;/strong&gt; has to offer gave you some ideas. I hope you’ll find many ways to adapt the examples so you can benefit from this amazing tool. You can find more configuration details in my &lt;a href="https://github.com/sglavoie/dotfiles/"&gt;dotfiles on GitHub&lt;/a&gt; for anything related to &lt;strong&gt;i3&lt;/strong&gt;, &lt;strong&gt;dmenu&lt;/strong&gt;, &lt;strong&gt;zathura&lt;/strong&gt;, &lt;strong&gt;st&lt;/strong&gt;, &lt;strong&gt;slock&lt;/strong&gt; and many more useful programs.&lt;/p&gt;
&lt;p&gt;Have a good time automating your digital life!&lt;/p&gt;</content><category term="tips-and-tricks"></category><category term="bash"></category><category term="dmenu"></category><category term="i3"></category><category term="linux"></category><category term="productivity"></category><category term="script"></category></entry><entry><title>Black: A Python Formatter to Brighten Your Workflow</title><link href="https://www.sglavoie.com/posts/2019/07/13/black-a-python-formatter-to-brighten-your-workflow/" rel="alternate"></link><published>2019-07-13T13:10:00-05:00</published><updated>2019-07-13T13:10:00-05:00</updated><author><name>Sébastien Lavoie</name></author><id>tag:www.sglavoie.com,2019-07-13:/posts/2019/07/13/black-a-python-formatter-to-brighten-your-workflow/</id><summary type="html">&lt;p&gt;Meet &lt;a href="https://github.com/python/black"&gt;Black&lt;/a&gt;, a superb Python code formatter that will automatically reformat your code in accordance to &lt;span class="caps"&gt;PEP&lt;/span&gt;-8&amp;nbsp;standards.&lt;/p&gt;</summary><content type="html">
&lt;hr/&gt;
&lt;h2 id="what-is-black"&gt;What is Black?&lt;/h2&gt;
&lt;p&gt;From its &lt;a href="https://github.com/python/black"&gt;GitHub repository&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Black is the uncompromising Python code formatter. By using it, you agree to cede control over minutiae of hand-formatting. In return, Black gives you speed, determinism, and freedom from pycodestyle nagging about formatting. You will save time and mental energy for more important matters.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Black&lt;/strong&gt; will take less than ideal code and will automatically reformat it according to the &lt;a href="https://www.python.org/dev/peps/pep-0008/"&gt;&lt;span class="caps"&gt;PEP&lt;/span&gt;-8 style guide&lt;/a&gt;. It will take care of many things, including the following (taken in that order from &lt;code&gt;README.md&lt;/code&gt; in &lt;strong&gt;Black&lt;/strong&gt;‘s repo):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Wrapping lines properly by shortening as much as possible single statements;&lt;/li&gt;
&lt;li&gt;Break long lines;&lt;/li&gt;
&lt;li&gt;Remove superfluous empty lines;&lt;/li&gt;
&lt;li&gt;Take care of adding trailing commas where necessary;&lt;/li&gt;
&lt;li&gt;Convert single quotes (&lt;code&gt;'&lt;/code&gt;) to double quotes (&lt;code&gt;"&lt;/code&gt;);&lt;/li&gt;
&lt;li&gt;Convert numeric literals to lowercase (&lt;code&gt;0XAB&lt;/code&gt; to &lt;code&gt;0xAB&lt;/code&gt;);&lt;/li&gt;
&lt;li&gt;Superfluous parentheses are removed;&lt;/li&gt;
&lt;li&gt;Split call chains on different lines;&lt;/li&gt;
&lt;li&gt;Works from the terminal and support many code editor integrations (Emacs, Vim, &lt;span class="caps"&gt;VS&lt;/span&gt; Code, Sublime, etc.).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now that it’s clear &lt;em&gt;why&lt;/em&gt; it can be a good idea to use it, let’s see how it works with Vim and the terminal.&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="how-to-use-it"&gt;How to use it?&lt;/h2&gt;
&lt;p&gt;First, we need to install it using Python 3.6.0+:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;black
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That’s it!&lt;/p&gt;
&lt;h3 id="use-it-from-the-terminal"&gt;Use it from the terminal&lt;/h3&gt;
&lt;p&gt;In its simplest invocation, we can use &lt;strong&gt;Black&lt;/strong&gt; by specifying a file or a directory by typing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;black&lt;span class="w"&gt; &lt;/span&gt;path_to_file_or_directory
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It doesn’t come with many options as its goal is to automatically format code consistently, but you can find out more about this tool in the following way:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;black&lt;span class="w"&gt; &lt;/span&gt;--help
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="use-it-with-vim"&gt;Use it with Vim&lt;/h3&gt;
&lt;p&gt;Using &lt;strong&gt;Black&lt;/strong&gt; as part of your workflow in a code editor is where I believe it really shines, because you can see almost in real-time when you make a formatting mistake, which will help down the road in committing less sins.&lt;/p&gt;
&lt;p&gt;Integrating &lt;strong&gt;Black&lt;/strong&gt; with Vim or Neovim is quick and painless, adding a simple line in your &lt;code&gt;.vimrc&lt;/code&gt; or &lt;code&gt;init.vim&lt;/code&gt; file. You can also proceed to do a manual installation without a plugin manager as explained in the GitHub repository.&lt;/p&gt;
&lt;p&gt;With &lt;a href="https://github.com/junegunn/vim-plug"&gt;vim-plug&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Plug &lt;span class="s1"&gt;'python/black'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With &lt;a href="https://github.com/VundleVim/Vundle.vim"&gt;Vundle&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Plugin &lt;span class="s1"&gt;'python/black'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once the plugin is installed, it may well be convenient to automatically format Python files when saving the buffer, which can be accomplished by adding the following line to the configuration file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;autocmd &lt;span class="nb"&gt;BufWritePre&lt;/span&gt; *.&lt;span class="k"&gt;py&lt;/span&gt; execute &lt;span class="s1"&gt;':Black'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By default, &lt;strong&gt;Black&lt;/strong&gt; works surprisingly well on its own. I only went ahead and changed the default line length from 88 to 79 characters by also adding this line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:black_linelength &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;79&lt;/span&gt;  &lt;span class="c"&gt;" default is 88&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, it’s worth noting you can update &lt;strong&gt;Black&lt;/strong&gt; at any point from the terminal with &lt;code&gt;pip&lt;/code&gt; and you can also do it directly from within Vim/Neovim with this command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;:&lt;/span&gt;BlackUpgrade
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Vim will then output something along those lines:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Upgrading Black with pip…&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;DONE&lt;/span&gt;! You are all set, thanks for waiting&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="any-example"&gt;Any example?&lt;/h2&gt;
&lt;p&gt;Taking a random Python 3.6+ code sample, we could originally have something like this (hopefully not):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt;  &lt;span class="n"&gt;data_sources&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;


        &lt;span class="c1"&gt;# Retrieve a list of all matching log files in `source`&lt;/span&gt;
        &lt;span class="n"&gt;log_files&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;glob&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;glob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;LOG_NAME&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;*'&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;log_files&lt;/span&gt;  &lt;span class="o"&gt;==&lt;/span&gt;  &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;]:&lt;/span&gt;
                &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;There is no log file to delete in &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;.'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;continue&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;    &lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;'Log files in &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;:'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;log_file&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;log_files&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ARGUMENTS&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remind&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;REMINDER_IS_SET&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;
                    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                            &lt;span class="n"&gt;log_file&lt;/span&gt;
                    &lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;Do you want to delete log files '&lt;/span&gt; &lt;span class="s1"&gt;'for this source? (y/n) '&lt;/span&gt;
                &lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_says_yes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;log_file&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;log_files&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;log_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                            &lt;span class="s1"&gt;'Log files deleted.'&lt;/span&gt;
                            &lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="k"&gt;continue&lt;/span&gt;
                &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;continue&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'Exiting script...'&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Running &lt;strong&gt;Black&lt;/strong&gt;, we will get something that’s quite a bit more palatable:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;data_sources&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

        &lt;span class="c1"&gt;# Retrieve a list of all matching log files in `source`&lt;/span&gt;
        &lt;span class="n"&gt;log_files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;glob&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;glob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;LOG_NAME&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;*"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;log_files&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;[]:&lt;/span&gt;
            &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;There is no log file to delete in &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;continue&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"Log files in &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;:"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;log_file&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;log_files&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;ARGUMENTS&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;REMINDER_IS_SET&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;
                &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;log_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;Do you want to delete log files "&lt;/span&gt; &lt;span class="s2"&gt;"for this source? (y/n) "&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;user_says_yes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;log_file&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;log_files&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;log_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Log files deleted."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;continue&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;continue&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Exiting script..."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I think the results speak for themselves: enforcing a style with a tool like &lt;strong&gt;Black&lt;/strong&gt; is definitely useful to avoid arguments about conflicting coding styles. It lets you focus on what matters instead: being productive while providing value to the world.&lt;/p&gt;</content><category term="workflow"></category><category term="neovim"></category><category term="plugin"></category><category term="productivity"></category><category term="python"></category><category term="terminal"></category><category term="vim"></category></entry><entry><title>fzf - A Fuzzy Finder to Accomplish Anything</title><link href="https://www.sglavoie.com/posts/2019/05/24/fzf-a-fuzzy-finder-to-accomplish-anything/" rel="alternate"></link><published>2019-05-24T10:56:00-05:00</published><updated>2019-05-24T10:56:00-05:00</updated><author><name>Sébastien Lavoie</name></author><id>tag:www.sglavoie.com,2019-05-24:/posts/2019/05/24/fzf-a-fuzzy-finder-to-accomplish-anything/</id><summary type="html">&lt;p&gt;Search and, most importantly, finally find what you are looking for on your machine. If you rely on the terminal a lot, &lt;strong&gt;fzf&lt;/strong&gt; may well be capable of speeding up your&amp;nbsp;productivity!&lt;/p&gt;</summary><content type="html">
&lt;hr/&gt;
&lt;h1 id="introduction"&gt;Introduction&lt;/h1&gt;
&lt;p&gt;I know people who make such a mess when &lt;em&gt;not&lt;/em&gt; organizing their files and
directories appropriately on their system, they would benefit greatly
from &lt;code&gt;fzf&lt;/code&gt;.&lt;/p&gt;
&lt;h1 id="what-is-fzf"&gt;What is fzf?&lt;/h1&gt;
&lt;p&gt;From the &lt;a href="https://github.com/junegunn/fzf"&gt;official GitHub page&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;fzf is a general-purpose command-line fuzzy finder. It’s an
interactive Unix filter for command-line that can be used with any list;
files, command history, processes, hostnames, bookmarks, git commits, etc.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr/&gt;
&lt;h1 id="terminal-aliases"&gt;Terminal aliases&lt;/h1&gt;
&lt;p&gt;One of the main uses of &lt;code&gt;fzf&lt;/code&gt; is from the terminal. Being so flexible
to use, it can be combined with all kinds of commands with the help
of pipes (&lt;code&gt;|&lt;/code&gt;) to bend it to your desires. Here are some aliases I am
currently using that undoubtedly improve my terminal workflow.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;##### Functions&lt;/span&gt;

&lt;span class="c1"&gt;# Select a configuration file with fzf and open it with Neovim&lt;/span&gt;
conf&lt;span class="o"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;du&lt;span class="w"&gt; &lt;/span&gt;-a&lt;span class="w"&gt; &lt;/span&gt;~/.dotfiles/*&lt;span class="w"&gt; &lt;/span&gt;~/.config/*&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;awk&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'{print $2}'&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;fzf&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;xargs&lt;span class="w"&gt; &lt;/span&gt;-r&lt;span class="w"&gt; &lt;/span&gt;nvim&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# Select a file from current folder and recursively with fzf and open it with Neovim&lt;/span&gt;
se&lt;span class="o"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;du&lt;span class="w"&gt; &lt;/span&gt;-a&lt;span class="w"&gt; &lt;/span&gt;./*&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;awk&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'{print $2}'&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;fzf&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;xargs&lt;span class="w"&gt; &lt;/span&gt;-r&lt;span class="w"&gt; &lt;/span&gt;nvim&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# Select a file recursively from university folder with fzf and open it with default app&lt;/span&gt;
sc&lt;span class="o"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;du&lt;span class="w"&gt; &lt;/span&gt;-a&lt;span class="w"&gt; &lt;/span&gt;~/Dropbox/university/*&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;awk&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'{print $2}'&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;fzf&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;xargs&lt;span class="w"&gt; &lt;/span&gt;-r&lt;span class="w"&gt; &lt;/span&gt;xdg-open&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first alias, &lt;code&gt;conf&lt;/code&gt; (short for &lt;em&gt;configuration&lt;/em&gt;), allows to search
only within the two folders specified for configuration files, which
makes it pop almost instantaneously since it doesn’t have to scan files
scattered anywhere else. You can then type anything that partially
matches a file path and even include slashes (&lt;code&gt;/&lt;/code&gt;) in your match if you
know in which directories to look. You can then type &lt;code&gt;Enter&lt;/code&gt; to open the
file with your favorite text editor (here set to &lt;code&gt;nvim&lt;/code&gt;) or type &lt;code&gt;CTRL + c&lt;/code&gt; to abort the command.&lt;/p&gt;
&lt;p&gt;The other aliases work in a similar fashion. &lt;code&gt;se&lt;/code&gt; (short for &lt;em&gt;search&lt;/em&gt;)
will simply search recursively for any kind of files in the current
directory and open the selected file in a text editor. Of course,
certain file types can be excluded and everything else can be tweaked
with more piping power. In the case of the third alias, &lt;code&gt;sc&lt;/code&gt; (short for
&lt;em&gt;school&lt;/em&gt;), it will also search recursively for any kind of file in the
&lt;code&gt;university&lt;/code&gt; folder and will open it with the default application set to
open that kind of file (video, image, text, &lt;span class="caps"&gt;PDF&lt;/span&gt;, etc.).&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="vimneovim-integration"&gt;Vim/Neovim integration&lt;/h1&gt;
&lt;p&gt;Using &lt;a href="https://github.com/junegunn/vim-plug"&gt;Vim-Plug&lt;/a&gt; from the same
author as &lt;code&gt;fzf&lt;/code&gt; is as easy as adding the following to Vim/Neovim’s
configuration file. First, we make sure that &lt;code&gt;fzf&lt;/code&gt; is available on the
system and install it if it’s not. Then, we install the &lt;code&gt;fzf.vim&lt;/code&gt; plugin
to integrate fzf in Vim and optionally, we may configure more options so
that &lt;code&gt;fzf&lt;/code&gt; can be used more optimally, which can be found on the &lt;a href="https://github.com/junegunn/fzf.vim"&gt;GitHub
plugin page&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Plug &lt;span class="s1"&gt;'junegunn/fzf'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; { &lt;span class="s1"&gt;'dir'&lt;/span&gt;: $HOME . &lt;span class="s1"&gt;'/.fzf'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'do'&lt;/span&gt;: &lt;span class="s1"&gt;'./install --all'&lt;/span&gt; }
Plug &lt;span class="s1"&gt;'junegunn/fzf.vim'&lt;/span&gt;

&lt;span class="c"&gt;""""" [ FZF ]&lt;/span&gt;
&lt;span class="c"&gt;" Allows fzf to ignore patterns in .gitignore&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; $FZF_DEFAULT_COMMAND &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'ag -g ""'&lt;/span&gt;

&lt;span class="c"&gt;" Mapping selecting mappings&lt;/span&gt;
nmap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;leader&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;tab&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;plug&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;fzf&lt;span class="p"&gt;-&lt;/span&gt;maps&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
xmap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;leader&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;tab&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;plug&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;fzf&lt;span class="p"&gt;-&lt;/span&gt;maps&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
omap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;leader&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;tab&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;plug&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;fzf&lt;span class="p"&gt;-&lt;/span&gt;maps&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;o&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;" Insert mode completion&lt;/span&gt;
imap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;x&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;k&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;plug&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;fzf&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;complete&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;word&lt;span class="p"&gt;)&lt;/span&gt;
imap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;x&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;f&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;plug&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;fzf&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;complete&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
imap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;x&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;j&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;plug&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;fzf&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;complete&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;file&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;ag&lt;span class="p"&gt;)&lt;/span&gt;
imap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;x&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;l&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;plug&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;fzf&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;complete&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;line&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;" Advanced customization using autoload functions&lt;/span&gt;
&lt;span class="c"&gt;" (expand word completing window)&lt;/span&gt;
&lt;span class="nb"&gt;inoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;expr&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;x&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;k&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; fzf#&lt;span class="k"&gt;vim&lt;/span&gt;#&lt;span class="nb"&gt;complete&lt;/span&gt;#word&lt;span class="p"&gt;(&lt;/span&gt;{&lt;span class="s1"&gt;'left'&lt;/span&gt;: &lt;span class="s1"&gt;'20%'&lt;/span&gt;}&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;" Make use of fzf command instead of CtrlP&lt;/span&gt;
map &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; :FZF&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;cr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;""" [ / FZF ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="working-with-neovim"&gt;Working with Neovim&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;fzf&lt;/code&gt; really shines when used with Neovim as it is extremely fast,
especially when configured with
&lt;a href="https://github.com/ggreer/the_silver_searcher"&gt;The Silver Searcher&lt;/a&gt;
which deserves its own article. It
integrates with core functionality of Vim and makes it easy to find what
you are looking for.&lt;/p&gt;
&lt;p&gt;From the above configuration, for instance:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;nmap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;leader&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;tab&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;plug&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;fzf&lt;span class="p"&gt;-&lt;/span&gt;maps&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This allows to search for existing mappings and commands, which can be
faster than diving in the help pages when looking for a quick reference.&lt;/p&gt;
&lt;p&gt;This one in insert mode is very handy:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;imap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;x&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;k&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;plug&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;fzf&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;complete&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;word&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Without affecting keyword completion with &lt;code&gt;CTRL + n&lt;/code&gt; and &lt;code&gt;CTRL + p&lt;/code&gt;
(unless you have &lt;code&gt;set complete+=k&lt;/code&gt; in your configuration file), you can
complete words from a custom dictionary of your choice with &lt;code&gt;CTRL + x CTRL + k&lt;/code&gt;. The window that appears can be moved and resized, which is
what is happening here:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;inoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;expr&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;x&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;k&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; fzf#&lt;span class="k"&gt;vim&lt;/span&gt;#&lt;span class="nb"&gt;complete&lt;/span&gt;#word&lt;span class="p"&gt;(&lt;/span&gt;{&lt;span class="s1"&gt;'left'&lt;/span&gt;: &lt;span class="s1"&gt;'20%'&lt;/span&gt;}&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the same way, file paths can be completed from the current working
directory &lt;code&gt;CTRL + x CTRL + f&lt;/code&gt; and existing lines can be quickly inserted
with &lt;code&gt;CTRL + x CTRL + l&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.sglavoie.com/images/posts/0016_a_fuzzy_file_finder_to_accomplish_anything/fzf_autocompletion.png"&gt;&lt;img alt="fzf_line_autocompletion" class="max-size-img-post" src="https://www.sglavoie.com/images/posts/0016_a_fuzzy_file_finder_to_accomplish_anything/fzf_autocompletion.png"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Finally, I use &lt;code&gt;fzf&lt;/code&gt; to open any file quickly from the working directory
inside Neovim with the mapping &lt;code&gt;CTRL + p&lt;/code&gt;, which replaces the CtrlP
plugin and can work much faster on larger codebases.&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="conclusion"&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;There is much more that can be done with it and I am barely scratching
the surface here. Luke Smith shared
&lt;a href="https://www.youtube.com/watch?v=vt33Hp-4RXg"&gt;a great video&lt;/a&gt; that will
complement the information from this post nicely with a more technical
approach. Highly recommended to see more practical ways to use this
superb piece of software!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://lukesmith.xyz/"&gt;Luke Smith&lt;/a&gt; also makes a strong point of
combining &lt;code&gt;fzf&lt;/code&gt; with &lt;a href="https://tools.suckless.org/dmenu/"&gt;dmenu&lt;/a&gt;, a tool
that I described succinctly in
&lt;a href="https://www.sglavoie.com/posts/2019/05/12/suckless-minimalist-tools-that-work-great/"&gt;a previous article&lt;/a&gt;.&lt;/p&gt;</content><category term="workflow"></category><category term="plugin"></category><category term="productivity"></category><category term="shell"></category><category term="terminal"></category></entry><entry><title>Suckless: Minimalist Tools That Work Great</title><link href="https://www.sglavoie.com/posts/2019/05/12/suckless-minimalist-tools-that-work-great/" rel="alternate"></link><published>2019-05-12T22:50:00-05:00</published><updated>2019-05-12T22:50:00-05:00</updated><author><name>Sébastien Lavoie</name></author><id>tag:www.sglavoie.com,2019-05-12:/posts/2019/05/12/suckless-minimalist-tools-that-work-great/</id><summary type="html">&lt;p&gt;I have been using a few different tools from &lt;a href="https://suckless.org/"&gt;suckless.org&lt;/a&gt; for a while and I must say that once everything is configured properly, they are a joy to use. Some tools, like &lt;strong&gt;dmenu&lt;/strong&gt; and &lt;strong&gt;slock&lt;/strong&gt;, seem simple on the surface, but they allow to simplify your workflow by quite a bit. Another one, &lt;strong&gt;st&lt;/strong&gt;, is a truly fantastic and lightweight&amp;nbsp;terminal!&lt;/p&gt;</summary><content type="html">
&lt;hr/&gt;
&lt;h2 id="what-are-suckless-tools"&gt;What are Suckless tools?&lt;/h2&gt;
&lt;p&gt;From the &lt;a href="https://suckless.org/"&gt;official website&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Home of &lt;a href="https://dwm.suckless.org/"&gt;dwm&lt;/a&gt;,
&lt;a href="https://tools.suckless.org/dmenu"&gt;dmenu&lt;/a&gt; and other quality software
with a focus on simplicity, clarity, and frugality.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There are also other incredible pieces of software that are worth
mentioning, including &lt;a href="https://st.suckless.org/"&gt;st&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here, I will only go over the tools I use frequently, but keep in mind
that everything from Suckless… Sucks less.&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="st-simple-terminal"&gt;st — Simple Terminal&lt;/h2&gt;
&lt;p&gt;I did not know what to expect from this terminal and I found it delivers what I need! Configuring it is quite different than other terminals like &lt;a href="https://konsole.kde.org/"&gt;Konsole&lt;/a&gt; or &lt;a href="https://help.gnome.org/users/gnome-terminal/stable/"&gt;&lt;span class="caps"&gt;GNOME&lt;/span&gt; Terminal&lt;/a&gt;: you just edit a text file and compile the software before you can even use it. It may seem tedious at first, but compiling such a small piece of software is very fast and it needs to be done on seldom occasions when you may want to adjust a setting.&lt;/p&gt;
&lt;p&gt;I have experienced rendering issues when scaling the text with other terminals (including Konsole), where some weird flickering would happen at certain font sizes. &lt;a href="https://st.suckless.org/"&gt;Simple Terminal&lt;/a&gt; just works without hassle. It doesn’t have much bells and whistles out of the box, but it can be &lt;em&gt;patched&lt;/em&gt; to extend its functionality if you know what you are doing. I don’t, so my compiled version remains pretty basic although I must say I like the simplicity of it very much.&lt;/p&gt;
&lt;h3 id="configuration"&gt;Configuration&lt;/h3&gt;
&lt;p&gt;I didn’t have to adapt the configuration file very much. I ended up changing mainly the following lines:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;font&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Consolas:pixelsize=18:antialias=true:autohint=true"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"/bin/zsh"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/* Terminal colors (16 first used in escape sequence) */&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;colorname&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="cm"&gt;/* 8 normal colors */&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"#1c1c1c"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cm"&gt;/* black   */&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"#ff005b"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cm"&gt;/* red     */&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"#70e502"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cm"&gt;/* green   */&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"#fcdd11"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cm"&gt;/* yellow  */&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"#00a0ea"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cm"&gt;/* blue    */&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"#bd1efc"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cm"&gt;/* magenta */&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"#14ecfc"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cm"&gt;/* cyan    */&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"#ededed"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cm"&gt;/* white   */&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="cm"&gt;/* 8 bright colors */&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"#666666"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cm"&gt;/* black   */&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"#ff00a0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cm"&gt;/* red     */&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"#5dff00"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cm"&gt;/* green   */&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"#ff9f00"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cm"&gt;/* yellow  */&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"#71a9fc"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cm"&gt;/* blue    */&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"#d571fc"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cm"&gt;/* magenta */&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"#6cf2fc"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cm"&gt;/* cyan    */&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"#fcfcfc"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cm"&gt;/* white   */&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="cm"&gt;/* special colors */&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"#0a0500"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cm"&gt;/* background */&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;257&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"#e0e0e0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cm"&gt;/* foreground */&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt; * Default colors (colorname index)&lt;/span&gt;
&lt;span class="cm"&gt; * foreground, background, cursor&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;span class="kt"&gt;unsigned&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;defaultfg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;257&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;unsigned&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;defaultbg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;defaultcs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;257&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;defaultrcs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt; * Colors used, when the specific fg == defaultfg. So in reverse mode this&lt;/span&gt;
&lt;span class="cm"&gt; * will reverse too. Another logic would only make the simple feature too&lt;/span&gt;
&lt;span class="cm"&gt; * complex.&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;defaultitalic&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;defaultunderline&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt; * Default shape of cursor&lt;/span&gt;
&lt;span class="cm"&gt; * 2: Block ("█")&lt;/span&gt;
&lt;span class="cm"&gt; * 4: Underline ("_")&lt;/span&gt;
&lt;span class="cm"&gt; * 6: Bar ("|")&lt;/span&gt;
&lt;span class="cm"&gt; * 7: Snowman ("☃")&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cursorshape&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt; * Default columns and rows numbers&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;

&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cols&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;rows&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="dmenu"&gt;dmenu&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://tools.suckless.org/dmenu/"&gt;dmenu&lt;/a&gt; can be configured in the same way as Simple Terminal by editing a text file and compiling the software. I like to use many keyboard shortcuts, but I find that for launching applications I don’t use that often or to launch custom Bash or Python scripts on the fly, nothing beats the simplicity of &lt;strong&gt;dmenu&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id="configuration_1"&gt;Configuration&lt;/h3&gt;
&lt;p&gt;This one is very easy to configure and doesn’t really require any attention at all besides defining where you want it to appear on the screen and what colors you prefer. Here are some smalls changes I made to the configuration in &lt;code&gt;config.h&lt;/code&gt; before compiling it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;topbar&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;                      &lt;/span&gt;&lt;span class="cm"&gt;/* -b  option; if 0, dmenu appears at bottom     */&lt;/span&gt;
&lt;span class="cm"&gt;/* -fn option overrides fonts[0]; default X11 font or font set */&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fonts&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;"Consolas:size=12"&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;prompt&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="cm"&gt;/* -p  option; prompt to the left of input field */&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;SchemeLast&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="cm"&gt;/*     fg         bg       */&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;SchemeNorm&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"#D8D8D8"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"#000000"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;SchemeSel&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"#000000"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"#ff7400"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;SchemeOut&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"#000000"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"#00ffff"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="cm"&gt;/* -l option; if nonzero, dmenu uses vertical list with given number of lines */&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt; * Characters not considered part of a word while deleting words&lt;/span&gt;
&lt;span class="cm"&gt; * for example: " /?\"&amp;amp;[]"&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;worddelimiters&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;" "&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="slock"&gt;slock&lt;/h2&gt;
&lt;p&gt;What can be said about slock? It just works and never gets in your way. Set it and really forget it. From the official page:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is the simplest X screen locker we are aware of.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Again, its simplicity is charming and nothing really needs to be changed in &lt;code&gt;config.h&lt;/code&gt; apart from colors and setting the correct username and group name to lock and unlock the screen.&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This was a lighting fast overview of some of the tools I now use on a daily basis. Suckless tools caught my attention and kept it! They offer other specialized software like a web browser, a tool for presentation from the terminal, &lt;span class="caps"&gt;IRC&lt;/span&gt; client and others… but the ones described here are really those which I now can’t live without.&lt;/p&gt;
&lt;p&gt;I was originally inspired to seek out those tools thanks to &lt;a href="https://lukesmith.xyz/"&gt;Luke Smith&lt;/a&gt;, a &lt;a href="https://www.youtube.com/channel/UC2eYFnH61tmytImy1mTYvhA"&gt;fantastic YouTuber&lt;/a&gt;.&lt;/p&gt;</content><category term="tools"></category><category term="productivity"></category><category term="software"></category><category term="web"></category></entry><entry><title>Exponentiation in Modular Arithmetic Made Easy</title><link href="https://www.sglavoie.com/posts/2019/04/27/exponentiation-in-modular-arithmetic-made-easy/" rel="alternate"></link><published>2019-04-27T19:52:00-05:00</published><updated>2019-04-27T19:52:00-05:00</updated><author><name>Sébastien Lavoie</name></author><id>tag:www.sglavoie.com,2019-04-27:/posts/2019/04/27/exponentiation-in-modular-arithmetic-made-easy/</id><summary type="html">&lt;p&gt;While playing around in the Python interpreter to validate answers to mathematical questions, I quickly found out that very large exponents are dealt with very inefficiently by default as they are simply evaluated as is. That&amp;#8217;s where Python came to its own&amp;nbsp;rescue.&lt;/p&gt;</summary><content type="html">
&lt;hr/&gt;
&lt;h1 id="introduction"&gt;Introduction&lt;/h1&gt;
&lt;p&gt;The following Python script will by no means provide any useful idea to
compete against the
&lt;a href="https://en.wikipedia.org/wiki/RSA_(cryptosystem)"&gt;&lt;span class="caps"&gt;RSA&lt;/span&gt; algorithm&lt;/a&gt;
, but it does give you an idea of how
a simple technique about reducing the size of an exponent in modular
arithmetic can bring you closer to using much larger numbers than the
ones you could normally use in the Python interpreter.&lt;/p&gt;
&lt;h1 id="the-script-in-action"&gt;The script in action&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="sd"&gt;"""Compute the result of a^b (mod k) by using the exponentiation technique.&lt;/span&gt;
&lt;span class="sd"&gt;The goal here is not efficiency, even though the program is actually pretty&lt;/span&gt;
&lt;span class="sd"&gt;fast: the algorithm is applied manually for demonstration purposes.&lt;/span&gt;
&lt;span class="sd"&gt;Testing on a modest Intel Core i5, having `a` and `b` each set to a random&lt;/span&gt;
&lt;span class="sd"&gt;number containing 2,000 digits and `k` set to a modulo of a number containing&lt;/span&gt;
&lt;span class="sd"&gt;20 digits, results are printed in about 3.3 seconds."""&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;binary_remainders&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""Take `b` and return the binary equivalent in a list of remainders."""&lt;/span&gt;
    &lt;span class="n"&gt;remainders&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;quotient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;num_b&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;prev_quotient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;quotient&lt;/span&gt;
        &lt;span class="n"&gt;quotient&lt;/span&gt; &lt;span class="o"&gt;//=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
        &lt;span class="n"&gt;remainder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;prev_quotient&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
        &lt;span class="n"&gt;remainders&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;remainder&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;quotient&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;remainders&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;powers_of_two&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;remainders&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""Return a list of the value of powers of two that form the&lt;/span&gt;
&lt;span class="sd"&gt;    exponent`b`."""&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;remainders&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;

    &lt;span class="n"&gt;powers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;remainder&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;remainders&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;remainder&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;powers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;powers&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;compute_intermediate_congruences&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num_k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;powers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""Compute all necessary intermediate results of congruence in `mod k` for&lt;/span&gt;
&lt;span class="sd"&gt;    powers of 2 in `powers` to form the number `b`."""&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;powers&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;

    &lt;span class="n"&gt;go_up_to&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;powers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;intermediate_results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;num_a&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;  &lt;span class="c1"&gt;# Build dictionary to store all results&lt;/span&gt;
    &lt;span class="n"&gt;start_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;  &lt;span class="c1"&gt;# First power of two to calculate congruence&lt;/span&gt;
    &lt;span class="n"&gt;congruence&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;num_a&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;start_value&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;go_up_to&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# value to use for next power of 2&lt;/span&gt;
        &lt;span class="n"&gt;congruence&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;congruence&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;num_k&lt;/span&gt;
        &lt;span class="n"&gt;intermediate_results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;start_value&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;congruence&lt;/span&gt;
        &lt;span class="n"&gt;start_value&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;intermediate_results&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;compute_final_congruence&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;powers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;intermediate_results&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""Take all relevant values from `intermediate_results` matching powers in&lt;/span&gt;
&lt;span class="sd"&gt;    `powers`, multiply them together and calculate this number `mod k` to get&lt;/span&gt;
&lt;span class="sd"&gt;    the final result."""&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;intermediate_results&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;powers&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;

    &lt;span class="c1"&gt;# store all required values from `intermediate_results`&lt;/span&gt;
    &lt;span class="n"&gt;congruent_results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;power&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;powers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;intermediate_results&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;power&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;congruent_results&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;congruent_results&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt;  &lt;span class="c1"&gt;# Multiply all results together&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;num_k&lt;/span&gt;  &lt;span class="c1"&gt;# final congruence we are looking for&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;compute_congruence&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num_b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num_k&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""Return `c`, the result of `a^b (mod k)`."""&lt;/span&gt;
    &lt;span class="n"&gt;num_a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;num_a&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;num_k&lt;/span&gt;  &lt;span class="c1"&gt;# Make sure `a` is smaller than `k`&lt;/span&gt;

    &lt;span class="c1"&gt;# Reduce `b` to list of remainders in binary&lt;/span&gt;
    &lt;span class="n"&gt;remainders&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;binary_remainders&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Build a list of the powers of 2 forming `b`&lt;/span&gt;
    &lt;span class="n"&gt;powers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;powers_of_two&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;remainders&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Build a list of necessary intermediate results to reach&lt;/span&gt;
    &lt;span class="c1"&gt;# the value of `b` from powers of 2: finds congruence for&lt;/span&gt;
    &lt;span class="c1"&gt;# smaller powers of 2 and store them in a list.&lt;/span&gt;
    &lt;span class="n"&gt;intermediate_results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;compute_intermediate_congruences&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num_k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                                            &lt;span class="n"&gt;powers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Multiply all relevant intermediate results `mod k` to get the final&lt;/span&gt;
    &lt;span class="c1"&gt;# congruence of `a^b (mod k)`.&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;compute_final_congruence&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;powers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;intermediate_results&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"We will calculate a^b (mod k). Enter only integers."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;NUM_A&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Provide `a`: "&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;NUM_B&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Provide `b`: "&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;NUM_K&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Provide `k`: "&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="n"&gt;FINAL_RESULT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;compute_congruence&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NUM_A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;NUM_B&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;NUM_K&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FINAL_RESULT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="conclusion"&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;It was very interesting to see how a technique that’s applied manually
will work wonders with such large numbers. The Python interpreter can
barely calculate numbers with exponents with seven digits or more, while
a basic approach like the one shown above can quickly churn out the
results for seemingly quite large numbers.&lt;/p&gt;
&lt;p&gt;As always, this code is
&lt;a href="https://github.com/sglavoie/code-snippets/blob/main/python/mathematics/modular_arithmetic/exponentiation_mod_k.py"&gt;available on GitHub&lt;/a&gt;.&lt;/p&gt;</content><category term="automation"></category><category term="mathematics"></category><category term="python"></category><category term="script"></category></entry><entry><title>Tag Navigation in Vim</title><link href="https://www.sglavoie.com/posts/2019/04/19/tag-navigation-in-vim/" rel="alternate"></link><published>2019-04-19T17:52:00-05:00</published><updated>2019-04-19T17:52:00-05:00</updated><author><name>Sébastien Lavoie</name></author><id>tag:www.sglavoie.com,2019-04-19:/posts/2019/04/19/tag-navigation-in-vim/</id><summary type="html">&lt;p&gt;A quick introduction to tag navigation in&amp;nbsp;Vim/Neovim.&lt;/p&gt;</summary><content type="html">
&lt;hr/&gt;
&lt;h2 id="navigate-inside-the-current-buffer"&gt;Navigate inside the current buffer&lt;/h2&gt;
&lt;p&gt;There is a command &lt;code&gt;gd&lt;/code&gt; that stands for &lt;strong&gt;Goto local Declaration&lt;/strong&gt;. It is quite useful when looking for a variable inside the current buffer as it allows to jump to where it is declared when the variable is under the cursor. Using that command, you can also find where a function is declared and it will find the first occurrence in the current function. If looking for the first occurrence in the buffer, &lt;code&gt;gD&lt;/code&gt; (&lt;strong&gt;Goto global Declaration&lt;/strong&gt;) will do the trick. You can jump back and forth to where you were with the commands &lt;code&gt;Ctrl + O&lt;/code&gt; (older position) and &lt;code&gt;Ctrl + I&lt;/code&gt; (newer position) in normal mode.&lt;/p&gt;
&lt;h2 id="navigate-inside-all-buffers-within-the-current-project"&gt;Navigate inside all buffers within the current project&lt;/h2&gt;
&lt;p&gt;To be able to jump between buffers and go back to the origin of a declaration when it is imported in the current module, generating tags comes in very handy as it allows you to use the command &lt;code&gt;Ctrl + ]&lt;/code&gt; to jump to a tag, just like when using the help pages in &lt;strong&gt;Vim&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;To make this work, we can conveniently use &lt;code&gt;ctags&lt;/code&gt;. First, we need to make sure it’s installed on the system as follow:&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="debianubuntu"&gt;Debian/Ubuntu&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;apt-get&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;ctags
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;apt-get&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;exuberant-ctags
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="os-x"&gt;&lt;span class="caps"&gt;OS&lt;/span&gt; X&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;brew&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;ctags
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;p&gt;You can put the following command in your configuration file to be able to generate the necessary tags inside &lt;strong&gt;Vim&lt;/strong&gt; by typing &lt;code&gt;MakeTags&lt;/code&gt; in command mode:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;command&lt;span class="p"&gt;!&lt;/span&gt; MakeTags &lt;span class="p"&gt;!&lt;/span&gt;ctags &lt;span class="p"&gt;-&lt;/span&gt;R .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will make it easy to remember how to do it. After that, open an existing project in its root directory and use this newly created &lt;code&gt;MakeTags&lt;/code&gt; command to generate the tags. This will create a file named &lt;code&gt;tags&lt;/code&gt; in the current working directory*. Now, you will be able to open any file inside your project and jump to all the available declarations with &lt;code&gt;Ctrl + ]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;* &lt;sub&gt;Note: This will create tags recursively from the &lt;em&gt;current working directory&lt;/em&gt;, &lt;strong&gt;not&lt;/strong&gt; from the path matching the current buffer.&lt;/sub&gt;&lt;/p&gt;
&lt;p&gt;If you go to a tag that leads you a few declarations away in one file or another, you can come back with &lt;code&gt;Ctrl + T&lt;/code&gt;. Here is a clear explanation from Vim’s help:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;The&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;obvious&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;way&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;browsing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;through&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;call&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;graph&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;Consider&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;following&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;call&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;graph&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;---&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;FuncA&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;---&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;FuncC&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="o"&gt;---&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;FuncB&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;Explanation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;calls&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;FuncA&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;FuncB&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;FuncA&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;calls&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;FuncC&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
&lt;span class="n"&gt;You&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;can&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;FuncA&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;by&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;CTRL&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="err"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;on&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;call&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;FuncA&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;Then&lt;/span&gt;
&lt;span class="n"&gt;you&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;can&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;CTRL&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="err"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;FuncC&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;If&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;you&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;want&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;go&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;back&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;you&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;can&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;CTRL&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;twice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;Then&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;you&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;can&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;CTRL&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="err"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;FuncB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To keep those tags useful when you update your project, you can map a sequence that saves the buffer you are working on and then regenerates the tags automatically. Here is an example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;W :&lt;span class="k"&gt;w&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:MakeTags&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:echo &lt;span class="s1"&gt;'ctags have been updated.'&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And on this note, we’re ready to conquer the world.&lt;/p&gt;</content><category term="tips-and-tricks"></category><category term="productivity"></category><category term="vim"></category></entry><entry><title>Dispose of Spam with Disposable Emails And More!</title><link href="https://www.sglavoie.com/posts/2019/04/03/dispose-of-spam-with-disposable-emails-and-more/" rel="alternate"></link><published>2019-04-03T20:08:00-06:00</published><updated>2019-04-03T20:08:00-06:00</updated><author><name>Sébastien Lavoie</name></author><id>tag:www.sglavoie.com,2019-04-03:/posts/2019/04/03/dispose-of-spam-with-disposable-emails-and-more/</id><summary type="html">&lt;p&gt;Have you ever received spam to your email address? Unless you are extremely lucky or are actually disconnected from the Internet and thus most probably not reading this, chances are you might have had an offer or two to receive gold from a Nigerian prince in the past. Before those princes and princesses generously start giving away their cryptocurrency in the near future in exchange for a trip to Western Union, get prepared and hide away your precious&amp;nbsp;address!&lt;/p&gt;</summary><content type="html">
&lt;hr/&gt;
&lt;h1 id="introduction"&gt;Introduction&lt;/h1&gt;
&lt;p&gt;If your privacy matters to you even just a little, read on, if you dare.
There are easy solutions you can apply right now to filter those fools
out of your digital life.&lt;/p&gt;
&lt;h2 id="why-should-i-care"&gt;Why should I care?&lt;/h2&gt;
&lt;p&gt;Once your main email address is exposed to attacks because it was
leaked in a data breach or your data was somehow sold to a third-party
service, it is a hard and time-consuming process to try to unsubscribe
to everything or apply filters to automatically delete most of the
bad stuff coming in. Many websites won’t respect your privacy and
will go ahead and share your email, which can eventually have a
snowball effect and you end up getting more emails than there are trees
available to print them. As with printing emails, you must agree this
is totally irresponsible and should be punished by law .&lt;/p&gt;
&lt;p&gt;Because attackers can often retrieve your complete name from your
email address (either because you signed up for a service sharing your
information from another provider or it’s easy to associate it with you
on social media, for example), they can craft advanced phishing emails
or create content that’s magically relevant to you thanks to social
engineering and if you don’t look close enough, you can fall into their trap.&lt;/p&gt;
&lt;p&gt;Then suddenly, because you opened an attachment or went into the
&lt;strong&gt;dark&lt;/strong&gt; corners of the Web unbeknownst to you, your laptop fan is
spinning all the time at full speed or you get a colorful pop-up telling
you that all your files have been encrypted and a ransom, along with
only unrecognizable files on your system, convincingly dictates what
your destiny looks like. At this point, &lt;em&gt;you are doomed&lt;/em&gt;, unless you
actually take pleasure in formatting your computer once in a while for
the shear joy of it.&lt;/p&gt;
&lt;p&gt;So what shall we do about it?&lt;/p&gt;
&lt;h1 id="solution-1-use-a-temporary-email"&gt;Solution #1: Use a temporary email&lt;/h1&gt;
&lt;p&gt;This one is quick and easy. You can use a variety of services,
including &lt;a href="https://www.tempmailaddress.com/"&gt;Temp Mail Address&lt;/a&gt;,
&lt;a href="https://temp-mail.org/"&gt;Temp Mail&lt;/a&gt; and
&lt;a href="https://www.throwawaymail.com/"&gt;ThrowAwayMail&lt;/a&gt; to name a few. Those
are all free services and allow you to get access to a temporary email
address and its associated inbox.&lt;/p&gt;
&lt;p&gt;Perfect for all those cases when you want to receive a freebie or have
access to a specific page that asks for an email and a &lt;em&gt;real&lt;/em&gt; name. You
simply give a fake but working email address and you’re good to go.
Don’t even set it and forget it.&lt;/p&gt;
&lt;h1 id="solution-2-use-a-more-controlled-approach"&gt;Solution #2: Use a more controlled approach&lt;/h1&gt;
&lt;p&gt;There is one particular service that I have been using for almost
a decade now that eats your spam away on demand. That service is
appropriately called &lt;a href="https://www.spamgourmet.com"&gt;Spamgourmet&lt;/a&gt;. Does it
work? Here are my personal stats:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Your message stats: 805 forwarded, 14,191 eaten. You have 245 spamgourmet address(es).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="does-it-really-work"&gt;Does it really work?&lt;/h2&gt;
&lt;p&gt;Oh yes! From the above stats, you can see that from a total of
&lt;strong&gt;14,996&lt;/strong&gt; messages being sent to me, I have not received almost &lt;strong&gt;95%&lt;/strong&gt;
of it thanks to Spamgourmet working on auto-pilot all the time… And
it’s important to mention that &lt;strong&gt;the other 5%, I actually wanted to
receive it&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id="how-does-it-work"&gt;How does it work?&lt;/h2&gt;
&lt;p&gt;You can create as many email addresses as you require to login to most
websites that you do not intend to use regularly and create a label
&lt;code&gt;Filtered mail&lt;/code&gt; in your inbox or something similar that matches anything
sent to &lt;code&gt;*@spamgourmet.com&lt;/code&gt;. You can create addresses on the fly without
ever needing to log into your Spamgourmet account and set how many
emails can be sent to a specific address all at once.&lt;/p&gt;
&lt;p&gt;With very few extra steps, you can manage your email addresses on
Spamgourmet, remove the ones you don’t want anymore, reset how many
emails can be received (increase/decrease that number), etc. You can
find out exactly how it works on the main page of Spamgourmet.&lt;/p&gt;
&lt;h2 id="why-consider-this-approach-instead-of-solution-1"&gt;Why consider this approach instead of solution #1?&lt;/h2&gt;
&lt;p&gt;This approach has the advantage that you can know exactly where your
spam is coming from and exactly when, as your email may be used quite a
long time after your original registration with a service to spam you.
If you have created an account on, say, &lt;code&gt;clouds.com&lt;/code&gt; with your special
email &lt;em&gt;created on the fly without ever needing to go to Spamgourmet&lt;/em&gt;,
let’s say it’s &lt;code&gt;clouds.my_username@spamgourmet.com&lt;/code&gt;, if you receive
spammy content sent to that address six months later, don’t look too
hard: you know who did it.&lt;/p&gt;
&lt;p&gt;Not only you know this, but you can keep on using this made up email
for as long as you wish. Need to be in touch with a person who
doesn’t fall into any of the categories &lt;code&gt;['friend', 'acquaintance', 'work', 'intimate', 'trustworthy']&lt;/code&gt;?
No worries, instantly claim &lt;code&gt;something.my_username@spamgourmet.com&lt;/code&gt; and
that’s the email you give that person. Since it doesn’t expire and you
have full control over how many more emails you can receive at that
address at any time, it can simplify a few exchanges where you don’t
really want to share your real email, not even to the Nigerian Prince.
This way, you can even receive attachments just as normal!&lt;/p&gt;
&lt;p&gt;You can even go as far as having trusted senders (from whom you can
receive as many emails as you define) and &lt;strong&gt;send mail from your custom
Spamgourmet emails, including with attachments&lt;/strong&gt;! For this, you can
visit Spamgourmet and generate an email of your choice that will be
sending to a specific address email. You will simply send the email to
this specially generated address from your email account and voilà!
The person on the other end will have a hard time figuring out your
real address, except if you added it in your signature.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.sglavoie.com/images/posts/0012_dispose-of-spam/spamgourmet_getting_through.png"&gt;&lt;img alt="spamgourmet_getting_through" class="max-size-img-post" src="https://www.sglavoie.com/images/posts/0012_dispose-of-spam/spamgourmet_getting_through.png"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="solution-3-using-filters"&gt;Solution #3: Using filters&lt;/h1&gt;
&lt;p&gt;Gmail is one email service that allows you to create filters as you
wish: let’s take advantage of that. What you could do is delete only
messages that match exactly the groups of terms you never want to read
as to not exclude important emails. To create one filter for all of
them, you can use the field &lt;code&gt;has words&lt;/code&gt; and enter something like the
following in the case of &lt;span class="caps"&gt;GDPR&lt;/span&gt; policy updates:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="s"&gt;"Privacy Policy Update"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;OR&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"GDPR"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;OR&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"General Data protection regulation"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;OR&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Updates to our terms of use"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;OR&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Updates to our privacy"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;OR&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"updating our privacy"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;OR&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"updated our privacy"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you know more specifically how the words you are looking for appear,
you can check for turns of phrases such as &lt;code&gt;Updates to X's Privacy Policy&lt;/code&gt; and manage them with the keyword &lt;code&gt;AROUND &amp;lt;number&amp;gt;&lt;/code&gt;, where
&lt;code&gt;&amp;lt;number&amp;gt;&lt;/code&gt; is how many words can be around what you are searching:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;"privacy policy" AROUND 3 update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will look anywhere in the subject or in the content of the email
and find the word &lt;code&gt;update&lt;/code&gt; as well as &lt;code&gt;updates&lt;/code&gt; near the match &lt;code&gt;privacy policy&lt;/code&gt;. If you are interested in looking for the word &lt;code&gt;update&lt;/code&gt; but not
&lt;code&gt;updates&lt;/code&gt;, you can specify an exact match with the &lt;code&gt;+&lt;/code&gt; sign right in
front of it: &lt;code&gt;+update&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;sub&gt;Note: If you go too broad with the chosen keywords, you may not be able to reply to everything you would like to…&lt;/sub&gt;&lt;/p&gt;
&lt;p&gt;A next step could be to filter potentially important emails with more
keywords but instead of deleting them, you can select a few options for
your filter such as &lt;strong&gt;Skip the Inbox&lt;/strong&gt; (Archive it), &lt;strong&gt;Mark as read&lt;/strong&gt;,
&lt;strong&gt;Apply the label&lt;/strong&gt; and &lt;strong&gt;Never mark it as important&lt;/strong&gt;. That way, you
still have access to all those emails and you can review them separately
and quickly at your convenience.&lt;/p&gt;
&lt;p&gt;For a list of available search operators, you can refer to
this &lt;a href="https://support.google.com/mail/answer/7190?hl=en&amp;amp;topic=1668965&amp;amp;ctx=topic"&gt;Gmail help page — Search operators you can use with Gmail&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="solution-4-use-the-symbol-in-your-email"&gt;Solution #4: Use the &lt;code&gt;+&lt;/code&gt; symbol in your email&lt;/h1&gt;
&lt;p&gt;Gmail lets you add a &lt;code&gt;+&lt;/code&gt; symbol in your email address. For
example, you can set up your &lt;code&gt;ServiceNameHere&lt;/code&gt; email to be
&lt;code&gt;username+ServiceNameHere@gmail.com&lt;/code&gt;. That way, you know where your spam
may be coming from, but it is always more effective to just use a unique
address with the above service or even forward emails from another Gmail
account so you never have to give away your main email. By doing this,
you can then set up filters for individual services. This doesn’t work
for all websites as sometimes the &lt;code&gt;+&lt;/code&gt; symbol isn’t allowed. In that
scenario, there is another way…&lt;/p&gt;
&lt;h1 id="solution-5-forward-secondary-emails-to-your-main-email"&gt;Solution #5: Forward secondary emails to your main email&lt;/h1&gt;
&lt;p&gt;This is pretty straightforward and even though you initially have to do
more work to set things up, this can work very well for various reasons:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You get &lt;span class="caps"&gt;15GB&lt;/span&gt; on each Gmail account. This can be useful, as long as you don’t abuse it and get banned for life without the possibility of ever communicating through email ever again in your lifetime.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can apply custom filters such as &lt;code&gt;send to trash&lt;/code&gt; for each secondary account before forwarding what’s left to your main account. You can then apply a filter in your main account to visually get a hint of where the email is coming from, like a label &lt;code&gt;my.second.email@gmail.com&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can stop forwarding emails at any moment if you decide. You will have to log into your secondary account and click a few buttons there, but it’s easy, almost painless and you shouldn’t have to repeat the process so often that it gets boring.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can even set up your main account so that you are able to send messages from your main account as if it were coming from any of your secondary accounts. No more account switching: you get something sent to &lt;code&gt;my.second.email@gmail.com&lt;/code&gt; in your main account and you can have it set up so that when you reply to that email, it is automatically sent from that secondary email instead of the main one.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id="conclusion"&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;I hope you found something useful in this rambling about spam.
I don’t like spam myself, so if you have any tips or tricks you
would like to share with me to help in this quest for freedom,
please reach out to me at my email shared in plain text at
&lt;a href="mailto:sebastien39571@gmail.com"&gt;sebastien39571@gmail.com&lt;/a&gt;.&lt;/p&gt;</content><category term="tips-and-tricks"></category><category term="productivity"></category><category term="web"></category></entry><entry><title>Have You Been Pwned?</title><link href="https://www.sglavoie.com/posts/2019/03/21/have-you-been-pwned/" rel="alternate"></link><published>2019-03-21T13:42:00-06:00</published><updated>2019-03-21T13:42:00-06:00</updated><author><name>Sébastien Lavoie</name></author><id>tag:www.sglavoie.com,2019-03-21:/posts/2019/03/21/have-you-been-pwned/</id><summary type="html">&lt;p&gt;Has your password been leaked in a major breach? You can find out thanks to &lt;a href="https://haveibeenpwned.com/"&gt;Have I Been Pwned?&lt;/a&gt;&amp;#8230; Or you can use their &lt;span class="caps"&gt;API&lt;/span&gt; and stop worrying about your password being sent through your Web&amp;nbsp;browser!&lt;/p&gt;</summary><content type="html">
&lt;hr/&gt;
&lt;h1 id="introduction"&gt;Introduction&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://haveibeenpwned.com/"&gt;Have I Been Pwned?&lt;/a&gt; has a very simple and
accessible &lt;span class="caps"&gt;API&lt;/span&gt; that’s perfect to work with as a beginner. There are
different ways to retrieve information and the script below is only
one glimpse into the numerous possibilities available. It is built in
a way that makes it easy to add features and functionality thanks to
&lt;a href="https://github.com/pallets/click"&gt;Click&lt;/a&gt;, a wonderful &lt;em&gt;“command line
interface toolkit”&lt;/em&gt;.&lt;/p&gt;
&lt;h1 id="python-to-the-rescue"&gt;Python to the rescue&lt;/h1&gt;
&lt;p&gt;The following script uses &lt;a href="https://github.com/pallets/click"&gt;Click&lt;/a&gt;
to build a tiny command-line interface instead of more
traditional tools like &lt;code&gt;argparse&lt;/code&gt;. You will also need
&lt;a href="https://github.com/kennethreitz/requests"&gt;requests&lt;/a&gt; to peek inside the
&lt;span class="caps"&gt;API&lt;/span&gt;. Both can be obtained as follow in a terminal:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;click&lt;span class="w"&gt; &lt;/span&gt;requests
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And now, the &lt;em&gt;pièce de résistance&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;Simple script that will take advantage of haveibeenpwned.com's API to&lt;/span&gt;
&lt;span class="sd"&gt;find out if your password has been breached.&lt;/span&gt;
&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="c1"&gt;# Standard library imports&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;hashlib&lt;/span&gt;

&lt;span class="c1"&gt;# Third party library imports&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;click&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;


&lt;span class="c1"&gt;# Needed to access API&lt;/span&gt;
&lt;span class="n"&gt;PASS_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'https://api.pwnedpasswords.com/range/'&lt;/span&gt;

&lt;span class="c1"&gt;# Script information&lt;/span&gt;
&lt;span class="n"&gt;VERSION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'0.1.1'&lt;/span&gt;
&lt;span class="n"&gt;LOGO&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;'''&lt;/span&gt;
&lt;span class="s1"&gt; __                        __   __&lt;/span&gt;
&lt;span class="s1"&gt;|  |--.---.-.--.--.-----. |__| |  |--.-----.-----.-----.&lt;/span&gt;
&lt;span class="s1"&gt;|     |  _  |  |  |  -__| |  | |  _  |  -__|  -__|     |&lt;/span&gt;
&lt;span class="s1"&gt;|__|__|___._|\___/|_____| |__| |_____|_____|_____|__|__|&lt;/span&gt;

&lt;span class="s1"&gt;                               __  _____&lt;/span&gt;
&lt;span class="s1"&gt;.-----.--.--.--.-----.-----.--|  ||__   |&lt;/span&gt;
&lt;span class="s1"&gt;|  _  |  |  |  |     |  -__|  _  |',  ,-'&lt;/span&gt;
&lt;span class="s1"&gt;|   __|________|__|__|_____|_____| |--|&lt;/span&gt;
&lt;span class="s1"&gt;|__|                               '--'  '''&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;param&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  &lt;span class="c1"&gt;# `param` required by `click`&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""Print information about the program and exit."""&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resilient_parsing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;secho&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;LOGO&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"Python 3.6+ Checker"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rjust&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;
                &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"v"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;VERSION&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rjust&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'blue'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bold&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pass_to_sha1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""Will convert `password` with SHA-1 algorithm and return the short&lt;/span&gt;
&lt;span class="sd"&gt;    version with the first five characters and the long version with&lt;/span&gt;
&lt;span class="sd"&gt;    everything but the first five characters as a tuple."""&lt;/span&gt;

    &lt;span class="n"&gt;my_password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# converts to byte string&lt;/span&gt;

    &lt;span class="n"&gt;complete_hash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hashlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sha1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hexdigest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;long_hash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;complete_hash&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
    &lt;span class="n"&gt;short_hash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;complete_hash&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;short_hash&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;long_hash&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_password&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;short_hash&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;long_hash&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""Consult haveibeenpwned.com to see how many times the password has&lt;/span&gt;
&lt;span class="sd"&gt;    been breached."""&lt;/span&gt;
    &lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;secho&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Please note that only the 5 first characters from your '&lt;/span&gt;
                &lt;span class="s1"&gt;'SHA-1 ENCRYPTED password are sent to haveibeenpwned.com.'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;fg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'yellow'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bold&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PASS_URL&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;short_hash&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;lines&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;long_hash&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;num_times&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'occurrences'&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="p"&gt;:])&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="s1"&gt;'occurence'&lt;/span&gt;
            &lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;secho&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Your password was found!'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'red'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bold&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;'→ &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;num_times&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;secho&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Your password was NOT found!'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'green'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@click&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nd"&gt;@click&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;option&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s1"&gt;'--info'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;is_flag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;print_info&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;expose_value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;is_eager&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Print some information about the program and exit."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nd"&gt;@click&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;version_option&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;VERSION&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;%(version)s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hibp&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""A simple command-line interface to make use of&lt;/span&gt;
&lt;span class="sd"&gt;    haveibeenpwned.com's data.&lt;/span&gt;

&lt;span class="sd"&gt;    Type `python3 pwned.py usage` for more info (or whatever way you&lt;/span&gt;
&lt;span class="sd"&gt;    call Python 3)."""&lt;/span&gt;


&lt;span class="nd"&gt;@hibp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;usage&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""Give examples on how to use this script."""&lt;/span&gt;
    &lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;secho&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Examples:'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'blue'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;secho&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'python3 pwned.py check --help for more info.'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'green'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;secho&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'python3 pwned.py check -p MyPasswordHere'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'yellow'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;secho&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'python3 pwned.py check --password MyPasswordHere'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'green'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;secho&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'For more complicated passwords, you have to use quotes and '&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;fg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'blue'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;secho&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'escape symbols with &lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt; where appropriate:'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'blue'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;secho&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'python3 pwned.py check -p "as0d9&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;"asg0&lt;/span&gt;&lt;span class="se"&gt;\'\'&lt;/span&gt;&lt;span class="s1"&gt;A=)SYD"'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;fg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'green'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@hibp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nd"&gt;@click&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;option&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s1"&gt;'-p'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'--password'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Reveal if match exists with `password`."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""Tell if your password has been breached."""&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;short_hash&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;long_hash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pass_to_sha1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;check_password&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;short_hash&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;long_hash&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;secho&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Run `pwned.py check --help` for more info.'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'red'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;hibp&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="example-usage"&gt;Example usage&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.sglavoie.com/images/posts/0011_have-i-been-pwned/have_i_been_pwned_script.png"&gt;&lt;img alt="have_i_been_pwned_script" class="max-size-img-post" src="https://www.sglavoie.com/images/posts/0011_have-i-been-pwned/have_i_been_pwned_script.png"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="conclusion"&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;If you are familiar with Python,
you can easily make sense of how this little tool works by
reading its code. You can also have a look at this &lt;a href="https://github.com/sglavoie/dev-helpers/tree/main/haveibeenpwnwed_password_checker"&gt;repository on
GitHub&lt;/a&gt; if you want
to fork it or reuse it any other way you wish. I have personally found
it much easier to work with &lt;a href="https://github.com/pallets/click"&gt;Click&lt;/a&gt;
instead of &lt;code&gt;argparse&lt;/code&gt; and &lt;code&gt;optparse&lt;/code&gt;. I haven’t got to try
&lt;a href="https://github.com/docopt/docopt"&gt;docopt&lt;/a&gt; yet, but it is almost equally
as popular as Click on GitHub at the time of this writing and its
Pythonic way makes it another great option to consider.&lt;/p&gt;</content><category term="automation"></category><category term="api"></category><category term="click"></category><category term="python"></category><category term="script"></category></entry><entry><title>Number of Paths in a Grid… or in Life</title><link href="https://www.sglavoie.com/posts/2019/03/14/number-of-paths-in-a-grid-or-in-life/" rel="alternate"></link><published>2019-03-14T20:38:00-06:00</published><updated>2019-03-22T10:05:00-06:00</updated><author><name>Sébastien Lavoie</name></author><id>tag:www.sglavoie.com,2019-03-14:/posts/2019/03/14/number-of-paths-in-a-grid-or-in-life/</id><summary type="html">&lt;p&gt;Finding one&amp;#8217;s way in life is not easy because there are so many paths we can take at any moment. Here is a way to look at it&amp;nbsp;mathematically!&lt;/p&gt;</summary><content type="html">
&lt;hr/&gt;
&lt;h1 id="introduction"&gt;Introduction&lt;/h1&gt;
&lt;p&gt;How would you go about determining the number of possible paths in a
grid of size &lt;em&gt;n&lt;/em&gt; if your initial position is at the top left corner and
your destination is the bottom right corner, knowing you can only go
right or down at each move? Let’s look at a grid of size &lt;code&gt;3 × 3&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.sglavoie.com/images/posts/0010_number-of-paths-in-a-grid/3x3_grid_paths_demo.png"&gt;&lt;img alt="3x3_grid_paths_demo" class="max-size-img-post" src="https://www.sglavoie.com/images/posts/0010_number-of-paths-in-a-grid/3x3_grid_paths_demo.png"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Even at such a small size, one needs some concentration. Sure, it can be
done on paper, but there must be a better way…&lt;/p&gt;
&lt;h1 id="python-to-the-rescue"&gt;Python to the rescue&lt;/h1&gt;
&lt;p&gt;Once again, programming comes in handy! Life is complicated, but there
are aspects of it that can be solved more easily than previously
thought when we use the right tools.
Knowing that this particular situation corresponds to values from
&lt;a href="https://en.wikipedia.org/wiki/Pascal%27s_triangle"&gt;Pascal’s Triangle&lt;/a&gt;
might help, but it sure is more fun
to come up with a different solution. Here is how it occurred to me in Python:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="sd"&gt;'''&lt;/span&gt;
&lt;span class="sd"&gt;This approach consists in getting the number of possible paths for each&lt;/span&gt;
&lt;span class="sd"&gt;position where we stop in a grid. We know that once we reach the bottom&lt;/span&gt;
&lt;span class="sd"&gt;or the right of the grid, there is only one path possible from there,&lt;/span&gt;
&lt;span class="sd"&gt;so we take advantage of this fact and calculate the total number of&lt;/span&gt;
&lt;span class="sd"&gt;possible paths starting from the bottom right corner. A 2x2 grid would&lt;/span&gt;
&lt;span class="sd"&gt;have 9 indices starting at 0:&lt;/span&gt;
&lt;span class="sd"&gt;012&lt;/span&gt;
&lt;span class="sd"&gt;345&lt;/span&gt;
&lt;span class="sd"&gt;678&lt;/span&gt;

&lt;span class="sd"&gt;We start at index 8 and will calculate the number of possible paths for&lt;/span&gt;
&lt;span class="sd"&gt;all previous positions. From index 8, we calculate that index 4 must&lt;/span&gt;
&lt;span class="sd"&gt;have 2 possible paths to reach index 8 (4&amp;gt;7&amp;gt;8 and 4&amp;gt;5&amp;gt;8). We then find&lt;/span&gt;
&lt;span class="sd"&gt;that index 3 has 3 possible paths since from there we can go right to&lt;/span&gt;
&lt;span class="sd"&gt;index 4 (2 paths) or down to index 6 (1 path). We continue by checking&lt;/span&gt;
&lt;span class="sd"&gt;index 1, which would be the sum of the number of paths at index 4 and&lt;/span&gt;
&lt;span class="sd"&gt;index 2, which is 3 possible paths from there. Now, we are left at the&lt;/span&gt;
&lt;span class="sd"&gt;beginning and the total number of possible paths is index 3 + index 1&lt;/span&gt;
&lt;span class="sd"&gt;(3 + 3 = 6).&lt;/span&gt;

&lt;span class="sd"&gt;The values used would then be tweaked a little depending on the size&lt;/span&gt;
&lt;span class="sd"&gt;of the grid, but the algorithm remains the same. Here is how it works&lt;/span&gt;
&lt;span class="sd"&gt;concretely:&lt;/span&gt;

&lt;span class="sd"&gt;- Get the number of positions in the grid. 2x2 means 9 positions by&lt;/span&gt;
&lt;span class="sd"&gt;counting all intersections. With a 2x2 starting at index 0, we have the&lt;/span&gt;
&lt;span class="sd"&gt;following positions:&lt;/span&gt;
&lt;span class="sd"&gt;012&lt;/span&gt;
&lt;span class="sd"&gt;345&lt;/span&gt;
&lt;span class="sd"&gt;678&lt;/span&gt;

&lt;span class="sd"&gt;- Generate a list corresponding to the length of previously found number&lt;/span&gt;
&lt;span class="sd"&gt;  of positions and give a value of 1 to each position. For a 2x2, it is&lt;/span&gt;
&lt;span class="sd"&gt;  [1,1,1,1,1,1,1,1,1]&lt;/span&gt;
&lt;span class="sd"&gt;- Determine the multiple to be used to check if an index falls in the&lt;/span&gt;
&lt;span class="sd"&gt;  first column (grid_size + 1). The indices in the first column are 0, 3&lt;/span&gt;
&lt;span class="sd"&gt;  and 6, so multiple = 3.&lt;/span&gt;
&lt;span class="sd"&gt;- Start from the bottom right corner of the grid (index 8). Get the&lt;/span&gt;
&lt;span class="sd"&gt;  index of that position starting at zero (length of positions - 1).&lt;/span&gt;
&lt;span class="sd"&gt;- Start a while loop:&lt;/span&gt;
&lt;span class="sd"&gt;    - Check if current position is equal to grid size, meaning we got to&lt;/span&gt;
&lt;span class="sd"&gt;      the last position to evaluate. Return the value of the first index if&lt;/span&gt;
&lt;span class="sd"&gt;      this is the case.&lt;/span&gt;
&lt;span class="sd"&gt;    - Check if current position is a multiple of 3 in that example.&lt;/span&gt;
&lt;span class="sd"&gt;      If so, we skip and go back one index. For instance, if index was 6&lt;/span&gt;
&lt;span class="sd"&gt;      (multiple of 3), go back to index 5.&lt;/span&gt;
&lt;span class="sd"&gt;    - Determine the index of position to the left of current position&lt;/span&gt;
&lt;span class="sd"&gt;      and the index of position above current position. Sum the two together&lt;/span&gt;
&lt;span class="sd"&gt;      and give that value to the index that corresponds to one step left&lt;/span&gt;
&lt;span class="sd"&gt;      and one step up in the grid. Starting at 8, we sum index 7 and index&lt;/span&gt;
&lt;span class="sd"&gt;      5 (result = 2) and set that value for index 4, which is the number of&lt;/span&gt;
&lt;span class="sd"&gt;      possible paths from that index number.&lt;/span&gt;
&lt;span class="sd"&gt;    - Decrement current position by one and repeat the process until we&lt;/span&gt;
&lt;span class="sd"&gt;      break out of the loop.&lt;/span&gt;
&lt;span class="sd"&gt;'''&lt;/span&gt;

&lt;span class="n"&gt;GRID_SIZE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;num_paths&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;grid_size&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;'''Return the number of possible paths in a grid of size `grid_size`&lt;/span&gt;
&lt;span class="sd"&gt;    when going only right and down as an integer.'''&lt;/span&gt;
    &lt;span class="n"&gt;num_points&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;grid_size&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="n"&gt;path_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;num_points&lt;/span&gt;
    &lt;span class="n"&gt;multiple&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;grid_size&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;  &lt;span class="c1"&gt;# Indices of first column match this multiple&lt;/span&gt;

    &lt;span class="c1"&gt;# Last index in list&lt;/span&gt;
    &lt;span class="n"&gt;starting_point&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;starting_point&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;grid_size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;path_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;starting_point&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;multiple&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;starting_point&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;previous&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;starting_point&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="n"&gt;previous2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;starting_point&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;multiple&lt;/span&gt;
            &lt;span class="n"&gt;left_up_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;previous2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="n"&gt;left_up_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;path_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;previous&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;path_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;previous2&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
            &lt;span class="n"&gt;path_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;left_up_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;left_up_value&lt;/span&gt;
            &lt;span class="n"&gt;starting_point&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_paths&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GRID_SIZE&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the end, the idea was to find the number of possible paths that
correspond to each possible move, starting from the destination and
reverse engineering the number of possibilities until we get to the
starting point.&lt;/p&gt;
&lt;h1 id="conclusion"&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;As it turns out, this strategy of reverse engineering things works
pretty well when applied to real-life examples. When setting a goal,
for instance loosing 10 kilograms in one year, it can sound a lot less
daunting to find out what this represents by month (0.83 kg) or even
by week (0.19 kg) instead of fixating on the big gap from your current
situation. For short-term goals, this can be reduced to daily or even
hourly outcomes.&lt;/p&gt;
&lt;p&gt;This goes hand in hand with the advice found in &lt;a href="https://amzn.to/2Y0QGis"&gt;Atomic
Habits&lt;/a&gt;, an excellent book written by James Clear:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A 1% daily improvement leads to a version of yourself that’s &lt;em&gt;37&lt;/em&gt; times better in one year.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If that’s not motivating enough to start taking little steps with
consistency towards your dreams, I don’t know what is.&lt;/p&gt;</content><category term="automation"></category><category term="computer science"></category><category term="mathematics"></category><category term="python"></category><category term="script"></category></entry><entry><title>Executing Shell Commands in a Python Script</title><link href="https://www.sglavoie.com/posts/2019/03/08/executing-shell-commands-in-a-python-script/" rel="alternate"></link><published>2019-03-08T14:34:00-06:00</published><updated>2019-03-08T14:34:00-06:00</updated><author><name>Sébastien Lavoie</name></author><id>tag:www.sglavoie.com,2019-03-08:/posts/2019/03/08/executing-shell-commands-in-a-python-script/</id><summary type="html">&lt;p&gt;Even for simple tasks, it is often worth basing one&amp;#8217;s work on existing solutions when it is an appropriate option&amp;#8230; And such can be the case when writing Python&amp;nbsp;scripts!&lt;/p&gt;</summary><content type="html">
&lt;hr/&gt;
&lt;h1 id="introduction"&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Python is awesome for producing high-quality code quickly
and efficiently, but it is not necessary to reinvent the
wheel in each project: this is why the third-party library on
&lt;a href="https://pypi.org/"&gt;PyPI&lt;/a&gt; is so extensive. There are also occasions when
it is convenient to execute shell commands available in the terminal,
either to retrieve its output or to perform some work in the background.
I have wanted to do both when building this website, so here is one way
to accomplish this!&lt;/p&gt;
&lt;h1 id="retrieve-the-output"&gt;Retrieve the output&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;read_tree&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;'''Execute `tree` command and store the output in&lt;/span&gt;
&lt;span class="sd"&gt;    `tree.txt`.'''&lt;/span&gt;
    &lt;span class="n"&gt;tree&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getoutput&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;'tree .'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'./tree.txt'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'w'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;read_tree&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this example, the structure from the current directory is printed
when executing the code and it is later stored in a file. The output
could look something like the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;.
├── database_example
│   ├── example.sqlite
│   ├── db_manager.py
│   ├── review
│   │   └── sql_queries.txt
│   └── settings.py
├── database_sql.py
├── dump.sql
├── example.db
├── example.db.sql
├── example_info.txt
├── example_old.db
├── example_old.db.sql
├── sample
│   ├── chinook.db
│   └── sqlite-sample-database-diagram-color.pdf
├── test.db
└── test.sql

3 directories, 15 files
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="execute-a-command-in-the-background"&gt;Execute a command in the background&lt;/h1&gt;
&lt;p&gt;There are also instances in which is it useful to execute a program
from the terminal inside a Python script. This website, for example,
currently exports daily Git statistics in the &lt;code&gt;output/&lt;/code&gt; folder. This
looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;daily_stats&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;'''Execute `Gitstats` once a day based on the date found in&lt;/span&gt;
&lt;span class="sd"&gt;    `stats_counter.txt`. Very simple with a caveat: it won't check if&lt;/span&gt;
&lt;span class="sd"&gt;    there are new commits on the same day if stats have already been&lt;/span&gt;
&lt;span class="sd"&gt;    generated on that day.'''&lt;/span&gt;
    &lt;span class="n"&gt;today&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'%Y%m&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'stats_counter.txt'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readline&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;current_loc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;current_path&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;cmd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"gitstats"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"-c"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"project_name='sglavoie.com'"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
               &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;current_loc&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;current_loc&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/output/stats/"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'stats_counter.txt'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'w'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is an automated process, which is something Python is easy to use
for. However, it won’t be necessary to program everything: it all gets
generated on demand!&lt;/p&gt;
&lt;h1 id="conclusion"&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;I am always amazed at how easy it can be to automate simple tasks like
those mentioned above. Programming can be very rewarding regardless of
initial abilities. Just beyond the most basic stuff, suddenly there is a
world that opens up to those that stay curious long enough.&lt;/p&gt;</content><category term="tips-and-tricks"></category><category term="python"></category><category term="script"></category></entry><entry><title>Binary to Decimal, Decimal to Binary Converter</title><link href="https://www.sglavoie.com/posts/2019/02/18/binary-to-decimal-decimal-to-binary-converter/" rel="alternate"></link><published>2019-02-18T21:30:00-06:00</published><updated>2019-02-18T21:30:00-06:00</updated><author><name>Sébastien Lavoie</name></author><id>tag:www.sglavoie.com,2019-02-18:/posts/2019/02/18/binary-to-decimal-decimal-to-binary-converter/</id><summary type="html">&lt;p&gt;As part of a &lt;a href="https://www.coursera.org/learn/mathematics-for-computer-science/"&gt;course on the mathematics of Computer Science&lt;/a&gt;, I had to come up with algorithms to convert binary numbers to decimal numbers and vice&amp;nbsp;versa.&lt;/p&gt;</summary><content type="html">
&lt;hr/&gt;
&lt;h1 id="introduction"&gt;Introduction&lt;/h1&gt;
&lt;p&gt;There is nothing new here in terms of algorithms, but it was interesting
to figure out how to apply those concepts with Python. This works for
integer numbers, but can be easily adapted to convert fractions.&lt;/p&gt;
&lt;h1 id="binary-to-decimal"&gt;Binary to Decimal&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;Converts a binary number to a decimal number.&lt;/span&gt;
&lt;span class="sd"&gt;"""&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;bin_to_dec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""Algorithm that converts a binary number to a decimal number.&lt;/span&gt;

&lt;span class="sd"&gt;    Receives and returns a string."""&lt;/span&gt;

    &lt;span class="c1"&gt;# get the index of power of first digit&lt;/span&gt;
    &lt;span class="c1"&gt;# e.g. 1001 → first index power is 3 (2^3)&lt;/span&gt;
    &lt;span class="n"&gt;first_power&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="c1"&gt;# initialize variable to store final result&lt;/span&gt;

    &lt;span class="c1"&gt;# iterate over each number and if it is '1', calculate the value&lt;/span&gt;
    &lt;span class="c1"&gt;# based on its position and add it to the total&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;char&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;char&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'1'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first_power&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# give back the answer to the script&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# retrieve binary number from input as string to parse&lt;/span&gt;
    &lt;span class="n"&gt;BIN_NUM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;# pass binary number to algorithm and store the result&lt;/span&gt;
    &lt;span class="n"&gt;RESULT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bin_to_dec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BIN_NUM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# print the solution to the console&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RESULT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="decimal-to-binary"&gt;Decimal to Binary&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;Converts a decimal number to a binary number.&lt;/span&gt;
&lt;span class="sd"&gt;"""&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;dec_to_bin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""Algorithm that converts a decimal number to a binary number.&lt;/span&gt;

&lt;span class="sd"&gt;    Receives an integer and returns a string."""&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# if number is 'zero', the answer is 'zero'&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="n"&gt;remainders&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;  &lt;span class="c1"&gt;# list that stores the remainders&lt;/span&gt;

    &lt;span class="c1"&gt;# iterate over the initial given decimal and divide it by two&lt;/span&gt;
    &lt;span class="c1"&gt;# until it gets to 'zero'. At each step, add the remainder in&lt;/span&gt;
    &lt;span class="c1"&gt;# the above list&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;remainders&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;

    &lt;span class="c1"&gt;# reverse the list of remainders, as the first remainder is the&lt;/span&gt;
    &lt;span class="c1"&gt;# right most digit in the answer&lt;/span&gt;
    &lt;span class="n"&gt;remainders&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;# concatenate all the digits from the list of remainders from left&lt;/span&gt;
    &lt;span class="c1"&gt;# to right to display the final binary number&lt;/span&gt;
    &lt;span class="n"&gt;answer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;digit&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;remainders&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;answer&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;digit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# give the answer back to the script&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;answer&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# retrieve decimal number from input as integer&lt;/span&gt;
    &lt;span class="n"&gt;DEC_NUM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="c1"&gt;# pass decimal number to algorithm and store the result&lt;/span&gt;
    &lt;span class="n"&gt;RESULT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dec_to_bin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DEC_NUM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# print the solution to the console&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RESULT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="conclusion"&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;This was a very quick programming session that’s been useful
to make new concepts stick. The best learning strategies are
to &lt;em&gt;test yourself&lt;/em&gt; constantly in any way possible and to
&lt;em&gt;teach clearly what you know&lt;/em&gt;, which is what I tried to do
in the end. By the way, I found the course &lt;a href="https://www.coursera.org/learn/learning-how-to-learn/"&gt;Learning How to
Learn&lt;/a&gt; on
Coursera to be quite satisfying and I would invite you to have a look if
that’s a topic you’re interested in!&lt;/p&gt;</content><category term="automation"></category><category term="computer science"></category><category term="mathematics"></category><category term="python"></category><category term="script"></category></entry><entry><title>Surfing with qutebrowser — a Keyboard-Driven Web Browser</title><link href="https://www.sglavoie.com/posts/2019/02/11/surfing-with-qutebrowser-a-keyboard-driven-web-browser/" rel="alternate"></link><published>2019-02-11T14:46:00-06:00</published><updated>2019-02-11T14:46:00-06:00</updated><author><name>Sébastien Lavoie</name></author><id>tag:www.sglavoie.com,2019-02-11:/posts/2019/02/11/surfing-with-qutebrowser-a-keyboard-driven-web-browser/</id><summary type="html">&lt;p&gt;I recently started using this software as my main web browser and, as a Vim (Neovim) user, I must say I am finding the adventure quite&amp;nbsp;compelling!&lt;/p&gt;</summary><content type="html">
&lt;hr/&gt;
&lt;h2 id="what-is-qutebrowser"&gt;What is qutebrowser?&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://qutebrowser.org/"&gt;qutebrowser&lt;/a&gt; is a web browser that makes
great use of &lt;strong&gt;Vim&lt;/strong&gt; commands to navigate. From its website:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;qutebrowser is a keyboard-focused browser with a minimal &lt;span class="caps"&gt;GUI&lt;/span&gt;. It’s
based on Python and PyQt5 and free software, licensed under the &lt;span class="caps"&gt;GPL&lt;/span&gt;.
It was inspired by other browsers/addons like dwb and Vimperator/Pentadactyl.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr/&gt;
&lt;h3 id="why-use-it"&gt;Why use it?&lt;/h3&gt;
&lt;h4 id="perfect-companion-to-any-vim-user"&gt;Perfect companion to any Vim user&lt;/h4&gt;
&lt;p&gt;The first notable feature of &lt;strong&gt;qutebrowser&lt;/strong&gt; is obviously how well
the use of keyboard shortcuts is integrated with the experience of
using the software (there is a useful key binding cheatsheet on the
&lt;a href="https://qutebrowser.org/"&gt;homepage&lt;/a&gt;). Search bindings (&lt;code&gt;/&lt;/code&gt;, &lt;code&gt;n&lt;/code&gt;/&lt;code&gt;N&lt;/code&gt;,
&lt;code&gt;?&lt;/code&gt;), visual mode (&lt;code&gt;v&lt;/code&gt;), tabs (&lt;code&gt;gt&lt;/code&gt;, &lt;code&gt;T&lt;/code&gt;), copy (&lt;code&gt;yy&lt;/code&gt;), open URLs
(&lt;code&gt;o&lt;/code&gt;/&lt;code&gt;O&lt;/code&gt;), &lt;code&gt;J&lt;/code&gt; and &lt;code&gt;K&lt;/code&gt; for switching tabs, etc. Many key bindings will
look familiar to Vim users.&lt;/p&gt;
&lt;p&gt;It even features a &lt;em&gt;command mode&lt;/em&gt;, accessible by typing &lt;code&gt;:&lt;/code&gt;, just like
with Vim. Settings can be set from there directly, help can be accessed
by typing &lt;code&gt;:help [command/setting]&lt;/code&gt;, the configuration file can be
customized on the fly, the position and size of tabs can be set in many
ways, history and settings page can be accessed and navigated through
like any other page (&lt;code&gt;hjkl&lt;/code&gt;, &lt;code&gt;Ctrl + d&lt;/code&gt;, &lt;code&gt;Ctrl + u&lt;/code&gt;, &lt;code&gt;gg&lt;/code&gt;, &lt;code&gt;G&lt;/code&gt;), etc.&lt;/p&gt;
&lt;p&gt;Even though it is based on Python which is a “&lt;em&gt;slow&lt;/em&gt;” language, most of
the libraries and the web engine rely on C++ and the end result is a
fast and powerful browser that’s totally customizable… Not unlike Vim.&lt;/p&gt;
&lt;h4 id="minimal-interface-more-space"&gt;Minimal interface ⇒ more space&lt;/h4&gt;
&lt;p&gt;Until I upgrade my laptop to a larger screen (≥ 17 inches), my
current setup with its 15 diagonal inches benefits tremendously
from configuring all applications to use pixels as efficiently as
possible — which is why I now use exclusively &lt;a href="/posts/2019/01/08/using-i3-as-a-window-manager-for-increased-pr
oductivity/"&gt;i3 as a window
manager&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;qutebrowser&lt;/strong&gt; doesn’t even have a menu bar. By default, it only
displays a small tab bar at the top (which can be moved to another
side or removed) and a thin status bar at the bottom to see the &lt;span class="caps"&gt;URL&lt;/span&gt;,
the current position in the page expressed in percentage, the number
assigned to the current tab, etc. There is also a fullscreen mode
available like in most other web browsers with the key &lt;code&gt;F11&lt;/code&gt;, which will
remove any window decoration and leave you in a (possibly) productive mode.&lt;/p&gt;
&lt;h4 id="history-bookmarks-and-quickmarks"&gt;History, bookmarks and quickmarks&lt;/h4&gt;
&lt;p&gt;The history page (&lt;code&gt;:history&lt;/code&gt;), while being minimal like all the rest,
loads extremely fast and is a joy to navigate. The bookmarks page (&lt;code&gt;Sb&lt;/code&gt;)
is equally simple yet useful. The way I like to open a bookmark is in
a new tab by typing &lt;code&gt;gB&lt;/code&gt; (&lt;strong&gt;g&lt;/strong&gt;o &lt;strong&gt;b&lt;/strong&gt;ookmark as a mnemonic. Note that
usually all uppercase letters open or do some action in a new space,
such as a window or a tab).&lt;/p&gt;
&lt;p&gt;Where &lt;strong&gt;qutebrowser&lt;/strong&gt; shines in my opinion is with quickmarks. This is
a simple but genius way to find what you are looking for: you type &lt;code&gt;b&lt;/code&gt;
(or &lt;code&gt;B&lt;/code&gt; for new tab) to open a list of pages that are defined with a
keyword, you type that keyword (or can type anything to search for a
page), move around with arrow keys if necessary to select a page, type
&lt;code&gt;Enter&lt;/code&gt; and there you go. As far as I know, Google Chrome doesn’t offer
the equivalent (only keywords for search engines). Firefox allows to add
keywords for any bookmark that you have, but there is no good way to
search around for keywords, define them quickly, remove them quickly,
etc. &lt;strong&gt;qutebrowser&lt;/strong&gt; comes with a set of commands that serve just this
purpose (&lt;code&gt;:quickmark-add&lt;/code&gt;, &lt;code&gt;quickmark-del&lt;/code&gt;, etc.), apart from adding
them very quickly by typing &lt;code&gt;m&lt;/code&gt; for quickmarks and &lt;code&gt;M&lt;/code&gt; for bookmarks.&lt;/p&gt;
&lt;h4 id="hinting-system"&gt;Hinting system&lt;/h4&gt;
&lt;p&gt;You may have tried extensions for other web browsers such as Vimium,
Vimperator, or Vimium-&lt;span class="caps"&gt;FF&lt;/span&gt; that let you navigate with Vim shortcuts. They
usually use the letter &lt;code&gt;f&lt;/code&gt; for &lt;strong&gt;f&lt;/strong&gt;ollowing links. Some text appear on
the screen for each visible link and you type the letters that match the
link you want to see. The best way to get how it works is just to try it
out, really.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.sglavoie.com/images/posts/0007_surfing-with-qutebrowser/qutebrowser_hints.png"&gt;&lt;img alt="qutebrowser-hints" class="max-size-img-post" src="https://www.sglavoie.com/images/posts/0007_surfing-with-qutebrowser/qutebrowser_hints.png"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Well, &lt;strong&gt;qutebrowser&lt;/strong&gt; takes those features and make them even greater!
There is, for example, a &lt;em&gt;rapid hinting mode&lt;/em&gt; you can access by typing
&lt;code&gt;f&lt;/code&gt; followed by &lt;code&gt;Ctrl + r&lt;/code&gt; and it will open links in the background
for as long as you type any matching &lt;em&gt;hint&lt;/em&gt; provided as a letter or
combination of two letters when there are many visible links on the
page. This is especially useful when doing some research to avoid
breaking the rhythm on the current reading while preparing more
resources to be available.&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="whats-the-best-place-to-start-learning-about-it"&gt;What’s the best place to start learning about it?&lt;/h3&gt;
&lt;p&gt;The &lt;a href="https://qutebrowser.org/doc/help/"&gt;help page&lt;/a&gt; on the website
contains all the information you really need. I did stumble upon the
following resources, which I would recommend to read in order of appearance:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://qutebrowser.org/doc/quickstart.html"&gt;Quickstart Guide&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/qutebrowser/qutebrowser/ma
   ster/doc/img/cheatsheet-big.png"&gt;Key bindings
   cheatsheet&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qutebrowser.org/doc/faq.html"&gt;&lt;span class="caps"&gt;FAQ&lt;/span&gt;&lt;/a&gt;, which is interesting
   but not indispensable. It did help me take a step forward in trying out
   &lt;strong&gt;qutebrowser&lt;/strong&gt; though.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Open inside qutebrowser&lt;/em&gt;: &lt;a href="qute://help/settings.html#bindings.default"&gt;default
   keybindings&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Open inside qutebrowser&lt;/em&gt;: &lt;a href="qute://settings/"&gt;settings page&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qutebrowser.org/doc/help/commands.html"&gt;List of commands&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;hr/&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;qutebrowser&lt;/strong&gt; has been around for a while and is very stable. It is
ideal for any Vim user and is a great option for anyone interested in
efficiency and/or in trying out alternatives. Because I am very fond
of relying on the keyboard as much as possible and because I love to
program in Python, I have grown to like this web browser very quickly.
This is clearly a tool designed for a specific type of user in mind and
who knows, you might be one of those.&lt;/p&gt;</content><category term="tools"></category><category term="productivity"></category><category term="software"></category><category term="web"></category></entry><entry><title>Using Embedded Terminals Inside Neovim</title><link href="https://www.sglavoie.com/posts/2019/01/16/using-embedded-terminals-inside-neovim/" rel="alternate"></link><published>2019-01-16T17:32:00-06:00</published><updated>2019-01-16T17:32:00-06:00</updated><author><name>Sébastien Lavoie</name></author><id>tag:www.sglavoie.com,2019-01-16:/posts/2019/01/16/using-embedded-terminals-inside-neovim/</id><summary type="html">&lt;p&gt;Because every pixel counts, this neat trick will allow to use terminals inside Neovim and maximize the screen estate for a flawless integration with one of the best text editor&amp;nbsp;available.&lt;/p&gt;</summary><content type="html">
&lt;hr/&gt;
&lt;h2 id="terminals-neovim"&gt;Terminals &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; Neovim&lt;/h2&gt;
&lt;p&gt;Terminal buffers are a built-in feature of &lt;code&gt;Neovim&lt;/code&gt;. This means that
terminals can be launched inside Neovim just like any other buffer, may
it be a split window, a new tab or an independent buffer. Why is this so
useful? Be prepared to be amazed.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.sglavoie.com/images/posts/0006_using-embedded-terminals-inside-neovim/work_on_article.png"&gt;&lt;img alt="embedded-terminal" class="max-size-img-post" src="https://www.sglavoie.com/images/posts/0006_using-embedded-terminals-inside-neovim/work_on_article.png"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.sglavoie.com/images/posts/0006_using-embedded-terminals-inside-neovim/terminal_buffers.png"&gt;&lt;img alt="terminal-buffers" class="max-size-img-post" src="https://www.sglavoie.com/images/posts/0006_using-embedded-terminals-inside-neovim/terminal_buffers.png"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;(click to open)&lt;/p&gt;
&lt;h3 id="seamless-integration-with-vim-commands"&gt;Seamless integration with Vim commands&lt;/h3&gt;
&lt;p&gt;For a start, terminals are not just &lt;em&gt;opened&lt;/em&gt; inside Neovim: they are
truly integrated. When you type the letter &lt;code&gt;i&lt;/code&gt; in a terminal buffer,
it switches to a new mode, &lt;code&gt;Terminal&lt;/code&gt;, where you have access to all
underlying features of a regular Bash terminal, such as &lt;code&gt;CTRL + r&lt;/code&gt;
to search, tab completion of commands, &lt;code&gt;CTRL + w&lt;/code&gt; to delete a word
backwards or &lt;code&gt;CTRL + u&lt;/code&gt; to delete the whole line backwards.&lt;/p&gt;
&lt;p&gt;When you escape the &lt;code&gt;Terminal&lt;/code&gt; mode, you switch back to &lt;code&gt;Normal&lt;/code&gt; mode,
where all Vim commands are available as usual, such as navigation,
search, etc. Where this gets interesting is when you consider that the
terminal is just like any other buffer (except it’s not &lt;em&gt;modifiable&lt;/em&gt;)
and so you can for instance copy its content or paste into it from
different registers. You can split them, view the line number, get
automatic scrolling when output appears in &lt;code&gt;Insert&lt;/code&gt; mode, you can switch
back to &lt;code&gt;Normal&lt;/code&gt; mode at any time even if a command hasn’t completed…
and of course all commands like &lt;code&gt;gt&lt;/code&gt; to &lt;strong&gt;g&lt;/strong&gt;o to another &lt;strong&gt;t&lt;/strong&gt;ab work
as always.&lt;/p&gt;
&lt;h3 id="terminals-get-supercharged-with-the-power-of-vim"&gt;Terminals get supercharged with the power of Vim&lt;/h3&gt;
&lt;p&gt;This is getting exciting (at least for me). Now, having a terminal with
more power is useful in many cases:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A whole terminal session can be saved to another file easily by
  copying the desired range (&lt;code&gt;:%y&lt;/code&gt; to copy everything, for example).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Instead of having to scroll with the mouse, all Vim commands are
  available to search and navigate through the buffer: &lt;code&gt;gg&lt;/code&gt; to go to the
  beginning of the session, &lt;code&gt;G&lt;/code&gt; to go to the end, &lt;code&gt;12G&lt;/code&gt; to go to line
  number &lt;strong&gt;12&lt;/strong&gt;, &lt;code&gt;/&lt;/code&gt; or &lt;code&gt;?&lt;/code&gt; to search forward and backward respectively.
  You can even set local or global marks to jump back and forth to precise
  lines consistently!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It’s even possible to send commands directly to a specific
  terminal or set up a &lt;span class="caps"&gt;REPL&lt;/span&gt; to execute any code, either a
  selection, a line or a range of lines. I don’t personally
  use that feature yet, but I see how useful that can be and
  you can too if you watch this &lt;a href="https://thoughtbot.com/upcase/videos/neovim-sending-commands-to-a-
  terminal-buffer"&gt;screencast presented by Drew
  Neil&lt;/a&gt; on
  &lt;a href="https://thoughtbot.com"&gt;thoughtbot.com&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If the terminal is opened in &lt;code&gt;Normal&lt;/code&gt; mode, the cursor and the current
  position are kept intact even though new output could appear, such as
  would be the case if you are running a server in the background or
  waiting for a system update to finish. This is especially nice for
  instance if you are trying to debug a web application: you can leave the
  cursor exactly where you would like to keep reading the output and never
  get lost… Plus you have the ability to easily move around, search and
  copy like a ninja!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="the-workflow-is-more-compact-and-centralized"&gt;The workflow is more compact and centralized&lt;/h3&gt;
&lt;p&gt;Because the terminals are running with one Neovim instance, you get
everything in the same place, which is usually how you need to access
your work anyway. If for some reasons you need to have multiple
instances of Neovim running, this is possible too and in that situation
you could simply split them into different workspaces.&lt;/p&gt;
&lt;p&gt;Because everything is launched with Neovim, every terminal left open
will also be exited when you close Neovim, shutting down any server
or quitting any background interaction going on in the terminals. I
have found that this behaviour is what I expect pretty much all the
time because the idea of having a terminal inside a working session
of Neovim is to work on something related, so it makes sense to close
everything that’s to do with a single project or task when you exit the
text editor. No need for &lt;code&gt;CTRL + d&lt;/code&gt; or &lt;code&gt;exit&lt;/code&gt; anymore!&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="terminal-settings-to-consider"&gt;Terminal settings to consider&lt;/h2&gt;
&lt;p&gt;I don’t use many settings or mappings related to terminals, but I guess
the nicest one is to remap the &lt;code&gt;Escape&lt;/code&gt; key because by default, this is
a weird mapping that leads to twisted fingers (&lt;code&gt;&amp;lt;C-\&amp;gt;&amp;lt;C-n&amp;gt;&lt;/code&gt;). Here is
what I currently have in my &lt;code&gt;init.vim&lt;/code&gt; file (the equivalent of &lt;code&gt;.vimrc&lt;/code&gt;
for Neovim):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;set&lt;/span&gt; termguicolors  &lt;span class="c"&gt;" Make colors look better in terminal&lt;/span&gt;

&lt;span class="c"&gt;" Exit from terminal buffer (Neovim) more easily (remaps Esc key in&lt;/span&gt;
&lt;span class="c"&gt;" terminal)&lt;/span&gt;
tnoremap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;[&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;\&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;n&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;" Open terminal buffer (M stands for the Alt key)&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;M&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;t&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; :&lt;span class="k"&gt;te&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;" Switch to terminal buffer automatically (when only one terminal is&lt;/span&gt;
&lt;span class="c"&gt;" open)&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;M&lt;span class="m"&gt;-0&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; :&lt;span class="k"&gt;b&lt;/span&gt; &lt;span class="nb"&gt;term&lt;/span&gt;:&lt;span class="sr"&gt;//&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;" Move between windows exactly the same way as usual&lt;/span&gt;
tnoremap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;j&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;k&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;\&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;N&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
tnoremap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;h&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;\&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;N&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;w&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;h&lt;/span&gt;
tnoremap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;j&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;\&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;N&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;w&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;j&lt;/span&gt;
tnoremap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;k&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;\&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;N&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;w&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;k&lt;/span&gt;
tnoremap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;l&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;\&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;N&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;w&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;l&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This was a quick overview of a feature that I have neglected for some
time but recently realized how well it integrates with my workflow. You
can find some more information by typing &lt;code&gt;:h terminal&lt;/code&gt;. If you already
use Neovim, it’s worth giving it a try! Otherwise, it’s worth giving
&lt;a href="https://neovim.io/"&gt;Neovim&lt;/a&gt; a try.&lt;/p&gt;</content><category term="tips-and-tricks"></category><category term="neovim"></category><category term="productivity"></category><category term="terminal"></category></entry><entry><title>Using i3 as a Window Manager for Increased Productivity</title><link href="https://www.sglavoie.com/posts/2019/01/08/using-i3-as-a-window-manager-for-increased-productivity/" rel="alternate"></link><published>2019-01-08T11:12:00-06:00</published><updated>2019-02-12T11:51:00-06:00</updated><author><name>Sébastien Lavoie</name></author><id>tag:www.sglavoie.com,2019-01-08:/posts/2019/01/08/using-i3-as-a-window-manager-for-increased-productivity/</id><summary type="html">&lt;p&gt;I was striving to improve my productivity as one of my New Year&amp;#8217;s resolutions and finally found the courage to take the time to try out i3, a fantastic window&amp;nbsp;manager.&lt;/p&gt;</summary><content type="html">
&lt;hr/&gt;
&lt;h2 id="what-is-i3"&gt;What is i3?&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://i3wm.org/"&gt;i3&lt;/a&gt; is a tiling window manager. To get to know &lt;code&gt;i3&lt;/code&gt;
better, it’s good to situate what desktop environments are in the first place.&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="what-are-desktop-environments"&gt;What are desktop environments?&lt;/h3&gt;
&lt;p&gt;If you are familiar with Linux,
you certainly know about desktop environments such as
&lt;a href="https://www.gnome.org/"&gt;&lt;span class="caps"&gt;GNOME&lt;/span&gt;&lt;/a&gt;, &lt;a href="https://www.kde.org/"&gt;&lt;span class="caps"&gt;KDE&lt;/span&gt;&lt;/a&gt;,
&lt;a href="https://www.xfce.org/"&gt;Xfce&lt;/a&gt;… and actually many
more are available (you can see &lt;a href="https://en.wikipedia.org/wiki/Desktop_environment"&gt;this article on
Wikipedia&lt;/a&gt;
for an extended selection)! The classic Graphical User Interface
(&lt;span class="caps"&gt;GUI&lt;/span&gt;) on Windows &lt;span class="caps"&gt;XP&lt;/span&gt; was known as
&lt;a href="https://en.wikipedia.org/wiki/Luna_(theme)"&gt;Luna&lt;/a&gt; and is now
called Modern on Windows 10.
&lt;a href="https://en.wikipedia.org/wiki/Aqua_(user_interface)"&gt;Aqua&lt;/a&gt; is the
name of the &lt;span class="caps"&gt;GUI&lt;/span&gt; on macOS. Well, every desktop environment comes with
a window manager, the main component that makes interactions with
windows possible, like moving, resizing, minimizing or closing them.&lt;/p&gt;
&lt;p&gt;Desktop environments are very useful in many ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;They are usually very easy to set up as they come fully functional out
  of the box. Like opening a user session on macOS or Windows.&lt;/li&gt;
&lt;li&gt;They are sometimes quite customizable, but you don’t have to change
  anything to get them to work, as they normally set default applications
  to open with certain file types.&lt;/li&gt;
&lt;li&gt;They automatically integrate services such as WiFi network detection,
  automatic mounting of drives when you plug them in, etc.&lt;/li&gt;
&lt;li&gt;You can enable &lt;a href="https://en.wikipedia.org/wiki/Virtual_desktop"&gt;virtual
  desktops&lt;/a&gt;
  to split your work
  across different spaces. This concept can grow to
  &lt;em&gt;&lt;a href="https://docs.kde.org/trunk5/en/kde-workspace/plasma-deskto
  p/activities-interface.html"&gt;Activities&lt;/a&gt;&lt;/em&gt;, which is a feature implemented in &lt;span class="caps"&gt;KDE&lt;/span&gt;
  that allows you to use virtual spaces literally for different activities
  by having settings that are specific to each activity (like launching
  one application or keeping widgets in determined positions), plus the
  ability to use multiple virtual desktops inside each &lt;em&gt;activity&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;They integrate with applications that are specifically designed to
  take advantage of the desktop environment in question by adapting
  colors and themes perfectly to match the general look of the system and
  arranging settings in a common location for all applications.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h3 id="why-use-a-window-manager-like-i3"&gt;Why use a window manager like i3?&lt;/h3&gt;
&lt;p&gt;Even though desktop environments are user-friendly and include many
goodies, they do have several disadvantages that make window managers
great alternatives.&lt;/p&gt;
&lt;h4 id="less-bloated"&gt;Less bloated&lt;/h4&gt;
&lt;p&gt;Desktop environments are often bloated with many applications
that you may not need but that are nevertheless occupying system
resources as they have many dependencies. For example, if you use
&lt;a href="https://www.thunderbird.net"&gt;Thunderbird&lt;/a&gt; for managing your emails and
your desktop environment is &lt;span class="caps"&gt;GNOME&lt;/span&gt;, try to remove Evolution, the default
application for emails that comes with it… It’s still relatively easy
to disable its processes, but you sometimes have to configure files
manually to satisfy your need for removing clutter.&lt;/p&gt;
&lt;h4 id="lower-memory-and-cpu-consumption"&gt;Lower memory and &lt;span class="caps"&gt;CPU&lt;/span&gt; consumption&lt;/h4&gt;
&lt;p&gt;Other than coming with a set of default applications (more disk space),
the whole environment occupies a lot more memory to run smoothly. On
my modest laptop, I was still experiencing speed issues because the
system was occupying too much &lt;span class="caps"&gt;RAM&lt;/span&gt; when opening heavy applications (lots
of tabs when web browsing, photo editing, loading IDEs like PyCharm
for programming, etc.) and I had 4 &lt;span class="caps"&gt;GB&lt;/span&gt; of &lt;span class="caps"&gt;RAM&lt;/span&gt; installed at the time.
&lt;span class="caps"&gt;KDE&lt;/span&gt; requires at least 600 &lt;span class="caps"&gt;MB&lt;/span&gt;, same is true for &lt;span class="caps"&gt;GNOME&lt;/span&gt; in most recent
versions (but used to be over 1 &lt;span class="caps"&gt;GB&lt;/span&gt; not very long ago, just like for
&lt;span class="caps"&gt;KDE&lt;/span&gt;). Windows, for example, requires more than 1.5 &lt;span class="caps"&gt;GB&lt;/span&gt; of &lt;span class="caps"&gt;RAM&lt;/span&gt; to operate
with basic features. &lt;strong&gt;&lt;code&gt;i3&lt;/code&gt;&lt;/strong&gt; needs less than &lt;strong&gt;~15 &lt;span class="caps"&gt;MB&lt;/span&gt;&lt;/strong&gt; with as many
windows and spaces open as you would ever want. Since there are much
less processes to take care of, &lt;span class="caps"&gt;CPU&lt;/span&gt; consumption is also lower, which is
more noticeable on older machines.&lt;/p&gt;
&lt;h4 id="keyboard-efficiency"&gt;Keyboard efficiency&lt;/h4&gt;
&lt;p&gt;There are obviously ways to go about using keyboard shortcuts for pretty
much anything you want with desktop environments. However, window
managers and especially &lt;code&gt;i3&lt;/code&gt; make this a must, as there is really no
reason to use a mouse for moving windows.&lt;/p&gt;
&lt;p&gt;First of all, windows are “stuck” in place and never overlap by default.
You can’t move them around with a mouse unless they are “floating”
windows, which means you can separate them to move them around freely
like in most desktop environments. The whole point of using a window
manager like &lt;code&gt;i3&lt;/code&gt; is to maximize screen space, so every window opens
in full screen. Honestly, the only time I ever found the need to use a
floating window with &lt;code&gt;i3&lt;/code&gt; is when using the operating system Windows in
a virtual environment when connecting through &lt;span class="caps"&gt;RDP&lt;/span&gt; with Google Chrome on
Google Cloud Platform (that is, not very often). Other than that, I find
it very practical to split the screen with no overlapping windows, even
with my small 15 inches screen.&lt;/p&gt;
&lt;p&gt;Because windows are managed the way they are in &lt;code&gt;i3&lt;/code&gt;, getting split when
multiple windows are in the same workspace and never overlapping, it
nurtures the good habit of dividing workspaces appropriately to maximize
the space that each application occupies, which is done with keyboard
shortcuts. With (customizable) shortcuts, you can split windows,
move them to other workspaces, change workspaces, open applications
automatically in specific workspaces, etc. Using exclusively the
keyboard to manage the windows becomes a huge time saver, and even more
so when considering the very small footprint required to use the window
manager, making for a lightning fast experience.&lt;/p&gt;
&lt;h4 id="extremely-fast-customization"&gt;Extremely fast customization&lt;/h4&gt;
&lt;p&gt;Once you get past the initial lack of visual appeal and weird way to
move around, you can actually customize many aspects of &lt;code&gt;i3&lt;/code&gt;, including
fonts, mouse bindings, window border decorations, colors, automatic
execution of apps when initiating a session, etc.&lt;/p&gt;
&lt;p&gt;Why is it so fast to customize? Because the configuration is all
contained in one simple text file and you can make a change and reload
the window manager on the fly to see your changes being reflected.
Setting the number of workspaces is as easy as adding or removing a line
(well, as a bare minimum, otherwise it’s useful to also bind certain
keyboard shortcuts to move to those newly created workspaces). Setting a
wallpaper is one line, setting a screen lock is another one. Quick and efficient.&lt;/p&gt;
&lt;h4 id="easy-to-switch-layouts-and-focus"&gt;Easy to switch layouts and focus&lt;/h4&gt;
&lt;p&gt;I actually enjoy the default layout quite a lot, in which there exists
no overlap between windows (they split as needed) and all windows are
visible at the same time in each workspace. If you need to make more
space for a window, you can either “focus” on the current window, which
will make it full screen and cover every pixel of the screen, or you
can move particular windows to other workspaces. This last option will
automatically resize windows so that they occupy the maximum space available.&lt;/p&gt;
&lt;p&gt;Besides the default layout, you can also &lt;em&gt;stack&lt;/em&gt; and &lt;em&gt;tab&lt;/em&gt; windows,
depending on how you like to work (it is well worth having a look at the
&lt;a href="https://i3wm.org/docs/userguide.html"&gt;i3 user’s guide&lt;/a&gt; to see the many
other features available). Personally, I prefer seeing everything at
once and dividing my work into many workspaces. If you are curious, here
is how I currently have my workspaces set up:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Programming&lt;/strong&gt; — Exclusively for programming purposes.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Terminals&lt;/strong&gt; — For working in the terminal, opening another
   instance of a terminal text editor, etc.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Web&lt;/strong&gt; — Just for Internet. Always full screen unless I open
   some website that requires to open new windows (like banking), which
   conveniently split the windows. The web browser automatically launches
   in the background when opening a session in &lt;code&gt;i3&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Multimedia&lt;/strong&gt; — Editing photos or watching videos.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Music&lt;/strong&gt; — &lt;a href="https://github.com/arybczak/ncmpcpp"&gt;ncmpcpp&lt;/a&gt;
   (terminal music player) automatically launches in the background when
   opening a session.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Experiments&lt;/strong&gt; — I use this workspace when trying to understand
   some programming concepts with an interactive IPython console or for
   breaking the system in one way or another because I don’t know what I’m doing.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Fix&lt;/strong&gt; — After realizing that sometimes experiments need to be
   cleaned up a bit, I now use this workspace exclusively to run tools
   in the background, such as &lt;a href="https://www.bleachbit.org"&gt;BleachBit&lt;/a&gt; for
   cleaning files or &lt;a href="https://nicolargo.github.io/glances/"&gt;glances&lt;/a&gt;
   (similar to the &lt;code&gt;top&lt;/code&gt; command) for watching how the system is doing.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Words&lt;/strong&gt; — I use that workspace for reading e-books
   or for writing, either in &lt;a href="https://neovim.io/"&gt;Neovim&lt;/a&gt; or
   &lt;a href="https://www.libreoffice.org/"&gt;LibreOffice&lt;/a&gt; depending on the task.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tools&lt;/strong&gt; — This workspace is reserved for anything that I
   might want to have access to once in a while, like a calendar or
   &lt;a href="https://keepassxc.org/"&gt;KeepassXC&lt;/a&gt; for accessing a password database.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;sg&lt;/strong&gt; — I mainly use that workspace to update this very
    website, but I also use it for setting up local web servers for
    making personal projects in &lt;a href="http://flask.pocoo.org/"&gt;Flask&lt;/a&gt; and
    &lt;a href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt; or even just a temporary server
    with &lt;code&gt;python -m http.server&lt;/code&gt; to share files with other devices on the
    local network.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Only workspaces that contain windows will appear on the screen at any
given time and are automatically created when you access and use them.&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="what-does-it-look-like-in-action"&gt;What does it look like in action?&lt;/h2&gt;
&lt;p&gt;Here is a screenshot* of the workspace where this article is being
written (click to open):&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.sglavoie.com/images/posts/0005_using-i3-as-window-manager-for-increased-productivity/i3-example.png"&gt;&lt;img alt="i3-example" class="max-size-img-post" src="https://www.sglavoie.com/images/posts/0005_using-i3-as-window-manager-for-increased-productivity/i3-example.png"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;* &lt;sub&gt;In this particular scenario, the splits on the right side are
intentionally very small as I do not need to read the output, but need
quick access to a terminal to enter commands. Moving back and forth
between windows is a breeze, so that’s how I currently handle the
situation.&lt;/sub&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: With &lt;code&gt;Neovim&lt;/code&gt;, &lt;a href="/posts/2019/01/16/using-embedded-terminals-inside-neovim/"&gt;there is an embedded
terminal&lt;/a&gt;,
which makes things very easy to handle by avoiding splits altogether.
In that case, it is also possible to divide a workflow with tabs inside
&lt;code&gt;Neovim&lt;/code&gt; instead of physically splitting windows.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Alternatively&lt;/strong&gt;, instead of splitting windows, a more convenient
solution on smaller screens might be to use &lt;strong&gt;stacking&lt;/strong&gt; windows with
the shortcut &lt;code&gt;$mod + s&lt;/code&gt; in each workspace or, to provide that behavior
by default, the following can be added to i3’s configuration file
(defaults in &lt;code&gt;~/.config/i3/config&lt;/code&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Set default container layout&lt;/span&gt;
workspace_layout&lt;span class="w"&gt; &lt;/span&gt;stacking
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I am not trying to convince myself anymore: I really prefer this
workflow! If you are looking for a
change and would like to maximize both your productivity and your system
resources, &lt;code&gt;i3&lt;/code&gt; is a great window manager to consider. It doesn’t seem
very intuitive at first, but I swear it quickly becomes easy to use and
you also end up learning more about how Linux works and set things up
manually (just once!) to your likings. For example, I use Rofi instead
of dmenu to have a window pop-up to select applications or switch to
any window on any workspace… which was only one line to modify in the
configuration file.&lt;/p&gt;
&lt;p&gt;I have found the following screencasts on YouTube to be quite useful in
learning how to configure &lt;code&gt;i3&lt;/code&gt; (apart from the official documentation
which is very comprehensive):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=j1I63wGcvU4"&gt;i3wm: Jump Start (1/3)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=8-S0cWnLBKg"&gt;i3wm: Configuration (2/3)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=ARKIwOlazKI"&gt;i3wm: How To “Rice” Your Desktop (3/3)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="workflow"></category><category term="i3"></category><category term="linux"></category><category term="productivity"></category><category term="window-manager"></category></entry><entry><title>Bash History Cleaner</title><link href="https://www.sglavoie.com/posts/2018/12/23/bash-history-cleaner/" rel="alternate"></link><published>2018-12-23T19:35:00-06:00</published><updated>2019-01-06T14:37:00-06:00</updated><author><name>Sébastien Lavoie</name></author><id>tag:www.sglavoie.com,2018-12-23:/posts/2018/12/23/bash-history-cleaner/</id><summary type="html">&lt;p&gt;If you ever wanted to automatically clean your Bash history file, here is a working solution written in Python that uses regular expressions to set any kind of pattern you might be looking&amp;nbsp;for.&lt;/p&gt;</summary><content type="html">
&lt;hr/&gt;
&lt;h1 id="introduction"&gt;Introduction&lt;/h1&gt;
&lt;p&gt;This is a Python 3.6+ script that helps to clean the file containing
the Bash history commands. It will remove any line matching a specified
regular expression and can also remove any line starting with an alias.&lt;/p&gt;
&lt;p&gt;The idea behind this small utility was simple:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The Bash history file (usually located in &lt;code&gt;~/.bash_history&lt;/code&gt;) contains
  much of the work one ends up doing in the terminal.&lt;/li&gt;
&lt;li&gt;The history can grow large over time and it becomes more cumbersome to
  find interesting information in all that clutter, such as a rarely used
  command with specific flags.&lt;/li&gt;
&lt;li&gt;By removing all superfluous commands that are repeated often and which
  give no real benefit in certain contexts (such as &lt;code&gt;ls&lt;/code&gt;, &lt;code&gt;cd&lt;/code&gt;, &lt;code&gt;cat&lt;/code&gt;,
  etc.), the history is much cleaner and easier to navigate and actually
  becomes much more useful in my opinion.&lt;/li&gt;
&lt;li&gt;True, it will be harder to follow the bread crumbs for everything
  you did, but I haven’t come across a situation where having access
  to yet another empty &lt;code&gt;ls&lt;/code&gt; or &lt;code&gt;cd&lt;/code&gt; has proven necessary and reading
  &lt;code&gt;.bash_history&lt;/code&gt; doesn’t make for a great narrative story either.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h1 id="make-history-in-a-big-way"&gt;Make history in a big way&lt;/h1&gt;
&lt;p&gt;I took advantage of the fact that the history can be cleaned with the
script you are about to see and set up what is known as an &lt;em&gt;eternal
history&lt;/em&gt; which, as it sounds like, can grow infinitely big! All you have
to do is append the following lines to the file &lt;code&gt;~/.bashrc&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Eternal bash history.&lt;/span&gt;
&lt;span class="c1"&gt;# ---------------------&lt;/span&gt;
&lt;span class="c1"&gt;# Undocumented feature which sets the size to "unlimited".&lt;/span&gt;
&lt;span class="c1"&gt;# http://stackoverflow.com/questions/9457233/unlimited-bash-history&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;HISTFILESIZE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;-1
&lt;span class="nb"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;HISTSIZE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;-1
&lt;span class="nb"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;HISTTIMEFORMAT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"[%F %T] "&lt;/span&gt;
&lt;span class="c1"&gt;# Change the file location because certain bash sessions truncate&lt;/span&gt;
&lt;span class="c1"&gt;# .bash_history file upon close.&lt;/span&gt;
&lt;span class="c1"&gt;# http://superuser.com/questions/575479/bash-history-truncated-to-500-lines-on-each-login&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;HISTFILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;~/.bash_eternal_history
&lt;span class="c1"&gt;# Force prompt to write history after every command.&lt;/span&gt;
&lt;span class="c1"&gt;# http://superuser.com/questions/20900/bash-history-loss&lt;/span&gt;
&lt;span class="nv"&gt;PROMPT_COMMAND&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"history -a; &lt;/span&gt;&lt;span class="nv"&gt;$PROMPT_COMMAND&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h1 id="bash-history-cleaner"&gt;Bash History Cleaner&lt;/h1&gt;
&lt;p&gt;And here is the script in question *. It comes in two files that need to be in the same directory:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;One is a Python file that needs to be launched from the terminal with
  Python 3.&lt;/li&gt;
&lt;li&gt;The other file, &lt;code&gt;settings.json&lt;/code&gt;, is a &lt;span class="caps"&gt;JSON&lt;/span&gt; file used to store the
  settings of the script, which will be detailed below.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;* &lt;sub&gt;Improvements to the original script can be found on &lt;a href="https://github.com/sglavoie/python-utilities/tree/main/bash_history_cleaner"&gt;Github&lt;/a&gt;. To keep this
article a bit more readable, the original version is shown.&lt;/sub&gt;&lt;/p&gt;
&lt;h2 id="bash_history_cleanerpy"&gt;&lt;code&gt;bash_history_cleaner.py&lt;/code&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="sd"&gt;'''&lt;/span&gt;
&lt;span class="sd"&gt;Python script that helps to clean the file containing the Bash history&lt;/span&gt;
&lt;span class="sd"&gt;commands.&lt;/span&gt;

&lt;span class="sd"&gt;Note: Requires Python 3.6+&lt;/span&gt;

&lt;span class="sd"&gt;It will remove any line matching a specified regular expression and can&lt;/span&gt;
&lt;span class="sd"&gt;also remove any line starting with an alias.&lt;/span&gt;

&lt;span class="sd"&gt;Description of available settings in `settings.json`:&lt;/span&gt;

&lt;span class="sd"&gt;    "home_directory":   Absolute path to user's home directory.&lt;/span&gt;

&lt;span class="sd"&gt;    "history_file":     Name of file where the history will be cleaned up.&lt;/span&gt;

&lt;span class="sd"&gt;    "aliases_file":     Name of file where Bash aliases are set up.&lt;/span&gt;

&lt;span class="sd"&gt;    "ignore_patterns":  List of patterns to ignore in `history_file`.&lt;/span&gt;
&lt;span class="sd"&gt;                        Each line where a pattern is found will be deleted.&lt;/span&gt;
&lt;span class="sd"&gt;                            → Patterns are specified as regular expressions.&lt;/span&gt;

&lt;span class="sd"&gt;    "add_aliases":      Boolean. If set to `true`, aliases from `aliases_file`&lt;/span&gt;
&lt;span class="sd"&gt;                        will be added to `ignore_patterns`.&lt;/span&gt;

&lt;span class="sd"&gt;    "aliases_match_greedily":&lt;/span&gt;
&lt;span class="sd"&gt;                        Boolean. If set to `true`, any line in `history_file`&lt;/span&gt;
&lt;span class="sd"&gt;                        starting with an alias in `aliases_file` will be&lt;/span&gt;
&lt;span class="sd"&gt;                        deleted. If set to `false`, delete line if the alias is&lt;/span&gt;
&lt;span class="sd"&gt;                        the content of the whole line (with optional space at&lt;/span&gt;
&lt;span class="sd"&gt;                        the end): `false` matches "^alias$" or "^alias $" only.&lt;/span&gt;

&lt;span class="sd"&gt;    "backup_history":   Boolean. If set to `true`, `history_file` will be backed&lt;/span&gt;
&lt;span class="sd"&gt;                        up in the same directory with a name ending in .bak&lt;/span&gt;
&lt;span class="sd"&gt;                        based on the current date.&lt;/span&gt;

&lt;span class="sd"&gt;    "delete_logs_without_confirming":&lt;/span&gt;
&lt;span class="sd"&gt;                        Boolean. If set to `true`, script with flag `-c` will&lt;/span&gt;
&lt;span class="sd"&gt;                        automatically delete all the backup files found for&lt;/span&gt;
&lt;span class="sd"&gt;                        `history_file`.&lt;/span&gt;
&lt;span class="sd"&gt;'''&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pathlib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;argparse&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;fileinput&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;glob&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_current_path&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;'''Returns the current working directory relative to where this script&lt;/span&gt;
&lt;span class="sd"&gt;    is being executed.'''&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parents&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;user_says_yes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;'''Check if user input is either 'y' or 'n'. Returns a boolean.'''&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;choice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;choice&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'y'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;choice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;choice&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'n'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;choice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Please enter either 'y' or 'n'."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;choice&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;delete_logs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;history_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;'''Delete log files in `home_directory` based on `history_file`.'''&lt;/span&gt;

    &lt;span class="c1"&gt;# Retrieve a list of all matching log files&lt;/span&gt;
    &lt;span class="n"&gt;log_files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;glob&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;glob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;history_file&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;_*.bak'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;log_files&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;[]:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"There is no log file to delete."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;'Log files found in &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"home_directory"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;:'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;log_file&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;log_files&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;log_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'delete_logs_without_confirming'&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;log_file&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;log_files&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;log_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Log files deleted.'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;

        &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;Do you want to delete those log files? [y/n] "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;user_says_yes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;log_file&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;log_files&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;log_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Log files deleted.'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;

    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Operation aborted.'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;generate_date_string&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;'''Return date formatted string to backup a file.'''&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s1"&gt;'_%Y%m&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt;_%H%M%S.bak'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;load_settings&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;'''Load settings in the script. Return them as a dictionary.'''&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"r"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;read_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;settings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;read_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_list_aliases&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bash_aliases_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;'''Retrieve the name of all the aliases specified in `bash_aliases_file`.&lt;/span&gt;

&lt;span class="sd"&gt;    Return aliases as a list of strings formatted as regular expressions.'''&lt;/span&gt;

    &lt;span class="n"&gt;match_whole_line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'aliases_match_greedily'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bash_aliases_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;splitlines&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# one alias per line&lt;/span&gt;
        &lt;span class="n"&gt;aliases_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="c1"&gt;# Get the actual alias in each line&lt;/span&gt;
                &lt;span class="c1"&gt;# Use negative lookbehind to remove 'alias ' at the beginning.&lt;/span&gt;
                &lt;span class="c1"&gt;# Matches anything after that is a dot, digit, underscore&lt;/span&gt;
                &lt;span class="c1"&gt;# or letter (will stop at the equal sign: alias blah='...')&lt;/span&gt;
                &lt;span class="n"&gt;alias&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;'(?&amp;lt;!not )alias ([\.\w]*)'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="c1"&gt;# If for some reason the alias cannot be extracted, skip it&lt;/span&gt;
            &lt;span class="c1"&gt;# If search doesn't match, it's of type None and won't work&lt;/span&gt;
            &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;AttributeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;continue&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;match_whole_line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="c1"&gt;# Match the whole line if it starts with the alias.&lt;/span&gt;
                &lt;span class="n"&gt;alias&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;'^&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;alias&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;( )?$|^&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;alias&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt; .*'&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="c1"&gt;# Will match only when alias is the whole content of the line,&lt;/span&gt;
                &lt;span class="c1"&gt;# followed by optional space.&lt;/span&gt;
                &lt;span class="n"&gt;alias&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;'^&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;alias&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;( )?$'&lt;/span&gt;

            &lt;span class="c1"&gt;# Escape dots in alias&lt;/span&gt;
            &lt;span class="n"&gt;alias&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;alias&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;maketrans&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s2"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s2"&gt;"\."&lt;/span&gt;&lt;span class="p"&gt;}))&lt;/span&gt;

            &lt;span class="n"&gt;aliases_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;alias&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;aliases_list&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;clean_bash_history&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;history_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;'''Modify in place `history_file` by removing every line where&lt;/span&gt;
&lt;span class="sd"&gt;    `ignore_patterns` is found.&lt;/span&gt;

&lt;span class="sd"&gt;    Optionally, add a list of aliases to `ignore_patterns` with&lt;/span&gt;
&lt;span class="sd"&gt;    `aliases` based on the value of `add_aliases` in settings.json.'''&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'backup_history'&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
        &lt;span class="n"&gt;backup_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;generate_date_string&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;file_input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fileinput&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FileInput&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;history_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                         &lt;span class="n"&gt;inplace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                         &lt;span class="n"&gt;backup&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;backup_str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;file_input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fileinput&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FileInput&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;history_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                         &lt;span class="n"&gt;inplace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;file_input&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;has_match&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'ignore_patterns'&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
                &lt;span class="n"&gt;matched&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;matched&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                    &lt;span class="n"&gt;has_match&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt;
            &lt;span class="c1"&gt;# If no match is found (nothing to ignore), print the line&lt;/span&gt;
            &lt;span class="c1"&gt;# back into the file. Otherwise, it will be empty.&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;has_match&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Line already has carriage return&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;launch_cleanup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;history_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;aliases_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;'''Main function that launches the cleanup process.'''&lt;/span&gt;

    &lt;span class="n"&gt;bash_aliases&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'add_aliases'&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;bash_aliases&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_list_aliases&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;aliases_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="c1"&gt;# add aliases to list of patterns to ignore&lt;/span&gt;
            &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'ignore_patterns'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bash_aliases&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;FileNotFoundError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"File not found: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;aliases_file&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;quit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;clean_bash_history&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;history_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;FileNotFoundError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"File not found: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;history_file&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;SETTINGS_FILE_PATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_current_path&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="s1"&gt;'settings.json'&lt;/span&gt;
    &lt;span class="n"&gt;SETTINGS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;load_settings&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SETTINGS_FILE_PATH&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ALIASES_FILE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SETTINGS&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'home_directory'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;'/'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;SETTINGS&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'aliases_file'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;HISTORY_FILE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SETTINGS&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'home_directory'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;'/'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;SETTINGS&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'history_file'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="c1"&gt;# initiate the parser to check all the arguments passed to the script&lt;/span&gt;
    &lt;span class="n"&gt;PARSER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;argparse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ArgumentParser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;PARSER&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s1"&gt;'-c'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'--clear'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'Delete all log files'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'store_true'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# read arguments from the command line&lt;/span&gt;
    &lt;span class="n"&gt;ARGUMENTS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PARSER&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;ARGUMENTS&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;delete_logs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SETTINGS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;HISTORY_FILE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;quit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;launch_cleanup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SETTINGS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;HISTORY_FILE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ALIASES_FILE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="settingsjson"&gt;&lt;code&gt;settings.json&lt;/code&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;"home_directory"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"/home/sglavoie"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;"history_file"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;".bash_eternal_history"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;"add_aliases"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;"aliases_file"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;".bash_aliases"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;"aliases_match_greedily"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;"backup_history"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;"delete_logs_without_confirming"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;"ignore_patterns"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s2"&gt;"^\\#\\d+"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s2"&gt;"^$"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s2"&gt;"^(\\.\\/)?pip$"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s2"&gt;"^(\\.\\/)?python.*$"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s2"&gt;"^\\.\\.$"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s2"&gt;"^alias"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s2"&gt;"^cd "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s2"&gt;"^cd$"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s2"&gt;"^cd..$"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s2"&gt;"^fg$"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s2"&gt;"^df( )?"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s2"&gt;"^du( )?"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s2"&gt;"^exit$"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s2"&gt;"^git branch"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s2"&gt;"^git checkout master"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s2"&gt;"^git log$"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s2"&gt;"^git push$"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s2"&gt;"^git status$"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s2"&gt;"^git stauts$"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s2"&gt;"^kill \\d+.*"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s2"&gt;"^ls -a$"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s2"&gt;"^ls$"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s2"&gt;"^make|make install$"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s2"&gt;"^man "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s2"&gt;"^pelican( )?$"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s2"&gt;"^pip install -r requirements.txt"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s2"&gt;"^pip.* list|pip.* show$"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s2"&gt;"^source "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s2"&gt;"^sudo apt-get autoclean|sudo apt-get autoremove$"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s2"&gt;"^sudo apt-get dist-upgrade|sudo apt-get update$"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s2"&gt;"^which "&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h2 id="description-of-available-settings-in-settingsjson"&gt;Description of available settings in &lt;code&gt;settings.json&lt;/code&gt;&lt;/h2&gt;
&lt;div class="table-wrapper"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name of setting&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;home_directory&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Absolute path to user’s home directory.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;history_file&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Name of file where the history will be cleaned up.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;aliases_file&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Name of file where Bash aliases are set up.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ignore_patterns&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;List of patterns to ignore in &lt;code&gt;history_file&lt;/code&gt;. Each line where a pattern is found will be deleted. Patterns are specified as regular expressions.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;add_aliases&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Boolean. If set to &lt;code&gt;true&lt;/code&gt;, aliases from &lt;code&gt;aliases_file&lt;/code&gt; will be added to &lt;code&gt;ignore_patterns&lt;/code&gt;. (Default: &lt;code&gt;true&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;aliases_match_greedily&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Boolean. If set to &lt;code&gt;true&lt;/code&gt;, any line in &lt;code&gt;history_file&lt;/code&gt; starting with an alias in &lt;code&gt;aliases_file&lt;/code&gt; will be deleted. If set to &lt;code&gt;false&lt;/code&gt;, delete line if the alias is the content of the whole line (with optional space at the end): &lt;code&gt;false&lt;/code&gt; matches “^alias$” or “^alias $” only.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;backup_history&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Boolean. If set to &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;history_file&lt;/code&gt; will be backed up in the same directory with a name ending in .bak based on the current date. (Default: &lt;code&gt;true&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;delete_logs_without_confirming&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Boolean. If set to &lt;code&gt;true&lt;/code&gt;, script with flag &lt;code&gt;-c&lt;/code&gt; will automatically delete all the backup files found for &lt;code&gt;history_file&lt;/code&gt;. (Default: &lt;code&gt;false&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h1 id="anecdotal-evidence-of-satisfying-performances"&gt;Anecdotal evidence of satisfying performances&lt;/h1&gt;
&lt;p&gt;Performance-wise, this scans ~8,300 lines per second on my modest Intel
Core i5 laptop with files of over 200,000 lines long. Not that I type so
much stuff in the terminal: I just duplicated many lines.&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="conclusion"&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;This is a simple solution to an nonexistent problem, but it was
in the end very instructive to me nonetheless. You may even find
a use for it! Otherwise, you might use the same functions for
other files such as logs! If you would like to take a closer look
at the source in a more convenient way, you can find the code &lt;a href="https://github.com/sglavoie/python-utilities/tree/main/bash_history_cleaner"&gt;available on Github&lt;/a&gt;.&lt;/p&gt;</content><category term="automation"></category><category term="bash"></category><category term="linux"></category><category term="python"></category><category term="regex"></category><category term="script"></category><category term="terminal"></category></entry><entry><title>Aliases: Also Known as Terminal User’s Best Friends</title><link href="https://www.sglavoie.com/posts/2018/12/08/aliases-also-known-as-terminal-users-best-friends/" rel="alternate"></link><published>2018-12-08T13:52:00-06:00</published><updated>2018-12-08T13:52:00-06:00</updated><author><name>Sébastien Lavoie</name></author><id>tag:www.sglavoie.com,2018-12-08:/posts/2018/12/08/aliases-also-known-as-terminal-users-best-friends/</id><summary type="html">&lt;p&gt;Here are presented a few terminal aliases that I find myself using&amp;nbsp;regularly.&lt;/p&gt;</summary><content type="html">
&lt;hr/&gt;
&lt;h2 id="some-aliases-that-i-find-useful"&gt;Some aliases that I find useful&lt;/h2&gt;
&lt;hr/&gt;
&lt;blockquote&gt;
&lt;p&gt;In all the following examples, the dollar sign &lt;code&gt;$&lt;/code&gt; at the beginning of
commands represents the prompt, it should not be typed.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="general-purpose"&gt;General-purpose&lt;/h3&gt;
&lt;hr/&gt;
&lt;h4 id="list-all-aliases"&gt;List all aliases&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;alias&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Prints all of your aliases. If you have plenty of those, you might
prefer to pipe this command with &lt;code&gt;less&lt;/code&gt; to get a nice pager that allows
you to easily nagivate them:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;less
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h4 id="setting-an-alias-in-bash_aliases"&gt;Setting an alias in &lt;code&gt;~/.bash_aliases&lt;/code&gt;&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'clear'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This would set &lt;code&gt;c&lt;/code&gt; as a shortcut to &lt;code&gt;clear&lt;/code&gt;. In order to use the
newly created alias, you would have to close the terminal or type the
following command in the terminal:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;source&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;~/.bash_aliases
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h4 id="clear-the-screen"&gt;Clear the screen&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'clear'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I like being absorbed into the emptiness of the terminal, so this one
comes in handy to tidy up the work space.&lt;/p&gt;
&lt;hr/&gt;
&lt;h4 id="reset-the-terminal"&gt;Reset the terminal&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;re&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'tput reset'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If for some reasons the terminal displays badly or display funky
characters, it can usually be reset this way.&lt;/p&gt;
&lt;hr/&gt;
&lt;h4 id="exit-from-the-terminal"&gt;Exit from the terminal&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;q&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'exit'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For exiting the terminal as if you were still in Vim!&lt;/p&gt;
&lt;hr/&gt;
&lt;h4 id="display-all-file-extensions-recursively-from-the-current-directory"&gt;Display all file extensions recursively from the current directory&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;allextensions&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"find . -type f -name '*.*' | sed 's|.*\.||' | sort -u"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It comes in handy to spot if a file shouldn’t be there or to check for
lower or uppercase extensions.&lt;/p&gt;
&lt;hr/&gt;
&lt;h4 id="find-text-inside-files-including-filenames"&gt;Find text inside files, including filenames&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;findinfiles&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'ag --nobreak --nonumbers --noheading . | fzf'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this example, the alias is set up with
&lt;a href="https://github.com/ggreer/the_silver_searcher"&gt;ag&lt;/a&gt;, a fast
code-searching tool and &lt;a href="https://github.com/junegunn/fzf"&gt;fzf&lt;/a&gt;, a great
fuzzy finder.&lt;/p&gt;
&lt;hr/&gt;
&lt;h4 id="reboot-and-shutdown-the-system"&gt;Reboot and shutdown the system&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;reboot&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'systemctl reboot'&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;shutdown&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'systemctl poweroff'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will reboot or power off the system without needing root privileges
in most working conditions.&lt;/p&gt;
&lt;hr/&gt;
&lt;h4 id="list-and-sort-files-and-directories-by-modification-time"&gt;List and sort files and directories by modification time&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;treeold&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'tree -hDF | less'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This requires the command &lt;code&gt;tree&lt;/code&gt; to be installed. The parameters are
(descriptions taken from &lt;code&gt;man tree&lt;/code&gt;):&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-h&lt;/code&gt;: Print the size of files in a human readable way.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-D&lt;/code&gt;: Print the date of the last modification time.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-F&lt;/code&gt;: Append a ‘&lt;code&gt;/&lt;/code&gt;&lt;span class="quo"&gt;‘&lt;/span&gt; for directories, a ‘&lt;code&gt;=&lt;/code&gt;&lt;span class="quo"&gt;‘&lt;/span&gt; for socket files, a ‘&lt;code&gt;\*&lt;/code&gt;&lt;span class="quo"&gt;‘&lt;/span&gt;
for executable files, a ‘&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;span class="quo"&gt;‘&lt;/span&gt; for doors (Solaris) and a ‘&lt;code&gt;|&lt;/code&gt;&lt;span class="quo"&gt;‘&lt;/span&gt; for
&lt;span class="caps"&gt;FIFO&lt;/span&gt;’s, as per &lt;code&gt;ls -F&lt;/code&gt;.&lt;/p&gt;
&lt;hr/&gt;
&lt;h4 id="open-files-quickly-with-default-applications"&gt;Open files quickly with default applications&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;o&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'xdg-open'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will open files and URLs specified as argument in the default
application detected.&lt;/p&gt;
&lt;hr/&gt;
&lt;h4 id="moving-around"&gt;Moving around&lt;/h4&gt;
&lt;p&gt;If you are going to be working on projects for some time and require to
&lt;code&gt;cd&lt;/code&gt; into them, I have found the following to be useful:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;cdnameOfProject&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# instead of having to do cd /path/to/project/&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# More examples:&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;cdcodeabbey&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# For codeabbey.com&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;cdhackerrank&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# For hackerrank.com&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;cdeuler&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# For projecteuler.net&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;cdgit&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# For all Github repositories&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is not advanced by any means, but it helps quite regularly! Since
you can take advantage of tab completion, you can type &lt;code&gt;cd&lt;/code&gt; (without
adding a space) and then press &lt;code&gt;TAB&lt;/code&gt; key to autocomplete the aliases.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;...&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'cd ../..'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Make it easier to navigate into deep directory structures by basically
doing &lt;code&gt;cd .. &amp;amp;&amp;amp; cd ..&lt;/code&gt; to go back up two directories at once.&lt;/p&gt;
&lt;hr/&gt;
&lt;h4 id="listing-files"&gt;Listing files&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;l&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'ls -CFh'&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;la&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'ls -Ah'&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;ll&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'ls -ahlF'&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;ls&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'ls --color=auto'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Different ways to set up the command ls to quickly see the needed files.
The parameters are (descriptions taken from &lt;code&gt;man ls&lt;/code&gt;):&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-A&lt;/code&gt;: &lt;em&gt;Do not list implied &lt;code&gt;.&lt;/code&gt; and &lt;code&gt;..&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-C&lt;/code&gt;: &lt;em&gt;List entries by columns.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-F&lt;/code&gt;: &lt;em&gt;Append indicator (one of &lt;code&gt;\*/=&amp;gt;@|&lt;/code&gt;) to entries.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-a&lt;/code&gt;: &lt;em&gt;Do not ignore entries starting with .&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-h&lt;/code&gt;: &lt;em&gt;With &lt;code&gt;-l&lt;/code&gt; and/or &lt;code&gt;-s&lt;/code&gt;, print human readable sizes (e.g., 1K 234M 2G).&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-l&lt;/code&gt;: &lt;em&gt;Use a long listing format.&lt;/em&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="python-related"&gt;Python-related&lt;/h3&gt;
&lt;hr/&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;aNameOfProject&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'source /path/to/project/bin/activate'&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;aa&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'source ~/Programming/anaconda3/bin/activate'&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# Example using Anaconda distribution&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The purpose is to activate a specific virtual environment quickly. The
command &lt;code&gt;cd&lt;/code&gt; could be added to go to the related project also:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;gNameOfProject&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'cd /path/to/project/ &amp;amp;&amp;amp; ./.venv/bin/activate'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Where &lt;code&gt;.venv&lt;/code&gt; would be the name of the virtual environment.&lt;/p&gt;
&lt;p&gt;I like to &lt;strong&gt;a&lt;/strong&gt;ctivate environments starting aliases with &lt;code&gt;a&lt;/code&gt; and &lt;strong&gt;go&lt;/strong&gt;
and activate at the same time starting aliases with &lt;code&gt;g&lt;/code&gt;. This way, it
feels like I am speaking the Vim language (&lt;code&gt;cw&lt;/code&gt; for &lt;strong&gt;c&lt;/strong&gt;hange &lt;strong&gt;w&lt;/strong&gt;ord,
for example).&lt;/p&gt;
&lt;hr/&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;da&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'deactivate'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will deactivate a virtual environment.&lt;/p&gt;
&lt;hr/&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;p36&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'python3.6'&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;p&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'python3.7'&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# Simply using `p` for main version of Python&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Practical way to quickly open the desired Python version.&lt;/p&gt;
&lt;hr/&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;pyclean&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'find . -regex ".*\(__pycache__\|\.py[co]\)" -delete'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will delete recursively all files and directories that match one of
the following patterns in their name: &lt;code&gt;__pycache__&lt;/code&gt;, &lt;code&gt;.pyc&lt;/code&gt; or &lt;code&gt;.pyo&lt;/code&gt;.&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I hope you will find at least one alias to improve your productivity.
Of course, you are welcome to chime in with your own suggestions!&lt;/p&gt;</content><category term="tips-and-tricks"></category><category term="aliases"></category><category term="bash"></category><category term="linux"></category><category term="productivity"></category><category term="terminal"></category></entry><entry><title>Using Vimwiki for Note-Taking</title><link href="https://www.sglavoie.com/posts/2018/12/03/using-vimwiki-for-note-taking/" rel="alternate"></link><published>2018-12-03T13:26:00-06:00</published><updated>2018-12-26T14:45:00-06:00</updated><author><name>Sébastien Lavoie</name></author><id>tag:www.sglavoie.com,2018-12-03:/posts/2018/12/03/using-vimwiki-for-note-taking/</id><summary type="html">&lt;p&gt;This short article explains why Vimwiki felt like the right solution to organize my&amp;nbsp;notes.&lt;/p&gt;</summary><content type="html">
&lt;hr/&gt;
&lt;h2 id="what-is-vimwiki"&gt;What is Vimwiki?&lt;/h2&gt;
&lt;p&gt;From the &lt;a href="https://vimwiki.github.io/"&gt;official website&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Vimwiki is a personal wiki for Vim – interlinked, plain text files
written in a markup language.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As this relies upon Vim’s power to write content in a simple format,
this quickly became a viable option to organize more and more notes!&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="what-were-the-other-options-considered"&gt;What were the other options considered?&lt;/h2&gt;
&lt;p&gt;I have used various approaches in the past for different purposes and
reasons, including &lt;em&gt;Evernote&lt;/em&gt;, &lt;em&gt;Simplenote&lt;/em&gt;, &lt;em&gt;Microsoft OneNote&lt;/em&gt;,
&lt;em&gt;Google Docs&lt;/em&gt;, &lt;em&gt;Boostnote&lt;/em&gt;, &lt;em&gt;Freeplane&lt;/em&gt;/&lt;em&gt;FreeMind&lt;/em&gt; (mind-mapping),
&lt;em&gt;Workflowy&lt;/em&gt; and even plain &lt;code&gt;.txt&lt;/code&gt; files. Each has its pros and cons, but
I then decided to limit my options based on the following self-imposed requirements:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It has to be &lt;strong&gt;available on Linux&lt;/strong&gt;. Right from the start, this would
  disqualify many applications such as &lt;em&gt;Notational Velocity&lt;/em&gt;, &lt;em&gt;Bear&lt;/em&gt;,
  &lt;em&gt;Quiver&lt;/em&gt;, &lt;em&gt;Paper&lt;/em&gt;, &lt;em&gt;Ulysses&lt;/em&gt; and &lt;em&gt;Squid&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;It has to be &lt;strong&gt;open source&lt;/strong&gt; as this is a philosophy that I strongly
  embrace. Plus, having the ability to freely modify it and contribute to
  the project is an important additional bonus. Adiós &lt;em&gt;Evernote&lt;/em&gt;, &lt;em&gt;Google
  Docs&lt;/em&gt;, &lt;em&gt;Dropbox Paper&lt;/em&gt;, &lt;em&gt;Microsoft OneNote&lt;/em&gt;, &lt;em&gt;Workflowy&lt;/em&gt; and &lt;em&gt;Quip&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;It has to be &lt;strong&gt;fast to use&lt;/strong&gt; and it has to make it possible
  to &lt;strong&gt;express oneself in more than one way&lt;/strong&gt;. Say goodbye to
  &lt;em&gt;&lt;a href="https://www.freeplane.org"&gt;Freeplane&lt;/a&gt;&lt;/em&gt; (otherwise great for
  general brainstorming!) and &lt;em&gt;FreeMind&lt;/em&gt; (which has been abandoned
  by its own developers): both are relatively slow on an old machine
  because they use Java and it is quite a stretch to use them for
  something other than mind maps. In that same category would disappear
  &lt;em&gt;&lt;a href="https://www.draw.io/"&gt;draw.io&lt;/a&gt;&lt;/em&gt;, which is fantastic for making
  flowcharts and diagrams!&lt;/li&gt;
&lt;li&gt;It has to be versatile enough to handle features such as &lt;strong&gt;including
  images, links and attached files&lt;/strong&gt; and have a way to perform &lt;strong&gt;search
  and replace&lt;/strong&gt;. Ciao &lt;em&gt;&lt;a href="https://simplenote.com/"&gt;Simplenote&lt;/a&gt;&lt;/em&gt; which
  is, well, simple. Even though it doesn’t fit the bill in this case,
  it remains a great option as it can synchronize your notes with many
  different devices (iOS, macOS, Android, Windows and Linux). It has
  a feature that allows you to move a slider which acts as a timeline
  and shows you a different version of your note since its creation
  with the actual date and time down to the minute for each &lt;em&gt;restore
  point&lt;/em&gt;. You can also use tags and Markdown and it has options to
  share and collaborate with others. Highly recommended!&lt;/li&gt;
&lt;li&gt;It should have a hefty user base to back it up. This would exclude
  text editor plugins such as &lt;code&gt;atom-notes&lt;/code&gt; for &lt;em&gt;Atom&lt;/em&gt; or &lt;code&gt;VSNotes&lt;/code&gt; for &lt;em&gt;&lt;span class="caps"&gt;VS&lt;/span&gt;
  Code&lt;/em&gt;, which also lack features for accomplishing all of the above.&lt;/li&gt;
&lt;li&gt;On top of everything else, it has to be &lt;strong&gt;available offline&lt;/strong&gt;, in a
  &lt;strong&gt;portable and readable format&lt;/strong&gt;. Now, after discarding most options, we
  are left with &lt;em&gt;Boostnote&lt;/em&gt; which uses CoffeeScript-Object-Notation and
  &lt;em&gt;Vimwiki&lt;/em&gt; which has its own Wiki syntax that’s similar in many ways to
  Markdown*. Those are the strongest contenders that I could think of but
  of course, if you would like to share your recommendations, please do so
  in the comments below!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;* &lt;sub&gt;I somehow discredited
&lt;strong&gt;&lt;a href="https://www.gnu.org/software/emacs"&gt;Emacs&lt;/a&gt;&lt;/strong&gt; simply because I started
to learn Vim first and since I’m still far from understanding all of
its features, I had to postpone the discovery of Emacs.&lt;/sub&gt;&lt;/p&gt;
&lt;h3 id="one-feature-rich-alternative-to-vimwiki"&gt;One feature-rich alternative to Vimwiki&lt;/h3&gt;
&lt;p&gt;After settling down on Vimwiki, I later found out about &lt;a href="https://joplin.cozic.net"&gt;Joplin&lt;/a&gt;, which comes with many great
features and characteristics such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Free &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; Open Source&lt;/li&gt;
&lt;li&gt;Manages notes and todo lists&lt;/li&gt;
&lt;li&gt;Search across all notes/todos&lt;/li&gt;
&lt;li&gt;Import/Export from/to various formats, including Markdown and even
  imports from Evernote&lt;/li&gt;
&lt;li&gt;Support for attachments&lt;/li&gt;
&lt;li&gt;Tags&lt;/li&gt;
&lt;li&gt;Synchronization with multiple providers such as Dropbox, Nextcloud,
  OneDrive and even your own private cloud&lt;/li&gt;
&lt;li&gt;Available for Windows, Linux, macOS, Android and iOS&lt;/li&gt;
&lt;li&gt;Web Clipper integration&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This application left me a great first impression to say the least and I
will make sure to stay up to date on its active development, which you
can &lt;a href="https://github.com/laurent22/joplin"&gt;follow on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="why-did-vimwiki-win-in-the-end"&gt;Why did Vimwiki win in the end?&lt;/h2&gt;
&lt;h3 id="in-short"&gt;In short&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;The modal nature of Vim makes it very hard to enjoy any other text
editor once you get used to it. The learning curve is quite considerable
and nearly infinite, but this is also why I think it is worth investing
more time to master it as it has proven to be an everlasting piece of
trusty software.&lt;/p&gt;
&lt;p&gt;There is a feature in Boostnote to set the Editor Keymap to &lt;code&gt;vim&lt;/code&gt; so
that you can edit text in a very similar way, but then you miss out on
Vim’s &lt;code&gt;Command mode&lt;/code&gt; which adds tremendous extensibility and the ability
to create any mappings you wish on the fly.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr/&gt;
&lt;h4 id="expanded-edition"&gt;Expanded edition&lt;/h4&gt;
&lt;p&gt;Boostnote comes with nice features such as Tags, the ability to set
multiple storage locations for notes, a &lt;code&gt;Preferences&lt;/code&gt; panel to adjust
many options, a feature to add code snippets, real-time preview of
Markdown being edited, etc. Make no mistake: this is a great program.
But there are many Vim features that are hard or impossible to replicate
and everything that you can do in Boostnote can be done in Vim also
(ctags, emmet syntax, plugins for Markdown, etc.).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;For starters, the terminal integration is obviously unmatched. In
  Vim, &lt;code&gt;CTRL+Z&lt;/code&gt; will &lt;em&gt;stop&lt;/em&gt; Vim and gives you access to the terminal to
  do whatever you want to do. From that point, you can simply switch back
  to Vim by issuing the command &lt;code&gt;fg&lt;/code&gt;. The terminal integration goes even
  further: you can have full access to the terminal inside Vim buffers
  since Vim 8.1 and that is a feature that has been available in Neovim
  for even longer.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Even though &lt;code&gt;vim&lt;/code&gt; mode can be enabled to edit text, you have to use
  the mouse to get many tasks done and the editing window can loose the
  focus. On the other hand, Vim is just one single window by default that
  you can split however you want, including adding tabs if your heart
  tells you to.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You have to open your notes with Boostnote if you want them to be
  fully readable out of the box. Vimwiki does almost no processing with
  the content of the files so that it is very easy to open them with any
  other text editor. On a related note, it is much easier to export many
  notes at the same time with Vimwiki. Boostnote does have a few options
  to export individual notes (&lt;code&gt;.md&lt;/code&gt;, &lt;code&gt;.txt&lt;/code&gt;, &lt;code&gt;.html&lt;/code&gt; and print), but it is
  not as user-friendly with many notes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Vimwiki makes it easy to link notes together and navigate between
  them, even within subfolders: highlight text, press &lt;code&gt;Enter&lt;/code&gt; to create a
  link and open a new note, write your note and press &lt;code&gt;Backspace&lt;/code&gt; to go
  back to where you created the link. That’s quick and easy!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In the end, it is a matter of taste as those programs are indeed very
distinct. Boostnote has a polished interface, is much easier to use and
has many settings easily changed. Vim/Neovim, on the contrary, requires
a lot of initial effort both to understand and to set up according
to your needs, but it does deliver a good dose of productivity… Eventually!&lt;/p&gt;
&lt;p&gt;An honorable mention goes to Simplenote, which is a joy to use with
mobile devices and allows for quick synchronization between different
devices across all the supported platforms.&lt;/p&gt;
&lt;p&gt;Where things really get in favor of Vim, you could mention the extensive
help system (command &lt;code&gt;:help&lt;/code&gt;), the use of macros, words and lines
completion, the dot (&lt;code&gt;.&lt;/code&gt;) command, the many registers at your disposal
for different tasks, the impressive amount of plugins available, the
ways in which you can configure mappings, functions… But that’s for a
whole new story!&lt;/p&gt;</content><category term="workflow"></category><category term="neovim"></category><category term="note-taking"></category><category term="productivity"></category><category term="vim"></category><category term="vimwiki"></category></entry><entry><title>Tmux Integration with Vim/Neovim — First Steps</title><link href="https://www.sglavoie.com/posts/2018/11/19/tmux-integration-with-vim-neovim-first-steps/" rel="alternate"></link><published>2018-11-19T20:31:00-06:00</published><updated>2018-11-19T20:31:00-06:00</updated><author><name>Sébastien Lavoie</name></author><id>tag:www.sglavoie.com,2018-11-19:/posts/2018/11/19/tmux-integration-with-vim-neovim-first-steps/</id><summary type="html">&lt;p&gt;This is a short introduction that shows a possible workflow with tmux and&amp;nbsp;Vim/Neovim.&lt;/p&gt;</summary><content type="html">
&lt;hr/&gt;
&lt;h2 id="tmux-integration"&gt;tmux integration&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/tmux/tmux"&gt;tmux&lt;/a&gt; offers many advantages in the
context of remote access to another machine, but it also shines on a
local setup! Here is how I currently like to set it up.&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="configuration-file"&gt;Configuration file:&lt;/h3&gt;
&lt;h5 id="tmuxconf"&gt;&lt;code&gt;~/.tmux.conf&lt;/code&gt;&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# split panes using | and -&lt;/span&gt;
&lt;span class="nb"&gt;bind&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;split-window&lt;span class="w"&gt; &lt;/span&gt;-h
&lt;span class="nb"&gt;bind&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;split-window&lt;span class="w"&gt; &lt;/span&gt;-v
unbind&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'"'&lt;/span&gt;
unbind&lt;span class="w"&gt; &lt;/span&gt;%

&lt;span class="c1"&gt;# switch panes using Alt-arrow without prefix&lt;/span&gt;
&lt;span class="nb"&gt;bind&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-n&lt;span class="w"&gt; &lt;/span&gt;M-Left&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt;-pane&lt;span class="w"&gt; &lt;/span&gt;-L
&lt;span class="nb"&gt;bind&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-n&lt;span class="w"&gt; &lt;/span&gt;M-Right&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt;-pane&lt;span class="w"&gt; &lt;/span&gt;-R
&lt;span class="nb"&gt;bind&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-n&lt;span class="w"&gt; &lt;/span&gt;M-Up&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt;-pane&lt;span class="w"&gt; &lt;/span&gt;-U
&lt;span class="nb"&gt;bind&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-n&lt;span class="w"&gt; &lt;/span&gt;M-Down&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt;-pane&lt;span class="w"&gt; &lt;/span&gt;-D


&lt;span class="c1"&gt;# Enable mouse mode (tmux 2.1 and above)&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-g&lt;span class="w"&gt; &lt;/span&gt;mouse&lt;span class="w"&gt; &lt;/span&gt;on

source-file&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;HOME&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/.tmux-themepack/blue.tmuxtheme"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is all very self-explanatory. &lt;a href="https://github.com/jimeh/tmux-themepack"&gt;Many themes can be found
here&lt;/a&gt;.&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="automating-the-launch-of-a-default-session"&gt;Automating the launch of a default session:&lt;/h3&gt;
&lt;h5 id="tmux_default_sessionsh"&gt;&lt;code&gt;~/.tmux_default_session.sh&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;This is a small Bash script that I like to have for automatic set up
of a development environment with tmux and Vim/Neovim. As my current
workflow, I enjoy the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!bash&lt;/span&gt;
&lt;span class="c1"&gt;# var for session name (to avoid repeated occurences)&lt;/span&gt;
&lt;span class="nv"&gt;sn&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;dev

tmux&lt;span class="w"&gt; &lt;/span&gt;new-session&lt;span class="w"&gt; &lt;/span&gt;-s&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$sn&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-d

&lt;span class="c1"&gt;# Create 3 windows&lt;/span&gt;
tmux&lt;span class="w"&gt; &lt;/span&gt;new-window&lt;span class="w"&gt; &lt;/span&gt;-t&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$sn&lt;/span&gt;&lt;span class="s2"&gt;:0"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-n&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"nvim"&lt;/span&gt;
tmux&lt;span class="w"&gt; &lt;/span&gt;new-window&lt;span class="w"&gt; &lt;/span&gt;-t&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$sn&lt;/span&gt;&lt;span class="s2"&gt;:9"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-n&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"python"&lt;/span&gt;
tmux&lt;span class="w"&gt; &lt;/span&gt;new-window&lt;span class="w"&gt; &lt;/span&gt;-t&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$sn&lt;/span&gt;&lt;span class="s2"&gt;:8"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-n&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"terminal"&lt;/span&gt;

&lt;span class="c1"&gt;# Split terminal window vertically, then split the right pane&lt;/span&gt;
&lt;span class="c1"&gt;# horizontally, then switch to the left pane (identified by `FOCUS IS&lt;/span&gt;
&lt;span class="c1"&gt;# HERE`).&lt;/span&gt;
&lt;span class="c1"&gt;# _________________&lt;/span&gt;
&lt;span class="c1"&gt;# |&amp;gt;_     |&amp;gt;_     |&lt;/span&gt;
&lt;span class="c1"&gt;# |       |       |&lt;/span&gt;
&lt;span class="c1"&gt;# | FOCUS |-------|&lt;/span&gt;
&lt;span class="c1"&gt;# | IS    |&amp;gt;_     |&lt;/span&gt;
&lt;span class="c1"&gt;# | HERE  |       |&lt;/span&gt;
&lt;span class="c1"&gt;# -----------------&lt;/span&gt;
tmux&lt;span class="w"&gt; &lt;/span&gt;split-window&lt;span class="w"&gt; &lt;/span&gt;-h
tmux&lt;span class="w"&gt; &lt;/span&gt;split-window&lt;span class="w"&gt; &lt;/span&gt;-v
tmux&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt;-pane&lt;span class="w"&gt; &lt;/span&gt;-L

&lt;span class="c1"&gt;# Set up Neovim ready to open files&lt;/span&gt;
tmux&lt;span class="w"&gt; &lt;/span&gt;send-keys&lt;span class="w"&gt; &lt;/span&gt;-t&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$sn&lt;/span&gt;&lt;span class="s2"&gt;:0"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;C-z&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'nvim .'&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Enter

&lt;span class="c1"&gt;# Set up alias for IPython and clear the screen when entering IPython&lt;/span&gt;
tmux&lt;span class="w"&gt; &lt;/span&gt;send-keys&lt;span class="w"&gt; &lt;/span&gt;-t&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$sn&lt;/span&gt;&lt;span class="s2"&gt;:9"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;C-z&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'ipython'&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Enter
tmux&lt;span class="w"&gt; &lt;/span&gt;send-keys&lt;span class="w"&gt; &lt;/span&gt;-t&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$sn&lt;/span&gt;&lt;span class="s2"&gt;:9"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'clear'&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Enter

&lt;span class="c1"&gt;# Select window #0 and attach to the session&lt;/span&gt;
tmux&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt;-window&lt;span class="w"&gt; &lt;/span&gt;-t&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$sn&lt;/span&gt;&lt;span class="s2"&gt;:0"&lt;/span&gt;
tmux&lt;span class="w"&gt; &lt;/span&gt;-2&lt;span class="w"&gt; &lt;/span&gt;attach-session&lt;span class="w"&gt; &lt;/span&gt;-t&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$sn&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h3 id="aliases-to-make-use-of"&gt;Aliases to make use of:&lt;/h3&gt;
&lt;h5 id="tmux_default_sessionsh_1"&gt;&lt;code&gt;.tmux_default_session.sh&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;I add the following aliases in &lt;code&gt;~/.bash_aliases&lt;/code&gt; to automate a chunk of
the workflow:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# This will launch tmux with the desired configuration&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'bash ~/.tmux_default_session.sh'&lt;/span&gt;

&lt;span class="c1"&gt;# This will kill the tmux server if the need arises. By detaching from&lt;/span&gt;
&lt;span class="c1"&gt;# the tmux session, you simply run this command and can reattach easily&lt;/span&gt;
&lt;span class="c1"&gt;# to the default session configuration on another project.&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;kdev&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'pkill tmux'&lt;/span&gt;

&lt;span class="c1"&gt;# If the session has been detached but the tmux server is still running,&lt;/span&gt;
&lt;span class="c1"&gt;# I use the following alias to quickly reattach to the default session&lt;/span&gt;
&lt;span class="c1"&gt;# named `dev` in that example.&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;adev&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'tmux attach-session -t dev'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h3 id="tmux-demo"&gt;tmux demo&lt;/h3&gt;
&lt;p&gt;(click to open image)
&lt;a href="https://www.sglavoie.com/images/posts/0001_tmux-integration-with-vim/tmux-demo.gif"&gt;&lt;img alt="tmux-demo" class="max-size-img-post" src="https://www.sglavoie.com/images/posts/0001_tmux-integration-with-vim/tmux-demo.gif"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;The content of this post can be found on
&lt;a href="https://github.com/sglavoie/better-vim-experience#tmux-integrat
ion"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;</content><category term="workflow"></category><category term="neovim"></category><category term="terminal"></category><category term="tmux"></category><category term="vim"></category></entry></feed>